[
    {
        "id": "",
        "metadata": {
            "title": "",
            "keywords": [
                "vendure",
                "[www.vendure.io](https://www.vendure.io/)",
                "branches",
                "structure",
                "development",
                "1. install top-level dependencies",
                "2. build all packages",
                "3. set up the server",
                "4. run the dev server",
                "testing admin ui changes locally",
                "testing your changes locally",
                "terminal 1",
                "root of the project",
                "terminal 2",
                "code generation",
                "testing",
                "server unit tests",
                "end-to-end tests",
                "release process",
                "1. `yarn publish-release`",
                "2. `git push origin master --follow-tags`",
                "license"
            ],
            "description": "An open-source headless commerce platform built on [Node.js](https://nodejs.org) with [GraphQL](https://graphql.org/), [Nest](https://nestjs.com/) & [TypeScript](http://www.typescriptlang.org/), with a focus on developer productivity and ease of customization. [![Build Status](https://github.com/vendure-ecommerce/vendure/workflows/Build%20&%20Test/badge.svg)](https://github.com/vendure-ecommerce/vendure/actions) ![Publish & Install](https://github.com/vendure-ecommerce/vendure/workflows/Publish%20&%20Install/badge.svg) [![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lernajs.io/) ![vendure_github_banner (1)](https://github.com/vendure-ecommerce/vendure/assets/6275952/0e25b1c7-a648-44a1-ba00-60012f0e7aaa)"
        },
        "content": "",
        "sections": [
            {
                "id": "branches",
                "title": "Branches",
                "content": "\n- `master` - The latest stable release, currently the 2.x series.\n- `minor` - The next patch release, including new features\n- `major` - The next major release (v3.0)\n- `v1` - The 1.x series, which is no longer actively developed but may still receive critical fixes.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "structure",
                "title": "Structure",
                "content": "\nThis project is a monorepo managed with [Lerna](https://github.com/lerna/lerna). Several npm packages are published from this repo, which can be found in the `packages/` directory.\n\n\n",
                "subsections": [],
                "code": [
                    "vendure/",
                    "├── docs/           # Documentation source",
                    "├── e2e-common/     # Shared config for package e2e tests",
                    "├── packages/       # Source for the Vendure server, admin-ui & plugin packages",
                    "├── scripts/",
                    "    ├── changelog/  # Scripts used to generate the changelog based on the git history",
                    "    ├── codegen/    # Scripts used to generate TypeScript code from the GraphQL APIs",
                    "    ├── docs/       # Scripts used to generate documentation markdown from the source"
                ]
            },
            {
                "id": "development",
                "title": "Development",
                "content": "\nThe following instructions are for those who want to develop the Vendure core framework or plugins (e.g. if you intend to make a pull request). For instructions on how to build a project *using* Vendure, please see the [Getting Started guide](https://www.vendure.io/docs/getting-started/).\n\n",
                "subsections": [
                    {
                        "id": "1.-install-top-level-dependencies",
                        "title": "1. Install top-level dependencies",
                        "content": "\n`yarn`\n\nThe root directory has a `package.json` which contains build-related dependencies for tasks including:\n\n* Building & deploying the docs \n* Generating TypeScript types from the GraphQL schema\n* Linting, formatting & testing tasks to run on git commit & push\n\n"
                    },
                    {
                        "id": "2.-build-all-packages",
                        "title": "2. Build all packages",
                        "content": "\n`yarn build`\n\nPackages must be built (i.e. TypeScript compiled, admin ui app built, certain assets copied etc.) before being used.\n\nNote that this can take a few minutes.\n\n"
                    },
                    {
                        "id": "3.-set-up-the-server",
                        "title": "3. Set up the server",
                        "content": "\nThe server requires an SQL database to be available. The simplest option is to use SQLite, but if you have Docker available you can use the [dev-server docker-compose file](./packages/dev-server/docker-compose.yml) which will start up both MariaDB and Postgres as well as their GUI management tools.\n\nVendure uses [TypeORM](http://typeorm.io), and officially supports **MySQL**, **PostgreSQL** and **SQLite**, though other TypeORM-supported databases may work.\n\n1. Configure the [dev config](./packages/dev-server/dev-config.ts), making sure the connection settings in the `getDbConfig()` function are correct for the database type you will be using.\n2. Create the database using your DB admin tool of choice (e.g. phpMyAdmin if you are using the docker image suggested above). Name it according to the `getDbConfig()` settings. If you are using SQLite, you can skip this step.\n3. Populate mock data: \n   ```bash\n    cd packages/dev-server\n    DB=<mysql|postgres|sqlite> yarn populate\n    ```\n   If you do not specify the `DB` variable, it will default to \"mysql\".\n\n"
                    },
                    {
                        "id": "4.-run-the-dev-server",
                        "title": "4. Run the dev server",
                        "content": "\nOr if you are in the root package \nIf you do not specify the `DB` argument, it will default to \"mysql\".\n\n"
                    },
                    {
                        "id": "testing-admin-ui-changes-locally",
                        "title": "Testing admin ui changes locally",
                        "content": "\nIf you are making changes to the admin ui, you need to start the admin ui independent from the dev-server:\n\n1. `cd packages/admin-ui`\n2. `yarn start`\n3. Go to http://localhost:4200 and log in with \"superadmin\", \"superadmin\"\n\nThis will auto restart when you make changes to the admin ui. You don't need this step when you just use the admin ui just\nto test backend changes.\n\n"
                    },
                    {
                        "id": "testing-your-changes-locally",
                        "title": "Testing your changes locally",
                        "content": "This example shows how to test changes to the `payments-plugin` package locally, but it will also work for other packages.\n\n1. Open 2 terminal windows:\n\n- Terminal 1 for watching and compiling the changes of the package you are developing\n- Terminal 2 for running the dev-server\n\n:warning: If you are developing changes for the `core`package, you also need to watch the `common` package:\n\n2. After the changes in your package are compiled you have to stop and restart the dev-server:\n\n\n3. The dev-server will now have your local changes from the changed package.\n\n"
                    },
                    {
                        "id": "code-generation",
                        "title": "Code generation",
                        "content": "\n[graphql-code-generator](https://github.com/dotansimha/graphql-code-generator) is used to automatically create TypeScript interfaces for all GraphQL server operations and admin ui queries. These generated interfaces are used in both the admin ui and the server.\n\nRunning `yarn codegen` will generate the following files:\n\n* [`packages/common/src/generated-types.ts`](./packages/common/src/generated-types.ts): Types, Inputs & resolver args relating to the Admin API\n* [`packages/common/src/generated-shop-types.ts`](./packages/common/src/generated-shop-types.ts): Types, Inputs & resolver args relating to the Shop API\n* [`packages/admin-ui/src/lib/core/src/common/generated-types.ts`](./packages/admin-ui/src/lib/core/src/common/generated-types.ts): Types & operations relating to the admin-ui queries & mutations.\n* [`packages/admin-ui/src/lib/core/src/common/introspection-result.ts`](./packages/admin-ui/src/lib/core/src/common/introspection-result.ts): Used by the Apollo Client [`IntrospectionFragmentMatcher`](https://www.apollographql.com/docs/react/data/fragments/#fragments-on-unions-and-interfaces) to correctly handle fragments in the Admin UI.\n* Also generates types used in e2e tests in those packages which feature e2e tests (core, elasticsearch-plugin, asset-server-plugin etc).\n\n"
                    },
                    {
                        "id": "testing",
                        "title": "Testing",
                        "content": "\n#### Server Unit Tests\n\nThe core and several other packages have unit tests which are can be run all together by running `yarn test` from the root directory, or individually by running it from the package directory.\n\nUnit tests are co-located with the files which they test, and have the suffix `.spec.ts`.\n\n#### End-to-end Tests\n\nCertain packages have e2e tests, which are located at `/packages/<name>/e2e/`. All e2e tests can be run by running `yarn e2e` from the root directory, or individually by running it from the package directory.\n\ne2e tests use the `@vendure/testing` package. For details of how the setup works, see the [Testing docs](https://www.vendure.io/docs/developer-guide/testing/)\n\nWhen **debugging e2e tests**, set an environment variable `E2E_DEBUG=true` which will increase the global Jest timeout and allow you to step through the e2e tests without the tests automatically failing due to timeout.\n\n"
                    },
                    {
                        "id": "release-process",
                        "title": "Release Process",
                        "content": "\nAll packages in this repo are released at every version change (using [Lerna's fixed mode](https://github.com/lerna/lerna#fixedlocked-mode-default)). This simplifies both the development (tracking multiple disparate versions is tough) and also the developer experience for users of the framework (it is simple to see that all packages are up-to-date and compatible).\n\nTo make a release:\n\n##### 1. `yarn publish-release`\n\nIt will run `lerna publish` which will prompt for which version to update to. Although we are using [conventional commits](https://www.conventionalcommits.org), the version is not automatically being calculated from the commit messages. Therefore the next version should be manually selected. \n\nNext it will build all packages to ensure the distributed files are up to date.\n\nFinally the command will create changelog entries for this release.\n\n##### 2. `git push origin master --follow-tags`\n\nThe reason we do not rely on Lerna to push the release to Git is that this repo has a lengthy pre-push hook which runs all tests and builds the admin ui. This long wait then invalidates the npm OTP and the publish will fail. So the solution is to publish first and then push.\n\n"
                    }
                ],
                "code": [
                    "cd packages/dev-server",
                    "DB=<mysql|postgres|sqlite> yarn start",
                    "DB=<mysql|postgres|sqlite> yarn dev-server:start",
                    "# Terminal 1",
                    "cd packages/payments-plugin",
                    "yarn watch",
                    "# Terminal 1",
                    "# Root of the project",
                    "yarn watch:core-common",
                    "# Terminal 2",
                    "cd packages/dev-server",
                    "DB=sqlite yarn start"
                ]
            },
            {
                "id": "license",
                "title": "License",
                "content": "\nMIT\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "action-bar",
        "metadata": {
            "title": "Action Bar",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "actionbar",
        "metadata": {
            "title": "ActionBar",
            "keywords": [
                "actionbar",
                "props"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/ActionBar.tsx\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "actionbar",
                "title": "ActionBar",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/ActionBar.tsx\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />\n\nA container for the primary actions on a list or detail page\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "props",
                        "title": "props",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`PropsWithChildren&#60;{ leftContent?: ReactNode }&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { ActionBar } from '@vendure/admin-ui/react';",
                    "",
                    "export function MyComponent() {",
                    "  return (",
                    "    <ActionBar leftContent={<div>Optional left content</div>}>",
                    "      <button className='button primary'>Primary action</button>",
                    "    </ActionBar>",
                    "  );",
                    "}",
                    "function ActionBar(props: PropsWithChildren<{ leftContent?: ReactNode }>): void"
                ]
            }
        ]
    },
    {
        "id": "actionbarcontext",
        "metadata": {
            "title": "ActionBarContext",
            "keywords": [
                "actionbarcontext",
                "route",
                "injector",
                "dataservice",
                "notificationservice"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"89\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "actionbarcontext",
                "title": "ActionBarContext",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"89\" packageName=\"@vendure/admin-ui\" />\n\nProviders available to the onClick handler of an <a href='/reference/admin-ui-api/action-bar/action-bar-item#actionbaritem'>ActionBarItem</a> or <a href='/reference/admin-ui-api/nav-menu/nav-menu-item#navmenuitem'>NavMenuItem</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={`ActivatedRoute`}   />\n\n\n"
                    },
                    {
                        "id": "injector",
                        "title": "injector",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/injector#injector'>Injector</a>`}   />\n\n\n"
                    },
                    {
                        "id": "dataservice",
                        "title": "dataService",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>`}   />\n\n\n"
                    },
                    {
                        "id": "notificationservice",
                        "title": "notificationService",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/services/notification-service#notificationservice'>NotificationService</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ActionBarContext {",
                    "    route: ActivatedRoute;",
                    "    injector: Injector;",
                    "    dataService: DataService;",
                    "    notificationService: NotificationService;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "actionbaritem",
        "metadata": {
            "title": "ActionBarItem",
            "keywords": [
                "actionbaritem",
                "id",
                "label",
                "locationid",
                "disabled",
                "buttonstate",
                "onclick",
                "routerlink",
                "buttoncolor",
                "buttonstyle",
                "icon",
                "requirespermission"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"107\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "actionbaritem",
                "title": "ActionBarItem",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"107\" packageName=\"@vendure/admin-ui\" />\n\nA button in the ActionBar area at the top of one of the list or detail views.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "label",
                        "title": "label",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "locationid",
                        "title": "locationId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/action-bar/action-bar-location-id#actionbarlocationid'>ActionBarLocationId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "disabled",
                        "title": "disabled",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;boolean&#62;`}   />\n\nDeprecated since v2.1.0 - use `buttonState` instead.\n"
                    },
                    {
                        "id": "buttonstate",
                        "title": "buttonState",
                        "content": "\n<MemberInfo kind=\"property\" type={`(context: <a href='/reference/admin-ui-api/action-bar/action-bar-context#actionbarcontext'>ActionBarContext</a>) =&#62; Observable&#60;ActionBarButtonState&#62;`}  since=\"2.1.0\"  />\n\nA function which returns an observable of the button state, allowing you to\ndynamically enable/disable or show/hide the button.\n"
                    },
                    {
                        "id": "onclick",
                        "title": "onClick",
                        "content": "\n<MemberInfo kind=\"property\" type={`(event: MouseEvent, context: <a href='/reference/admin-ui-api/action-bar/action-bar-context#actionbarcontext'>ActionBarContext</a>) =&#62; void`}   />\n\n\n"
                    },
                    {
                        "id": "routerlink",
                        "title": "routerLink",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/action-bar/router-link-definition#routerlinkdefinition'>RouterLinkDefinition</a>`}   />\n\n\n"
                    },
                    {
                        "id": "buttoncolor",
                        "title": "buttonColor",
                        "content": "\n<MemberInfo kind=\"property\" type={`'primary' | 'success' | 'warning'`}   />\n\n\n"
                    },
                    {
                        "id": "buttonstyle",
                        "title": "buttonStyle",
                        "content": "\n<MemberInfo kind=\"property\" type={`'solid' | 'outline' | 'link'`}   />\n\n\n"
                    },
                    {
                        "id": "icon",
                        "title": "icon",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "requirespermission",
                        "title": "requiresPermission",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | string[]`}   />\n\nControl the display of this item based on the user permissions. Note: if you attempt to pass a\n<a href='/reference/typescript-api/auth/permission-definition#permissiondefinition'>PermissionDefinition</a> object, you will get a compilation error. Instead, pass the plain\nstring version. For example, if the permission is defined as:\nthen the generated permission strings will be:\n\n- `CreateProductReview`\n- `ReadProductReview`\n- `UpdateProductReview`\n- `DeleteProductReview`\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ActionBarItem {",
                    "    id: string;",
                    "    label: string;",
                    "    locationId: ActionBarLocationId;",
                    "    disabled?: Observable<boolean>;",
                    "    buttonState?: (context: ActionBarContext) => Observable<ActionBarButtonState>;",
                    "    onClick?: (event: MouseEvent, context: ActionBarContext) => void;",
                    "    routerLink?: RouterLinkDefinition;",
                    "    buttonColor?: 'primary' | 'success' | 'warning';",
                    "    buttonStyle?: 'solid' | 'outline' | 'link';",
                    "    icon?: string;",
                    "    requiresPermission?: string | string[];",
                    "}",
                    "export const MyPermission = new PermissionDefinition('ProductReview');"
                ]
            }
        ]
    },
    {
        "id": "actionbarlocationid",
        "metadata": {
            "title": "ActionBarLocationId",
            "keywords": [
                "actionbarlocationid"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/component-registry-types.ts\" sourceLine=\"104\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "actionbarlocationid",
                "title": "ActionBarLocationId",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/component-registry-types.ts\" sourceLine=\"104\" packageName=\"@vendure/admin-ui\" />\n\nThe valid locationIds for registering action bar items.\n\n\n",
                "subsections": [],
                "code": [
                    "type ActionBarLocationId = PageLocationId"
                ]
            }
        ]
    },
    {
        "id": "activeorderservice",
        "metadata": {
            "title": "ActiveOrderService",
            "keywords": [
                "activeorderservice",
                "constructor",
                "getorderfromcontext",
                "getactiveorder"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/active-order/active-order.service.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "activeorderservice",
                "title": "ActiveOrderService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/active-order/active-order.service.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" />\n\nThis helper class is used to get a reference to the active Order from the current RequestContext.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(sessionService: <a href='/reference/typescript-api/services/session-service#sessionservice'>SessionService</a>, orderService: <a href='/reference/typescript-api/services/order-service#orderservice'>OrderService</a>, connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService) => ActiveOrderService`}   />\n\n\n"
                    },
                    {
                        "id": "getorderfromcontext",
                        "title": "getOrderFromContext",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a> | undefined&#62;`}   />\n\nGets the active Order object from the current Session. Optionally can create a new Order if\nno active Order exists.\n\nIntended to be used at the Resolver layer for those resolvers that depend upon an active Order\nbeing present.\n"
                    },
                    {
                        "id": "getorderfromcontext",
                        "title": "getOrderFromContext",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, createIfNotExists: true) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getorderfromcontext",
                        "title": "getOrderFromContext",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, createIfNotExists:  = false) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getactiveorder",
                        "title": "getActiveOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: { [strategyName: string]: any } | undefined) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a> | undefined&#62;`}  since=\"1.9.0\"  />\n\nRetrieves the active Order based on the configured <a href='/reference/typescript-api/orders/active-order-strategy#activeorderstrategy'>ActiveOrderStrategy</a>.\n"
                    },
                    {
                        "id": "getactiveorder",
                        "title": "getActiveOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: { [strategyName: string]: any } | undefined, createIfNotExists: true) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getactiveorder",
                        "title": "getActiveOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: { [strategyName: string]: Record&#60;string, any&#62; | undefined } | undefined, createIfNotExists:  = false) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a> | undefined&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ActiveOrderService {",
                    "    constructor(sessionService: SessionService, orderService: OrderService, connection: TransactionalConnection, configService: ConfigService)",
                    "    getOrderFromContext(ctx: RequestContext) => Promise<Order | undefined>;",
                    "    getOrderFromContext(ctx: RequestContext, createIfNotExists: true) => Promise<Order>;",
                    "    getOrderFromContext(ctx: RequestContext, createIfNotExists:  = false) => Promise<Order | undefined>;",
                    "    getActiveOrder(ctx: RequestContext, input: { [strategyName: string]: any } | undefined) => Promise<Order | undefined>;",
                    "    getActiveOrder(ctx: RequestContext, input: { [strategyName: string]: any } | undefined, createIfNotExists: true) => Promise<Order>;",
                    "    getActiveOrder(ctx: RequestContext, input: { [strategyName: string]: Record<string, any> | undefined } | undefined, createIfNotExists:  = false) => Promise<Order | undefined>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "activeorderstrategy",
        "metadata": {
            "title": "ActiveOrderStrategy",
            "keywords": [
                "activeorderstrategy",
                "name",
                "defineinputtype",
                "createactiveorder",
                "determineactiveorder"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/active-order-strategy.ts\" sourceLine=\"127\" packageName=\"@vendure/core\" since=\"1.9.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "activeorderstrategy",
                "title": "ActiveOrderStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/active-order-strategy.ts\" sourceLine=\"127\" packageName=\"@vendure/core\" since=\"1.9.0\" />\n\nThis strategy is used to determine the active Order for all order-related operations in\nthe Shop API. By default, all the Shop API operations that relate to the active Order (e.g.\n`activeOrder`, `addItemToOrder`, `applyCouponCode` etc.) will implicitly create a new Order\nand set it on the current Session, and then read the session to obtain the active Order.\nThis behaviour is defined by the <a href='/reference/typescript-api/orders/default-active-order-strategy#defaultactiveorderstrategy'>DefaultActiveOrderStrategy</a>.\n\nThe `InputType` generic argument should correspond to the input type defined by the\n`defineInputType()` method.\n\nWhen `defineInputType()` is used, then the following Shop API operations will receive an additional\n`activeOrderInput` argument allowing the active order input to be specified:\n\n- `activeOrder`\n- `eligibleShippingMethods`\n- `eligiblePaymentMethods`\n- `nextOrderStates`\n- `addItemToOrder`\n- `adjustOrderLine`\n- `removeOrderLine`\n- `removeAllOrderLines`\n- `applyCouponCode`\n- `removeCouponCode`\n- `addPaymentToOrder`\n- `setCustomerForOrder`\n- `setOrderShippingAddress`\n- `setOrderBillingAddress`\n- `setOrderShippingMethod`\n- `setOrderCustomFields`\n- `transitionOrderToState`\n\n*Example*\n\n\n*Example*\n\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe name of the strategy, e.g. \"orderByToken\", which will also be used as the\nfield name in the ActiveOrderInput type.\n"
                    },
                    {
                        "id": "defineinputtype",
                        "title": "defineInputType",
                        "content": "\n<MemberInfo kind=\"property\" type={`() =&#62; DocumentNode`}   />\n\nDefines the type of the GraphQL Input object expected by the `activeOrderInput`\ninput argument.\n\n*Example*\n\nFor example, given the following:\n\n\nassuming the strategy name is \"orderByToken\", then the resulting call to `activeOrder` (or any of the other\naffected Shop API operations) would look like:\n\n\n**Note:** if more than one graphql `input` type is being defined (as in a nested input type), then\nthe _first_ input will be assumed to be the top-level input.\n"
                    },
                    {
                        "id": "createactiveorder",
                        "title": "createActiveOrder",
                        "content": "\n<MemberInfo kind=\"property\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: InputType) =&#62; Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;`}   />\n\nCertain mutations such as `addItemToOrder` can automatically create a new Order if one does not exist.\nIn these cases, this method will be called to create the new Order.\n\nIf automatic creation of an Order does not make sense in your strategy, then leave this method\nundefined. You'll then need to take care of creating an order manually by defining a custom mutation.\n"
                    },
                    {
                        "id": "determineactiveorder",
                        "title": "determineActiveOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: InputType) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a> | undefined&#62;`}   />\n\nThis method is used to determine the active Order based on the current RequestContext in addition to any\ninput values provided, as defined by the `defineInputType` method of this strategy.\n\nNote that this method is invoked frequently, so you should aim to keep it efficient. The returned Order,\nfor example, does not need to have its various relations joined.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "mutation AddItemToOrder {",
                    "  addItemToOrder(",
                    "    productVariantId: 42,",
                    "    quantity: 1,",
                    "    activeOrderInput: { token: \"123456\" }",
                    "  ) {",
                    "    ...on Order {",
                    "      id",
                    "      # ...etc",
                    "    }",
                    "  }",
                    "}",
                    "import { ID } from '@vendure/common/lib/shared-types';",
                    "import {",
                    "  ActiveOrderStrategy,",
                    "  CustomerService,",
                    "  idsAreEqual,",
                    "  Injector,",
                    "  Order,",
                    "  OrderService,",
                    "  RequestContext,",
                    "  TransactionalConnection,",
                    "} from '@vendure/core';",
                    "import gql from 'graphql-tag';",
                    "",
                    "// This strategy assumes a \"orderToken\" custom field is defined on the Order",
                    "// entity, and uses that token to perform a lookup to determine the active Order.",
                    "//",
                    "// Additionally, it does _not_ define a `createActiveOrder()` method, which",
                    "// means that a custom mutation would be required to create the initial Order in",
                    "// the first place and set the \"orderToken\" custom field.",
                    "class TokenActiveOrderStrategy implements ActiveOrderStrategy<{ token: string }> {",
                    "  readonly name = 'orderToken';",
                    "",
                    "  private connection: TransactionalConnection;",
                    "  private orderService: OrderService;",
                    "",
                    "  init(injector: Injector) {",
                    "    this.connection = injector.get(TransactionalConnection);",
                    "    this.orderService = injector.get(OrderService);",
                    "  }",
                    "",
                    "  defineInputType = () => gql`",
                    "    input OrderTokenActiveOrderInput {",
                    "      token: String",
                    "    }",
                    "  `;",
                    "",
                    "  async determineActiveOrder(ctx: RequestContext, input: { token: string }) {",
                    "    const qb = this.connection",
                    "      .getRepository(ctx, Order)",
                    "      .createQueryBuilder('order')",
                    "      .leftJoinAndSelect('order.customer', 'customer')",
                    "      .leftJoinAndSelect('customer.user', 'user')",
                    "      .where('order.customFields.orderToken = :orderToken', { orderToken: input.token });",
                    "",
                    "    const order = await qb.getOne();",
                    "    if (!order) {",
                    "      return;",
                    "    }",
                    "    // Ensure the active user is the owner of this Order",
                    "    const orderUserId = order.customer && order.customer.user && order.customer.user.id;",
                    "    if (order.customer && idsAreEqual(orderUserId, ctx.activeUserId)) {",
                    "      return order;",
                    "    }",
                    "  }",
                    "}",
                    "",
                    "// in vendure-config.ts",
                    "export const config = {",
                    "  // ...",
                    "  orderOptions: {",
                    "    activeOrderStrategy: new TokenActiveOrderStrategy(),",
                    "  },",
                    "}",
                    "interface ActiveOrderStrategy<InputType extends Record<string, any> | void = void> extends InjectableStrategy {",
                    "    readonly name: string;",
                    "    defineInputType?: () => DocumentNode;",
                    "    createActiveOrder?: (ctx: RequestContext, input: InputType) => Promise<Order>;",
                    "    determineActiveOrder(ctx: RequestContext, input: InputType): Promise<Order | undefined>;",
                    "}",
                    "defineInputType() {",
                    "  return gql`",
                    "     input OrderTokenInput {",
                    "       token: String!",
                    "     }",
                    "  `;",
                    "}",
                    "activeOrder(activeOrderInput: {",
                    "  orderByToken: {",
                    "    token: \"foo\"",
                    "  }",
                    "}) {",
                    "  # ...",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "add-a-rest-endpoint",
        "metadata": {
            "title": "Add a REST endpoint",
            "keywords": [
                "create a controller",
                "register the controller with the plugin",
                "controlling access to rest endpoints"
            ],
            "description": "REST-style endpoints can be defined as part of a [plugin](/guides/developer-guide/plugins/). :::info REST endpoints are implemented as NestJS Controllers. For comprehensive documentation, see the [NestJS controllers documentation](https://docs.nestjs.com/controllers). ::: In this guide we will define a plugin that adds a single REST endpoint at `http://localhost:3000/products` which returns a list of all products."
        },
        "content": "",
        "sections": [
            {
                "id": "create-a-controller",
                "title": "Create a controller",
                "content": "\nFirst let's define the controller:\n\n\nThe key points to note here are:\n\n- The `@Controller()` decorator defines the base path for all endpoints defined in this controller. In this case, all endpoints will be prefixed with `/products`.\n- The `@Get()` decorator defines a GET endpoint at the base path. The method name `findAll` is arbitrary.\n- The `@Ctx()` decorator injects the [RequestContext](/reference/typescript-api/request/request-context/) which is required for all service methods.\n\n",
                "subsections": [],
                "code": [
                    "// products.controller.ts",
                    "import { Controller, Get } from '@nestjs/common';",
                    "import { Ctx, ProductService, RequestContext } from '@vendure/core';",
                    "",
                    "@Controller('products')",
                    "export class ProductsController {",
                    "    constructor(private productService: ProductService) {",
                    "    }",
                    "",
                    "    @Get()",
                    "    findAll(@Ctx() ctx: RequestContext) {",
                    "        return this.productService.findAll(ctx);",
                    "    }",
                    "}"
                ]
            },
            {
                "id": "register-the-controller-with-the-plugin",
                "title": "Register the controller with the plugin",
                "content": "\n\n:::info\n**Note:** [The `PluginCommonModule`](/reference/typescript-api/plugin/plugin-common-module/) should be imported to gain access to Vendure core providers - in this case it is required in order to be able to inject `ProductService` into our controller.\n:::\n\nThe plugin can then be added to the `VendureConfig`:\n\n\n",
                "subsections": [],
                "code": [
                    "import { PluginCommonModule, VendurePlugin } from '@vendure/core';",
                    "import { ProductsController } from './api/products.controller';",
                    "",
                    "@VendurePlugin({",
                    "  imports: [PluginCommonModule],",
                    "  controllers: [ProductsController],",
                    "})",
                    "export class RestPlugin {}",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { RestPlugin } from './plugins/rest-plugin/rest.plugin';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        // ...",
                    "        // highlight-next-line",
                    "        RestPlugin,",
                    "    ],",
                    "};"
                ]
            },
            {
                "id": "controlling-access-to-rest-endpoints",
                "title": "Controlling access to REST endpoints",
                "content": "\nYou can use the [`@Allow()` decorator](/reference/typescript-api/request/allow-decorator/) to declare the permissions required to access a REST endpoint:\n\n\n:::tip\nThe following Vendure [API decorators](/guides/developer-guide/the-api-layer/#api-decorators) can also be used with NestJS controllers: `@Allow()`, `@Transaction()`, `@Ctx()`.\n\nAdditionally, NestJS supports a number of other REST decorators detailed in the [NestJS controllers guide](https://docs.nestjs.com/controllers#request-object)\n:::\n\n",
                "subsections": [],
                "code": [
                    "import { Controller, Get } from '@nestjs/common';",
                    "import { Allow, Permission, Ctx, ProductService, RequestContext } from '@vendure/core';",
                    "",
                    "@Controller('products')",
                    "export class ProductsController {",
                    "    constructor(private productService: ProductService) {}",
                    "",
                    "    // highlight-next-line",
                    "    @Allow(Permission.ReadProduct)",
                    "    @Get()",
                    "    findAll(@Ctx() ctx: RequestContext) {",
                    "        return this.productService.findAll(ctx);",
                    "    }",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "addactionbaritem",
        "metadata": {
            "title": "AddActionBarItem",
            "keywords": [
                "addactionbaritem",
                "config"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/add-action-bar-item.ts\" sourceLine=\"23\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "addactionbaritem",
                "title": "addActionBarItem",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/add-action-bar-item.ts\" sourceLine=\"23\" packageName=\"@vendure/admin-ui\" />\n\nAdds a button to the ActionBar at the top right of each list or detail view. The locationId can\nbe determined by pressing `ctrl + u` when running the Admin UI in dev mode.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/action-bar/action-bar-item#actionbaritem'>ActionBarItem</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "export default [",
                    "    addActionBarItem({",
                    "        id: 'print-invoice',",
                    "        label: 'Print Invoice',",
                    "        locationId: 'order-detail',",
                    "        routerLink: ['/extensions/invoicing'],",
                    "    }),",
                    "];",
                    "function addActionBarItem(config: ActionBarItem): Provider"
                ]
            }
        ]
    },
    {
        "id": "adding-ui-translations",
        "metadata": {
            "title": "Adding UI Translations",
            "keywords": [
                "translation format",
                "adding a new language",
                "translating ui extensions"
            ],
            "description": "The Vendure Admin UI is fully localizable, allowing you to: * create custom translations for your UI extensions * override existing translations * add complete translations for whole new languages ![The UI language is set from the User menu](./ui-translations-01.webp)"
        },
        "content": "",
        "sections": [
            {
                "id": "translation-format",
                "title": "Translation format",
                "content": "\nThe Admin UI uses the [Messageformat](https://messageformat.github.io/messageformat/) specification to convert i18n tokens to localized strings in the browser. Each language should have a corresponding JSON file containing the translations for that language.\n\nHere is an excerpt from the `en.json` file that ships with the Admin UI:\n\n\nThe translation tokens are grouped into a single-level deep nested structure. In the Angular code, these are referenced like this: \n\n\nThat is, the `{ ... }` represent variables that are passed from the application code and interpolated into the final localized string.\n\n",
                "subsections": [],
                "code": [
                    "{",
                    "  \"admin\": {",
                    "    \"create-new-administrator\": \"Create new administrator\"",
                    "  },",
                    "  \"asset\": {",
                    "    \"add-asset\": \"Add asset\",",
                    "    \"add-asset-with-count\": \"Add {count, plural, 0 {assets} one {1 asset} other {{count} assets}}\",",
                    "    \"assets-selected-count\": \"{ count } assets selected\",",
                    "    \"dimensions\": \"Dimensions\"",
                    "  }",
                    "}",
                    "<label>{{ 'asset.assets-selected-count' | translate:{ count } }}</label>"
                ]
            },
            {
                "id": "adding-a-new-language",
                "title": "Adding a new language",
                "content": "\nThe Admin UI ships with built-in support for many languages, but allows you to add support for any other language without the need to modify the package internals.\n\n1. **Create your translation file**\n\n     Start by copying the contents of the [English language file](https://github.com/vendure-ecommerce/vendure/blob/master/packages/admin-ui/src/lib/static/i18n-messages/en.json) into a new file, `<languageCode>.json`, where `languageCode` is the 2-character [ISO 639-1 code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for the language. Replace the strings with the translation for the new language.\n2. **Install `@vendure/ui-devkit`**\n\n    If not already installed, install the `@vendure/ui-devkit` package, which allows you to create custom builds of the Admin UI.\n3. **Register the translation file**\n  \n    Here's a minimal directory structure and sample code to add your new translation:\n    \n    ```text\n    /src\n    ├─ vendure-config.ts\n    └─ translations/\n        └─ ms.json\n    ```\n    \n    And the config code to register the translation file:\n    \n    ```ts title=\"src.vendure-config.ts\"\n    import path from 'path';\n    import { VendureConfig } from '@vendure/core';\n    import { AdminUiPlugin } from '@vendure/admin-ui-plugin';\n    import { compileUiExtensions } from '@vendure/ui-devkit/compiler';\n    \n    export const config: VendureConfig = {\n        // ...\n        plugins: [\n            AdminUiPlugin.init({\n                port: 3002,\n                app: compileUiExtensions({\n                    outputPath: path.join(__dirname, '../admin-ui'),\n                    extensions: [{\n                        translations: {\n                            ms: path.join(__dirname, 'translations/ms.json'),\n                        }\n                    }],\n                }),\n                adminUiConfig:{\n                    defaultLanguage: LanguageCode.ms,\n                    availableLanguages: [LanguageCode.ms, LanguageCode.en],\n                }\n            }),\n        ],\n    };\n    ```\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "translating-ui-extensions",
                "title": "Translating UI Extensions",
                "content": "\nYou can also create translations for your own UI extensions, in much the same way as outlined above in \"Adding a new language\". Your translations can be split over several files, since the `translations` config object can take a glob, e.g.:\n\n\nThis allows you, if you wish, to co-locate your translation files with your components.\n\nCare should be taken to uniquely namespace your translation tokens, as conflicts with the base translation file will cause your translations to overwrite the defaults. This can be solved by using a unique section name, e.g.:\n\n\n",
                "subsections": [],
                "code": [
                    "translations: {",
                    "  de: path.join(__dirname, 'ui-extensions/my-extension/**/*.de.json'),",
                    "}",
                    "{",
                    "  \"my-reviews-plugin\": {",
                    "    \"all-reviews\": \"All reviews\",",
                    "    \"approve review\": \"Approve review\"",
                    "  }",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "addnavmenuitem",
        "metadata": {
            "title": "AddNavMenuItem",
            "keywords": [
                "addnavmenuitem",
                "config",
                "sectionid",
                "before"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/add-nav-menu-item.ts\" sourceLine=\"68\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "addnavmenuitem",
                "title": "addNavMenuItem",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/add-nav-menu-item.ts\" sourceLine=\"68\" packageName=\"@vendure/admin-ui\" />\n\nAdd a menu item to an existing section specified by `sectionId`. The id of the section\ncan be found by inspecting the DOM and finding the `data-section-id` attribute.\nProviding the `before` argument will move the item before any existing item with the specified id.\nIf omitted (or if the name is not found) the item will be appended to the\nend of the section.\n\nThis should be used in the NgModule `providers` array of your ui extension module.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/nav-menu/nav-menu-item#navmenuitem'>NavMenuItem</a>`} />\n\n"
                    },
                    {
                        "id": "sectionid",
                        "title": "sectionId",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`string`} />\n\n"
                    },
                    {
                        "id": "before",
                        "title": "before",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`string`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { addNavMenuItem } from '@vendure/admin-ui/core';",
                    "",
                    "export default [",
                    "    addNavMenuItem({",
                    "        id: 'reviews',",
                    "        label: 'Product Reviews',",
                    "        routerLink: ['/extensions/reviews'],",
                    "        icon: 'star',",
                    "    },",
                    "    'marketing'),",
                    "];",
                    "function addNavMenuItem(config: NavMenuItem, sectionId: string, before?: string): Provider"
                ]
            }
        ]
    },
    {
        "id": "addnavmenusection",
        "metadata": {
            "title": "AddNavMenuSection",
            "keywords": [
                "addnavmenusection",
                "config",
                "before"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/add-nav-menu-item.ts\" sourceLine=\"30\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "addnavmenusection",
                "title": "addNavMenuSection",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/add-nav-menu-item.ts\" sourceLine=\"30\" packageName=\"@vendure/admin-ui\" />\n\nAdd a section to the main nav menu. Providing the `before` argument will\nmove the section before any existing section with the specified id. If\nomitted (or if the id is not found) the section will be appended to the\nexisting set of sections.\nThis should be used in the NgModule `providers` array of your ui extension module.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/nav-menu/nav-menu-section#navmenusection'>NavMenuSection</a>`} />\n\n"
                    },
                    {
                        "id": "before",
                        "title": "before",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`string`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { addNavMenuSection } from '@vendure/admin-ui/core';",
                    "",
                    "export default [",
                    "    addNavMenuSection({",
                    "        id: 'reports',",
                    "        label: 'Reports',",
                    "        items: [{",
                    "            // ...",
                    "        }],",
                    "    },",
                    "    'settings'),",
                    "];",
                    "function addNavMenuSection(config: NavMenuSection, before?: string): Provider"
                ]
            }
        ]
    },
    {
        "id": "address",
        "metadata": {
            "title": "Address",
            "keywords": [
                "address",
                "constructor",
                "customer",
                "fullname",
                "company",
                "streetline1",
                "streetline2",
                "city",
                "province",
                "postalcode",
                "country",
                "phonenumber",
                "defaultshippingaddress",
                "defaultbillingaddress",
                "customfields"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/address/address.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "address",
                "title": "Address",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/address/address.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />\n\nRepresents a <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>'s address.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code>HasCustomFields</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/address#address'>Address</a>&#62;) => Address`}   />\n\n\n"
                    },
                    {
                        "id": "customer",
                        "title": "customer",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>`}   />\n\n\n"
                    },
                    {
                        "id": "fullname",
                        "title": "fullName",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "company",
                        "title": "company",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "streetline1",
                        "title": "streetLine1",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "streetline2",
                        "title": "streetLine2",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "city",
                        "title": "city",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "province",
                        "title": "province",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "postalcode",
                        "title": "postalCode",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "country",
                        "title": "country",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/country#country'>Country</a>`}   />\n\n\n"
                    },
                    {
                        "id": "phonenumber",
                        "title": "phoneNumber",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "defaultshippingaddress",
                        "title": "defaultShippingAddress",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "defaultbillingaddress",
                        "title": "defaultBillingAddress",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomAddressFields`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Address extends VendureEntity implements HasCustomFields {",
                    "    constructor(input?: DeepPartial<Address>)",
                    "    @Index()",
                    "    @ManyToOne(type => Customer, customer => customer.addresses)",
                    "    customer: Customer;",
                    "    @Column({ default: '' }) fullName: string;",
                    "    @Column({ default: '' })",
                    "    company: string;",
                    "    @Column() streetLine1: string;",
                    "    @Column({ default: '' })",
                    "    streetLine2: string;",
                    "    @Column({ default: '' }) city: string;",
                    "    @Column({ default: '' })",
                    "    province: string;",
                    "    @Column({ default: '' }) postalCode: string;",
                    "    @Index()",
                    "    @ManyToOne(type => Country)",
                    "    country: Country;",
                    "    @Column({ default: '' })",
                    "    phoneNumber: string;",
                    "    @Column({ default: false })",
                    "    defaultShippingAddress: boolean;",
                    "    @Column({ default: false })",
                    "    defaultBillingAddress: boolean;",
                    "    @Column(type => CustomAddressFields)",
                    "    customFields: CustomAddressFields;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "admin-api",
        "metadata": {
            "title": "Admin API",
            "keywords": [
                "graphql admin api"
            ],
            "description": "The Admin API is primarily used by the included Admin UI web app to perform administrative tasks such as inventory management, order tracking etc. {{% alert %}} Explore the interactive GraphQL Admin API at [demo.vendure.io/admin-api](https://demo.vendure.io/admin-api) {{< /alert >}}"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "admin-ui-api",
        "metadata": {
            "title": "Admin UI API",
            "keywords": [
                "vendure admin ui api docs"
            ],
            "description": "These APIs are used when building your own custom extensions to the Admin UI provided by the AdminUiPlugin. {{% alert %}} All documentation in this section is auto-generated from the TypeScript & HTML source of the Vendure Admin UI package. {{< /alert >}}"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "admin-ui-theming-&-branding",
        "metadata": {
            "title": "Admin UI Theming & Branding",
            "keywords": [
                "adminuiplugin branding settings",
                "specifying custom logos",
                "theming"
            ],
            "description": "The Vendure Admin UI can be themed to your company's style and branding. The `AdminUiPlugin` allows you to specify your \"brand\" name, and allows you to control whether to display the Vendure name and version in the UI. Specifying a brand name will also set it as the title of the Admin UI in the browser. ```ts title=\"src/vendure-config.ts\" import { VendureConfig } from '@vendure/core'; import { AdminUiPlugin } from '@vendure/admin-ui-plugin';"
        },
        "content": "",
        "sections": [
            {
                "id": "adminuiplugin-branding-settings",
                "title": "AdminUiPlugin branding settings",
                "content": "\nThe `AdminUiPlugin` allows you to specify your \"brand\" name, and allows you to control whether to display the Vendure name and version in the UI. Specifying a brand name will also set it as the title of the Admin UI in the browser.\n\n\n:::note\nFor the simple level of branding shown above, the `@vendure/ui-devkit` package is not required.\n:::\n\n",
                "subsections": [],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AdminUiPlugin.init({",
                    "            // ...",
                    "            adminUiConfig:{",
                    "                brand: 'My Store',",
                    "                hideVendureBranding: false,",
                    "                hideVersion: false,",
                    "            }",
                    "        }),",
                    "    ],",
                    "};"
                ]
            },
            {
                "id": "specifying-custom-logos",
                "title": "Specifying custom logos",
                "content": "\nYou can replace the Vendure logos and favicon with your own brand logo:\n\n1. Install `@vendure/ui-devkit`\n2. Configure the AdminUiPlugin to compile a custom build featuring your logos:\n    ```ts title=\"src/vendure-config.ts\"\n    import path from 'path';\n    import { AdminUiPlugin } from '@vendure/admin-ui-plugin';\n    import { VendureConfig } from '@vendure/core';\n    import { compileUiExtensions, setBranding } from '@vendure/ui-devkit/compiler';\n    \n    export const config: VendureConfig = {\n        // ...\n        plugins: [\n            AdminUiPlugin.init({\n                app: compileUiExtensions({\n                    outputPath: path.join(__dirname, '../admin-ui'),\n                    extensions: [\n                        setBranding({\n                            // The small logo appears in the top left of the screen  \n                            smallLogoPath: path.join(__dirname, 'images/my-logo-sm.png'),\n                            // The large logo is used on the login page  \n                            largeLogoPath: path.join(__dirname, 'images/my-logo-lg.png'),\n                            faviconPath: path.join(__dirname, 'images/my-favicon.ico'),\n                        }),\n                    ],\n                }),\n            }),\n        ],\n    }\n    ```\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "theming",
                "title": "Theming",
                "content": "\nMuch of the visual styling of the Admin UI can be customized by providing your own themes in a Sass stylesheet. For the most part, the Admin UI uses [CSS custom properties](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) to control colors and other styles. Here's a simple example which changes the color of links:\n\n1. Install `@vendure/ui-devkit`\n2. Create a custom stylesheet which overrides one or more of the CSS custom properties used in the Admin UI:\n    ```css title=\"my-theme.scss\"\n    :root {\n      --clr-link-active-color: hsl(110, 65%, 57%);\n      --clr-link-color: hsl(110, 65%, 57%);\n      --clr-link-hover-color: hsl(110, 65%, 57%);\n      --clr-link-visited-color: hsl(110, 55%, 75%);\n    }\n    ```\n   To get an idea of which custom properties are available for theming, take a look at the source of the [Default theme](https://github.com/vendure-ecommerce/vendure/tree/master/packages/admin-ui/src/lib/static/styles/theme/default.scss) and the [Dark theme](https://github.com/vendure-ecommerce/vendure/tree/master/packages/admin-ui/src/lib/static/styles/theme/dark.scss)\n3. Set this as a globalStyles extension:   \n    ```ts title=\"src/vendure-config.ts\"\n    import path from 'path';\n    import { AdminUiPlugin } from '@vendure/admin-ui-plugin';\n    import { VendureConfig } from '@vendure/core';\n    import { compileUiExtensions } from '@vendure/ui-devkit/compiler';\n    \n    export const config: VendureConfig = {\n        // ...\n        plugins: [\n            AdminUiPlugin.init({\n                app: compileUiExtensions({\n                    outputPath: path.join(__dirname, '../admin-ui'),\n                    extensions: [{\n                        globalStyles: path.join(__dirname, 'my-theme.scss')\n                    }],\n                }),\n            }),\n        ],\n    }\n    ```\n\nSome customizable styles in [Clarity](https://clarity.design/), the Admin UI's underlying UI framework, are controlled by Sass variables, which can be found on the [project's GitHub page](https://github.com/vmware-clarity/ng-clarity/blob/689a572344149aea90df1676eae04479795754f3/projects/angular/src/utils/_variables.clarity.scss). Similar to above, you can also provide your own values, which will override defaults set by the framework. Here's an example which changes the [height of the main header](https://github.com/vmware-clarity/ng-clarity/blob/689a572344149aea90df1676eae04479795754f3/projects/angular/src/layout/main-container/_variables.header.scss#L10):\n\n1. Install `@vendure/ui-devkit` if not already installed\n2. Create a custom stylesheet which overrides the target variable(s):\n    ```css title=\"my-variables.scss\"\n    $clr-header-height: 4rem;\n    ```\n3. Set this as a `sassVariableOverrides` extension:\n    ```ts title=\"src/vendure-config.ts\"\n    import path from 'path';\n    import { AdminUiPlugin } from '@vendure/admin-ui-plugin';\n    import { VendureConfig } from '@vendure/core';\n    import { compileUiExtensions } from '@vendure/ui-devkit/compiler';\n\n    export const config: VendureConfig = {\n        // ...\n        plugins: [\n            AdminUiPlugin.init({\n                app: compileUiExtensions({\n                    outputPath: path.join(__dirname, 'admin-ui'),\n                    extensions: [{\n                        sassVariableOverrides: path.join(__dirname, 'my-variables.scss')\n                    }],\n                }),\n            }),\n        ],\n    }\n    ```\n\n`globalStyles` and `sassVariableOverrides` extensions can be used in conjunction or separately.\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "admin-ui",
        "metadata": {
            "title": "Admin Ui",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "administrator-guide",
        "metadata": {
            "title": "Administrator Guide",
            "keywords": [
                "administrator guide"
            ],
            "description": "This section is for store owners and staff who are charged with running a Vendure-based store. This guide assumes that your Vendure instance is running the AdminUiPlugin. We will roughly structure this guide to conform to the default layout of the Admin UI main navigation menu."
        },
        "content": "",
        "sections": []
    },
    {
        "id": "administrator",
        "metadata": {
            "title": "Administrator",
            "keywords": [
                "administrator",
                "constructor",
                "deletedat",
                "firstname",
                "lastname",
                "emailaddress",
                "user",
                "customfields"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/administrator/administrator.entity.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "administrator",
                "title": "Administrator",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/administrator/administrator.entity.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nAn administrative user who has access to the Admin UI and Admin API. The\nspecific permissions of the Administrator are determined by the assigned\n<a href='/reference/typescript-api/entities/role#role'>Role</a>s.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#softdeletable'>SoftDeletable</a></code>, <code>HasCustomFields</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>&#62;) => Administrator`}   />\n\n\n"
                    },
                    {
                        "id": "deletedat",
                        "title": "deletedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n"
                    },
                    {
                        "id": "firstname",
                        "title": "firstName",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "lastname",
                        "title": "lastName",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "emailaddress",
                        "title": "emailAddress",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "user",
                        "title": "user",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/user#user'>User</a>`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomAdministratorFields`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Administrator extends VendureEntity implements SoftDeletable, HasCustomFields {",
                    "    constructor(input?: DeepPartial<Administrator>)",
                    "    @Column({ type: Date, nullable: true })",
                    "    deletedAt: Date | null;",
                    "    @Column() firstName: string;",
                    "    @Column() lastName: string;",
                    "    @Column({ unique: true })",
                    "    emailAddress: string;",
                    "    @OneToOne(type => User)",
                    "    @JoinColumn()",
                    "    user: User;",
                    "    @Column(type => CustomAdministratorFields)",
                    "    customFields: CustomAdministratorFields;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "administrators-&-roles",
        "metadata": {
            "title": "Administrators & Roles",
            "keywords": [
                "administrators & roles",
                "defining a role",
                "the superadmin role",
                "creating administrators"
            ],
            "description": "An **administrator** is a staff member who has access to the Admin UI, and is able to view and modify some or all of the items and settings. The exact permissions of _what_ a given administrator may view and modify is defined by which **roles** are assigned to that administrator. The role detail page allows you to create a new role or edit an existing one. A role can be thought of as a list of permissions. Permissions are usually divided into four types: * **Create** allows you to create new items, e.g. \"CreateProduct\" will allow one to create a new product. * **Read** allows you to view items, but not modify or delete them."
        },
        "content": "",
        "sections": [
            {
                "id": "defining-a-role",
                "title": "Defining a Role",
                "content": "\nThe role detail page allows you to create a new role or edit an existing one. A role can be thought of as a list of permissions. Permissions are usually divided into four types:\n\n* **Create** allows you to create new items, e.g. \"CreateProduct\" will allow one to create a new product.\n* **Read** allows you to view items, but not modify or delete them.\n* **Update** allows you to make changes to existing items, but not to create new ones.\n* **Delete** allows you to delete items.\n\nVendure comes with a few pre-defined roles for commonly-needed tasks, but you are free to modify these or create your own.\n\nIn general, it is advisable to create roles with the fewest amount of privileges needed for the staff member to do their jobs. For example, a marketing manager would need to be able to create, read, update and delete promotions, but probably doesn't need to be able to update or delete payment methods.\n\n",
                "subsections": [
                    {
                        "id": "the-superadmin-role",
                        "title": "The SuperAdmin role",
                        "content": "\nThis is a special role which cannot be deleted or modified. This role grants _all permissions_ and is used to set up the store initially, and make certain special changes (such as creating new Channels).\n\n"
                    }
                ],
                "code": []
            },
            {
                "id": "creating-administrators",
                "title": "Creating Administrators",
                "content": "\nFor each individual that needs to log in to the Admin UI, you should create a new administrator account. \n\nApart from filling in their details and selecting a strong password, you then need to assign at least one role. Roles \"add together\", meaning that when more than one role is assigned, the combined set of permissions of all assigned roles is granted to that administrator. \n\nThus, it is possible to create a set of specific roles \"Inventory Manager\", \"Order Manager\", \"Customer Services\", \"Marketing Manager\", and _compose_ them together as needed.\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "administratorservice",
        "metadata": {
            "title": "AdministratorService",
            "keywords": [
                "administratorservice",
                "constructor",
                "findall",
                "findone",
                "findonebyuserid",
                "create",
                "update",
                "assignrole",
                "softdelete"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/administrator.service.ts\" sourceLine=\"40\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "administratorservice",
                "title": "AdministratorService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/administrator.service.ts\" sourceLine=\"40\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, passwordCipher: PasswordCipher, userService: <a href='/reference/typescript-api/services/user-service#userservice'>UserService</a>, roleService: <a href='/reference/typescript-api/services/role-service#roleservice'>RoleService</a>, customFieldRelationService: CustomFieldRelationService, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, requestContextService: <a href='/reference/typescript-api/request/request-context-service#requestcontextservice'>RequestContextService</a>) => AdministratorService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>&#62;, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>&#62;&#62;`}   />\n\nGet a paginated list of Administrators.\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, administratorId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a> | undefined&#62;`}   />\n\nGet an Administrator by id.\n"
                    },
                    {
                        "id": "findonebyuserid",
                        "title": "findOneByUserId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, userId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a> | undefined&#62;`}   />\n\nGet an Administrator based on the User id.\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateAdministratorInput) => Promise&#60;<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>&#62;`}   />\n\nCreate a new Administrator.\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateAdministratorInput) => Promise&#60;<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>&#62;`}   />\n\nUpdate an existing Administrator.\n"
                    },
                    {
                        "id": "assignrole",
                        "title": "assignRole",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, administratorId: <a href='/reference/typescript-api/common/id#id'>ID</a>, roleId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>&#62;`}   />\n\nAssigns a Role to the Administrator's User entity.\n"
                    },
                    {
                        "id": "softdelete",
                        "title": "softDelete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => `}   />\n\nSoft deletes an Administrator (sets the `deletedAt` field).\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class AdministratorService {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, listQueryBuilder: ListQueryBuilder, passwordCipher: PasswordCipher, userService: UserService, roleService: RoleService, customFieldRelationService: CustomFieldRelationService, eventBus: EventBus, requestContextService: RequestContextService)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<Administrator>, relations?: RelationPaths<Administrator>) => Promise<PaginatedList<Administrator>>;",
                    "    findOne(ctx: RequestContext, administratorId: ID, relations?: RelationPaths<Administrator>) => Promise<Administrator | undefined>;",
                    "    findOneByUserId(ctx: RequestContext, userId: ID, relations?: RelationPaths<Administrator>) => Promise<Administrator | undefined>;",
                    "    create(ctx: RequestContext, input: CreateAdministratorInput) => Promise<Administrator>;",
                    "    update(ctx: RequestContext, input: UpdateAdministratorInput) => Promise<Administrator>;",
                    "    assignRole(ctx: RequestContext, administratorId: ID, roleId: ID) => Promise<Administrator>;",
                    "    softDelete(ctx: RequestContext, id: ID) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "adminuiappconfig",
        "metadata": {
            "title": "AdminUiAppConfig",
            "keywords": [
                "adminuiappconfig",
                "path",
                "route",
                "compile"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"338\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "adminuiappconfig",
                "title": "AdminUiAppConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"338\" packageName=\"@vendure/common\" />\n\nConfigures the path to a custom-build of the Admin UI app.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "path",
                        "title": "path",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe path to the compiled admin UI app files. If not specified, an internal\ndefault build is used. This path should contain the `vendure-ui-config.json` file,\nindex.html, the compiled js bundles etc.\n"
                    },
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'admin'\"   />\n\nSpecifies the url route to the Admin UI app.\n"
                    },
                    {
                        "id": "compile",
                        "title": "compile",
                        "content": "\n<MemberInfo kind=\"property\" type={`() =&#62; Promise&#60;void&#62;`}   />\n\nThe function which will be invoked to start the app compilation process.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface AdminUiAppConfig {",
                    "    path: string;",
                    "    route?: string;",
                    "    compile?: () => Promise<void>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "adminuiappdevmodeconfig",
        "metadata": {
            "title": "AdminUiAppDevModeConfig",
            "keywords": [
                "adminuiappdevmodeconfig",
                "sourcepath",
                "port",
                "route",
                "compile"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"366\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "adminuiappdevmodeconfig",
                "title": "AdminUiAppDevModeConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"366\" packageName=\"@vendure/common\" />\n\nInformation about the Admin UI app dev server.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "sourcepath",
                        "title": "sourcePath",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe path to the uncompiled UI app source files. This path should contain the `vendure-ui-config.json` file.\n"
                    },
                    {
                        "id": "port",
                        "title": "port",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe port on which the dev server is listening. Overrides the value set by `AdminUiOptions.port`.\n"
                    },
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'admin'\"   />\n\nSpecifies the url route to the Admin UI app.\n"
                    },
                    {
                        "id": "compile",
                        "title": "compile",
                        "content": "\n<MemberInfo kind=\"property\" type={`() =&#62; Promise&#60;void&#62;`}   />\n\nThe function which will be invoked to start the app compilation process.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface AdminUiAppDevModeConfig {",
                    "    sourcePath: string;",
                    "    port: number;",
                    "    route?: string;",
                    "    compile: () => Promise<void>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "adminuiconfig",
        "metadata": {
            "title": "AdminUiConfig",
            "keywords": [
                "adminuiconfig",
                "apihost",
                "apiport",
                "adminapipath",
                "tokenmethod",
                "authtokenheaderkey",
                "channeltokenkey",
                "defaultlanguage",
                "defaultlocale",
                "availablelanguages",
                "loginurl",
                "brand",
                "hidevendurebranding",
                "hideversion",
                "loginimageurl",
                "cancellationreasons"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"214\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "adminuiconfig",
                "title": "AdminUiConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"214\" packageName=\"@vendure/common\" />\n\nThis interface describes JSON config file (vendure-ui-config.json) used by the Admin UI.\nThe values are loaded at run-time by the Admin UI app, and allow core configuration to be\nmanaged without the need to re-build the application.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "apihost",
                        "title": "apiHost",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | 'auto'`} default=\"'http://localhost'\"   />\n\nThe hostname of the Vendure server which the admin UI will be making API calls\nto. If set to \"auto\", the Admin UI app will determine the hostname from the\ncurrent location (i.e. `window.location.hostname`).\n"
                    },
                    {
                        "id": "apiport",
                        "title": "apiPort",
                        "content": "\n<MemberInfo kind=\"property\" type={`number | 'auto'`} default=\"3000\"   />\n\nThe port of the Vendure server which the admin UI will be making API calls\nto. If set to \"auto\", the Admin UI app will determine the port from the\ncurrent location (i.e. `window.location.port`).\n"
                    },
                    {
                        "id": "adminapipath",
                        "title": "adminApiPath",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'admin-api'\"   />\n\nThe path to the GraphQL Admin API.\n"
                    },
                    {
                        "id": "tokenmethod",
                        "title": "tokenMethod",
                        "content": "\n<MemberInfo kind=\"property\" type={`'cookie' | 'bearer'`} default=\"'cookie'\"   />\n\nWhether to use cookies or bearer tokens to track sessions.\nShould match the setting of in the server's `tokenMethod` config\noption.\n"
                    },
                    {
                        "id": "authtokenheaderkey",
                        "title": "authTokenHeaderKey",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'vendure-auth-token'\"   />\n\nThe header used when using the 'bearer' auth method. Should match the\nsetting of the server's `authOptions.authTokenHeaderKey` config option.\n"
                    },
                    {
                        "id": "channeltokenkey",
                        "title": "channelTokenKey",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'vendure-token'\"   />\n\nThe name of the header which contains the channel token. Should match the\nsetting of the server's `apiOptions.channelTokenKey` config option.\n"
                    },
                    {
                        "id": "defaultlanguage",
                        "title": "defaultLanguage",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>`} default=\"<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>.en\"   />\n\nThe default language for the Admin UI. Must be one of the\nitems specified in the `availableLanguages` property.\n"
                    },
                    {
                        "id": "defaultlocale",
                        "title": "defaultLocale",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe default locale for the Admin UI. The locale affects the formatting of\ncurrencies & dates.\n\nIf not set, the browser default locale will be used.\n"
                    },
                    {
                        "id": "availablelanguages",
                        "title": "availableLanguages",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>[]`}   />\n\nAn array of languages for which translations exist for the Admin UI.\n"
                    },
                    {
                        "id": "loginurl",
                        "title": "loginUrl",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nIf you are using an external <a href='/reference/typescript-api/auth/authentication-strategy#authenticationstrategy'>AuthenticationStrategy</a> for the Admin API, you can configure\na custom URL for the login page with this option. On logging out or redirecting an unauthenticated\nuser, the Admin UI app will redirect the user to this URL rather than the default username/password\nscreen.\n"
                    },
                    {
                        "id": "brand",
                        "title": "brand",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe custom brand name.\n"
                    },
                    {
                        "id": "hidevendurebranding",
                        "title": "hideVendureBranding",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nOption to hide vendure branding.\n"
                    },
                    {
                        "id": "hideversion",
                        "title": "hideVersion",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nOption to hide version.\n"
                    },
                    {
                        "id": "loginimageurl",
                        "title": "loginImageUrl",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}  since=\"1.9.0\"  />\n\nA url of a custom image to be used on the login screen, to override the images provided by Vendure's login image server.\n"
                    },
                    {
                        "id": "cancellationreasons",
                        "title": "cancellationReasons",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`} default=\"['order.cancel-reason-customer-request', 'order.cancel-reason-not-available']\"  since=\"1.5.0\"  />\n\nAllows you to provide default reasons for a refund or cancellation. This will be used in the\nrefund/cancel dialog. The values can be literal strings (e.g. \"Not in stock\") or translation\ntokens (see [Adding Admin UI Translations](/guides/extending-the-admin-ui/adding-ui-translations/)).\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface AdminUiConfig {",
                    "    apiHost: string | 'auto';",
                    "    apiPort: number | 'auto';",
                    "    adminApiPath: string;",
                    "    tokenMethod: 'cookie' | 'bearer';",
                    "    authTokenHeaderKey: string;",
                    "    channelTokenKey: string;",
                    "    defaultLanguage: LanguageCode;",
                    "    defaultLocale?: string;",
                    "    availableLanguages: LanguageCode[];",
                    "    loginUrl?: string;",
                    "    brand?: string;",
                    "    hideVendureBranding?: boolean;",
                    "    hideVersion?: boolean;",
                    "    loginImageUrl?: string;",
                    "    cancellationReasons?: string[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "adminuiextension",
        "metadata": {
            "title": "AdminUiExtension",
            "keywords": [
                "adminuiextension",
                "id",
                "extensionpath",
                "ngmodules",
                "providers",
                "routes",
                "pathalias",
                "exclude",
                "translationextension",
                "translations",
                "staticassetextension",
                "staticassets",
                "globalstylesextension",
                "globalstyles",
                "sassvariableoverridesextension",
                "sassvariableoverrides",
                "staticassetdefinition",
                "adminuiextensionsharedmodule",
                "type",
                "ngmodulefilename",
                "ngmodulename",
                "adminuiextensionlazymodule",
                "route"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/types.ts\" sourceLine=\"98\" packageName=\"@vendure/ui-devkit\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "adminuiextension",
                "title": "AdminUiExtension",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/types.ts\" sourceLine=\"98\" packageName=\"@vendure/ui-devkit\" />\n\nDefines extensions to the Admin UI application by specifying additional\nAngular [NgModules](https://angular.io/guide/ngmodules) which are compiled\ninto the application.\n\nSee [Extending the Admin UI](/guides/extending-the-admin-ui/getting-started/) for\ndetailed instructions.\n\n* Extends: <code>Partial&#60;<a href='/reference/admin-ui-api/ui-devkit/admin-ui-extension#translationextension'>TranslationExtension</a>&#62;</code>, <code>Partial&#60;<a href='/reference/admin-ui-api/ui-devkit/admin-ui-extension#staticassetextension'>StaticAssetExtension</a>&#62;</code>, <code>Partial&#60;<a href='/reference/admin-ui-api/ui-devkit/admin-ui-extension#globalstylesextension'>GlobalStylesExtension</a>&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nAn optional ID for the extension module. Only used internally for generating\nimport paths to your module. If not specified, a unique hash will be used as the id.\n"
                    },
                    {
                        "id": "extensionpath",
                        "title": "extensionPath",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe path to the directory containing the extension module(s). The entire contents of this directory\nwill be copied into the Admin UI app, including all TypeScript source files, html templates,\nscss style sheets etc.\n"
                    },
                    {
                        "id": "ngmodules",
                        "title": "ngModules",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/admin-ui-api/ui-devkit/admin-ui-extension#adminuiextensionsharedmodule'>AdminUiExtensionSharedModule</a> | <a href='/reference/admin-ui-api/ui-devkit/admin-ui-extension#adminuiextensionlazymodule'>AdminUiExtensionLazyModule</a>&#62;`}   />\n\nOne or more Angular modules which extend the default Admin UI.\n"
                    },
                    {
                        "id": "providers",
                        "title": "providers",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`}   />\n\nDefines the paths to a file that exports an array of shared providers such as nav menu items, custom form inputs,\ncustom detail components, action bar items, custom history entry components.\n"
                    },
                    {
                        "id": "routes",
                        "title": "routes",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;{\n         route: string;\n         filePath: string;\n     }&#62;`}   />\n\nDefines routes that will be lazy-loaded at the `/extensions/` route. The filePath should point to a file\nrelative to the `extensionPath` which exports an array of Angular route definitions.\n"
                    },
                    {
                        "id": "pathalias",
                        "title": "pathAlias",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nAn optional alias for the module so it can be referenced by other UI extension modules.\n\nBy default, Angular modules declared in an AdminUiExtension do not have access to code outside the directory\ndefined by the `extensionPath`. A scenario in which that can be useful though is in a monorepo codebase where\na common NgModule is shared across different plugins, each defined in its own package. An example can be found\nbelow - note that the main `tsconfig.json` also maps the target module but using a path relative to the project's\nroot folder. The UI module is not part of the main TypeScript build task as explained in\n[Extending the Admin UI](https://www.vendure.io/docs/plugins/extending-the-admin-ui/) but having `paths`\nproperly configured helps with usual IDE code editing features such as code completion and quick navigation, as\nwell as linting.\n\n*Example*\n\n\n\n\n"
                    },
                    {
                        "id": "exclude",
                        "title": "exclude",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`}   />\n\nOptional array specifying filenames or [glob](https://github.com/isaacs/node-glob) patterns that should\nbe skipped when copying the directory defined by `extensionPath`.\n\n*Example*\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface AdminUiExtension extends Partial<TranslationExtension>,",
                    "        Partial<StaticAssetExtension>,",
                    "        Partial<GlobalStylesExtension> {",
                    "    id?: string;",
                    "    extensionPath: string;",
                    "    ngModules?: Array<AdminUiExtensionSharedModule | AdminUiExtensionLazyModule>;",
                    "    providers?: string[];",
                    "    routes?: Array<{",
                    "        route: string;",
                    "        filePath: string;",
                    "    }>;",
                    "    pathAlias?: string;",
                    "    exclude?: string[];",
                    "}",
                    "import { NgModule } from '@angular/core';",
                    "import { SharedModule } from '@vendure/admin-ui/core';",
                    "import { CommonUiComponent } from './components/common-ui/common-ui.component';",
                    "",
                    "export { CommonUiComponent };",
                    "",
                    "@NgModule({",
                    " imports: [SharedModule],",
                    " exports: [CommonUiComponent],",
                    " declarations: [CommonUiComponent],",
                    "})",
                    "export class CommonSharedUiModule {}",
                    "import path from 'path';",
                    "",
                    "import { AdminUiExtension } from '@vendure/ui-devkit/compiler';",
                    "",
                    "export const uiExtensions: AdminUiExtension = {",
                    "  // highlight-next-line",
                    "  pathAlias: '@common-ui-module',     // this is the important part",
                    "  extensionPath: path.join(__dirname, 'ui'),",
                    "  ngModules: [",
                    "    {",
                    "      type: 'shared' as const,",
                    "      ngModuleFileName: 'ui-shared.module.ts',",
                    "      ngModuleName: 'CommonSharedUiModule',",
                    "    },",
                    "  ],",
                    "};",
                    "{",
                    "  \"compilerOptions\": {",
                    "    \"baseUrl\": \".\",",
                    "    \"paths\": {",
                    "      // highlight-next-line",
                    "      \"@common-ui-module/*\": [\"packages/common-ui-module/src/ui/*\"]",
                    "    }",
                    "  }",
                    "}",
                    "import { NgModule } from '@angular/core';",
                    "import { SharedModule } from '@vendure/admin-ui/core';",
                    "// highlight-start",
                    "// the import below works both in the context of the custom Admin UI app as well as the main project",
                    "// '@common-ui-module' is the value of \"pathAlias\" and 'ui-shared.module' is the file we want to reference inside \"extensionPath\"",
                    "import { CommonSharedUiModule, CommonUiComponent } from '@common-ui-module/ui-shared.module';",
                    "// highlight-end",
                    "",
                    "@NgModule({",
                    "  imports: [",
                    "    SharedModule,",
                    "    CommonSharedUiModule,",
                    "    RouterModule.forChild([",
                    "      {",
                    "        path: '',",
                    "        pathMatch: 'full',",
                    "        component: CommonUiComponent,",
                    "      },",
                    "    ]),",
                    "  ],",
                    "})",
                    "export class SampleUiExtensionModule {}",
                    "exclude: ['**/*.spec.ts']"
                ]
            },
            {
                "id": "translationextension",
                "title": "TranslationExtension",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/types.ts\" sourceLine=\"18\" packageName=\"@vendure/ui-devkit\" />\n\nDefines extensions to the Admin UI translations. Can be used as a stand-alone extension definition which only adds translations\nwithout adding new UI functionality, or as part of a full <a href='/reference/admin-ui-api/ui-devkit/admin-ui-extension#adminuiextension'>AdminUiExtension</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`{ [languageCode in <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>]?: string }`}   />\n\nOptional object defining any translation files for the Admin UI. The value should be an object with\nthe key as a 2-character [ISO 639-1 language code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes),\nand the value being a [glob](https://github.com/isaacs/node-glob) for any relevant\ntranslation files in JSON format.\n\n*Example*\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface TranslationExtension {",
                    "    translations: { [languageCode in LanguageCode]?: string };",
                    "}",
                    "translations: {",
                    "  en: path.join(__dirname, 'translations/*.en.json'),",
                    "  de: path.join(__dirname, 'translations/*.de.json'),",
                    "}"
                ]
            },
            {
                "id": "staticassetextension",
                "title": "StaticAssetExtension",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/types.ts\" sourceLine=\"44\" packageName=\"@vendure/ui-devkit\" />\n\nDefines extensions which copy static assets to the custom Admin UI application source asset directory.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "staticassets",
                        "title": "staticAssets",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/ui-devkit/admin-ui-extension#staticassetdefinition'>StaticAssetDefinition</a>[]`}   />\n\nOptional array of paths to static assets which will be copied over to the Admin UI app's `/static`\ndirectory.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface StaticAssetExtension {",
                    "    staticAssets: StaticAssetDefinition[];",
                    "}"
                ]
            },
            {
                "id": "globalstylesextension",
                "title": "GlobalStylesExtension",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/types.ts\" sourceLine=\"60\" packageName=\"@vendure/ui-devkit\" />\n\nDefines extensions which add global styles to the custom Admin UI application.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "globalstyles",
                        "title": "globalStyles",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[] | string`}   />\n\nSpecifies a path (or array of paths) to global style files (css or Sass) which will be\nincorporated into the Admin UI app global stylesheet.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface GlobalStylesExtension {",
                    "    globalStyles: string[] | string;",
                    "}"
                ]
            },
            {
                "id": "sassvariableoverridesextension",
                "title": "SassVariableOverridesExtension",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/types.ts\" sourceLine=\"76\" packageName=\"@vendure/ui-devkit\" />\n\nDefines an extension which allows overriding Clarity Design System's Sass variables used in styles on the Admin UI.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "sassvariableoverrides",
                        "title": "sassVariableOverrides",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nSpecifies a path to a Sass style file containing variable declarations, which will take precedence over\ndefault values defined in Clarity.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface SassVariableOverridesExtension {",
                    "    sassVariableOverrides: string;",
                    "}"
                ]
            },
            {
                "id": "staticassetdefinition",
                "title": "StaticAssetDefinition",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/types.ts\" sourceLine=\"251\" packageName=\"@vendure/ui-devkit\" />\n\nA static asset can be provided as a path to the asset, or as an object containing a path and a new\nname, which will cause the compiler to copy and then rename the asset.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type StaticAssetDefinition = string | { path: string; rename: string }"
                ]
            },
            {
                "id": "adminuiextensionsharedmodule",
                "title": "AdminUiExtensionSharedModule",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/types.ts\" sourceLine=\"260\" packageName=\"@vendure/ui-devkit\" />\n\nConfiguration defining a single NgModule with which to extend the Admin UI.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`'shared'`}   />\n\nShared modules are directly imported into the main AppModule of the Admin UI\nand should be used to declare custom form components and define custom\nnavigation items.\n"
                    },
                    {
                        "id": "ngmodulefilename",
                        "title": "ngModuleFileName",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe name of the file containing the extension module class.\n"
                    },
                    {
                        "id": "ngmodulename",
                        "title": "ngModuleName",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe name of the extension module class.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface AdminUiExtensionSharedModule {",
                    "    type: 'shared';",
                    "    ngModuleFileName: string;",
                    "    ngModuleName: string;",
                    "}"
                ]
            },
            {
                "id": "adminuiextensionlazymodule",
                "title": "AdminUiExtensionLazyModule",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/types.ts\" sourceLine=\"287\" packageName=\"@vendure/ui-devkit\" />\n\nConfiguration defining a single NgModule with which to extend the Admin UI.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`'lazy'`}   />\n\nLazy modules are lazy-loaded at the `/extensions/` route and should be used for\nmodules which define new views for the Admin UI.\n"
                    },
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe route specifies the route at which the module will be lazy-loaded. E.g. a value\nof `'foo'` will cause the module to lazy-load when the `/extensions/foo` route\nis activated.\n"
                    },
                    {
                        "id": "ngmodulefilename",
                        "title": "ngModuleFileName",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe name of the file containing the extension module class.\n"
                    },
                    {
                        "id": "ngmodulename",
                        "title": "ngModuleName",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe name of the extension module class.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface AdminUiExtensionLazyModule {",
                    "    type: 'lazy';",
                    "    route: string;",
                    "    ngModuleFileName: string;",
                    "    ngModuleName: string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "adminuiplugin",
        "metadata": {
            "title": "AdminUiPlugin",
            "keywords": [
                "adminuiplugin",
                "installation",
                "metrics",
                "constructor",
                "init",
                "configure"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui-plugin/src/plugin.ts\" sourceLine=\"125\" packageName=\"@vendure/admin-ui-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "adminuiplugin",
                "title": "AdminUiPlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui-plugin/src/plugin.ts\" sourceLine=\"125\" packageName=\"@vendure/admin-ui-plugin\" />\n\nThis plugin starts a static server for the Admin UI app, and proxies it via the `/admin/` path of the main Vendure server.\n\nThe Admin UI allows you to administer all aspects of your store, from inventory management to order tracking. It is the tool used by\nstore administrators on a day-to-day basis for the management of the store.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "installation",
                "title": "Installation",
                "content": "\n`yarn add @vendure/admin-ui-plugin`\n\nor\n\n`npm install @vendure/admin-ui-plugin`\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "",
                    "const config: VendureConfig = {",
                    "  // Add an instance of the plugin to the plugins array",
                    "  plugins: [",
                    "    AdminUiPlugin.init({ port: 3002 }),",
                    "  ],",
                    "};"
                ]
            },
            {
                "id": "metrics",
                "title": "Metrics",
                "content": "\nThis plugin also defines a `metricSummary` query which is used by the Admin UI to display the order metrics on the dashboard.\n\nIf you are building a stand-alone version of the Admin UI app, and therefore don't need this plugin to server the Admin UI,\nyou can still use the `metricSummary` query by adding the `AdminUiPlugin` to the `plugins` array, but without calling the `init()` method:\n\n*Example*\n\n\n* Implements: <code>NestModule</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(configService: ConfigService, processContext: <a href='/reference/typescript-api/common/process-context#processcontext'>ProcessContext</a>) => AdminUiPlugin`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/admin-ui-plugin/admin-ui-plugin-options#adminuipluginoptions'>AdminUiPluginOptions</a>) => Type&#60;<a href='/reference/core-plugins/admin-ui-plugin/#adminuiplugin'>AdminUiPlugin</a>&#62;`}   />\n\nSet the plugin options\n"
                    },
                    {
                        "id": "configure",
                        "title": "configure",
                        "content": "\n<MemberInfo kind=\"method\" type={`(consumer: MiddlewareConsumer) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "",
                    "const config: VendureConfig = {",
                    "  plugins: [",
                    "    AdminUiPlugin, // <-- no call to .init()",
                    "  ],",
                    "  // ...",
                    "};",
                    "class AdminUiPlugin implements NestModule {",
                    "    constructor(configService: ConfigService, processContext: ProcessContext)",
                    "    init(options: AdminUiPluginOptions) => Type<AdminUiPlugin>;",
                    "    configure(consumer: MiddlewareConsumer) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "adminuipluginoptions",
        "metadata": {
            "title": "AdminUiPluginOptions",
            "keywords": [
                "adminuipluginoptions",
                "route",
                "port",
                "hostname",
                "app",
                "adminuiconfig"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui-plugin/src/plugin.ts\" sourceLine=\"39\" packageName=\"@vendure/admin-ui-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "adminuipluginoptions",
                "title": "AdminUiPluginOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui-plugin/src/plugin.ts\" sourceLine=\"39\" packageName=\"@vendure/admin-ui-plugin\" />\n\nConfiguration options for the <a href='/reference/core-plugins/admin-ui-plugin/#adminuiplugin'>AdminUiPlugin</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe route to the Admin UI.\n\nNote: If you are using the {@link compileUiExtensions} function to compile a custom version of the Admin UI, then\nthe route should match the `baseHref` option passed to that function. The default value of `baseHref` is `/admin/`,\nso it only needs to be changed if you set this `route` option to something other than `\"admin\"`.\n"
                    },
                    {
                        "id": "port",
                        "title": "port",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe port on which the server will listen. This port will be proxied by the AdminUiPlugin to the same port that\nthe Vendure server is running on.\n"
                    },
                    {
                        "id": "hostname",
                        "title": "hostname",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'localhost'\"   />\n\nThe hostname of the server serving the static admin ui files.\n"
                    },
                    {
                        "id": "app",
                        "title": "app",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/admin-ui/admin-ui-app-config#adminuiappconfig'>AdminUiAppConfig</a> | <a href='/reference/typescript-api/common/admin-ui/admin-ui-app-dev-mode-config#adminuiappdevmodeconfig'>AdminUiAppDevModeConfig</a>`}   />\n\nBy default, the AdminUiPlugin comes bundles with a pre-built version of the\nAdmin UI. This option can be used to override this default build with a different\nversion, e.g. one pre-compiled with one or more ui extensions.\n"
                    },
                    {
                        "id": "adminuiconfig",
                        "title": "adminUiConfig",
                        "content": "\n<MemberInfo kind=\"property\" type={`Partial&#60;<a href='/reference/typescript-api/common/admin-ui/admin-ui-config#adminuiconfig'>AdminUiConfig</a>&#62;`}   />\n\nAllows the contents of the `vendure-ui-config.json` file to be set, e.g.\nfor specifying the Vendure GraphQL API host, available UI languages, etc.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface AdminUiPluginOptions {",
                    "    route: string;",
                    "    port: number;",
                    "    hostname?: string;",
                    "    app?: AdminUiAppConfig | AdminUiAppDevModeConfig;",
                    "    adminUiConfig?: Partial<AdminUiConfig>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "allow-decorator",
        "metadata": {
            "title": "Allow Decorator",
            "keywords": [
                "allow",
                "allow and sessions"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/api/decorators/allow.decorator.ts\" sourceLine=\"38\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "allow",
                "title": "Allow",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/api/decorators/allow.decorator.ts\" sourceLine=\"38\" packageName=\"@vendure/core\" />\n\nAttaches metadata to the resolver defining which permissions are required to execute the\noperation, using one or more <a href='/reference/typescript-api/common/permission#permission'>Permission</a> values.\n\nIn a GraphQL context, it can be applied to top-level queries and mutations as well as field resolvers.\n\nFor REST controllers, it can be applied to route handlers.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "allow-and-sessions",
                "title": "Allow and Sessions",
                "content": "The `@Allow()` decorator is closely linked to the way Vendure manages sessions. For any operation or route that is decorated\nwith `@Allow()`, there must be an authenticated session in progress, which would have been created during a prior authentication\nstep.\n\nThe exception to this is when the operation is decorated with `@Allow(Permission.Owner)`. This is a special permission which is designed\nto give access to certain resources to potentially un-authenticated users. For this reason, any operation decorated with this permission\nwill always have an anonymous session created if no session is currently in progress.\n\nFor more information see [Understanding Permission.Owner](/reference/typescript-api/common/permission/#understanding-permissionowner).\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    " @Allow(Permission.SuperAdmin)",
                    " @Query()",
                    " getAdministrators() {",
                    "     // ...",
                    " }"
                ]
            }
        ]
    },
    {
        "id": "anonymoussession",
        "metadata": {
            "title": "AnonymousSession",
            "keywords": [
                "anonymoussession",
                "constructor"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/session/anonymous-session.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "anonymoussession",
                "title": "AnonymousSession",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/session/anonymous-session.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />\n\nAn anonymous session is created when a unauthenticated user interacts with restricted operations,\nsuch as calling the `activeOrder` query in the Shop API. Anonymous sessions allow a guest Customer\nto maintain an order without requiring authentication and a registered account beforehand.\n\n* Extends: <code><a href='/reference/typescript-api/entities/session#session'>Session</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: DeepPartial&#60;<a href='/reference/typescript-api/entities/anonymous-session#anonymoussession'>AnonymousSession</a>&#62;) => AnonymousSession`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class AnonymousSession extends Session {",
                    "    constructor(input: DeepPartial<AnonymousSession>)",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "api-decorator",
        "metadata": {
            "title": "Api Decorator",
            "keywords": [
                "api"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/api/decorators/api.decorator.ts\" sourceLine=\"26\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "api",
                "title": "Api",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/api/decorators/api.decorator.ts\" sourceLine=\"26\" packageName=\"@vendure/core\" />\n\nResolver param decorator which returns which Api the request came though.\nThis is useful because sometimes the same resolver will have different behaviour\ndepending whether it is being called from the shop API or the admin API.\n\nReturns a string of type <a href='/reference/typescript-api/request/api-type#apitype'>ApiType</a>.\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    " @Query()",
                    " getAdministrators(@Api() apiType: ApiType) {",
                    "   if (apiType === 'admin') {",
                    "     // ...",
                    "   }",
                    " }"
                ]
            }
        ]
    },
    {
        "id": "apioptions",
        "metadata": {
            "title": "ApiOptions",
            "keywords": [
                "apioptions",
                "hostname",
                "port",
                "adminapipath",
                "shopapipath",
                "adminapiplayground",
                "shopapiplayground",
                "adminapidebug",
                "shopapidebug",
                "shoplistquerylimit",
                "adminlistquerylimit",
                "adminapivalidationrules",
                "shopapivalidationrules",
                "channeltokenkey",
                "cors",
                "middleware",
                "apolloserverplugins",
                "introspection"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"64\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "apioptions",
                "title": "ApiOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"64\" packageName=\"@vendure/core\" />\n\nThe ApiOptions define how the Vendure GraphQL APIs are exposed, as well as allowing the API layer\nto be extended with middleware.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "hostname",
                        "title": "hostname",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"''\"   />\n\nSet the hostname of the server. If not set, the server will be available on localhost.\n"
                    },
                    {
                        "id": "port",
                        "title": "port",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"3000\"   />\n\nWhich port the Vendure server should listen on.\n"
                    },
                    {
                        "id": "adminapipath",
                        "title": "adminApiPath",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'admin-api'\"   />\n\nThe path to the admin GraphQL API.\n"
                    },
                    {
                        "id": "shopapipath",
                        "title": "shopApiPath",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'shop-api'\"   />\n\nThe path to the shop GraphQL API.\n"
                    },
                    {
                        "id": "adminapiplayground",
                        "title": "adminApiPlayground",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean | RenderPageOptions`} default=\"false\"   />\n\nThe playground config to the admin GraphQL API\n[ApolloServer playground](https://www.apollographql.com/docs/apollo-server/api/apollo-server/#constructoroptions-apolloserver).\n"
                    },
                    {
                        "id": "shopapiplayground",
                        "title": "shopApiPlayground",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean | RenderPageOptions`} default=\"false\"   />\n\nThe playground config to the shop GraphQL API\n[ApolloServer playground](https://www.apollographql.com/docs/apollo-server/api/apollo-server/#constructoroptions-apolloserver).\n"
                    },
                    {
                        "id": "adminapidebug",
                        "title": "adminApiDebug",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nThe debug config to the admin GraphQL API\n[ApolloServer playground](https://www.apollographql.com/docs/apollo-server/api/apollo-server/#constructoroptions-apolloserver).\n"
                    },
                    {
                        "id": "shopapidebug",
                        "title": "shopApiDebug",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nThe debug config to the shop GraphQL API\n[ApolloServer playground](https://www.apollographql.com/docs/apollo-server/api/apollo-server/#constructoroptions-apolloserver).\n"
                    },
                    {
                        "id": "shoplistquerylimit",
                        "title": "shopListQueryLimit",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"100\"   />\n\nThe maximum number of items that may be returned by a query which returns a `PaginatedList` response. In other words,\nthis is the upper limit of the `take` input option.\n"
                    },
                    {
                        "id": "adminlistquerylimit",
                        "title": "adminListQueryLimit",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"1000\"   />\n\nThe maximum number of items that may be returned by a query which returns a `PaginatedList` response. In other words,\nthis is the upper limit of the `take` input option.\n"
                    },
                    {
                        "id": "adminapivalidationrules",
                        "title": "adminApiValidationRules",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;(context: ValidationContext) =&#62; any&#62;`} default=\"[]\"   />\n\nCustom functions to use as additional validation rules when validating the schema for the admin GraphQL API\n[ApolloServer validation rules](https://www.apollographql.com/docs/apollo-server/api/apollo-server/#validationrules).\n"
                    },
                    {
                        "id": "shopapivalidationrules",
                        "title": "shopApiValidationRules",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;(context: ValidationContext) =&#62; any&#62;`} default=\"[]\"   />\n\nCustom functions to use as additional validation rules when validating the schema for the shop GraphQL API\n[ApolloServer validation rules](https://www.apollographql.com/docs/apollo-server/api/apollo-server/#validationrules).\n"
                    },
                    {
                        "id": "channeltokenkey",
                        "title": "channelTokenKey",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'vendure-token'\"   />\n\nThe name of the property which contains the token of the\nactive channel. This property can be included either in\nthe request header or as a query string.\n"
                    },
                    {
                        "id": "cors",
                        "title": "cors",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean | CorsOptions`} default=\"{ origin: true, credentials: true }\"   />\n\nSet the CORS handling for the server. See the [express CORS docs](https://github.com/expressjs/cors#configuration-options).\n"
                    },
                    {
                        "id": "middleware",
                        "title": "middleware",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/middleware#middleware'>Middleware</a>[]`} default=\"[]\"   />\n\nCustom Express or NestJS middleware for the server. More information can be found in the <a href='/reference/typescript-api/common/middleware#middleware'>Middleware</a> docs.\n"
                    },
                    {
                        "id": "apolloserverplugins",
                        "title": "apolloServerPlugins",
                        "content": "\n<MemberInfo kind=\"property\" type={`ApolloServerPlugin[]`} default=\"[]\"   />\n\nCustom [ApolloServerPlugins](https://www.apollographql.com/docs/apollo-server/integrations/plugins/) which\nallow the extension of the Apollo Server, which is the underlying GraphQL server used by Vendure.\n\nApollo plugins can be used e.g. to perform custom data transformations on incoming operations or outgoing\ndata.\n"
                    },
                    {
                        "id": "introspection",
                        "title": "introspection",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"  since=\"1.5.0\"  />\n\nControls whether introspection of the GraphQL APIs is enabled. For production, it is recommended to disable\nintrospection, since exposing your entire schema can allow an attacker to trivially learn all operations\nand much more easily find any potentially exploitable queries.\n\n**Note:** when introspection is disabled, tooling which relies on it for things like autocompletion\nwill not work.\n\n*Example*\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ApiOptions {",
                    "    hostname?: string;",
                    "    port: number;",
                    "    adminApiPath?: string;",
                    "    shopApiPath?: string;",
                    "    adminApiPlayground?: boolean | RenderPageOptions;",
                    "    shopApiPlayground?: boolean | RenderPageOptions;",
                    "    adminApiDebug?: boolean;",
                    "    shopApiDebug?: boolean;",
                    "    shopListQueryLimit?: number;",
                    "    adminListQueryLimit?: number;",
                    "    adminApiValidationRules?: Array<(context: ValidationContext) => any>;",
                    "    shopApiValidationRules?: Array<(context: ValidationContext) => any>;",
                    "    channelTokenKey?: string;",
                    "    cors?: boolean | CorsOptions;",
                    "    middleware?: Middleware[];",
                    "    apolloServerPlugins?: ApolloServerPlugin[];",
                    "    introspection?: boolean;",
                    "}",
                    "{",
                    "  introspection: process.env.NODE_ENV !== 'production'",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "apitype",
        "metadata": {
            "title": "ApiType",
            "keywords": [
                "apitype"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/api/common/get-api-type.ts\" sourceLine=\"9\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "apitype",
                "title": "ApiType",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/api/common/get-api-type.ts\" sourceLine=\"9\" packageName=\"@vendure/core\" />\n\nWhich of the GraphQL APIs the current request came via.\n\n\n",
                "subsections": [],
                "code": [
                    "type ApiType = 'admin' | 'shop' | 'custom'"
                ]
            }
        ]
    },
    {
        "id": "asset",
        "metadata": {
            "title": "Asset",
            "keywords": [
                "asset",
                "constructor",
                "name",
                "type",
                "mimetype",
                "width",
                "height",
                "filesize",
                "source",
                "preview",
                "focalpoint",
                "tags",
                "channels",
                "customfields"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/asset/asset.entity.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "asset",
                "title": "Asset",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/asset/asset.entity.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" />\n\nAn Asset represents a file such as an image which can be associated with certain other entities\nsuch as Products.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#taggable'>Taggable</a></code>, <code><a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a></code>, <code>HasCustomFields</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>&#62;) => Asset`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`AssetType`}   />\n\n\n"
                    },
                    {
                        "id": "mimetype",
                        "title": "mimeType",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "width",
                        "title": "width",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "height",
                        "title": "height",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "filesize",
                        "title": "fileSize",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "source",
                        "title": "source",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "preview",
                        "title": "preview",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "focalpoint",
                        "title": "focalPoint",
                        "content": "\n<MemberInfo kind=\"property\" type={`{ x: number; y: number }`}   />\n\n\n"
                    },
                    {
                        "id": "tags",
                        "title": "tags",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/tag#tag'>Tag</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomAssetFields`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Asset extends VendureEntity implements Taggable, ChannelAware, HasCustomFields {",
                    "    constructor(input?: DeepPartial<Asset>)",
                    "    @Column() name: string;",
                    "    @Column('varchar') type: AssetType;",
                    "    @Column() mimeType: string;",
                    "    @Column({ default: 0 }) width: number;",
                    "    @Column({ default: 0 }) height: number;",
                    "    @Column() fileSize: number;",
                    "    @Column() source: string;",
                    "    @Column() preview: string;",
                    "    @Column('simple-json', { nullable: true })",
                    "    focalPoint?: { x: number; y: number };",
                    "    @ManyToMany(type => Tag)",
                    "    @JoinTable()",
                    "    tags: Tag[];",
                    "    @ManyToMany(type => Channel)",
                    "    @JoinTable()",
                    "    channels: Channel[];",
                    "    @Column(type => CustomAssetFields)",
                    "    customFields: CustomAssetFields;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "assetimporter",
        "metadata": {
            "title": "AssetImporter",
            "keywords": [
                "assetimporter",
                "getassets"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/data-import/providers/asset-importer/asset-importer.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "assetimporter",
                "title": "AssetImporter",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/data-import/providers/asset-importer/asset-importer.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nThis service creates new <a href='/reference/typescript-api/entities/asset#asset'>Asset</a> entities based on string paths provided in the CSV\nimport format. The source files are resolved by joining the value of `importExportOptions.importAssetsDir`\nwith the asset path. This service is used internally by the <a href='/reference/typescript-api/import-export/importer#importer'>Importer</a> service.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "getassets",
                        "title": "getAssets",
                        "content": "\n<MemberInfo kind=\"method\" type={`(assetPaths: string[], ctx?: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;{ assets: <a href='/reference/typescript-api/entities/asset#asset'>Asset</a>[]; errors: string[] }&#62;`}   />\n\nCreates Asset entities for the given paths, using the assetMap cache to prevent the\ncreation of duplicates.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class AssetImporter {",
                    "    getAssets(assetPaths: string[], ctx?: RequestContext) => Promise<{ assets: Asset[]; errors: string[] }>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "assetimportstrategy",
        "metadata": {
            "title": "AssetImportStrategy",
            "keywords": [
                "assetimportstrategy",
                "getstreamfrompath"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/asset-import-strategy/asset-import-strategy.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" since=\"1.7.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "assetimportstrategy",
                "title": "AssetImportStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/asset-import-strategy/asset-import-strategy.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" since=\"1.7.0\" />\n\nThe AssetImportStrategy determines how asset files get imported based on the path given in the\nimport CSV or via the <a href='/reference/typescript-api/import-export/asset-importer#assetimporter'>AssetImporter</a> `getAssets()` method.\n\nThe <a href='/reference/typescript-api/import-export/default-asset-import-strategy#defaultassetimportstrategy'>DefaultAssetImportStrategy</a> is able to load files from either the local filesystem\nor from a remote URL.\n\nA custom strategy could be created which could e.g. get the asset file from an S3 bucket.\n\n:::info\n\nThis is configured via the `importExportOptions.assetImportStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "getstreamfrompath",
                        "title": "getStreamFromPath",
                        "content": "\n<MemberInfo kind=\"method\" type={`(assetPath: string) => Readable | Promise&#60;Readable&#62;`}   />\n\nGiven an asset path, this method should return a Stream of file data. This could\ne.g. be read from a file system or fetch from a remote location.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface AssetImportStrategy extends InjectableStrategy {",
                    "    getStreamFromPath(assetPath: string): Readable | Promise<Readable>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "assetnamingstrategy",
        "metadata": {
            "title": "AssetNamingStrategy",
            "keywords": [
                "assetnamingstrategy",
                "generatesourcefilename",
                "generatepreviewfilename"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/asset-naming-strategy/asset-naming-strategy.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "assetnamingstrategy",
                "title": "AssetNamingStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/asset-naming-strategy/asset-naming-strategy.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nThe AssetNamingStrategy determines how file names are generated based on the uploaded source file name,\nas well as how to handle naming conflicts.\n\n:::info\n\nThis is configured via the `assetOptions.assetNamingStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "generatesourcefilename",
                        "title": "generateSourceFileName",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, originalFileName: string, conflictFileName?: string) => string`}   />\n\nGiven the original file name of the uploaded file, generate a file name to\nbe stored on the server. Operations like normalization and time-stamping can\nbe performed in this method.\n\nThe output will be checked for a naming conflict with an existing file. If a conflict\nexists, this method will be invoked again with the second argument passed in and a new, unique\nfile name should then be generated. This process will repeat until a unique file name has\nbeen returned.\n"
                    },
                    {
                        "id": "generatepreviewfilename",
                        "title": "generatePreviewFileName",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, sourceFileName: string, conflictFileName?: string) => string`}   />\n\nGiven the source file name generated in the `generateSourceFileName` method, this method\nshould generate the file name of the preview image.\n\nThe same mechanism of checking for conflicts is used as described above.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface AssetNamingStrategy extends InjectableStrategy {",
                    "    generateSourceFileName(ctx: RequestContext, originalFileName: string, conflictFileName?: string): string;",
                    "    generatePreviewFileName(ctx: RequestContext, sourceFileName: string, conflictFileName?: string): string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "assetoptions",
        "metadata": {
            "title": "AssetOptions",
            "keywords": [
                "assetoptions",
                "assetnamingstrategy",
                "assetstoragestrategy",
                "assetpreviewstrategy",
                "permittedfiletypes",
                "uploadmaxfilesize"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"606\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "assetoptions",
                "title": "AssetOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"606\" packageName=\"@vendure/core\" />\n\nThe AssetOptions define how assets (images and other files) are named and stored, and how preview images are generated.\n\n**Note**: If you are using the `AssetServerPlugin`, it is not necessary to configure these options.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "assetnamingstrategy",
                        "title": "assetNamingStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/assets/asset-naming-strategy#assetnamingstrategy'>AssetNamingStrategy</a>`} default=\"<a href='/reference/typescript-api/assets/default-asset-naming-strategy#defaultassetnamingstrategy'>DefaultAssetNamingStrategy</a>\"   />\n\nDefines how asset files and preview images are named before being saved.\n"
                    },
                    {
                        "id": "assetstoragestrategy",
                        "title": "assetStorageStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/assets/asset-storage-strategy#assetstoragestrategy'>AssetStorageStrategy</a>`} default=\"NoAssetStorageStrategy\"   />\n\nDefines the strategy used for storing uploaded binary files.\n"
                    },
                    {
                        "id": "assetpreviewstrategy",
                        "title": "assetPreviewStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/assets/asset-preview-strategy#assetpreviewstrategy'>AssetPreviewStrategy</a>`} default=\"NoAssetPreviewStrategy\"   />\n\nDefines the strategy used for creating preview images of uploaded assets.\n"
                    },
                    {
                        "id": "permittedfiletypes",
                        "title": "permittedFileTypes",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`} default=\"image, audio, video MIME types plus PDFs\"   />\n\nAn array of the permitted file types that may be uploaded as Assets. Each entry\nshould be in the form of a valid\n[unique file type specifier](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Unique_file_type_specifiers)\ni.e. either a file extension (\".pdf\") or a mime type (\"image/*\", \"audio/mpeg\" etc.).\n"
                    },
                    {
                        "id": "uploadmaxfilesize",
                        "title": "uploadMaxFileSize",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"20971520\"   />\n\nThe max file size in bytes for uploaded assets.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface AssetOptions {",
                    "    assetNamingStrategy?: AssetNamingStrategy;",
                    "    assetStorageStrategy?: AssetStorageStrategy;",
                    "    assetPreviewStrategy?: AssetPreviewStrategy;",
                    "    permittedFileTypes?: string[];",
                    "    uploadMaxFileSize?: number;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "assetpickerdialogcomponent",
        "metadata": {
            "title": "AssetPickerDialogComponent",
            "keywords": [
                "assetpickerdialogcomponent",
                "assets$",
                "alltags$",
                "paginationconfig",
                "multiselect",
                "initialtags",
                "resolvewith",
                "selection",
                "searchterm$",
                "filterbytags$",
                "uploading",
                "constructor",
                "ngoninit",
                "ngafterviewinit",
                "ngondestroy",
                "pagechange",
                "itemsperpagechange",
                "cancel",
                "select",
                "createassets"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/asset-picker-dialog/asset-picker-dialog.component.ts\" sourceLine=\"52\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "assetpickerdialogcomponent",
                "title": "AssetPickerDialogComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/asset-picker-dialog/asset-picker-dialog.component.ts\" sourceLine=\"52\" packageName=\"@vendure/admin-ui\" />\n\nA dialog which allows the creation and selection of assets.\n\n*Example*\n\n\n* Implements: <code>OnInit</code>, <code>AfterViewInit</code>, <code>OnDestroy</code>, <code><a href='/reference/admin-ui-api/services/modal-service#dialog'>Dialog</a>&#60;<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>[]&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "assets$",
                        "title": "assets$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;AssetLike[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "alltags$",
                        "title": "allTags$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;TagFragment[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "paginationconfig",
                        "title": "paginationConfig",
                        "content": "\n<MemberInfo kind=\"property\" type={`PaginationInstance`}   />\n\n\n"
                    },
                    {
                        "id": "multiselect",
                        "title": "multiSelect",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "initialtags",
                        "title": "initialTags",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`}   />\n\n\n"
                    },
                    {
                        "id": "resolvewith",
                        "title": "resolveWith",
                        "content": "\n<MemberInfo kind=\"property\" type={`(result?: <a href='/reference/typescript-api/entities/asset#asset'>Asset</a>[]) =&#62; void`}   />\n\n\n"
                    },
                    {
                        "id": "selection",
                        "title": "selection",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "searchterm$",
                        "title": "searchTerm$",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "filterbytags$",
                        "title": "filterByTags$",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "uploading",
                        "title": "uploading",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>, notificationService: <a href='/reference/admin-ui-api/services/notification-service#notificationservice'>NotificationService</a>) => AssetPickerDialogComponent`}   />\n\n\n"
                    },
                    {
                        "id": "ngoninit",
                        "title": "ngOnInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "ngafterviewinit",
                        "title": "ngAfterViewInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "ngondestroy",
                        "title": "ngOnDestroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => void`}   />\n\n\n"
                    },
                    {
                        "id": "pagechange",
                        "title": "pageChange",
                        "content": "\n<MemberInfo kind=\"method\" type={`(page: number) => `}   />\n\n\n"
                    },
                    {
                        "id": "itemsperpagechange",
                        "title": "itemsPerPageChange",
                        "content": "\n<MemberInfo kind=\"method\" type={`(itemsPerPage: number) => `}   />\n\n\n"
                    },
                    {
                        "id": "cancel",
                        "title": "cancel",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "select",
                        "title": "select",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "createassets",
                        "title": "createAssets",
                        "content": "\n<MemberInfo kind=\"method\" type={`(files: File[]) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "selectAssets() {",
                    "  this.modalService",
                    "    .fromComponent(AssetPickerDialogComponent, {",
                    "        size: 'xl',",
                    "    })",
                    "    .subscribe(result => {",
                    "        if (result && result.length) {",
                    "            // ...",
                    "        }",
                    "    });",
                    "}",
                    "class AssetPickerDialogComponent implements OnInit, AfterViewInit, OnDestroy, Dialog<Asset[]> {",
                    "    assets$: Observable<AssetLike[]>;",
                    "    allTags$: Observable<TagFragment[]>;",
                    "    paginationConfig: PaginationInstance = {",
                    "        currentPage: 1,",
                    "        itemsPerPage: 25,",
                    "        totalItems: 1,",
                    "    };",
                    "    multiSelect = true;",
                    "    initialTags: string[] = [];",
                    "    resolveWith: (result?: Asset[]) => void;",
                    "    selection: Asset[] = [];",
                    "    searchTerm$ = new BehaviorSubject<string | undefined>(undefined);",
                    "    filterByTags$ = new BehaviorSubject<TagFragment[] | undefined>(undefined);",
                    "    uploading = false;",
                    "    constructor(dataService: DataService, notificationService: NotificationService)",
                    "    ngOnInit() => ;",
                    "    ngAfterViewInit() => ;",
                    "    ngOnDestroy() => void;",
                    "    pageChange(page: number) => ;",
                    "    itemsPerPageChange(itemsPerPage: number) => ;",
                    "    cancel() => ;",
                    "    select() => ;",
                    "    createAssets(files: File[]) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "assetpreviewpipe",
        "metadata": {
            "title": "AssetPreviewPipe",
            "keywords": [
                "assetpreviewpipe",
                "transform"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/asset-preview.pipe.ts\" sourceLine=\"19\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "assetpreviewpipe",
                "title": "AssetPreviewPipe",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/asset-preview.pipe.ts\" sourceLine=\"19\" packageName=\"@vendure/admin-ui\" />\n\nGiven an Asset object (an object with `preview` and optionally `focalPoint` properties), this pipe\nreturns a string with query parameters designed to work with the image resize capabilities of the\nAssetServerPlugin.\n\n*Example*\n\n\n* Implements: <code>PipeTransform</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "transform",
                        "title": "transform",
                        "content": "\n<MemberInfo kind=\"method\" type={`(asset?: AssetFragment, preset: string | number = 'thumb') => string`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<img [src]=\"asset | assetPreview:'tiny'\" />",
                    "<img [src]=\"asset | assetPreview:150\" />",
                    "class AssetPreviewPipe implements PipeTransform {",
                    "    transform(asset?: AssetFragment, preset: string | number = 'thumb') => string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "assetpreviewstrategy",
        "metadata": {
            "title": "AssetPreviewStrategy",
            "keywords": [
                "assetpreviewstrategy",
                "generatepreviewimage"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/asset-preview-strategy/asset-preview-strategy.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "assetpreviewstrategy",
                "title": "AssetPreviewStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/asset-preview-strategy/asset-preview-strategy.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />\n\nThe AssetPreviewStrategy determines how preview images for assets are created. For image\nassets, this would usually typically involve resizing to sensible dimensions. Other file types\ncould be previewed in a variety of ways, e.g.:\n\n- waveform images generated for audio files\n- preview images generated for pdf documents\n- watermarks added to preview images\n\n:::info\n\nThis is configured via the `assetOptions.assetPreviewStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "generatepreviewimage",
                        "title": "generatePreviewImage",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, mimeType: string, data: Buffer) => Promise&#60;Buffer&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface AssetPreviewStrategy extends InjectableStrategy {",
                    "    generatePreviewImage(ctx: RequestContext, mimeType: string, data: Buffer): Promise<Buffer>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "assets",
        "metadata": {
            "title": "Assets",
            "keywords": [
                "assets"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "assetserveroptions",
        "metadata": {
            "title": "AssetServerOptions",
            "keywords": [
                "assetserveroptions",
                "route",
                "assetuploaddir",
                "asseturlprefix",
                "previewmaxwidth",
                "previewmaxheight",
                "presets",
                "namingstrategy",
                "previewstrategy",
                "storagestrategyfactory",
                "cacheheader"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/asset-server-plugin/src/types.ts\" sourceLine=\"72\" packageName=\"@vendure/asset-server-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "assetserveroptions",
                "title": "AssetServerOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/asset-server-plugin/src/types.ts\" sourceLine=\"72\" packageName=\"@vendure/asset-server-plugin\" />\n\nThe configuration options for the AssetServerPlugin.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe route to the asset server.\n"
                    },
                    {
                        "id": "assetuploaddir",
                        "title": "assetUploadDir",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe local directory to which assets will be uploaded when using the <a href='/reference/core-plugins/asset-server-plugin/local-asset-storage-strategy#localassetstoragestrategy'>LocalAssetStorageStrategy</a>.\n"
                    },
                    {
                        "id": "asseturlprefix",
                        "title": "assetUrlPrefix",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | ((ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, identifier: string) =&#62; string)`}   />\n\nThe complete URL prefix of the asset files. For example, \"https://demo.vendure.io/assets/\". A\nfunction can also be provided to handle more complex cases, such as serving multiple domains\nfrom a single server. In this case, the function should return a string url prefix.\n\nIf not provided, the plugin will attempt to guess based off the incoming\nrequest and the configured route. However, in all but the simplest cases,\nthis guess may not yield correct results.\n"
                    },
                    {
                        "id": "previewmaxwidth",
                        "title": "previewMaxWidth",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"1600\"   />\n\nThe max width in pixels of a generated preview image.\n"
                    },
                    {
                        "id": "previewmaxheight",
                        "title": "previewMaxHeight",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"1600\"   />\n\nThe max height in pixels of a generated preview image.\n"
                    },
                    {
                        "id": "presets",
                        "title": "presets",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/asset-server-plugin/image-transform-preset#imagetransformpreset'>ImageTransformPreset</a>[]`}   />\n\nAn array of additional <a href='/reference/core-plugins/asset-server-plugin/image-transform-preset#imagetransformpreset'>ImageTransformPreset</a> objects.\n"
                    },
                    {
                        "id": "namingstrategy",
                        "title": "namingStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/assets/asset-naming-strategy#assetnamingstrategy'>AssetNamingStrategy</a>`} default=\"<a href='/reference/core-plugins/asset-server-plugin/hashed-asset-naming-strategy#hashedassetnamingstrategy'>HashedAssetNamingStrategy</a>\"   />\n\nDefines how asset files and preview images are named before being saved.\n"
                    },
                    {
                        "id": "previewstrategy",
                        "title": "previewStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/assets/asset-preview-strategy#assetpreviewstrategy'>AssetPreviewStrategy</a>`}  since=\"1.7.0\"  />\n\nDefines how previews are generated for a given Asset binary. By default, this uses\nthe <a href='/reference/core-plugins/asset-server-plugin/sharp-asset-preview-strategy#sharpassetpreviewstrategy'>SharpAssetPreviewStrategy</a>\n"
                    },
                    {
                        "id": "storagestrategyfactory",
                        "title": "storageStrategyFactory",
                        "content": "\n<MemberInfo kind=\"property\" type={`(\n         options: <a href='/reference/core-plugins/asset-server-plugin/asset-server-options#assetserveroptions'>AssetServerOptions</a>,\n     ) =&#62; <a href='/reference/typescript-api/assets/asset-storage-strategy#assetstoragestrategy'>AssetStorageStrategy</a> | Promise&#60;<a href='/reference/typescript-api/assets/asset-storage-strategy#assetstoragestrategy'>AssetStorageStrategy</a>&#62;`} default=\"() =&#62; <a href='/reference/core-plugins/asset-server-plugin/local-asset-storage-strategy#localassetstoragestrategy'>LocalAssetStorageStrategy</a>\"   />\n\nA function which can be used to configure an <a href='/reference/typescript-api/assets/asset-storage-strategy#assetstoragestrategy'>AssetStorageStrategy</a>. This is useful e.g. if you wish to store your assets\nusing a cloud storage provider. By default, the <a href='/reference/core-plugins/asset-server-plugin/local-asset-storage-strategy#localassetstoragestrategy'>LocalAssetStorageStrategy</a> is used.\n"
                    },
                    {
                        "id": "cacheheader",
                        "title": "cacheHeader",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/asset-server-plugin/cache-config#cacheconfig'>CacheConfig</a> | string`} default=\"'public, max-age=15552000'\"  since=\"1.9.3\"  />\n\nConfigures the `Cache-Control` directive for response to control caching in browsers and shared caches (e.g. Proxies, CDNs).\nDefaults to publicly cached for 6 months.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface AssetServerOptions {",
                    "    route: string;",
                    "    assetUploadDir: string;",
                    "    assetUrlPrefix?: string | ((ctx: RequestContext, identifier: string) => string);",
                    "    previewMaxWidth?: number;",
                    "    previewMaxHeight?: number;",
                    "    presets?: ImageTransformPreset[];",
                    "    namingStrategy?: AssetNamingStrategy;",
                    "    previewStrategy?: AssetPreviewStrategy;",
                    "    storageStrategyFactory?: (",
                    "        options: AssetServerOptions,",
                    "    ) => AssetStorageStrategy | Promise<AssetStorageStrategy>;",
                    "    cacheHeader?: CacheConfig | string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "assetserverplugin",
        "metadata": {
            "title": "AssetServerPlugin",
            "keywords": [
                "assetserverplugin",
                "installation",
                "image transformation",
                "preview mode",
                "focal point",
                "format",
                "transform presets",
                "caching",
                "init",
                "constructor",
                "configure"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/asset-server-plugin/src/plugin.ts\" sourceLine=\"139\" packageName=\"@vendure/asset-server-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "assetserverplugin",
                "title": "AssetServerPlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/asset-server-plugin/src/plugin.ts\" sourceLine=\"139\" packageName=\"@vendure/asset-server-plugin\" />\n\nThe `AssetServerPlugin` serves assets (images and other files) from the local file system, and can also be configured to use\nother storage strategies (e.g. <a href='/reference/core-plugins/asset-server-plugin/s3asset-storage-strategy#s3assetstoragestrategy'>S3AssetStorageStrategy</a>. It can also perform on-the-fly image transformations\nand caches the results for subsequent calls.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "installation",
                "title": "Installation",
                "content": "\n`yarn add @vendure/asset-server-plugin`\n\nor\n\n`npm install @vendure/asset-server-plugin`\n\n*Example*\n\n\nThe full configuration is documented at [AssetServerOptions](/reference/core-plugins/asset-server-plugin/asset-server-options)\n\n",
                "subsections": [],
                "code": [
                    "import { AssetServerPlugin } from '@vendure/asset-server-plugin';",
                    "",
                    "const config: VendureConfig = {",
                    "  // Add an instance of the plugin to the plugins array",
                    "  plugins: [",
                    "    AssetServerPlugin.init({",
                    "      route: 'assets',",
                    "      assetUploadDir: path.join(__dirname, 'assets'),",
                    "    }),",
                    "  ],",
                    "};"
                ]
            },
            {
                "id": "image-transformation",
                "title": "Image transformation",
                "content": "\nAsset preview images can be transformed (resized & cropped) on the fly by appending query parameters to the url:\n\n`http://localhost:3000/assets/some-asset.jpg?w=500&h=300&mode=resize`\n\nThe above URL will return `some-asset.jpg`, resized to fit in the bounds of a 500px x 300px rectangle.\n\n",
                "subsections": [
                    {
                        "id": "preview-mode",
                        "title": "Preview mode",
                        "content": "\nThe `mode` parameter can be either `crop` or `resize`. See the [ImageTransformMode](/reference/core-plugins/asset-server-plugin/image-transform-mode) docs for details.\n\n"
                    },
                    {
                        "id": "focal-point",
                        "title": "Focal point",
                        "content": "\nWhen cropping an image (`mode=crop`), Vendure will attempt to keep the most \"interesting\" area of the image in the cropped frame. It does this\nby finding the area of the image with highest entropy (the busiest area of the image). However, sometimes this does not yield a satisfactory\nresult - part or all of the main subject may still be cropped out.\n\nThis is where specifying the focal point can help. The focal point of the image may be specified by passing the `fpx` and `fpy` query parameters.\nThese are normalized coordinates (i.e. a number between 0 and 1), so the `fpx=0&fpy=0` corresponds to the top left of the image.\n\nFor example, let's say there is a very wide landscape image which we want to crop to be square. The main subject is a house to the far left of the\nimage. The following query would crop it to a square with the house centered:\n\n`http://localhost:3000/assets/landscape.jpg?w=150&h=150&mode=crop&fpx=0.2&fpy=0.7`\n\n"
                    },
                    {
                        "id": "format",
                        "title": "Format",
                        "content": "\nSince v1.7.0, the image format can be specified by adding the `format` query parameter:\n\n`http://localhost:3000/assets/some-asset.jpg?format=webp`\n\nThis means that, no matter the format of your original asset files, you can use more modern formats in your storefront if the browser\nsupports them. Supported values for `format` are:\n\n* `jpeg` or `jpg`\n* `png`\n* `webp`\n* `avif`\n\nThe `format` parameter can also be combined with presets (see below).\n\n"
                    },
                    {
                        "id": "transform-presets",
                        "title": "Transform presets",
                        "content": "\nPresets can be defined which allow a single preset name to be used instead of specifying the width, height and mode. Presets are\nconfigured via the AssetServerOptions [presets property](/reference/core-plugins/asset-server-plugin/asset-server-options/#presets).\n\nFor example, defining the following preset:\n\n\nmeans that a request to:\n\n`http://localhost:3000/assets/some-asset.jpg?preset=my-preset`\n\nis equivalent to:\n\n`http://localhost:3000/assets/some-asset.jpg?w=85&h=85&mode=crop`\n\nThe AssetServerPlugin comes pre-configured with the following presets:\n\nname | width | height | mode\n-----|-------|--------|-----\ntiny | 50px | 50px | crop\nthumb | 150px | 150px | crop\nsmall | 300px | 300px | resize\nmedium | 500px | 500px | resize\nlarge | 800px | 800px | resize\n\n"
                    },
                    {
                        "id": "caching",
                        "title": "Caching",
                        "content": "By default, the AssetServerPlugin will cache every transformed image, so that the transformation only needs to be performed a single time for\na given configuration. Caching can be disabled per-request by setting the `?cache=false` query parameter.\n\n* Implements: <code>NestModule</code>, <code>OnApplicationBootstrap</code>\n\n\n\n<div className=\"members-wrapper\">\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/asset-server-plugin/asset-server-options#assetserveroptions'>AssetServerOptions</a>) => Type&#60;<a href='/reference/core-plugins/asset-server-plugin/#assetserverplugin'>AssetServerPlugin</a>&#62;`}   />\n\nSet the plugin options.\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(processContext: <a href='/reference/typescript-api/common/process-context#processcontext'>ProcessContext</a>) => AssetServerPlugin`}   />\n\n\n"
                    },
                    {
                        "id": "configure",
                        "title": "configure",
                        "content": "\n<MemberInfo kind=\"method\" type={`(consumer: MiddlewareConsumer) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "AssetServerPlugin.init({",
                    "  // ...",
                    "  presets: [",
                    "    { name: 'my-preset', width: 85, height: 85, mode: 'crop' },",
                    "  ],",
                    "}),",
                    "class AssetServerPlugin implements NestModule, OnApplicationBootstrap {",
                    "    init(options: AssetServerOptions) => Type<AssetServerPlugin>;",
                    "    constructor(processContext: ProcessContext)",
                    "    configure(consumer: MiddlewareConsumer) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "assetservice",
        "metadata": {
            "title": "AssetService",
            "keywords": [
                "assetservice",
                "constructor",
                "findone",
                "findall",
                "getfeaturedasset",
                "getentityassets",
                "updatefeaturedasset",
                "updateentityassets",
                "create",
                "update",
                "delete",
                "assigntochannel",
                "createfromfilestream",
                "entitywithassets",
                "featuredasset",
                "assets",
                "entityassetinput",
                "assetids",
                "featuredassetid"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/asset.service.ts\" sourceLine=\"90\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "assetservice",
                "title": "AssetService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/asset.service.ts\" sourceLine=\"90\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/asset#asset'>Asset</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, tagService: <a href='/reference/typescript-api/services/tag-service#tagservice'>TagService</a>, channelService: <a href='/reference/typescript-api/services/channel-service#channelservice'>ChannelService</a>, roleService: <a href='/reference/typescript-api/services/role-service#roleservice'>RoleService</a>, customFieldRelationService: CustomFieldRelationService) => AssetService`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/entities/asset#asset'>Asset</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: AssetListOptions, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getfeaturedasset",
                        "title": "getFeaturedAsset",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: T) => Promise&#60;<a href='/reference/typescript-api/entities/asset#asset'>Asset</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getentityassets",
                        "title": "getEntityAssets",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: T) => Promise&#60;<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>[] | undefined&#62;`}   />\n\nReturns the Assets of an entity which has a well-ordered list of Assets, such as Product,\nProductVariant or Collection.\n"
                    },
                    {
                        "id": "updatefeaturedasset",
                        "title": "updateFeaturedAsset",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: T, input: <a href='/reference/typescript-api/services/asset-service#entityassetinput'>EntityAssetInput</a>) => Promise&#60;T&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "updateentityassets",
                        "title": "updateEntityAssets",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: T, input: <a href='/reference/typescript-api/services/asset-service#entityassetinput'>EntityAssetInput</a>) => Promise&#60;T&#62;`}   />\n\nUpdates the assets / featuredAsset of an entity, ensuring that only valid assetIds are used.\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateAssetInput) => Promise&#60;CreateAssetResult&#62;`}   />\n\nCreate an Asset based on a file uploaded via the GraphQL API. The file should be uploaded\nusing the [GraphQL multipart request specification](https://github.com/jaydenseric/graphql-multipart-request-spec),\ne.g. using the [apollo-upload-client](https://github.com/jaydenseric/apollo-upload-client) npm package.\n\nSee the [Uploading Files docs](/guides/developer-guide/uploading-files) for an example of usage.\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateAssetInput) => Promise&#60;<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>&#62;`}   />\n\nUpdates the name, focalPoint, tags & custom fields of an Asset.\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, ids: <a href='/reference/typescript-api/common/id#id'>ID</a>[], force: boolean = false, deleteFromAllChannels: boolean = false) => Promise&#60;DeletionResponse&#62;`}   />\n\nDeletes an Asset after performing checks to ensure that the Asset is not currently in use\nby a Product, ProductVariant or Collection.\n"
                    },
                    {
                        "id": "assigntochannel",
                        "title": "assignToChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: AssignAssetsToChannelInput) => Promise&#60;<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "createfromfilestream",
                        "title": "createFromFileStream",
                        "content": "\n<MemberInfo kind=\"method\" type={`(stream: ReadStream, ctx?: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;CreateAssetResult&#62;`}   />\n\nCreate an Asset from a file stream, for example to create an Asset during data import.\n"
                    },
                    {
                        "id": "createfromfilestream",
                        "title": "createFromFileStream",
                        "content": "\n<MemberInfo kind=\"method\" type={`(stream: Readable, filePath: string, ctx?: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;CreateAssetResult&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "createfromfilestream",
                        "title": "createFromFileStream",
                        "content": "\n<MemberInfo kind=\"method\" type={`(stream: ReadStream | Readable, maybeFilePathOrCtx?: string | <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, maybeCtx?: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;CreateAssetResult&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class AssetService {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, listQueryBuilder: ListQueryBuilder, eventBus: EventBus, tagService: TagService, channelService: ChannelService, roleService: RoleService, customFieldRelationService: CustomFieldRelationService)",
                    "    findOne(ctx: RequestContext, id: ID, relations?: RelationPaths<Asset>) => Promise<Asset | undefined>;",
                    "    findAll(ctx: RequestContext, options?: AssetListOptions, relations?: RelationPaths<Asset>) => Promise<PaginatedList<Asset>>;",
                    "    getFeaturedAsset(ctx: RequestContext, entity: T) => Promise<Asset | undefined>;",
                    "    getEntityAssets(ctx: RequestContext, entity: T) => Promise<Asset[] | undefined>;",
                    "    updateFeaturedAsset(ctx: RequestContext, entity: T, input: EntityAssetInput) => Promise<T>;",
                    "    updateEntityAssets(ctx: RequestContext, entity: T, input: EntityAssetInput) => Promise<T>;",
                    "    create(ctx: RequestContext, input: CreateAssetInput) => Promise<CreateAssetResult>;",
                    "    update(ctx: RequestContext, input: UpdateAssetInput) => Promise<Asset>;",
                    "    delete(ctx: RequestContext, ids: ID[], force: boolean = false, deleteFromAllChannels: boolean = false) => Promise<DeletionResponse>;",
                    "    assignToChannel(ctx: RequestContext, input: AssignAssetsToChannelInput) => Promise<Asset[]>;",
                    "    createFromFileStream(stream: ReadStream, ctx?: RequestContext) => Promise<CreateAssetResult>;",
                    "    createFromFileStream(stream: Readable, filePath: string, ctx?: RequestContext) => Promise<CreateAssetResult>;",
                    "    createFromFileStream(stream: ReadStream | Readable, maybeFilePathOrCtx?: string | RequestContext, maybeCtx?: RequestContext) => Promise<CreateAssetResult>;",
                    "}"
                ]
            },
            {
                "id": "entitywithassets",
                "title": "EntityWithAssets",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/asset.service.ts\" sourceLine=\"66\" packageName=\"@vendure/core\" />\n\nCertain entities (Product, ProductVariant, Collection) use this interface\nto model a featured asset and then a list of assets with a defined order.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "featuredasset",
                        "title": "featuredAsset",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/asset#asset'>Asset</a> | null`}   />\n\n\n"
                    },
                    {
                        "id": "assets",
                        "title": "assets",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/orderable-asset#orderableasset'>OrderableAsset</a>[]`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface EntityWithAssets extends VendureEntity {",
                    "    featuredAsset: Asset | null;",
                    "    assets: OrderableAsset[];",
                    "}"
                ]
            },
            {
                "id": "entityassetinput",
                "title": "EntityAssetInput",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/asset.service.ts\" sourceLine=\"78\" packageName=\"@vendure/core\" />\n\nUsed when updating entities which implement <a href='/reference/typescript-api/services/asset-service#entitywithassets'>EntityWithAssets</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "assetids",
                        "title": "assetIds",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>[] | null`}   />\n\n\n"
                    },
                    {
                        "id": "featuredassetid",
                        "title": "featuredAssetId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a> | null`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface EntityAssetInput {",
                    "    assetIds?: ID[] | null;",
                    "    featuredAssetId?: ID | null;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "assetstoragestrategy",
        "metadata": {
            "title": "AssetStorageStrategy",
            "keywords": [
                "assetstoragestrategy",
                "writefilefrombuffer",
                "writefilefromstream",
                "readfiletobuffer",
                "readfiletostream",
                "deletefile",
                "fileexists",
                "toabsoluteurl"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/asset-storage-strategy/asset-storage-strategy.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "assetstoragestrategy",
                "title": "AssetStorageStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/asset-storage-strategy/asset-storage-strategy.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" />\n\nThe AssetPersistenceStrategy determines how Asset files are physically stored\nand retrieved.\n\n:::info\n\nThis is configured via the `assetOptions.assetStorageStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "writefilefrombuffer",
                        "title": "writeFileFromBuffer",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fileName: string, data: Buffer) => Promise&#60;string&#62;`}   />\n\nWrites a buffer to the store and returns a unique identifier for that\nfile such as a file path or a URL.\n"
                    },
                    {
                        "id": "writefilefromstream",
                        "title": "writeFileFromStream",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fileName: string, data: Stream) => Promise&#60;string&#62;`}   />\n\nWrites a readable stream to the store and returns a unique identifier for that\nfile such as a file path or a URL.\n"
                    },
                    {
                        "id": "readfiletobuffer",
                        "title": "readFileToBuffer",
                        "content": "\n<MemberInfo kind=\"method\" type={`(identifier: string) => Promise&#60;Buffer&#62;`}   />\n\nReads a file based on an identifier which was generated by the writeFile\nmethod, and returns the as a Buffer.\n"
                    },
                    {
                        "id": "readfiletostream",
                        "title": "readFileToStream",
                        "content": "\n<MemberInfo kind=\"method\" type={`(identifier: string) => Promise&#60;Stream&#62;`}   />\n\nReads a file based on an identifier which was generated by the writeFile\nmethod, and returns the file as a Stream.\n"
                    },
                    {
                        "id": "deletefile",
                        "title": "deleteFile",
                        "content": "\n<MemberInfo kind=\"method\" type={`(identifier: string) => Promise&#60;void&#62;`}   />\n\nDeletes a file from the storage.\n"
                    },
                    {
                        "id": "fileexists",
                        "title": "fileExists",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fileName: string) => Promise&#60;boolean&#62;`}   />\n\nCheck whether a file with the given name already exists. Used to avoid\nnaming conflicts before saving the file.\n"
                    },
                    {
                        "id": "toabsoluteurl",
                        "title": "toAbsoluteUrl",
                        "content": "\n<MemberInfo kind=\"method\" type={`(request: Request, identifier: string) => string`}   />\n\nConvert an identifier as generated by the writeFile... methods into an absolute\nurl (if it is not already in that form). If no conversion step is needed\n(i.e. the identifier is already an absolute url) then this method\nshould not be implemented.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface AssetStorageStrategy extends InjectableStrategy {",
                    "    writeFileFromBuffer(fileName: string, data: Buffer): Promise<string>;",
                    "    writeFileFromStream(fileName: string, data: Stream): Promise<string>;",
                    "    readFileToBuffer(identifier: string): Promise<Buffer>;",
                    "    readFileToStream(identifier: string): Promise<Stream>;",
                    "    deleteFile(identifier: string): Promise<void>;",
                    "    fileExists(fileName: string): Promise<boolean>;",
                    "    toAbsoluteUrl?(request: Request, identifier: string): string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "asyncqueue",
        "metadata": {
            "title": "AsyncQueue",
            "keywords": [
                "asyncqueue",
                "constructor",
                "push"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/async-queue.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "asyncqueue",
                "title": "AsyncQueue",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/async-queue.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nA queue class for limiting concurrent async tasks. This can be used e.g. to prevent\nrace conditions when working on a shared resource such as writing to a database.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(label: string = 'default', concurrency: number = 1) => AsyncQueue`}   />\n\n\n"
                    },
                    {
                        "id": "push",
                        "title": "push",
                        "content": "\n<MemberInfo kind=\"method\" type={`(task: Task&#60;T&#62;) => Promise&#60;T&#62;`}   />\n\nPushes a new task onto the queue, upon which the task will either execute immediately or\n(if the number of running tasks is equal to the concurrency limit) enqueue the task to\nbe executed at the soonest opportunity.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class AsyncQueue {",
                    "    constructor(label: string = 'default', concurrency: number = 1)",
                    "    push(task: Task<T>) => Promise<T>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "auth",
        "metadata": {
            "title": "Auth",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import DocCardList from '@theme/DocCardList'; <DocCardList />"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "authenticatedsession",
        "metadata": {
            "title": "AuthenticatedSession",
            "keywords": [
                "authenticatedsession",
                "constructor",
                "user",
                "authenticationstrategy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/session/authenticated-session.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "authenticatedsession",
                "title": "AuthenticatedSession",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/session/authenticated-session.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nAn AuthenticatedSession is created upon successful authentication.\n\n* Extends: <code><a href='/reference/typescript-api/entities/session#session'>Session</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: DeepPartial&#60;<a href='/reference/typescript-api/entities/authenticated-session#authenticatedsession'>AuthenticatedSession</a>&#62;) => AuthenticatedSession`}   />\n\n\n"
                    },
                    {
                        "id": "user",
                        "title": "user",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/user#user'>User</a>`}   />\n\nThe <a href='/reference/typescript-api/entities/user#user'>User</a> who has authenticated to create this session.\n"
                    },
                    {
                        "id": "authenticationstrategy",
                        "title": "authenticationStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe name of the <a href='/reference/typescript-api/auth/authentication-strategy#authenticationstrategy'>AuthenticationStrategy</a> used when authenticating\nto create this session.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class AuthenticatedSession extends Session {",
                    "    constructor(input: DeepPartial<AuthenticatedSession>)",
                    "    @Index()",
                    "    @ManyToOne(type => User)",
                    "    user: User;",
                    "    @Column()",
                    "    authenticationStrategy: string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "authenticationmethod",
        "metadata": {
            "title": "AuthenticationMethod",
            "keywords": [
                "authenticationmethod",
                "user",
                "externalauthenticationmethod",
                "constructor",
                "strategy",
                "externalidentifier",
                "metadata",
                "nativeauthenticationmethod",
                "identifier",
                "passwordhash",
                "verificationtoken",
                "passwordresettoken",
                "identifierchangetoken",
                "pendingidentifier"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/authentication-method/authentication-method.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "authenticationmethod",
                "title": "AuthenticationMethod",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/authentication-method/authentication-method.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nAn AuthenticationMethod represents the means by which a <a href='/reference/typescript-api/entities/user#user'>User</a> is authenticated. There are two kinds:\n<a href='/reference/typescript-api/entities/authentication-method#nativeauthenticationmethod'>NativeAuthenticationMethod</a> and <a href='/reference/typescript-api/entities/authentication-method#externalauthenticationmethod'>ExternalAuthenticationMethod</a>.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "user",
                        "title": "user",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/user#user'>User</a>`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class AuthenticationMethod extends VendureEntity {",
                    "    @Index()",
                    "    @ManyToOne(type => User, user => user.authenticationMethods)",
                    "    user: User;",
                    "}"
                ]
            },
            {
                "id": "externalauthenticationmethod",
                "title": "ExternalAuthenticationMethod",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/authentication-method/external-authentication-method.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nThis method is used when an external authentication service is used to authenticate Vendure Users.\nExamples of external auth include social logins or corporate identity servers.\n\n* Extends: <code><a href='/reference/typescript-api/entities/authentication-method#authenticationmethod'>AuthenticationMethod</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: DeepPartial&#60;<a href='/reference/typescript-api/entities/authentication-method#externalauthenticationmethod'>ExternalAuthenticationMethod</a>&#62;) => ExternalAuthenticationMethod`}   />\n\n\n"
                    },
                    {
                        "id": "strategy",
                        "title": "strategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "externalidentifier",
                        "title": "externalIdentifier",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "metadata",
                        "title": "metadata",
                        "content": "\n<MemberInfo kind=\"property\" type={`any`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ExternalAuthenticationMethod extends AuthenticationMethod {",
                    "    constructor(input: DeepPartial<ExternalAuthenticationMethod>)",
                    "    @Column()",
                    "    strategy: string;",
                    "    @Column()",
                    "    externalIdentifier: string;",
                    "    @Column('simple-json')",
                    "    metadata: any;",
                    "}"
                ]
            },
            {
                "id": "nativeauthenticationmethod",
                "title": "NativeAuthenticationMethod",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/authentication-method/native-authentication-method.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nThis is the default, built-in authentication method which uses a identifier (typically username or email address)\nand password combination to authenticate a User.\n\n* Extends: <code><a href='/reference/typescript-api/entities/authentication-method#authenticationmethod'>AuthenticationMethod</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/authentication-method#nativeauthenticationmethod'>NativeAuthenticationMethod</a>&#62;) => NativeAuthenticationMethod`}   />\n\n\n"
                    },
                    {
                        "id": "identifier",
                        "title": "identifier",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "passwordhash",
                        "title": "passwordHash",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "verificationtoken",
                        "title": "verificationToken",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | null`}   />\n\n\n"
                    },
                    {
                        "id": "passwordresettoken",
                        "title": "passwordResetToken",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | null`}   />\n\n\n"
                    },
                    {
                        "id": "identifierchangetoken",
                        "title": "identifierChangeToken",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | null`}   />\n\nA token issued when a User requests to change their identifier (typically\nan email address)\n"
                    },
                    {
                        "id": "pendingidentifier",
                        "title": "pendingIdentifier",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | null`}   />\n\nWhen a request has been made to change the User's identifier, the new identifier\nwill be stored here until it has been verified, after which it will\nreplace the current value of the `identifier` field.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class NativeAuthenticationMethod extends AuthenticationMethod {",
                    "    constructor(input?: DeepPartial<NativeAuthenticationMethod>)",
                    "    @Column()",
                    "    identifier: string;",
                    "    @Column({ select: false }) passwordHash: string;",
                    "    @Column({ type: 'varchar', nullable: true })",
                    "    verificationToken: string | null;",
                    "    @Column({ type: 'varchar', nullable: true })",
                    "    passwordResetToken: string | null;",
                    "    @Column({ type: 'varchar', nullable: true })",
                    "    identifierChangeToken: string | null;",
                    "    @Column({ type: 'varchar', nullable: true })",
                    "    pendingIdentifier: string | null;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "authenticationstrategy",
        "metadata": {
            "title": "AuthenticationStrategy",
            "keywords": [
                "authenticationstrategy",
                "name",
                "defineinputtype",
                "authenticate",
                "onlogout"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/auth/authentication-strategy.ts\" sourceLine=\"23\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "authenticationstrategy",
                "title": "AuthenticationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/auth/authentication-strategy.ts\" sourceLine=\"23\" packageName=\"@vendure/core\" />\n\nAn AuthenticationStrategy defines how a User (which can be a Customer in the Shop API or\nand Administrator in the Admin API) may be authenticated.\n\nReal-world examples can be found in the [Authentication guide](/guides/core-concepts/auth/).\n\n:::info\n\nThis is configured via the `authOptions.shopAuthenticationStrategy` and `authOptions.adminAuthenticationStrategy`\nproperties of your VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe name of the strategy, for example `'facebook'`, `'google'`, `'keycloak'`.\n"
                    },
                    {
                        "id": "defineinputtype",
                        "title": "defineInputType",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => DocumentNode`}   />\n\nDefines the type of the GraphQL Input object expected by the `authenticate`\nmutation. The final input object will be a map, with the key being the name\nof the strategy. The shape of the input object should match the generic `Data`\ntype argument.\n\n*Example*\n\nFor example, given the following:\n\n\nassuming the strategy name is \"my_auth\", then the resulting call to `authenticate`\nwould look like:\n\n\n**Note:** if more than one graphql `input` type is being defined (as in a nested input type), then\nthe _first_ input will be assumed to be the top-level input.\n"
                    },
                    {
                        "id": "authenticate",
                        "title": "authenticate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, data: Data) => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a> | false | string&#62;`}   />\n\nUsed to authenticate a user with the authentication provider. This method\nwill implement the provider-specific authentication logic, and should resolve to either a\n<a href='/reference/typescript-api/entities/user#user'>User</a> object on success, or `false | string` on failure.\nA `string` return could be used to describe what error happened, otherwise `false` to an unknown error.\n"
                    },
                    {
                        "id": "onlogout",
                        "title": "onLogOut",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>) => Promise&#60;void&#62;`}   />\n\nCalled when a user logs out, and may perform any required tasks\nrelated to the user logging out with the external provider.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface AuthenticationStrategy<Data = unknown> extends InjectableStrategy {",
                    "    readonly name: string;",
                    "    defineInputType(): DocumentNode;",
                    "    authenticate(ctx: RequestContext, data: Data): Promise<User | false | string>;",
                    "    onLogOut?(ctx: RequestContext, user: User): Promise<void>;",
                    "}",
                    "defineInputType() {",
                    "  return gql`",
                    "     input MyAuthInput {",
                    "       token: String!",
                    "     }",
                    "  `;",
                    "}",
                    "authenticate(input: {",
                    "  my_auth: {",
                    "    token: \"foo\"",
                    "  }",
                    "}) {",
                    "  # ...",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "authoptions",
        "metadata": {
            "title": "AuthOptions",
            "keywords": [
                "authoptions",
                "disableauth",
                "tokenmethod",
                "cookieoptions",
                "authtokenheaderkey",
                "sessionduration",
                "sessioncachestrategy",
                "sessioncachettl",
                "requireverification",
                "verificationtokenduration",
                "superadmincredentials",
                "shopauthenticationstrategy",
                "adminauthenticationstrategy",
                "custompermissions",
                "passwordhashingstrategy",
                "passwordvalidationstrategy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"308\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "authoptions",
                "title": "AuthOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"308\" packageName=\"@vendure/core\" />\n\nThe AuthOptions define how authentication and authorization is managed.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "disableauth",
                        "title": "disableAuth",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nDisable authentication & permissions checks.\nNEVER set the to true in production. It exists\nonly to aid certain development tasks.\n"
                    },
                    {
                        "id": "tokenmethod",
                        "title": "tokenMethod",
                        "content": "\n<MemberInfo kind=\"property\" type={`'cookie' | 'bearer' | ReadonlyArray&#60;'cookie' | 'bearer'&#62;`} default=\"'cookie'\"   />\n\nSets the method by which the session token is delivered and read.\n\n* 'cookie': Upon login, a 'Set-Cookie' header will be returned to the client, setting a\n  cookie containing the session token. A browser-based client (making requests with credentials)\n  should automatically send the session cookie with each request.\n* 'bearer': Upon login, the token is returned in the response and should be then stored by the\n  client app. Each request should include the header `Authorization: Bearer <token>`.\n\nNote that if the bearer method is used, Vendure will automatically expose the configured\n`authTokenHeaderKey` in the server's CORS configuration (adding `Access-Control-Expose-Headers: vendure-auth-token`\nby default).\n\nFrom v1.2.0 it is possible to specify both methods as a tuple: `['cookie', 'bearer']`.\n"
                    },
                    {
                        "id": "cookieoptions",
                        "title": "cookieOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/auth/cookie-options#cookieoptions'>CookieOptions</a>`}   />\n\nOptions related to the handling of cookies when using the 'cookie' tokenMethod.\n"
                    },
                    {
                        "id": "authtokenheaderkey",
                        "title": "authTokenHeaderKey",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'vendure-auth-token'\"   />\n\nSets the header property which will be used to send the auth token when using the 'bearer' method.\n"
                    },
                    {
                        "id": "sessionduration",
                        "title": "sessionDuration",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | number`} default=\"'1y'\"   />\n\nSession duration, i.e. the time which must elapse from the last authenticated request\nafter which the user must re-authenticate.\n\nExpressed as a string describing a time span per\n[zeit/ms](https://github.com/zeit/ms.js).  Eg: `60`, `'2 days'`, `'10h'`, `'7d'`\n"
                    },
                    {
                        "id": "sessioncachestrategy",
                        "title": "sessionCacheStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/auth/session-cache-strategy#sessioncachestrategy'>SessionCacheStrategy</a>`} default=\"<a href='/reference/typescript-api/auth/in-memory-session-cache-strategy#inmemorysessioncachestrategy'>InMemorySessionCacheStrategy</a>\"   />\n\nThis strategy defines how sessions will be cached. By default, sessions are cached using a simple\nin-memory caching strategy which is suitable for development and low-traffic, single-instance\ndeployments.\n"
                    },
                    {
                        "id": "sessioncachettl",
                        "title": "sessionCacheTTL",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"300\"   />\n\nThe \"time to live\" of a given item in the session cache. This determines the length of time (in seconds)\nthat a cache entry is kept before being considered \"stale\" and being replaced with fresh data\ntaken from the database.\n"
                    },
                    {
                        "id": "requireverification",
                        "title": "requireVerification",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nDetermines whether new User accounts require verification of their email address.\n\nIf set to \"true\", when registering via the `registerCustomerAccount` mutation, one should *not* set the\n`password` property - doing so will result in an error. Instead, the password is set at a later stage\n(once the email with the verification token has been opened) via the `verifyCustomerAccount` mutation.\n"
                    },
                    {
                        "id": "verificationtokenduration",
                        "title": "verificationTokenDuration",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | number`} default=\"'7d'\"   />\n\nSets the length of time that a verification token is valid for, after which the verification token must be refreshed.\n\nExpressed as a string describing a time span per\n[zeit/ms](https://github.com/zeit/ms.js).  Eg: `60`, `'2 days'`, `'10h'`, `'7d'`\n"
                    },
                    {
                        "id": "superadmincredentials",
                        "title": "superadminCredentials",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/auth/superadmin-credentials#superadmincredentials'>SuperadminCredentials</a>`}   />\n\nConfigures the credentials to be used to create a superadmin\n"
                    },
                    {
                        "id": "shopauthenticationstrategy",
                        "title": "shopAuthenticationStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/auth/authentication-strategy#authenticationstrategy'>AuthenticationStrategy</a>[]`} default=\"<a href='/reference/typescript-api/auth/native-authentication-strategy#nativeauthenticationstrategy'>NativeAuthenticationStrategy</a>\"   />\n\nConfigures one or more AuthenticationStrategies which defines how authentication\nis handled in the Shop API.\n"
                    },
                    {
                        "id": "adminauthenticationstrategy",
                        "title": "adminAuthenticationStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/auth/authentication-strategy#authenticationstrategy'>AuthenticationStrategy</a>[]`} default=\"<a href='/reference/typescript-api/auth/native-authentication-strategy#nativeauthenticationstrategy'>NativeAuthenticationStrategy</a>\"   />\n\nConfigures one or more AuthenticationStrategy which defines how authentication\nis handled in the Admin API.\n"
                    },
                    {
                        "id": "custompermissions",
                        "title": "customPermissions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/auth/permission-definition#permissiondefinition'>PermissionDefinition</a>[]`} default=\"[]\"   />\n\nAllows custom Permissions to be defined, which can be used to restrict access to custom\nGraphQL resolvers defined in plugins.\n"
                    },
                    {
                        "id": "passwordhashingstrategy",
                        "title": "passwordHashingStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/auth/password-hashing-strategy#passwordhashingstrategy'>PasswordHashingStrategy</a>`} default=\"<a href='/reference/typescript-api/auth/bcrypt-password-hashing-strategy#bcryptpasswordhashingstrategy'>BcryptPasswordHashingStrategy</a>\"  since=\"1.3.0\"  />\n\nAllows you to customize the way passwords are hashed when using the <a href='/reference/typescript-api/auth/native-authentication-strategy#nativeauthenticationstrategy'>NativeAuthenticationStrategy</a>.\n"
                    },
                    {
                        "id": "passwordvalidationstrategy",
                        "title": "passwordValidationStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/auth/password-validation-strategy#passwordvalidationstrategy'>PasswordValidationStrategy</a>`} default=\"<a href='/reference/typescript-api/auth/default-password-validation-strategy#defaultpasswordvalidationstrategy'>DefaultPasswordValidationStrategy</a>\"  since=\"1.5.0\"  />\n\nAllows you to set a custom policy for passwords when using the <a href='/reference/typescript-api/auth/native-authentication-strategy#nativeauthenticationstrategy'>NativeAuthenticationStrategy</a>.\nBy default, it uses the <a href='/reference/typescript-api/auth/default-password-validation-strategy#defaultpasswordvalidationstrategy'>DefaultPasswordValidationStrategy</a>, which will impose a minimum length\nof four characters. To improve security for production, you are encouraged to specify a more strict\npolicy, which you can do like this:\n\n*Example*\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface AuthOptions {",
                    "    disableAuth?: boolean;",
                    "    tokenMethod?: 'cookie' | 'bearer' | ReadonlyArray<'cookie' | 'bearer'>;",
                    "    cookieOptions?: CookieOptions;",
                    "    authTokenHeaderKey?: string;",
                    "    sessionDuration?: string | number;",
                    "    sessionCacheStrategy?: SessionCacheStrategy;",
                    "    sessionCacheTTL?: number;",
                    "    requireVerification?: boolean;",
                    "    verificationTokenDuration?: string | number;",
                    "    superadminCredentials?: SuperadminCredentials;",
                    "    shopAuthenticationStrategy?: AuthenticationStrategy[];",
                    "    adminAuthenticationStrategy?: AuthenticationStrategy[];",
                    "    customPermissions?: PermissionDefinition[];",
                    "    passwordHashingStrategy?: PasswordHashingStrategy;",
                    "    passwordValidationStrategy?: PasswordValidationStrategy;",
                    "}",
                    "{",
                    "  passwordValidationStrategy: new DefaultPasswordValidationStrategy({",
                    "    // Minimum eight characters, at least one letter and one number",
                    "    regexp: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/,",
                    "  }),",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "authservice",
        "metadata": {
            "title": "AuthService",
            "keywords": [
                "authservice",
                "constructor",
                "authenticate",
                "createauthenticatedsessionforuser",
                "verifyuserpassword",
                "destroyauthenticatedsession"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/auth.service.ts\" sourceLine=\"36\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "authservice",
                "title": "AuthService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/auth.service.ts\" sourceLine=\"36\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/session#session'>Session</a>, <a href='/reference/typescript-api/entities/authenticated-session#authenticatedsession'>AuthenticatedSession</a> & <a href='/reference/typescript-api/entities/anonymous-session#anonymoussession'>AnonymousSession</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, sessionService: <a href='/reference/typescript-api/services/session-service#sessionservice'>SessionService</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>) => AuthService`}   />\n\n\n"
                    },
                    {
                        "id": "authenticate",
                        "title": "authenticate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, apiType: <a href='/reference/typescript-api/request/api-type#apitype'>ApiType</a>, authenticationMethod: string, authenticationData: any) => Promise&#60;<a href='/reference/typescript-api/entities/authenticated-session#authenticatedsession'>AuthenticatedSession</a> | InvalidCredentialsError | NotVerifiedError&#62;`}   />\n\nAuthenticates a user's credentials and if okay, creates a new <a href='/reference/typescript-api/entities/authenticated-session#authenticatedsession'>AuthenticatedSession</a>.\n"
                    },
                    {
                        "id": "createauthenticatedsessionforuser",
                        "title": "createAuthenticatedSessionForUser",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>, authenticationStrategyName: string) => Promise&#60;<a href='/reference/typescript-api/entities/authenticated-session#authenticatedsession'>AuthenticatedSession</a> | NotVerifiedError&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "verifyuserpassword",
                        "title": "verifyUserPassword",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, userId: <a href='/reference/typescript-api/common/id#id'>ID</a>, password: string) => Promise&#60;boolean | InvalidCredentialsError | ShopInvalidCredentialsError&#62;`}   />\n\nVerify the provided password against the one we have for the given user. Requires\nthe <a href='/reference/typescript-api/auth/native-authentication-strategy#nativeauthenticationstrategy'>NativeAuthenticationStrategy</a> to be configured.\n"
                    },
                    {
                        "id": "destroyauthenticatedsession",
                        "title": "destroyAuthenticatedSession",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, sessionToken: string) => Promise&#60;void&#62;`}   />\n\nDeletes all sessions for the user associated with the given session token.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class AuthService {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, sessionService: SessionService, eventBus: EventBus)",
                    "    authenticate(ctx: RequestContext, apiType: ApiType, authenticationMethod: string, authenticationData: any) => Promise<AuthenticatedSession | InvalidCredentialsError | NotVerifiedError>;",
                    "    createAuthenticatedSessionForUser(ctx: RequestContext, user: User, authenticationStrategyName: string) => Promise<AuthenticatedSession | NotVerifiedError>;",
                    "    verifyUserPassword(ctx: RequestContext, userId: ID, password: string) => Promise<boolean | InvalidCredentialsError | ShopInvalidCredentialsError>;",
                    "    destroyAuthenticatedSession(ctx: RequestContext, sessionToken: string) => Promise<void>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "basedetailcomponent",
        "metadata": {
            "title": "BaseDetailComponent",
            "keywords": [
                "basedetailcomponent",
                "entity$",
                "availablelanguages$",
                "languagecode$",
                "languagecode",
                "isnew$",
                "id",
                "detailform",
                "destroy$",
                "constructor",
                "init",
                "setupstreams",
                "destroy",
                "setlanguage",
                "candeactivate",
                "setformvalues",
                "setcustomfieldformvalues",
                "getcustomfieldconfig",
                "setqueryparam"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/base-detail.component.ts\" sourceLine=\"56\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "basedetailcomponent",
                "title": "BaseDetailComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/base-detail.component.ts\" sourceLine=\"56\" packageName=\"@vendure/admin-ui\" />\n\nA base class for entity detail views. It should be used in conjunction with the\n<a href='/reference/admin-ui-api/list-detail-views/base-entity-resolver#baseentityresolver'>BaseEntityResolver</a>.\n\n*Example*\n\n\n* Implements: <code>DeactivateAware</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "entity$",
                        "title": "entity$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;Entity&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "availablelanguages$",
                        "title": "availableLanguages$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "languagecode$",
                        "title": "languageCode$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "languagecode",
                        "title": "languageCode",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>`}   />\n\n\n"
                    },
                    {
                        "id": "isnew$",
                        "title": "isNew$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;boolean&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "detailform",
                        "title": "detailForm",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormGroup`}   />\n\n\n"
                    },
                    {
                        "id": "destroy$",
                        "title": "destroy$",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(route: ActivatedRoute, router: Router, serverConfigService: ServerConfigService, dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>) => BaseDetailComponent`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "setupstreams",
                        "title": "setUpStreams",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "destroy",
                        "title": "destroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "setlanguage",
                        "title": "setLanguage",
                        "content": "\n<MemberInfo kind=\"method\" type={`(code: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "candeactivate",
                        "title": "canDeactivate",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => boolean`}   />\n\n\n"
                    },
                    {
                        "id": "setformvalues",
                        "title": "setFormValues",
                        "content": "\n<MemberInfo kind=\"method\" type={`(entity: Entity, languageCode: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>) => void`}   />\n\n\n"
                    },
                    {
                        "id": "setcustomfieldformvalues",
                        "title": "setCustomFieldFormValues",
                        "content": "\n<MemberInfo kind=\"method\" type={`(customFields: <a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[], formGroup: AbstractControl | null, entity: T, currentTranslation?: TranslationOf&#60;T&#62;) => `}   />\n\n\n"
                    },
                    {
                        "id": "getcustomfieldconfig",
                        "title": "getCustomFieldConfig",
                        "content": "\n<MemberInfo kind=\"method\" type={`(key: Exclude&#60;keyof <a href='/reference/typescript-api/custom-fields/#customfields'>CustomFields</a>, '__typename'&#62;) => <a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "setqueryparam",
                        "title": "setQueryParam",
                        "content": "\n<MemberInfo kind=\"method\" type={`(key: string, value: any) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "@Component({",
                    "  selector: 'app-my-entity',",
                    "  templateUrl: './my-entity.component.html',",
                    "  styleUrls: ['./my-entity.component.scss'],",
                    "  changeDetection: ChangeDetectionStrategy.OnPush,",
                    "})",
                    "export class GlobalSettingsComponent extends BaseDetailComponent<MyEntityFragment> implements OnInit {",
                    "  detailForm: FormGroup;",
                    "",
                    "  constructor(",
                    "    router: Router,",
                    "    route: ActivatedRoute,",
                    "    serverConfigService: ServerConfigService,",
                    "    protected dataService: DataService,",
                    "    private formBuilder: FormBuilder,",
                    "  ) {",
                    "    super(route, router, serverConfigService, dataService);",
                    "    this.detailForm = this.formBuilder.group({",
                    "      name: [''],",
                    "    });",
                    "  }",
                    "",
                    "  protected setFormValues(entity: MyEntityFragment, languageCode: LanguageCode): void {",
                    "    this.detailForm.patchValue({",
                    "      name: entity.name,",
                    "    });",
                    "  }",
                    "}",
                    "class BaseDetailComponent<Entity extends { id: string; updatedAt?: string }> implements DeactivateAware {",
                    "    entity$: Observable<Entity>;",
                    "    availableLanguages$: Observable<LanguageCode[]>;",
                    "    languageCode$: Observable<LanguageCode>;",
                    "    languageCode: LanguageCode;",
                    "    isNew$: Observable<boolean>;",
                    "    id: string;",
                    "    abstract detailForm: UntypedFormGroup;",
                    "    protected destroy$ = new Subject<void>();",
                    "    constructor(route: ActivatedRoute, router: Router, serverConfigService: ServerConfigService, dataService: DataService)",
                    "    init() => ;",
                    "    setUpStreams() => ;",
                    "    destroy() => ;",
                    "    setLanguage(code: LanguageCode) => ;",
                    "    canDeactivate() => boolean;",
                    "    setFormValues(entity: Entity, languageCode: LanguageCode) => void;",
                    "    setCustomFieldFormValues(customFields: CustomFieldConfig[], formGroup: AbstractControl | null, entity: T, currentTranslation?: TranslationOf<T>) => ;",
                    "    getCustomFieldConfig(key: Exclude<keyof CustomFields, '__typename'>) => CustomFieldConfig[];",
                    "    setQueryParam(key: string, value: any) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "baseentityresolver",
        "metadata": {
            "title": "BaseEntityResolver",
            "keywords": [
                "baseentityresolver",
                "constructor"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/base-entity-resolver.ts\" sourceLine=\"55\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "baseentityresolver",
                "title": "BaseEntityResolver",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/base-entity-resolver.ts\" sourceLine=\"55\" packageName=\"@vendure/admin-ui\" />\n\nA base resolver for an entity detail route. Resolves to an observable of the given entity, or a \"blank\"\nversion if the route id equals \"create\". Should be used together with details views which extend the\n<a href='/reference/admin-ui-api/list-detail-views/base-detail-component#basedetailcomponent'>BaseDetailComponent</a>.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(router: Router, emptyEntity: T, entityStream: (id: string) =&#62; Observable&#60;T | null | undefined&#62;) => BaseEntityResolver`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "@Injectable({",
                    "  providedIn: 'root',",
                    "})",
                    "export class MyEntityResolver extends BaseEntityResolver<MyEntityFragment> {",
                    "  constructor(router: Router, dataService: DataService) {",
                    "    super(",
                    "      router,",
                    "      {",
                    "        __typename: 'MyEntity',",
                    "        id: '',",
                    "        createdAt: '',",
                    "        updatedAt: '',",
                    "        name: '',",
                    "      },",
                    "      id => dataService.query(GET_MY_ENTITY, { id }).mapStream(data => data.myEntity),",
                    "    );",
                    "  }",
                    "}",
                    "class BaseEntityResolver<T> {",
                    "    constructor(router: Router, emptyEntity: T, entityStream: (id: string) => Observable<T | null | undefined>)",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "baselistcomponent",
        "metadata": {
            "title": "BaseListComponent",
            "keywords": [
                "baselistcomponent",
                "searchtermcontrol",
                "selectionmanager",
                "result$",
                "items$",
                "totalitems$",
                "itemsperpage$",
                "currentpage$",
                "destroy$",
                "refresh$",
                "constructor",
                "setqueryfn",
                "refreshlistonchanges",
                "setpagenumber",
                "setitemsperpage",
                "refresh",
                "setqueryparam"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/base-list.component.ts\" sourceLine=\"39\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "baselistcomponent",
                "title": "BaseListComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/base-list.component.ts\" sourceLine=\"39\" packageName=\"@vendure/admin-ui\" />\n\nThis is a base class which implements the logic required to fetch and manipulate\na list of data from a query which returns a PaginatedList type.\n\nIt is normally used in combination with the <a href='/reference/admin-ui-api/components/data-table2component#datatable2component'>DataTable2Component</a>.\n\n* Implements: <code>OnInit</code>, <code>OnDestroy</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "searchtermcontrol",
                        "title": "searchTermControl",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "selectionmanager",
                        "title": "selectionManager",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "result$",
                        "title": "result$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;ResultType&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "items$",
                        "title": "items$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;ItemType[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "totalitems$",
                        "title": "totalItems$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;number&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "itemsperpage$",
                        "title": "itemsPerPage$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;number&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "currentpage$",
                        "title": "currentPage$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;number&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "destroy$",
                        "title": "destroy$",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "refresh$",
                        "title": "refresh$",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(router: Router, route: ActivatedRoute) => BaseListComponent`}   />\n\n\n"
                    },
                    {
                        "id": "setqueryfn",
                        "title": "setQueryFn",
                        "content": "\n<MemberInfo kind=\"method\" type={`(listQueryFn: ListQueryFn&#60;ResultType&#62;, mappingFn: MappingFn&#60;ItemType, ResultType&#62;, onPageChangeFn?: OnPageChangeFn&#60;VariableType&#62;, defaults?: { take: number; skip: number }) => `}   />\n\nSets the fetch function for the list being implemented.\n"
                    },
                    {
                        "id": "refreshlistonchanges",
                        "title": "refreshListOnChanges",
                        "content": "\n<MemberInfo kind=\"method\" type={`(streams: Array&#60;Observable&#60;any&#62;&#62;) => `}   />\n\nAccepts a list of Observables which will trigger a refresh of the list when any of them emit.\n"
                    },
                    {
                        "id": "setpagenumber",
                        "title": "setPageNumber",
                        "content": "\n<MemberInfo kind=\"method\" type={`(page: number) => `}   />\n\nSets the current page number in the url.\n"
                    },
                    {
                        "id": "setitemsperpage",
                        "title": "setItemsPerPage",
                        "content": "\n<MemberInfo kind=\"method\" type={`(perPage: number) => `}   />\n\nSets the number of items per page in the url.\n"
                    },
                    {
                        "id": "refresh",
                        "title": "refresh",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\nRe-fetch the current page of results.\n"
                    },
                    {
                        "id": "setqueryparam",
                        "title": "setQueryParam",
                        "content": "\n<MemberInfo kind=\"method\" type={`(hash: { [key: string]: any }, options?: { replaceUrl?: boolean; queryParamsHandling?: QueryParamsHandling }) => `}   />\n\n\n"
                    },
                    {
                        "id": "setqueryparam",
                        "title": "setQueryParam",
                        "content": "\n<MemberInfo kind=\"method\" type={`(key: string, value: any, options?: { replaceUrl?: boolean; queryParamsHandling?: QueryParamsHandling }) => `}   />\n\n\n"
                    },
                    {
                        "id": "setqueryparam",
                        "title": "setQueryParam",
                        "content": "\n<MemberInfo kind=\"method\" type={`(keyOrHash: string | { [key: string]: any }, valueOrOptions?: any, maybeOptions?: { replaceUrl?: boolean; queryParamsHandling?: QueryParamsHandling }) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class BaseListComponent<ResultType, ItemType, VariableType extends Record<string, any> = any> implements OnInit, OnDestroy {",
                    "    searchTermControl = new FormControl('');",
                    "    selectionManager = new SelectionManager<any>({",
                    "        multiSelect: true,",
                    "        itemsAreEqual: (a, b) => a.id === b.id,",
                    "        additiveMode: true,",
                    "    });",
                    "    result$: Observable<ResultType>;",
                    "    items$: Observable<ItemType[]>;",
                    "    totalItems$: Observable<number>;",
                    "    itemsPerPage$: Observable<number>;",
                    "    currentPage$: Observable<number>;",
                    "    protected destroy$ = new Subject<void>();",
                    "    protected refresh$ = new BehaviorSubject<undefined>(undefined);",
                    "    constructor(router: Router, route: ActivatedRoute)",
                    "    setQueryFn(listQueryFn: ListQueryFn<ResultType>, mappingFn: MappingFn<ItemType, ResultType>, onPageChangeFn?: OnPageChangeFn<VariableType>, defaults?: { take: number; skip: number }) => ;",
                    "    refreshListOnChanges(streams: Array<Observable<any>>) => ;",
                    "    setPageNumber(page: number) => ;",
                    "    setItemsPerPage(perPage: number) => ;",
                    "    refresh() => ;",
                    "    setQueryParam(hash: { [key: string]: any }, options?: { replaceUrl?: boolean; queryParamsHandling?: QueryParamsHandling }) => ;",
                    "    setQueryParam(key: string, value: any, options?: { replaceUrl?: boolean; queryParamsHandling?: QueryParamsHandling }) => ;",
                    "    setQueryParam(keyOrHash: string | { [key: string]: any }, valueOrOptions?: any, maybeOptions?: { replaceUrl?: boolean; queryParamsHandling?: QueryParamsHandling }) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "bcryptpasswordhashingstrategy",
        "metadata": {
            "title": "BcryptPasswordHashingStrategy",
            "keywords": [
                "bcryptpasswordhashingstrategy",
                "hash",
                "check"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/auth/bcrypt-password-hashing-strategy.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" since=\"1.3.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "bcryptpasswordhashingstrategy",
                "title": "BcryptPasswordHashingStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/auth/bcrypt-password-hashing-strategy.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" since=\"1.3.0\" />\n\nA hashing strategy which uses bcrypt (https://en.wikipedia.org/wiki/Bcrypt) to hash plaintext password strings.\n\n* Implements: <code><a href='/reference/typescript-api/auth/password-hashing-strategy#passwordhashingstrategy'>PasswordHashingStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "hash",
                        "title": "hash",
                        "content": "\n<MemberInfo kind=\"method\" type={`(plaintext: string) => Promise&#60;string&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "check",
                        "title": "check",
                        "content": "\n<MemberInfo kind=\"method\" type={`(plaintext: string, hash: string) => Promise&#60;boolean&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class BcryptPasswordHashingStrategy implements PasswordHashingStrategy {",
                    "    hash(plaintext: string) => Promise<string>;",
                    "    check(plaintext: string, hash: string) => Promise<boolean>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "bigintmoneystrategy",
        "metadata": {
            "title": "BigIntMoneyStrategy",
            "keywords": [
                "bigintmoneystrategy",
                "moneycolumnoptions",
                "round"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/entity/bigint-money-strategy.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "bigintmoneystrategy",
                "title": "BigIntMoneyStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/entity/bigint-money-strategy.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nA <a href='/reference/typescript-api/money/money-strategy#moneystrategy'>MoneyStrategy</a> that stores monetary values as a `bigint` type in the database, which\nallows values up to ~9 quadrillion to be stored (limited by JavaScript's `MAX_SAFE_INTEGER` limit).\n\nThis strategy also slightly differs in the way rounding is performed, with rounding being done _after_\nmultiplying the unit price, rather than before (as is the case with the <a href='/reference/typescript-api/money/default-money-strategy#defaultmoneystrategy'>DefaultMoneyStrategy</a>.\n\n* Implements: <code><a href='/reference/typescript-api/money/money-strategy#moneystrategy'>MoneyStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "moneycolumnoptions",
                        "title": "moneyColumnOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`ColumnOptions`}   />\n\n\n"
                    },
                    {
                        "id": "round",
                        "title": "round",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: number, quantity:  = 1) => number`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class BigIntMoneyStrategy implements MoneyStrategy {",
                    "    readonly moneyColumnOptions: ColumnOptions = {",
                    "        type: 'bigint',",
                    "        transformer: {",
                    "            to: (entityValue: number) => {",
                    "                return entityValue;",
                    "            },",
                    "            from: (databaseValue: string): number => {",
                    "                if (databaseValue == null) {",
                    "                    return databaseValue;",
                    "                }",
                    "                const intVal = Number.parseInt(databaseValue, 10);",
                    "                if (!Number.isSafeInteger(intVal)) {",
                    "                    Logger.warn(`Monetary value ${databaseValue} is not a safe integer!`);",
                    "                }",
                    "                if (Number.isNaN(intVal)) {",
                    "                    Logger.warn(`Monetary value ${databaseValue} is not a number!`);",
                    "                }",
                    "                return intVal;",
                    "            },",
                    "        },",
                    "    };",
                    "    round(value: number, quantity:  = 1) => number;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "bootstrap",
        "metadata": {
            "title": "Bootstrap",
            "keywords": [
                "bootstrap",
                "userconfig"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/bootstrap.ts\" sourceLine=\"44\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "bootstrap",
                "title": "bootstrap",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/bootstrap.ts\" sourceLine=\"44\" packageName=\"@vendure/core\" />\n\nBootstraps the Vendure server. This is the entry point to the application.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "userconfig",
                        "title": "userConfig",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`Partial&#60;<a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a>&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { bootstrap } from '@vendure/core';",
                    "import { config } from './vendure-config';",
                    "",
                    "bootstrap(config).catch(err => {",
                    "    console.log(err);",
                    "});",
                    "function bootstrap(userConfig: Partial<VendureConfig>): Promise<INestApplication>"
                ]
            }
        ]
    },
    {
        "id": "bootstrapworker",
        "metadata": {
            "title": "BootstrapWorker",
            "keywords": [
                "bootstrapworker",
                "userconfig"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/bootstrap.ts\" sourceLine=\"102\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "bootstrapworker",
                "title": "bootstrapWorker",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/bootstrap.ts\" sourceLine=\"102\" packageName=\"@vendure/core\" />\n\nBootstraps a Vendure worker. Resolves to a <a href='/reference/typescript-api/worker/vendure-worker#vendureworker'>VendureWorker</a> object containing a reference to the underlying\nNestJs [standalone application](https://docs.nestjs.com/standalone-applications) as well as convenience\nmethods for starting the job queue and health check server.\n\nRead more about the [Vendure Worker](/guides/developer-guide/worker-job-queue/).\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "userconfig",
                        "title": "userConfig",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`Partial&#60;<a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a>&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { bootstrapWorker } from '@vendure/core';",
                    "import { config } from './vendure-config';",
                    "",
                    "bootstrapWorker(config)",
                    "  .then(worker => worker.startJobQueue())",
                    "  .then(worker => worker.startHealthCheckServer({ port: 3020 }))",
                    "  .catch(err => {",
                    "    console.log(err);",
                    "  });",
                    "function bootstrapWorker(userConfig: Partial<VendureConfig>): Promise<VendureWorker>"
                ]
            }
        ]
    },
    {
        "id": "braintreeplugin",
        "metadata": {
            "title": "BraintreePlugin",
            "keywords": [
                "braintreeplugin",
                "requirements",
                "setup",
                "storefront usage",
                "or",
                "storing payment details (vaulting)",
                "options",
                "init",
                "braintreepluginoptions",
                "environment",
                "storecustomersinbraintree",
                "extractmetadata"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/payments-plugin/src/braintree/braintree.plugin.ts\" sourceLine=\"241\" packageName=\"@vendure/payments-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "braintreeplugin",
                "title": "BraintreePlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/payments-plugin/src/braintree/braintree.plugin.ts\" sourceLine=\"241\" packageName=\"@vendure/payments-plugin\" />\n\nThis plugin enables payments to be processed by [Braintree](https://www.braintreepayments.com/), a popular payment provider.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "requirements",
                "title": "Requirements",
                "content": "\n1. You will need to create a Braintree sandbox account as outlined in https://developers.braintreepayments.com/start/overview.\n2. Then install `braintree` and `@types/braintree` from npm. This plugin was written with `v3.x` of the Braintree lib.\n    ```shell\n    yarn add @vendure/payments-plugin braintree\n    yarn add -D @types/braintree\n    ```\n    or\n    ```shell\n    npm install @vendure/payments-plugin braintree\n    npm install -D @types/braintree\n    ```\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "setup",
                "title": "Setup",
                "content": "\n1. Add the plugin to your VendureConfig `plugins` array:\n    ```ts\n    import { BraintreePlugin } from '@vendure/payments-plugin/package/braintree';\n    import { Environment } from 'braintree';\n\n    // ...\n\n    plugins: [\n      BraintreePlugin.init({\n        environment: Environment.Sandbox,\n        // This allows saving customer payment\n        // methods with Braintree (see \"vaulting\"\n        // section below for details)\n        storeCustomersInBraintree: true,\n      }),\n    ]\n    ```\n2. Create a new PaymentMethod in the Admin UI, and select \"Braintree payments\" as the handler.\n2. Fill in the `Merchant ID`, `Public Key` & `Private Key` from your Braintree sandbox account.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "storefront-usage",
                "title": "Storefront usage",
                "content": "\nThe plugin is designed to work with the [Braintree drop-in UI](https://developers.braintreepayments.com/guides/drop-in/overview/javascript/v3).\nThis is a library provided by Braintree which will handle the payment UI for you. You can install it in your storefront project\nwith:\n\n\nThe high-level workflow is:\n1. Generate a \"client token\" on the server by executing the `generateBraintreeClientToken` mutation which is exposed by this plugin.\n2. Use this client token to instantiate the Braintree Dropin UI.\n3. Listen for the `\"paymentMethodRequestable\"` event which emitted by the Dropin.\n4. Use the Dropin's `requestPaymentMethod()` method to get the required payment metadata.\n5. Pass that metadata to the `addPaymentToOrder` mutation. The metadata should be an object of type `{ nonce: string; }`\n\nHere is an example of how your storefront code will look. Note that this example is attempting to\nbe framework-agnostic, so you'll need to adapt it to fit to your framework of choice.\n\n\n",
                "subsections": [],
                "code": [
                    "yarn add braintree-web-drop-in",
                    "# or",
                    "npm install braintree-web-drop-in",
                    "// The Braintree Dropin instance",
                    "let dropin: import('braintree-web-drop-in').Dropin;",
                    "",
                    "// Used to show/hide a \"submit\" button, which would be bound to the",
                    "// `submitPayment()` method below.",
                    "let showSubmitButton = false;",
                    "",
                    "// Used to display a \"processing...\" spinner",
                    "let processing = false;",
                    "",
                    "//",
                    "// This method would be invoked when the payment screen is mounted/created.",
                    "//",
                    "async function renderDropin(order: Order, clientToken: string) {",
                    "  // Lazy load braintree dropin because it has a reference",
                    "  // to `window` which breaks SSR",
                    "  dropin = await import('braintree-web-drop-in').then((module) =>",
                    "    module.default.create({",
                    "      authorization: clientToken,",
                    "      // This assumes a div in your view with the corresponding ID",
                    "      container: '#dropin-container',",
                    "      card: {",
                    "        cardholderName: {",
                    "            required: true,",
                    "        },",
                    "        overrides: {},",
                    "      },",
                    "      // Additional config is passed here depending on",
                    "      // which payment methods you have enabled in your",
                    "      // Braintree account.",
                    "      paypal: {",
                    "        flow: 'checkout',",
                    "        amount: order.totalWithTax / 100,",
                    "        currency: 'GBP',",
                    "      },",
                    "    }),",
                    "  );",
                    "",
                    "  // If you are using the `storeCustomersInBraintree` option, then the",
                    "  // customer might already have a stored payment method selected as",
                    "  // soon as the dropin script loads. In this case, show the submit",
                    "  // button immediately.",
                    "  if (dropin.isPaymentMethodRequestable()) {",
                    "    showSubmitButton = true;",
                    "  }",
                    "",
                    "  dropin.on('paymentMethodRequestable', (payload) => {",
                    "    if (payload.type === 'CreditCard') {",
                    "      showSubmitButton = true;",
                    "    }",
                    "    if (payload.type === 'PayPalAccount') {",
                    "      this.submitPayment();",
                    "    }",
                    "  });",
                    "",
                    "  dropin.on('noPaymentMethodRequestable', () => {",
                    "    // Display an error",
                    "  });",
                    "}",
                    "",
                    "async function generateClientToken() {",
                    "  const { generateBraintreeClientToken } = await graphQlClient.query(gql`",
                    "    query GenerateBraintreeClientToken {",
                    "      generateBraintreeClientToken",
                    "    }",
                    "  `);",
                    "  return generateBraintreeClientToken;",
                    "}",
                    "",
                    "async submitPayment() {",
                    "  if (!dropin.isPaymentMethodRequestable()) {",
                    "    return;",
                    "  }",
                    "  showSubmitButton = false;",
                    "  processing = true;",
                    "",
                    "  const paymentResult = await dropin.requestPaymentMethod();",
                    "",
                    "  const { addPaymentToOrder } = await graphQlClient.query(gql`",
                    "    mutation AddPayment($input: PaymentInput!) {",
                    "      addPaymentToOrder(input: $input) {",
                    "        ... on Order {",
                    "          id",
                    "          payments {",
                    "            id",
                    "            amount",
                    "            errorMessage",
                    "            method",
                    "            state",
                    "            transactionId",
                    "            createdAt",
                    "          }",
                    "        }",
                    "        ... on ErrorResult {",
                    "          errorCode",
                    "          message",
                    "        }",
                    "      }",
                    "    }`, {",
                    "      input: {",
                    "        method: 'braintree', // The code of you Braintree PaymentMethod",
                    "        metadata: paymentResult,",
                    "      },",
                    "    },",
                    "  );",
                    "",
                    "  switch (addPaymentToOrder?.__typename) {",
                    "      case 'Order':",
                    "          // Adding payment succeeded!",
                    "          break;",
                    "      case 'OrderStateTransitionError':",
                    "      case 'OrderPaymentStateError':",
                    "      case 'PaymentDeclinedError':",
                    "      case 'PaymentFailedError':",
                    "        // Display an error to the customer",
                    "        dropin.clearSelectedPaymentMethod();",
                    "  }",
                    "}"
                ]
            },
            {
                "id": "storing-payment-details-(vaulting)",
                "title": "Storing payment details (vaulting)",
                "content": "\nBraintree has a [vault feature](https://developer.paypal.com/braintree/articles/control-panel/vault/overview) which allows the secure storage\nof customer's payment information. Using the vault allows you to offer a faster checkout for repeat customers without needing to worry about\nhow to securely store payment details.\n\nTo enable this feature, set the `storeCustomersInBraintree` option to `true`.\n\n\nSince v1.8, it is possible to override vaulting on a per-payment basis by passing `includeCustomerId: false` to the `generateBraintreeClientToken`\nmutation:\n\n\nas well as in the metadata of the `addPaymentToOrder` mutation:\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/payments-plugin/braintree-plugin#braintreepluginoptions'>BraintreePluginOptions</a>`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/payments-plugin/braintree-plugin#braintreepluginoptions'>BraintreePluginOptions</a>) => Type&#60;<a href='/reference/core-plugins/payments-plugin/braintree-plugin#braintreeplugin'>BraintreePlugin</a>&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "BraintreePlugin.init({",
                    "  environment: Environment.Sandbox,",
                    "  storeCustomersInBraintree: true,",
                    "}),",
                    "const { generateBraintreeClientToken } = await graphQlClient.query(gql`",
                    "  query GenerateBraintreeClientToken($includeCustomerId: Boolean) {",
                    "    generateBraintreeClientToken(includeCustomerId: $includeCustomerId)",
                    "  }",
                    "`, { includeCustomerId: false });",
                    "const { addPaymentToOrder } = await graphQlClient.query(gql`",
                    "  mutation AddPayment($input: PaymentInput!) {",
                    "    addPaymentToOrder(input: $input) {",
                    "      ...Order",
                    "      ...ErrorResult",
                    "    }",
                    "  }`, {",
                    "    input: {",
                    "      method: 'braintree',",
                    "      metadata: {",
                    "        ...paymentResult,",
                    "        includeCustomerId: false,",
                    "      },",
                    "    }",
                    "  );",
                    "class BraintreePlugin {",
                    "    static options: BraintreePluginOptions = {};",
                    "    init(options: BraintreePluginOptions) => Type<BraintreePlugin>;",
                    "}"
                ]
            },
            {
                "id": "braintreepluginoptions",
                "title": "BraintreePluginOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/payments-plugin/src/braintree/types.ts\" sourceLine=\"25\" packageName=\"@vendure/payments-plugin\" />\n\nOptions for the Braintree plugin.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "environment",
                        "title": "environment",
                        "content": "\n<MemberInfo kind=\"property\" type={`Environment`} default=\"Environment.Sandbox\"   />\n\nThe Braintree environment being targeted, e.g. sandbox or production.\n"
                    },
                    {
                        "id": "storecustomersinbraintree",
                        "title": "storeCustomersInBraintree",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nIf set to `true`, a [Customer](https://developer.paypal.com/braintree/docs/guides/customers) object\nwill be created in Braintree, which allows the secure storage (\"vaulting\") of previously-used payment methods.\nThis is done by adding a custom field to the Customer entity to store the Braintree customer ID,\nso switching this on will require a database migration / synchronization.\n\nSince v1.8, it is possible to override vaulting on a per-payment basis by passing `includeCustomerId: false` to the\n`generateBraintreeClientToken` mutation.\n"
                    },
                    {
                        "id": "extractmetadata",
                        "title": "extractMetadata",
                        "content": "\n<MemberInfo kind=\"property\" type={`(transaction: <a href='/reference/typescript-api/request/transaction-decorator#transaction'>Transaction</a>) =&#62; PaymentMetadata`}  since=\"1.7.0\"  />\n\nAllows you to configure exactly what information from the Braintree\n[Transaction object](https://developer.paypal.com/braintree/docs/reference/response/transaction#result-object) (which is returned by the\n`transaction.sale()` method of the SDK) should be persisted to the resulting Payment entity metadata.\n\nBy default, the built-in extraction function will return a metadata object that looks like this:\n\n*Example*\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface BraintreePluginOptions {",
                    "    environment?: Environment;",
                    "    storeCustomersInBraintree?: boolean;",
                    "    extractMetadata?: (transaction: Transaction) => PaymentMetadata;",
                    "}",
                    "const metadata = {",
                    "  \"status\": \"settling\",",
                    "  \"currencyIsoCode\": \"GBP\",",
                    "  \"merchantAccountId\": \"my_account_id\",",
                    "  \"cvvCheck\": \"Not Applicable\",",
                    "  \"avsPostCodeCheck\": \"Not Applicable\",",
                    "  \"avsStreetAddressCheck\": \"Not Applicable\",",
                    "  \"processorAuthorizationCode\": null,",
                    "  \"processorResponseText\": \"Approved\",",
                    "  // for Paypal payments",
                    "  \"paymentMethod\": \"paypal_account\",",
                    "  \"paypalData\": {",
                    "    \"payerEmail\": \"michael-buyer@paypalsandbox.com\",",
                    "    \"paymentId\": \"PAYID-MLCXYNI74301746XK8807043\",",
                    "    \"authorizationId\": \"3BU93594D85624939\",",
                    "    \"payerStatus\": \"VERIFIED\",",
                    "    \"sellerProtectionStatus\": \"ELIGIBLE\",",
                    "    \"transactionFeeAmount\": \"0.54\"",
                    "  },",
                    "  // for credit card payments",
                    "  \"paymentMethod\": \"credit_card\",",
                    "  \"cardData\": {",
                    "    \"cardType\": \"MasterCard\",",
                    "    \"last4\": \"5454\",",
                    "    \"expirationDate\": \"02/2023\"",
                    "  }",
                    "  // publicly-available metadata that will be",
                    "  // readable from the Shop API",
                    "  \"public\": {",
                    "    \"cardData\": {",
                    "      \"cardType\": \"MasterCard\",",
                    "      \"last4\": \"5454\",",
                    "      \"expirationDate\": \"02/2023\"",
                    "    },",
                    "    \"paypalData\": {",
                    "      \"authorizationId\": \"3BU93594D85624939\",",
                    "    }",
                    "  }",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "breaking-api-changes",
        "metadata": {
            "title": "Breaking API Changes",
            "keywords": [
                "breaking api changes",
                "breaks from updated dependencies",
                "typescript",
                "apollo server & graphql",
                "typeorm",
                "vendure typescript api changes",
                "custom order / fulfillment / payment processes",
                "orderitem no longer exists",
                "productvariant stock changes",
                "new return type for channel, taxcategory & zone lists",
                "admin ui changes",
                "other breaking api changes"
            ],
            "description": "- v2 is built on TypeScript **v4.9.5**. You should update your TypeScript version to match this. Doing so is quite likely to reveal new compiler errors (as is usual with TypeScript minor release updates). - If you are using `ts-node`, update it to the latest version - If you are targeting `ES2022` or `ESNEXT` in your `tsconfig.json`, you'll need to set `\"useDefineForClassFields\": false`. See [this issue](https://github.com/vendure-ecommerce/vendure/issues/2099) for more context. If you have any custom ApolloServerPlugins, the plugin methods must now return a Promise. Example: ```diff"
        },
        "content": "",
        "sections": [
            {
                "id": "breaks-from-updated-dependencies",
                "title": "Breaks from updated dependencies",
                "content": "\n",
                "subsections": [
                    {
                        "id": "typescript",
                        "title": "TypeScript",
                        "content": "- v2 is built on TypeScript **v4.9.5**. You should update your TypeScript version to match this. Doing so is quite likely to reveal new compiler errors (as is usual with TypeScript minor release updates).\n- If you are using `ts-node`, update it to the latest version\n- If you are targeting `ES2022` or `ESNEXT` in your `tsconfig.json`, you'll need to set `\"useDefineForClassFields\": false`. See [this issue](https://github.com/vendure-ecommerce/vendure/issues/2099) for more context.\n\n"
                    },
                    {
                        "id": "apollo-server-&-graphql",
                        "title": "Apollo Server & GraphQL",
                        "content": "If you have any custom ApolloServerPlugins, the plugin methods must now return a Promise. Example:\n\n\nWith the update to GraphQL v16, you might run into issues with other packages in the GraphQL ecosystem that also depend on the `graphql` package, such as `graphql-code-generator`. In this case these packages will also need to be updated.\n\nFor instance, if you are using the \"typescript-compatibility\" plugin to generate namespaced types, you'll need to drop this, as it is [no longer maintained](https://the-guild.dev/blog/whats-new-in-graphql-codegen-v2#typescript-compatibility).\n\n"
                    },
                    {
                        "id": "typeorm",
                        "title": "TypeORM",
                        "content": "TypeORM 0.3.x introduced a large number of breaking changes. For a complete guide, see the [TypeORM v0.3.0 release notes](https://github.com/typeorm/typeorm/releases/tag/0.3.0). \n\nHere are the main API changes you'll likely need to make:\n\n- You can no longer compare to `null`, you need to use the new `IsNull()` helper:\n    ```diff\n    + import { IsNull } from 'typeorm';\n\n    - .find({ where: { deletedAt: null } })\n    + .find({ where: { deletedAt: IsNull() } })\n    ```\n- The `findOne()` method returns `null` rather than `undefined` if a record is not found.\n- The `findOne()` method no longer accepts an id argument. Lookup based on id must be done with a `where` clause:\n    ```diff\n    - .findOne(variantId)\n    + .findOne({ where: { id: variantId } })\n    ```\n- Where clauses must use an entity id rather than passing an entity itself:\n    ```diff\n    - .find({ where: { user } })\n    + .find({ where: { user: { id: user.id } } })\n    ```\n- The `findByIds()` method has been deprecated. Use the new `In` helper instead:\n    ```diff\n    + import { In } from 'typeorm';\n\n    - .findByIds(ids)\n    + .find({ where: { id: In(ids) } })\n    ```\n\n"
                    }
                ],
                "code": [
                    "export class TranslateErrorsPlugin implements ApolloServerPlugin {",
                    "   constructor(private i18nService: I18nService) {}",
                    "",
                    "-  requestDidStart(): GraphQLRequestListener {",
                    "+  async requestDidStart(): Promise<GraphQLRequestListener> {",
                    "     return {",
                    "-      willSendResponse: requestContext => {",
                    "+      willSendResponse: async requestContext => {",
                    "         const { errors, context } = requestContext;",
                    "         if (errors) {",
                    "           (requestContext.response as any).errors = errors.map(err => {",
                    "             return this.i18nService.translateError(context.req, err as GraphQLError) as any;",
                    "           });",
                    "         }",
                    "       },",
                    "     };",
                    "   }",
                    "}"
                ]
            },
            {
                "id": "vendure-typescript-api-changes",
                "title": "Vendure TypeScript API Changes",
                "content": "\n",
                "subsections": [
                    {
                        "id": "custom-order-/-fulfillment-/-payment-processes",
                        "title": "Custom Order / Fulfillment / Payment processes",
                        "content": "\nIn v2, the hard-coded states & transition logic for the Order, Fulfillment and Payment state machines has been extracted from the core services and instead reside in a default `OrderProcess`, `FulfillmentProcess` and `PaymentProcess` object. This allows you to _fully_ customize these flows without having to work around the assumptions & logic implemented by the default processes.\n\nWhat this means is that if you are defining a custom process, you'll now need to explicitly add the default process to the array.\n\n\nAlso note that `shippingOptions.customFulfillmentProcess` and `paymentOptions.customPaymentProcess` are both now renamed to `process`. The old names are still usable but are deprecated.\n\n"
                    },
                    {
                        "id": "orderitem-no-longer-exists",
                        "title": "OrderItem no longer exists",
                        "content": "\nAs a result of [#1981](https://github.com/vendure-ecommerce/vendure/issues/1981), the `OrderItem` entity no longer exists. The function and data of `OrderItem` is now transferred to `OrderLine`. As a result, the following APIs which previously used OrderItem arguments have now changed:\n\n- `FulfillmentHandler`\n- `ChangedPriceHandlingStrategy`\n- `PromotionItemAction`\n- `TaxLineCalculationStrategy`\n\nIf you have implemented any of these APIs, you'll need to check each one, remove the `OrderItem` argument from any methods that are using it,\nand update any logic as necessary.\n\nYou may also be joining the OrderItem relation in your own TypeORM queries, so you'll need to check for code like this:\n\n\nor \n\n\n"
                    },
                    {
                        "id": "productvariant-stock-changes",
                        "title": "ProductVariant stock changes",
                        "content": "\nWith [#1545](https://github.com/vendure-ecommerce/vendure/issues/1545) we have changed the way we model stock levels in order to support multiple stock locations. This means that the `ProductVariant.stockOnHand` and `ProductVariant.stockAllocated` properties no longer exist on the `ProductVariant` entity in TypeScript.\n\nInstead, this information is now located at `ProductVariant.stockLevels`, which is an array of [StockLevel]({{< relref \"stock-level\" >}}) entities.\n\n"
                    },
                    {
                        "id": "new-return-type-for-channel,-taxcategory-&-zone-lists",
                        "title": "New return type for Channel, TaxCategory & Zone lists",
                        "content": "\n- The `ChannelService.findAll()` method now returns a `PaginatedList<Channel>` instead of `Channel[]`. \n- The `channels` GraphQL query now returns a `PaginatedList` rather than a simple array of Channels.\n- The `TaxCategoryService.findAll()` method now returns a `PaginatedList<TaxCategory>` instead of `TaxCategory[]`.\n- The `taxCategories` GraphQL query now returns a `PaginatedList` rather than a simple array of TaxCategories.\n- The `ZoneService.findAll()` method now returns a `PaginatedList<Zone>` instead of `Zone[]`. The old behaviour of `ZoneService.findAll()` (all Zones, cached for rapid access) can now be found under the new `ZoneService.getAllWithMembers()` method.\n- The `zones` GraphQL query now returns a `PaginatedList` rather than a simple array of Zones. \n\n"
                    },
                    {
                        "id": "admin-ui-changes",
                        "title": "Admin UI changes",
                        "content": "\nIf you are using the `@vendure/ui-devkit` package to generate custom ui extensions, here are the breaking changes to be aware of:\n\n- As part of the major refresh to the Admin UI app, certain layout elements had be changed which can cause your custom routes to look bad. Wrapping all your custom pages in `<vdr-page-block>` (or `<div class=\"page-block\">` if not built with Angular components) will improve things. There will soon be a comprehensive guide published on how to create seamless ui extensions that look just like the built-in screens.\n- If you use any of the scoped method of the Admin UI `DataService`, you might find that some no longer exist. They are now deprecated and will eventually be removed. Use the `dataService.query()` and `dataService.mutation()` methods only, passing your own GraphQL documents:\n   ```ts\n    // Old way\n   this.dataService.product.getProducts().single$.subscribe(...);\n   ```\n   ```ts\n    // New way\n   const GET_PRODUCTS = gql`\n     query GetProducts {\n       products {\n         items {\n           id\n           name\n           # ... etc\n         }\n       }\n     }\n   `;\n   this.dataService.query(GET_PRODUCTS).single$.subscribe(...);\n   ```\n- The Admin UI component `vdr-product-selector` has been renamed to `vdr-product-variant-selector` to more accurately represent what it does. If you are using `vdr-product-selector` if any ui extensions code, update it to use the new selector.\n\n"
                    },
                    {
                        "id": "other-breaking-api-changes",
                        "title": "Other breaking API changes",
                        "content": "- **End-to-end tests using Jest** will likely run into issues due to our move towards using some dependencies that make use of ES modules. We have found the best solution to be to migrate tests over to [Vitest](https://vitest.dev), which can handle this and is also significantly faster than Jest. See the updated [Testing guide]({{< relref \"/guides/developer-guide/testing\" >}}) for instructions on getting started with Vitest.\n- Internal `ErrorResult` classes now take a single object argument rather than multiple args.\n- All monetary values are now represented in the GraphQL APIs with a new `Money` scalar type. If you use [graphql-code-generator](https://the-guild.dev/graphql/codegen), you'll want to tell it to treat this scalar as a number:\n    ```ts\n    import { CodegenConfig } from '@graphql-codegen/cli'\n \n    const config: CodegenConfig = {\n      schema: 'http://localhost:3000/shop-api',\n      documents: ['src/**/*graphql.ts'],\n      config: {\n        scalars: {\n          Money: 'number',\n        },\n      },\n      generates: {\n        // .. \n      }\n    };\n    ```\n- A new `Region` entity has been introduced, which is a base class for `Country` and the new `Province` entity. The `Zone.members` property is now an array of `Region` rather than `Country`, since Zones may now be composed of both countries and provinces. If you have defined any custom fields on `Country`, you'll need to change it to `Region` in your custom fields config.\n- If you are using the **s3 storage strategy** of the AssetServerPlugin, it has been updated to use v3 of the AWS SDKs. This update introduces an [improved modular architecture to the AWS sdk](https://aws.amazon.com/blogs/developer/modular-packages-in-aws-sdk-for-javascript/), resulting in smaller bundle sizes. You need to install the `@aws-sdk/client-s3` & `@aws-sdk/lib-storage` packages, and can remove the `aws-sdk` package. If you are using it in combination with MinIO, you'll also need to rename a config property and provide a region:\n   ```diff\n   nativeS3Configuration: {\n      endpoint: 'http://localhost:9000',\n   -  s3ForcePathStyle: true,\n   +  forcePathStyle: true,\n      signatureVersion: 'v4',\n   +  region: 'eu-west-1',\n   }\n   ```\n- The **Stripe plugin** has been made channel aware. This means your api key and webhook secret are now stored in the database, per channel, instead of environment variables.\n   To migrate to v2 of the Stripe plugin from @vendure/payments you need to:\n  1. Remove the apiKey and webhookSigningSecret from the plugin initialization in vendure-config.ts:\n       ```diff\n       StripePlugin.init({\n       -  apiKey: process.env.YOUR_STRIPE_SECRET_KEY,\n       -  webhookSigningSecret: process.env.YOUR_STRIPE_WEBHOOK_SIGNING_SECRET,\n          storeCustomersInStripe: true,\n       }),\n       ```\n  2. Start the server and login as administrator. For each channel that you'd like to use Stripe payments, you need to create a payment method with payment handler Stripe payment and the apiKey and webhookSigningSecret belonging to that channel's Stripe account.\n- If you are using the **BullMQJobQueuePlugin**, the minimum Redis recommended version is 6.2.0.\n- The `WorkerHealthIndicator` which was deprecated in v1.3.0 has been removed, as well as the `jobQueueOptions.enableWorkerHealthCheck` config option.\n- The `CustomerGroupEntityEvent` (fired on creation, update or deletion of a CustomerGroup) has been renamed to `CustomerGroupEvent`, and the former `CustomerGroupEvent` (fired when Customers are added to or removed from a group) has been renamed to `CustomerGroupChangeEvent`.\n- We introduced the [plugin compatibility API]({{< relref \"vendure-plugin-metadata\" >}}#compatibility) to allow plugins to indicate what version of Vendure they are compatible with. To avoid bootstrap messages you should add this property to your plugins.\n\n"
                    }
                ],
                "code": [
                    "+ import { defaultOrderProcess } from '@vendure/core';",
                    "",
                    "orderOptions: {",
                    "-  process: [myCustomOrderProcess],",
                    "+  process: [defaultOrderProcess, myCustomOrderProcess],",
                    "}",
                    "const order = await this.connection",
                    "  .getRepository(Order)",
                    "  .createQueryBuilder('order')",
                    "  .leftJoinAndSelect('order.lines', 'line')",
                    "- .leftJoinAndSelect('line.items', 'items')",
                    "const order = await this.connection",
                    "  .getRepository(Order)",
                    "  .findOne(ctx, orderId, {",
                    "-    relations: ['lines', 'lines.items'],",
                    "+    relations: ['lines'],",
                    "  });"
                ]
            }
        ]
    },
    {
        "id": "bulk-actions-for-list-views",
        "metadata": {
            "title": "Bulk Actions for List Views",
            "keywords": [
                "bulk action example",
                "conditionally displaying bulk actions"
            ],
            "description": "List views in the Admin UI support bulk actions, which are performed on any selected items in the list. There are a default set of bulk actions that are defined by the Admin UI itself (e.g. delete, assign to channels), but using the `@vendure/ui-devit` package you are also able to define your own bulk actions. ![./bulk-actions-screenshot.webp](./bulk-actions-screenshot.webp) Use cases for bulk actions include things like: - Sending multiple products to a 3rd-party localization service - Exporting selected products to csv"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "bulk-actions",
        "metadata": {
            "title": "Bulk Actions",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "bulkaction",
        "metadata": {
            "title": "BulkAction",
            "keywords": [
                "bulkaction",
                "location",
                "label",
                "gettranslationvars",
                "icon",
                "iconclass",
                "onclick",
                "isvisible",
                "requirespermission",
                "bulkactionlocationid",
                "bulkactionfunctioncontext",
                "selection",
                "hostcomponent",
                "injector",
                "route",
                "bulkactionclickcontext",
                "clearselection",
                "event"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/bulk-action-registry/bulk-action-types.ts\" sourceLine=\"99\" packageName=\"@vendure/admin-ui\" since=\"1.8.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "bulkaction",
                "title": "BulkAction",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/bulk-action-registry/bulk-action-types.ts\" sourceLine=\"99\" packageName=\"@vendure/admin-ui\" since=\"1.8.0\" />\n\nConfigures a bulk action which can be performed on all selected items in a list view.\n\nFor a full example, see the <a href='/reference/admin-ui-api/bulk-actions/register-bulk-action#registerbulkaction'>registerBulkAction</a> docs.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "location",
                        "title": "location",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/bulk-actions/bulk-action#bulkactionlocationid'>BulkActionLocationId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "label",
                        "title": "label",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "gettranslationvars",
                        "title": "getTranslationVars",
                        "content": "\n<MemberInfo kind=\"property\" type={`(\n         context: <a href='/reference/admin-ui-api/bulk-actions/bulk-action#bulkactionfunctioncontext'>BulkActionFunctionContext</a>&#60;ItemType, ComponentType&#62;,\n     ) =&#62; Record&#60;string, string | number&#62; | Promise&#60;Record&#60;string, string | number&#62;&#62;`}   />\n\nAn optional function that should resolve to a map of translation variables which can be\nused when translating the `label` string.\n"
                    },
                    {
                        "id": "icon",
                        "title": "icon",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nA valid [Clarity Icons](https://core.clarity.design/foundation/icons/shapes/) icon shape, e.g.\n\"cog\", \"user\", \"info-standard\".\n"
                    },
                    {
                        "id": "iconclass",
                        "title": "iconClass",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nA class to be added to the icon element. Examples:\n\n- is-success\n- is-danger\n- is-warning\n- is-info\n- is-highlight\n"
                    },
                    {
                        "id": "onclick",
                        "title": "onClick",
                        "content": "\n<MemberInfo kind=\"property\" type={`(context: <a href='/reference/admin-ui-api/bulk-actions/bulk-action#bulkactionclickcontext'>BulkActionClickContext</a>&#60;ItemType, ComponentType&#62;) =&#62; void`}   />\n\nDefines the logic that executes when the bulk action button is clicked.\n"
                    },
                    {
                        "id": "isvisible",
                        "title": "isVisible",
                        "content": "\n<MemberInfo kind=\"property\" type={`(context: <a href='/reference/admin-ui-api/bulk-actions/bulk-action#bulkactionfunctioncontext'>BulkActionFunctionContext</a>&#60;ItemType, ComponentType&#62;) =&#62; boolean | Promise&#60;boolean&#62;`}   />\n\nA function that determines whether this bulk action item should be displayed in the menu.\nIf not defined, the item will always be displayed.\n\nThis function will be invoked each time the selection is changed, so try to avoid expensive code\nrunning here.\n\n*Example*\n\n"
                    },
                    {
                        "id": "requirespermission",
                        "title": "requiresPermission",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | ((userPermissions: string[]) =&#62; boolean)`}   />\n\nControl the display of this item based on the user permissions.\n\n*Example*\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface BulkAction<ItemType = any, ComponentType = any> {",
                    "    location: BulkActionLocationId;",
                    "    label: string;",
                    "    getTranslationVars?: (",
                    "        context: BulkActionFunctionContext<ItemType, ComponentType>,",
                    "    ) => Record<string, string | number> | Promise<Record<string, string | number>>;",
                    "    icon?: string;",
                    "    iconClass?: string;",
                    "    onClick: (context: BulkActionClickContext<ItemType, ComponentType>) => void;",
                    "    isVisible?: (context: BulkActionFunctionContext<ItemType, ComponentType>) => boolean | Promise<boolean>;",
                    "    requiresPermission?: string | ((userPermissions: string[]) => boolean);",
                    "}",
                    "import { registerBulkAction, DataService } from '@vendure/admin-ui/core';",
                    "",
                    "registerBulkAction({",
                    "  location: 'product-list',",
                    "  label: 'Assign to channel',",
                    "  // Only display this action if there are multiple channels",
                    "  isVisible: ({ injector }) => injector.get(DataService).client",
                    "    .userStatus()",
                    "    .mapSingle(({ userStatus }) => 1 < userStatus.channels.length)",
                    "    .toPromise(),",
                    "  // ...",
                    "});",
                    "registerBulkAction({",
                    "  // Can be specified as a simple string",
                    "  requiresPermission: Permission.UpdateProduct,",
                    "",
                    "  // Or as a function that returns a boolean if permissions are satisfied",
                    "  requiresPermission: userPermissions =>",
                    "    userPermissions.includes(Permission.UpdateCatalog) ||",
                    "    userPermissions.includes(Permission.UpdateProduct),",
                    "  // ...",
                    "})"
                ]
            },
            {
                "id": "bulkactionlocationid",
                "title": "BulkActionLocationId",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/bulk-action-registry/bulk-action-types.ts\" sourceLine=\"12\" packageName=\"@vendure/admin-ui\" since=\"1.8.0\" />\n\nA valid location of a list view that supports the bulk actions API.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type BulkActionLocationId = | 'product-list'",
                    "    | 'facet-list'",
                    "    | 'collection-list'",
                    "    | 'customer-list'",
                    "    | 'customer-group-list'",
                    "    | 'customer-group-members-list'",
                    "    | 'customer-group-members-picker-list'",
                    "    | 'promotion-list'",
                    "    | 'seller-list'",
                    "    | 'channel-list'",
                    "    | 'administrator-list'",
                    "    | 'role-list'",
                    "    | 'shipping-method-list'",
                    "    | 'stock-location-list'",
                    "    | 'payment-method-list'",
                    "    | 'tax-category-list'",
                    "    | 'tax-rate-list'",
                    "    | 'zone-list'",
                    "    | 'zone-members-list'",
                    "    | string"
                ]
            },
            {
                "id": "bulkactionfunctioncontext",
                "title": "BulkActionFunctionContext",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/bulk-action-registry/bulk-action-types.ts\" sourceLine=\"43\" packageName=\"@vendure/admin-ui\" since=\"1.8.0\" />\n\nThis is the argument which gets passed to the `getTranslationVars` and `isVisible` functions\nof the BulkAction definition.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "selection",
                        "title": "selection",
                        "content": "\n<MemberInfo kind=\"property\" type={`ItemType[]`}   />\n\nAn array of the selected items from the list.\n"
                    },
                    {
                        "id": "hostcomponent",
                        "title": "hostComponent",
                        "content": "\n<MemberInfo kind=\"property\" type={`ComponentType`}   />\n\nThe component instance that is hosting the list view. For instance,\n`ProductListComponent`. This can be used to call methods on the instance,\ne.g. calling `hostComponent.refresh()` to force a list refresh after\ndeleting the selected items.\n"
                    },
                    {
                        "id": "injector",
                        "title": "injector",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/injector#injector'>Injector</a>`}   />\n\nThe Angular [Injector](https://angular.io/api/core/Injector) which can be used\nto get service instances which might be needed in the click handler.\n"
                    },
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={`ActivatedRoute`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface BulkActionFunctionContext<ItemType, ComponentType> {",
                    "    selection: ItemType[];",
                    "    hostComponent: ComponentType;",
                    "    injector: Injector;",
                    "    route: ActivatedRoute;",
                    "}"
                ]
            },
            {
                "id": "bulkactionclickcontext",
                "title": "BulkActionClickContext",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/bulk-action-registry/bulk-action-types.ts\" sourceLine=\"74\" packageName=\"@vendure/admin-ui\" since=\"1.8.0\" />\n\nThis is the argument which gets passed to the `onClick` function of a BulkAction.\n\n* Extends: <code><a href='/reference/admin-ui-api/bulk-actions/bulk-action#bulkactionfunctioncontext'>BulkActionFunctionContext</a>&#60;ItemType, ComponentType&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "clearselection",
                        "title": "clearSelection",
                        "content": "\n<MemberInfo kind=\"property\" type={`() =&#62; void`}   />\n\nClears the selection in the active list view.\n"
                    },
                    {
                        "id": "event",
                        "title": "event",
                        "content": "\n<MemberInfo kind=\"property\" type={`MouseEvent`}   />\n\nThe click event itself.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface BulkActionClickContext<ItemType, ComponentType> extends BulkActionFunctionContext<ItemType, ComponentType> {",
                    "    clearSelection: () => void;",
                    "    event: MouseEvent;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "bullmqjobqueueplugin",
        "metadata": {
            "title": "BullMQJobQueuePlugin",
            "keywords": [
                "bullmqjobqueueplugin",
                "advantages over the defaultjobqueueplugin",
                "installation",
                "running redis locally",
                "concurrency",
                "removing old jobs",
                "options",
                "init"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/job-queue-plugin/src/bullmq/plugin.ts\" sourceLine=\"134\" packageName=\"@vendure/job-queue-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "bullmqjobqueueplugin",
                "title": "BullMQJobQueuePlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/job-queue-plugin/src/bullmq/plugin.ts\" sourceLine=\"134\" packageName=\"@vendure/job-queue-plugin\" />\n\nThis plugin is a drop-in replacement of the DefaultJobQueuePlugin, which implements a push-based\njob queue strategy built on top of the popular [BullMQ](https://github.com/taskforcesh/bullmq) library.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "advantages-over-the-defaultjobqueueplugin",
                "title": "Advantages over the DefaultJobQueuePlugin",
                "content": "\nThe advantage of this approach is that jobs are stored in Redis rather than in the database. For more complex\napplications with many job queues and/or multiple worker instances, this can massively reduce the load on the\nDB server. The reason for this is that the DefaultJobQueuePlugin uses polling to check for new jobs. By default\nit will poll every 200ms. A typical Vendure instance uses at least 3 queues (handling emails, collections, search index),\nso even with a single worker instance this results in 15 queries per second to the DB constantly. Adding more\ncustom queues and multiple worker instances can easily result in 50 or 100 queries per second. At this point\nperformance may be impacted.\n\nUsing this plugin, no polling is needed, as BullMQ will _push_ jobs to the worker(s) as and when they are added\nto the queue. This results in significantly more scalable performance characteristics, as well as lower latency\nin processing jobs.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "installation",
                "title": "Installation",
                "content": "\n`yarn add @vendure/job-queue-plugin bullmq`\n\nor\n\n`npm install @vendure/job-queue-plugin bullmq`\n\n**Note:** The v1.x version of this plugin is designed to work with bullmq v1.x, etc.\n\n*Example*\n\n\n",
                "subsections": [
                    {
                        "id": "running-redis-locally",
                        "title": "Running Redis locally",
                        "content": "\nTo develop with this plugin, you'll need an instance of Redis to connect to. Here's a docker-compose config\nthat will set up [Redis](https://redis.io/) as well as [Redis Commander](https://github.com/joeferner/redis-commander),\nwhich is a web-based UI for interacting with Redis:\n\n\n"
                    }
                ],
                "code": [
                    "import { BullMQJobQueuePlugin } from '@vendure/job-queue-plugin/package/bullmq';",
                    "",
                    "const config: VendureConfig = {",
                    "  // Add an instance of the plugin to the plugins array",
                    "  plugins: [",
                    "    // DefaultJobQueuePlugin should be removed from the plugins array",
                    "    BullMQJobQueuePlugin.init({",
                    "      connection: {",
                    "        port: 6379",
                    "      }",
                    "    }),",
                    "  ],",
                    "};",
                    "version: \"3\"",
                    "services:",
                    "  redis:",
                    "    image: bitnami/redis:6.2",
                    "    hostname: redis",
                    "    container_name: redis",
                    "    environment:",
                    "      - ALLOW_EMPTY_PASSWORD=yes",
                    "    ports:",
                    "      - \"6379:6379\"",
                    "  redis-commander:",
                    "    container_name: redis-commander",
                    "    hostname: redis-commander",
                    "    image: rediscommander/redis-commander:latest",
                    "    environment:",
                    "      - REDIS_HOSTS=local:redis:6379",
                    "    ports:",
                    "      - \"8085:8081\""
                ]
            },
            {
                "id": "concurrency",
                "title": "Concurrency",
                "content": "\nThe default concurrency of a single worker is 3, i.e. up to 3 jobs will be processed at the same time.\nYou can change the concurrency in the `workerOptions` passed to the `init()` method:\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "const config: VendureConfig = {",
                    "  plugins: [",
                    "    BullMQJobQueuePlugin.init({",
                    "      workerOptions: {",
                    "        concurrency: 10,",
                    "      },",
                    "    }),",
                    "  ],",
                    "};"
                ]
            },
            {
                "id": "removing-old-jobs",
                "title": "Removing old jobs",
                "content": "\nBy default, BullMQ will keep completed jobs in the `completed` set and failed jobs in the `failed` set. Over time,\nthese sets can grow very large. Since Vendure v2.1, the default behaviour is to remove jobs from these sets after\n30 days or after a maximum of 5,000 completed or failed jobs.\n\nThis can be configured using the `removeOnComplete` and `removeOnFail` options:\n\n*Example*\n\n\nThe `count` option specifies the maximum number of jobs to keep in the set, while the `age` option specifies the\nmaximum age of a job in seconds. If both options are specified, then the jobs kept will be the ones that satisfy\nboth properties.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/job-queue-plugin/bull-mqplugin-options#bullmqpluginoptions'>BullMQPluginOptions</a>`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/job-queue-plugin/bull-mqplugin-options#bullmqpluginoptions'>BullMQPluginOptions</a>) => `}   />\n\nConfigures the plugin.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "const config: VendureConfig = {",
                    "  plugins: [",
                    "    BullMQJobQueuePlugin.init({",
                    "      workerOptions: {",
                    "        removeOnComplete: {",
                    "          count: 500,",
                    "        },",
                    "        removeOnFail: {",
                    "          age: 60 * 60 * 24 * 7, // 7 days",
                    "          count: 1000,",
                    "        },",
                    "      }",
                    "    }),",
                    "  ],",
                    "};",
                    "class BullMQJobQueuePlugin {",
                    "    static options: BullMQPluginOptions;",
                    "    init(options: BullMQPluginOptions) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "bullmqjobqueuestrategy",
        "metadata": {
            "title": "BullMQJobQueueStrategy",
            "keywords": [
                "bullmqjobqueuestrategy",
                "init",
                "destroy",
                "add",
                "canceljob",
                "findmany",
                "findmanybyid",
                "findone",
                "removesettledjobs",
                "start",
                "stop"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/job-queue-plugin/src/bullmq/bullmq-job-queue-strategy.ts\" sourceLine=\"40\" packageName=\"@vendure/job-queue-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "bullmqjobqueuestrategy",
                "title": "BullMQJobQueueStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/job-queue-plugin/src/bullmq/bullmq-job-queue-strategy.ts\" sourceLine=\"40\" packageName=\"@vendure/job-queue-plugin\" />\n\nThis JobQueueStrategy uses [BullMQ](https://docs.bullmq.io/) to implement a push-based job queue\non top of Redis. It should not be used alone, but as part of the <a href='/reference/core-plugins/job-queue-plugin/bull-mqjob-queue-plugin#bullmqjobqueueplugin'>BullMQJobQueuePlugin</a>.\n\n* Implements: <code><a href='/reference/typescript-api/job-queue/inspectable-job-queue-strategy#inspectablejobqueuestrategy'>InspectableJobQueueStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>) => Promise&#60;void&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "destroy",
                        "title": "destroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "add",
                        "title": "add",
                        "content": "\n<MemberInfo kind=\"method\" type={`(job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "canceljob",
                        "title": "cancelJob",
                        "content": "\n<MemberInfo kind=\"method\" type={`(jobId: string) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findmany",
                        "title": "findMany",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options?: JobListOptions) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findmanybyid",
                        "title": "findManyById",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ids: <a href='/reference/typescript-api/common/id#id'>ID</a>[]) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "removesettledjobs",
                        "title": "removeSettledJobs",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queueNames?: string[], olderThan?: Date) => Promise&#60;number&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "start",
                        "title": "start",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queueName: string, process: (job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;) =&#62; Promise&#60;any&#62;) => Promise&#60;void&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "stop",
                        "title": "stop",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queueName: string, process: (job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;) =&#62; Promise&#60;any&#62;) => Promise&#60;void&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class BullMQJobQueueStrategy implements InspectableJobQueueStrategy {",
                    "    init(injector: Injector) => Promise<void>;",
                    "    destroy() => ;",
                    "    add(job: Job<Data>) => Promise<Job<Data>>;",
                    "    cancelJob(jobId: string) => Promise<Job | undefined>;",
                    "    findMany(options?: JobListOptions) => Promise<PaginatedList<Job>>;",
                    "    findManyById(ids: ID[]) => Promise<Job[]>;",
                    "    findOne(id: ID) => Promise<Job | undefined>;",
                    "    removeSettledJobs(queueNames?: string[], olderThan?: Date) => Promise<number>;",
                    "    start(queueName: string, process: (job: Job<Data>) => Promise<any>) => Promise<void>;",
                    "    stop(queueName: string, process: (job: Job<Data>) => Promise<any>) => Promise<void>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "bullmqpluginoptions",
        "metadata": {
            "title": "BullMQPluginOptions",
            "keywords": [
                "bullmqpluginoptions",
                "connection",
                "queueoptions",
                "workeroptions",
                "setretries",
                "setbackoff",
                "backoffoptions",
                "type",
                "delay"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/job-queue-plugin/src/bullmq/types.ts\" sourceLine=\"14\" packageName=\"@vendure/job-queue-plugin\" since=\"1.2.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "bullmqpluginoptions",
                "title": "BullMQPluginOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/job-queue-plugin/src/bullmq/types.ts\" sourceLine=\"14\" packageName=\"@vendure/job-queue-plugin\" since=\"1.2.0\" />\n\nConfiguration options for the <a href='/reference/core-plugins/job-queue-plugin/bull-mqjob-queue-plugin#bullmqjobqueueplugin'>BullMQJobQueuePlugin</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "connection",
                        "title": "connection",
                        "content": "\n<MemberInfo kind=\"property\" type={`ConnectionOptions`}   />\n\nConnection options which will be passed directly to BullMQ when\ncreating a new Queue, Worker and Scheduler instance.\n\nIf omitted, it will attempt to connect to Redis at `127.0.0.1:6379`.\n"
                    },
                    {
                        "id": "queueoptions",
                        "title": "queueOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Exclude&#60;QueueOptions, 'connection'&#62;`}   />\n\nAdditional options used when instantiating the BullMQ\nQueue instance.\nSee the [BullMQ QueueOptions docs](https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/api/bullmq.queueoptions.md)\n"
                    },
                    {
                        "id": "workeroptions",
                        "title": "workerOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Exclude&#60;WorkerOptions, 'connection'&#62;`}   />\n\nAdditional options used when instantiating the BullMQ\nWorker instance.\nSee the [BullMQ WorkerOptions docs](https://github.com/taskforcesh/bullmq/blob/master/docs/gitbook/api/bullmq.workeroptions.md)\n"
                    },
                    {
                        "id": "setretries",
                        "title": "setRetries",
                        "content": "\n<MemberInfo kind=\"property\" type={`(queueName: string, job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>) =&#62; number`}  since=\"1.3.0\"  />\n\nWhen a job is added to the JobQueue using `JobQueue.add()`, the calling\ncode may specify the number of retries in case of failure. This option allows\nyou to override that number and specify your own number of retries based on\nthe job being added.\n\n*Example*\n\n"
                    },
                    {
                        "id": "setbackoff",
                        "title": "setBackoff",
                        "content": "setBackoff: (queueName, job) => {\n  return {\n    type: 'exponential', // or 'fixed'\n    delay: 10000 // first retry after 10s, second retry after 20s, 40s,...\n  };\n}\n"
                    }
                ],
                "code": [
                    "interface BullMQPluginOptions {",
                    "    connection?: ConnectionOptions;",
                    "    queueOptions?: Exclude<QueueOptions, 'connection'>;",
                    "    workerOptions?: Exclude<WorkerOptions, 'connection'>;",
                    "    setRetries?: (queueName: string, job: Job) => number;",
                    "    setBackoff?: (queueName: string, job: Job) => BackoffOptions | undefined;",
                    "}",
                    "setRetries: (queueName, job) => {",
                    "  if (queueName === 'send-email') {",
                    "    // Override the default number of retries",
                    "    // for the 'send-email' job because we have",
                    "    // a very unreliable email service.",
                    "    return 10;",
                    "  }",
                    "  return job.retries;",
                    "}",
                    " ```",
                    "",
                    "<MemberInfo kind=\"property\" type={`(queueName: string, job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>) =&#62; <a href='/reference/core-plugins/job-queue-plugin/bull-mqplugin-options#backoffoptions'>BackoffOptions</a> | undefined`} default=\"'exponential', 1000\"  since=\"1.3.0\"  />",
                    "",
                    "This allows you to specify the backoff settings when a failed job gets retried.",
                    "In other words, this determines how much time should pass before attempting to",
                    "process the failed job again. If the function returns `undefined`, the default",
                    "value of exponential/1000ms will be used.",
                    "",
                    "*Example*",
                    "",
                    "",
                    "",
                    "</div>",
                    "",
                    ""
                ]
            },
            {
                "id": "backoffoptions",
                "title": "BackoffOptions",
                "content": "interface BackoffOptions {\n    type: 'exponential' | 'fixed';\n    delay: number;\n}\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": ""
                    },
                    {
                        "id": "delay",
                        "title": "delay",
                        "content": ""
                    }
                ],
                "code": [
                    "",
                    "<GenerationInfo sourceFile=\"packages/job-queue-plugin/src/bullmq/types.ts\" sourceLine=\"91\" packageName=\"@vendure/job-queue-plugin\" since=\"1.3.0\" />",
                    "",
                    "Configuration for the backoff function when retrying failed jobs.",
                    "",
                    "",
                    "<div className=\"members-wrapper\">",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`'exponential' | 'fixed'`}   />",
                    "",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`number`}   />",
                    "",
                    "",
                    "",
                    "",
                    "</div>",
                    ""
                ]
            }
        ]
    },
    {
        "id": "cacheconfig",
        "metadata": {
            "title": "CacheConfig",
            "keywords": [
                "cacheconfig",
                "maxage",
                "restriction"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/asset-server-plugin/src/types.ts\" sourceLine=\"52\" packageName=\"@vendure/asset-server-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "cacheconfig",
                "title": "CacheConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/asset-server-plugin/src/types.ts\" sourceLine=\"52\" packageName=\"@vendure/asset-server-plugin\" />\n\nA configuration option for the Cache-Control header in the AssetServerPlugin asset response.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "maxage",
                        "title": "maxAge",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe max-age=N response directive indicates that the response remains fresh until N seconds after the response is generated.\n"
                    },
                    {
                        "id": "restriction",
                        "title": "restriction",
                        "content": "\n<MemberInfo kind=\"property\" type={`'public' | 'private'`}   />\n\nThe `private` response directive indicates that the response can be stored only in a private cache (e.g. local caches in browsers).\nThe `public` response directive indicates that the response can be stored in a shared cache.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "type CacheConfig = {",
                    "    maxAge: number;",
                    "    restriction?: 'public' | 'private';",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "calculated",
        "metadata": {
            "title": "Calculated",
            "keywords": [
                "calculated",
                "queryinstruction",
                "calculatedcolumnqueryinstruction",
                "relations",
                "query",
                "expression"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/calculated-decorator.ts\" sourceLine=\"43\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "calculated",
                "title": "Calculated",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/calculated-decorator.ts\" sourceLine=\"43\" packageName=\"@vendure/core\" />\n\nUsed to define calculated entity getters. The decorator simply attaches an array of \"calculated\"\nproperty names to the entity's prototype. This array is then used by the {@link CalculatedPropertySubscriber}\nto transfer the getter function from the prototype to the entity instance.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "queryinstruction",
                        "title": "queryInstruction",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/typescript-api/data-access/calculated#calculatedcolumnqueryinstruction'>CalculatedColumnQueryInstruction</a>`} />\n\n\n\n"
                    }
                ],
                "code": [
                    "function Calculated(queryInstruction?: CalculatedColumnQueryInstruction): MethodDecorator"
                ]
            },
            {
                "id": "calculatedcolumnqueryinstruction",
                "title": "CalculatedColumnQueryInstruction",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/calculated-decorator.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" />\n\nOptional metadata used to tell the <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a> & <a href='/reference/typescript-api/request/relations-decorator#relations'>Relations</a> decorator how to deal with\ncalculated columns when sorting, filtering and deriving required relations from GraphQL operations.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "relations",
                        "title": "relations",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`}   />\n\nIf the calculated property depends on one or more relations being present\non the entity (e.g. an `Order` entity calculating the `totalQuantity` by adding\nup the quantities of each `OrderLine`), then those relations should be defined here.\n"
                    },
                    {
                        "id": "query",
                        "title": "query",
                        "content": "\n<MemberInfo kind=\"property\" type={`(qb: SelectQueryBuilder&#60;any&#62;) =&#62; void`}   />\n\n\n"
                    },
                    {
                        "id": "expression",
                        "title": "expression",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface CalculatedColumnQueryInstruction {",
                    "    relations?: string[];",
                    "    query?: (qb: SelectQueryBuilder<any>) => void;",
                    "    expression?: string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "card",
        "metadata": {
            "title": "Card",
            "keywords": [
                "card",
                "props"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/Card.tsx\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "card",
                "title": "Card",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/Card.tsx\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />\n\nA card component which can be used to group related content.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "props",
                        "title": "props",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`PropsWithChildren&#60;{ title?: string; paddingX?: boolean }&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { Card } from '@vendure/admin-ui/react';",
                    "",
                    "export function MyComponent() {",
                    "  return (",
                    "    <Card title='My Title'>",
                    "      <p>Some content</p>",
                    "    </Card>",
                    "  );",
                    "}",
                    "function Card(props: PropsWithChildren<{ title?: string; paddingX?: boolean }>): void"
                ]
            }
        ]
    },
    {
        "id": "catalog",
        "metadata": {
            "title": "Catalog",
            "keywords": [],
            "description": ""
        },
        "content": "",
        "sections": []
    },
    {
        "id": "catalogoptions",
        "metadata": {
            "title": "CatalogOptions",
            "keywords": [
                "catalogoptions",
                "collectionfilters",
                "productvariantpriceselectionstrategy",
                "productvariantpricecalculationstrategy",
                "stockdisplaystrategy",
                "stocklocationstrategy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"653\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "catalogoptions",
                "title": "CatalogOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"653\" packageName=\"@vendure/core\" />\n\nOptions related to products and collections.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "collectionfilters",
                        "title": "collectionFilters",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/configuration/collection-filter#collectionfilter'>CollectionFilter</a>&#60;any&#62;&#62;`} default=\"defaultCollectionFilters\"   />\n\nAllows custom <a href='/reference/typescript-api/configuration/collection-filter#collectionfilter'>CollectionFilter</a>s to be defined.\n"
                    },
                    {
                        "id": "productvariantpriceselectionstrategy",
                        "title": "productVariantPriceSelectionStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configuration/product-variant-price-selection-strategy#productvariantpriceselectionstrategy'>ProductVariantPriceSelectionStrategy</a>`} default=\"<a href='/reference/typescript-api/configuration/product-variant-price-selection-strategy#defaultproductvariantpriceselectionstrategy'>DefaultProductVariantPriceSelectionStrategy</a>\"  since=\"2.0.0\"  />\n\nDefines the strategy used to select the price of a ProductVariant, based on factors\nsuch as the active Channel and active CurrencyCode.\n"
                    },
                    {
                        "id": "productvariantpricecalculationstrategy",
                        "title": "productVariantPriceCalculationStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/products-stock/product-variant-price-calculation-strategy#productvariantpricecalculationstrategy'>ProductVariantPriceCalculationStrategy</a>`} default=\"DefaultTaxCalculationStrategy\"   />\n\nDefines the strategy used for calculating the price of ProductVariants based\non the Channel settings and active tax Zone.\n"
                    },
                    {
                        "id": "stockdisplaystrategy",
                        "title": "stockDisplayStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/products-stock/stock-display-strategy#stockdisplaystrategy'>StockDisplayStrategy</a>`} default=\"<a href='/reference/typescript-api/products-stock/default-stock-display-strategy#defaultstockdisplaystrategy'>DefaultStockDisplayStrategy</a>\"   />\n\nDefines how the `ProductVariant.stockLevel` value is obtained. It is usually not desirable\nto directly expose stock levels over a public API, as this could be considered a leak of\nsensitive information. However, the storefront will usually want to display _some_ indication\nof whether a given ProductVariant is in stock. The default StockDisplayStrategy will\ndisplay \"IN_STOCK\", \"OUT_OF_STOCK\" or \"LOW_STOCK\" rather than exposing the actual saleable\nstock level.\n"
                    },
                    {
                        "id": "stocklocationstrategy",
                        "title": "stockLocationStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/products-stock/stock-location-strategy#stocklocationstrategy'>StockLocationStrategy</a>`} default=\"<a href='/reference/typescript-api/products-stock/default-stock-location-strategy#defaultstocklocationstrategy'>DefaultStockLocationStrategy</a>\"  since=\"2.0.0\"  />\n\nDefines the strategy used to determine which StockLocation should be used when performing\nstock operations such as allocating and releasing stock as well as determining the\namount of stock available for sale.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface CatalogOptions {",
                    "    collectionFilters?: Array<CollectionFilter<any>>;",
                    "    productVariantPriceSelectionStrategy?: ProductVariantPriceSelectionStrategy;",
                    "    productVariantPriceCalculationStrategy?: ProductVariantPriceCalculationStrategy;",
                    "    stockDisplayStrategy?: StockDisplayStrategy;",
                    "    stockLocationStrategy?: StockLocationStrategy;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "cdsicon",
        "metadata": {
            "title": "CdsIcon",
            "keywords": [
                "cdsicon",
                "props"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/CdsIcon.tsx\" sourceLine=\"47\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "cdsicon",
                "title": "CdsIcon",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/CdsIcon.tsx\" sourceLine=\"47\" packageName=\"@vendure/admin-ui\" />\n\nA React wrapper for the Clarity UI icon component.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "props",
                        "title": "props",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`{ icon: IconShapeTuple; className?: string } &#38; Partial&#60;CdsIconProps&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { userIcon } from '@cds/core/icon';",
                    "import { CdsIcon } from '@vendure/admin-ui/react';",
                    "",
                    "registerCdsIcon(userIcon);",
                    "export function MyComponent() {",
                    "   return <CdsIcon icon={userIcon} badge=\"warning\" solid size=\"lg\"></CdsIcon>;",
                    "}",
                    "function CdsIcon(props: { icon: IconShapeTuple; className?: string } & Partial<CdsIconProps>): void"
                ]
            }
        ]
    },
    {
        "id": "changedpricehandlingstrategy",
        "metadata": {
            "title": "ChangedPriceHandlingStrategy",
            "keywords": [
                "changedpricehandlingstrategy",
                "handlepricechange"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/changed-price-handling-strategy.ts\" sourceLine=\"24\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "changedpricehandlingstrategy",
                "title": "ChangedPriceHandlingStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/changed-price-handling-strategy.ts\" sourceLine=\"24\" packageName=\"@vendure/core\" />\n\nThis strategy defines how we handle the situation where an item exists in an Order, and\nthen later on another is added but in the meantime the price of the ProductVariant has changed.\n\nBy default, the latest price will be used. Any price changes resulting from using a newer price\nwill be reflected in the GraphQL `OrderLine.unitPrice[WithTax]ChangeSinceAdded` field.\n\n:::info\n\nThis is configured via the `orderOptions.changedPriceHandlingStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "handlepricechange",
                        "title": "handlePriceChange",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, current: <a href='/reference/typescript-api/common/price-calculation-result#pricecalculationresult'>PriceCalculationResult</a>, orderLine: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => <a href='/reference/typescript-api/common/price-calculation-result#pricecalculationresult'>PriceCalculationResult</a> | Promise&#60;<a href='/reference/typescript-api/common/price-calculation-result#pricecalculationresult'>PriceCalculationResult</a>&#62;`}   />\n\nThis method is called when adding to or adjusting OrderLines, if the latest price\n(as determined by the ProductVariant price, potentially modified by the configured\n<a href='/reference/typescript-api/orders/order-item-price-calculation-strategy#orderitempricecalculationstrategy'>OrderItemPriceCalculationStrategy</a>) differs from the initial price at the time\nthat the OrderLine was created.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ChangedPriceHandlingStrategy extends InjectableStrategy {",
                    "    handlePriceChange(",
                    "        ctx: RequestContext,",
                    "        current: PriceCalculationResult,",
                    "        orderLine: OrderLine,",
                    "        order: Order,",
                    "    ): PriceCalculationResult | Promise<PriceCalculationResult>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "channel",
        "metadata": {
            "title": "Channel",
            "keywords": [
                "channel",
                "constructor",
                "code",
                "token",
                "description",
                "seller",
                "sellerid",
                "defaultlanguagecode",
                "availablelanguagecodes",
                "defaulttaxzone",
                "defaultshippingzone",
                "defaultcurrencycode",
                "availablecurrencycodes",
                "trackinventory",
                "outofstockthreshold",
                "customfields",
                "pricesincludetax"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/channel/channel.entity.ts\" sourceLine=\"31\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "channel",
                "title": "Channel",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/channel/channel.entity.ts\" sourceLine=\"31\" packageName=\"@vendure/core\" />\n\nA Channel represents a distinct sales channel and configures defaults for that\nchannel.\n\n* Set a channel-specific currency, language, tax and shipping defaults\n* Assign only specific Products to the Channel (with Channel-specific prices)\n* Create Administrator roles limited to the Channel\n* Assign only specific StockLocations, Assets, Facets, Collections, Promotions, ShippingMethods & PaymentMethods to the Channel\n* Have Orders and Customers associated with specific Channels.\n\nIn Vendure, Channels have a number of different uses, such as:\n\n* Multi-region stores, where there is a distinct website for each territory with its own available inventory, pricing, tax and shipping rules.\n* Creating distinct rules and inventory for different sales channels such as Amazon.\n* Specialized stores offering a subset of the main inventory.\n* Implementing multi-vendor marketplace applications.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>&#62;) => Channel`}   />\n\n\n"
                    },
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe name of the Channel. For example \"US Webstore\" or \"German Webstore\".\n"
                    },
                    {
                        "id": "token",
                        "title": "token",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nA unique token (string) used to identify the Channel in the `vendure-token` header of the\nGraphQL API requests.\n"
                    },
                    {
                        "id": "description",
                        "title": "description",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "seller",
                        "title": "seller",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/seller#seller'>Seller</a>`}   />\n\n\n"
                    },
                    {
                        "id": "sellerid",
                        "title": "sellerId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "defaultlanguagecode",
                        "title": "defaultLanguageCode",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>`}   />\n\n\n"
                    },
                    {
                        "id": "availablelanguagecodes",
                        "title": "availableLanguageCodes",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "defaulttaxzone",
                        "title": "defaultTaxZone",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>`}   />\n\n\n"
                    },
                    {
                        "id": "defaultshippingzone",
                        "title": "defaultShippingZone",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>`}   />\n\n\n"
                    },
                    {
                        "id": "defaultcurrencycode",
                        "title": "defaultCurrencyCode",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/currency-code#currencycode'>CurrencyCode</a>`}   />\n\n\n"
                    },
                    {
                        "id": "availablecurrencycodes",
                        "title": "availableCurrencyCodes",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/currency-code#currencycode'>CurrencyCode</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "trackinventory",
                        "title": "trackInventory",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\nSpecifies the default value for inventory tracking for ProductVariants.\nCan be overridden per ProductVariant, but this value determines the default\nif not otherwise specified.\n"
                    },
                    {
                        "id": "outofstockthreshold",
                        "title": "outOfStockThreshold",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nSpecifies the value of stockOnHand at which a given ProductVariant is considered\nout of stock.\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomChannelFields`}   />\n\n\n"
                    },
                    {
                        "id": "pricesincludetax",
                        "title": "pricesIncludeTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Channel extends VendureEntity {",
                    "    constructor(input?: DeepPartial<Channel>)",
                    "    @Column({ unique: true })",
                    "    code: string;",
                    "    @Column({ unique: true })",
                    "    token: string;",
                    "    @Column({ default: '', nullable: true })",
                    "    description: string;",
                    "    @Index()",
                    "    @ManyToOne(type => Seller)",
                    "    seller?: Seller;",
                    "    @EntityId({ nullable: true })",
                    "    sellerId?: ID;",
                    "    @Column('varchar') defaultLanguageCode: LanguageCode;",
                    "    @Column({ type: 'simple-array', nullable: true })",
                    "    availableLanguageCodes: LanguageCode[];",
                    "    @Index()",
                    "    @ManyToOne(type => Zone)",
                    "    defaultTaxZone: Zone;",
                    "    @Index()",
                    "    @ManyToOne(type => Zone)",
                    "    defaultShippingZone: Zone;",
                    "    @Column('varchar')",
                    "    defaultCurrencyCode: CurrencyCode;",
                    "    @Column({ type: 'simple-array', nullable: true })",
                    "    availableCurrencyCodes: CurrencyCode[];",
                    "    @Column({ default: true })",
                    "    trackInventory: boolean;",
                    "    @Column({ default: 0 })",
                    "    outOfStockThreshold: number;",
                    "    @Column(type => CustomChannelFields)",
                    "    customFields: CustomChannelFields;",
                    "    @Column() pricesIncludeTax: boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "channels",
        "metadata": {
            "title": "Channels",
            "keywords": [
                "channels"
            ],
            "description": "Channels allow you to split your store into multiple sub-stores, each of which can have its own selection of inventory, customers, orders, shipping methods etc. There are various reasons why you might want to do this: * Creating distinct stores for different countries, each with country-specific pricing, shipping and payment rules. * Implementing a multi-tenant application where many merchants have their own store, each confined to its own channel. * Implementing a marketplace where each seller has their own channel."
        },
        "content": "",
        "sections": []
    },
    {
        "id": "channelservice",
        "metadata": {
            "title": "ChannelService",
            "keywords": [
                "channelservice",
                "constructor",
                "assigntocurrentchannel",
                "assigntochannels",
                "removefromchannels",
                "getchannelfromtoken",
                "getdefaultchannel",
                "findall",
                "findone",
                "create",
                "update",
                "delete",
                "ischannelaware"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/channel.service.ts\" sourceLine=\"54\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "channelservice",
                "title": "ChannelService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/channel.service.ts\" sourceLine=\"54\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/channel#channel'>Channel</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, globalSettingsService: <a href='/reference/typescript-api/services/global-settings-service#globalsettingsservice'>GlobalSettingsService</a>, customFieldRelationService: CustomFieldRelationService, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>) => ChannelService`}   />\n\n\n"
                    },
                    {
                        "id": "assigntocurrentchannel",
                        "title": "assignToCurrentChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(entity: T, ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;T&#62;`}   />\n\nAssigns a ChannelAware entity to the default Channel as well as any channel\nspecified in the RequestContext.\n"
                    },
                    {
                        "id": "assigntochannels",
                        "title": "assignToChannels",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entityType: Type&#60;T&#62;, entityId: <a href='/reference/typescript-api/common/id#id'>ID</a>, channelIds: <a href='/reference/typescript-api/common/id#id'>ID</a>[]) => Promise&#60;T&#62;`}   />\n\nAssigns the entity to the given Channels and saves.\n"
                    },
                    {
                        "id": "removefromchannels",
                        "title": "removeFromChannels",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entityType: Type&#60;T&#62;, entityId: <a href='/reference/typescript-api/common/id#id'>ID</a>, channelIds: <a href='/reference/typescript-api/common/id#id'>ID</a>[]) => Promise&#60;T | undefined&#62;`}   />\n\nRemoves the entity from the given Channels and saves.\n"
                    },
                    {
                        "id": "getchannelfromtoken",
                        "title": "getChannelFromToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`(token: string) => Promise&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>&#62;`}   />\n\nGiven a channel token, returns the corresponding Channel if it exists, else will throw\na <a href='/reference/typescript-api/errors/error-types#channelnotfounderror'>ChannelNotFoundError</a>.\n"
                    },
                    {
                        "id": "getchannelfromtoken",
                        "title": "getChannelFromToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, token: string) => Promise&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getchannelfromtoken",
                        "title": "getChannelFromToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctxOrToken: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> | string, token?: string) => Promise&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getdefaultchannel",
                        "title": "getDefaultChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx?: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>&#62;`}   />\n\nReturns the default Channel.\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>&#62;, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateChannelInput) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;CreateChannelResult, <a href='/reference/typescript-api/entities/channel#channel'>Channel</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateChannelInput) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;UpdateChannelResult, <a href='/reference/typescript-api/entities/channel#channel'>Channel</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "ischannelaware",
                        "title": "isChannelAware",
                        "content": "\n<MemberInfo kind=\"method\" type={`(entity: <a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a>) => entity is <a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a> &#38; <a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a>`}   />\n\nType guard method which returns true if the given entity is an\ninstance of a class which implements the <a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a> interface.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ChannelService {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, globalSettingsService: GlobalSettingsService, customFieldRelationService: CustomFieldRelationService, eventBus: EventBus, listQueryBuilder: ListQueryBuilder)",
                    "    assignToCurrentChannel(entity: T, ctx: RequestContext) => Promise<T>;",
                    "    assignToChannels(ctx: RequestContext, entityType: Type<T>, entityId: ID, channelIds: ID[]) => Promise<T>;",
                    "    removeFromChannels(ctx: RequestContext, entityType: Type<T>, entityId: ID, channelIds: ID[]) => Promise<T | undefined>;",
                    "    getChannelFromToken(token: string) => Promise<Channel>;",
                    "    getChannelFromToken(ctx: RequestContext, token: string) => Promise<Channel>;",
                    "    getChannelFromToken(ctxOrToken: RequestContext | string, token?: string) => Promise<Channel>;",
                    "    getDefaultChannel(ctx?: RequestContext) => Promise<Channel>;",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<Channel>, relations?: RelationPaths<Channel>) => Promise<PaginatedList<Channel>>;",
                    "    findOne(ctx: RequestContext, id: ID) => Promise<Channel | undefined>;",
                    "    create(ctx: RequestContext, input: CreateChannelInput) => Promise<ErrorResultUnion<CreateChannelResult, Channel>>;",
                    "    update(ctx: RequestContext, input: UpdateChannelInput) => Promise<ErrorResultUnion<UpdateChannelResult, Channel>>;",
                    "    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "    isChannelAware(entity: VendureEntity) => entity is VendureEntity & ChannelAware;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "checkshippingeligibilitycheckerfn",
        "metadata": {
            "title": "CheckShippingEligibilityCheckerFn",
            "keywords": [
                "checkshippingeligibilitycheckerfn"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-eligibility-checker.ts\" sourceLine=\"123\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "checkshippingeligibilitycheckerfn",
                "title": "CheckShippingEligibilityCheckerFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-eligibility-checker.ts\" sourceLine=\"123\" packageName=\"@vendure/core\" />\n\nA function which implements logic to determine whether a given <a href='/reference/typescript-api/entities/order#order'>Order</a> is eligible for\na particular shipping method. Once a ShippingMethod has been assigned to an Order, this\nfunction will be called on every change to the Order (e.g. updating quantities, adding/removing\nitems etc).\n\nIf the code running in this function is expensive, then consider also defining\na <a href='/reference/typescript-api/shipping/should-run-check-fn#shouldruncheckfn'>ShouldRunCheckFn</a> to avoid unnecessary calls.\n\n\n",
                "subsections": [],
                "code": [
                    "type CheckShippingEligibilityCheckerFn<T extends ConfigArgs> = (",
                    "    ctx: RequestContext,",
                    "    order: Order,",
                    "    args: ConfigArgValues<T>,",
                    "    method: ShippingMethod,",
                    ") => boolean | Promise<boolean>"
                ]
            }
        ]
    },
    {
        "id": "chipcomponent",
        "metadata": {
            "title": "ChipComponent",
            "keywords": [
                "chipcomponent",
                "icon",
                "invert",
                "colorfrom",
                "colortype",
                "iconclick"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/chip/chip.component.ts\" sourceLine=\"16\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "chipcomponent",
                "title": "ChipComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/chip/chip.component.ts\" sourceLine=\"16\" packageName=\"@vendure/admin-ui\" />\n\nA chip component for displaying a label with an optional action icon.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "icon",
                        "title": "icon",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe icon should be the name of one of the available Clarity icons: https://clarity.design/foundation/icons/shapes/\n"
                    },
                    {
                        "id": "invert",
                        "title": "invert",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "colorfrom",
                        "title": "colorFrom",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\nIf set, the chip will have an auto-generated background\ncolor based on the string value passed in.\n"
                    },
                    {
                        "id": "colortype",
                        "title": "colorType",
                        "content": "\n<MemberInfo kind=\"property\" type={`'error' | 'success' | 'warning'`}   />\n\nThe color of the chip can also be one of the standard status colors.\n"
                    },
                    {
                        "id": "iconclick",
                        "title": "iconClick",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<vdr-chip [colorFrom]=\"item.value\"",
                    "          icon=\"close\"",
                    "          (iconClick)=\"clear(item)\">",
                    "{{ item.value }}</vdr-chip>",
                    "class ChipComponent {",
                    "    @Input() icon: string;",
                    "    @Input() invert = false;",
                    "    @Input() colorFrom = '';",
                    "    @Input() colorType: 'error' | 'success' | 'warning';",
                    "    @Output() iconClick = new EventEmitter<MouseEvent>();",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "cli",
        "metadata": {
            "title": "CLI",
            "keywords": [
                "installation",
                "or",
                "running without installation",
                "scaffold a new plugin"
            ],
            "description": "The Vendure CLI is a command-line tool for boosting your productivity as a developer. Currently, it provides functionality for rapidly scaffolding a new plugin, and in future we will be expanding the capabilities to include other common tasks. :::info The Vendure CLI package was introduced with Vendure v2.1.0 :::"
        },
        "content": "",
        "sections": [
            {
                "id": "installation",
                "title": "Installation",
                "content": "\nYou can install the CLI locally in your Vendure project, or you can run it without installation using `npx`. The advantage of installing locally is that you can more easily control the installed version, and you can reference the CLI using the `vendure` command.\n\n\nand then from your project directory you can run:\n\n\n",
                "subsections": [
                    {
                        "id": "running-without-installation",
                        "title": "Running without installation",
                        "content": "\nIf you want to use the Vendure CLI without installing it in your project, you can run\n\n\n"
                    }
                ],
                "code": [
                    "npm install -D @vendure/cli",
                    "",
                    "# or ",
                    "",
                    "yarn add -D @vendure/cli",
                    "vendure --version",
                    "npx @vendure/cli --version"
                ]
            },
            {
                "id": "scaffold-a-new-plugin",
                "title": "Scaffold a new plugin",
                "content": "\nThe Vendure CLI can be used to quickly scaffold a new [plugin](/guides/developer-guide/plugins).\n\n1. Navigate to your plugins directory\n   ```bash\n   cd src/plugins\n   ```\n2. Run the `new plugin` command\n   ```bash\n   vendure new plugin\n   ```\n3. Answer the questions to configure your new plugin\n\n![Plugin creation flow](./new-plugin.webp)\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "collection",
        "metadata": {
            "title": "Collection",
            "keywords": [
                "collection",
                "constructor",
                "isroot",
                "position",
                "isprivate",
                "name",
                "description",
                "slug",
                "translations",
                "featuredasset",
                "assets",
                "filters",
                "inheritfilters",
                "productvariants",
                "customfields",
                "children",
                "parent",
                "parentid",
                "channels"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/collection/collection.entity.ts\" sourceLine=\"35\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "collection",
                "title": "Collection",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/collection/collection.entity.ts\" sourceLine=\"35\" packageName=\"@vendure/core\" />\n\nA Collection is a grouping of <a href='/reference/typescript-api/entities/product#product'>Product</a>s based on various configurable criteria.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#translatable'>Translatable</a></code>, <code>HasCustomFields</code>, <code><a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a></code>, <code><a href='/reference/typescript-api/entities/interfaces#orderable'>Orderable</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;) => Collection`}   />\n\n\n"
                    },
                    {
                        "id": "isroot",
                        "title": "isRoot",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "position",
                        "title": "position",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "isprivate",
                        "title": "isPrivate",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "description",
                        "title": "description",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "slug",
                        "title": "slug",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Translation&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "featuredasset",
                        "title": "featuredAsset",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>`}   />\n\n\n"
                    },
                    {
                        "id": "assets",
                        "title": "assets",
                        "content": "\n<MemberInfo kind=\"property\" type={`CollectionAsset[]`}   />\n\n\n"
                    },
                    {
                        "id": "filters",
                        "title": "filters",
                        "content": "\n<MemberInfo kind=\"property\" type={`ConfigurableOperation[]`}   />\n\n\n"
                    },
                    {
                        "id": "inheritfilters",
                        "title": "inheritFilters",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}  since=\"2.0.0\"  />\n\n\n"
                    },
                    {
                        "id": "productvariants",
                        "title": "productVariants",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomCollectionFields`}   />\n\n\n"
                    },
                    {
                        "id": "children",
                        "title": "children",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "parent",
                        "title": "parent",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>`}   />\n\n\n"
                    },
                    {
                        "id": "parentid",
                        "title": "parentId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Collection extends VendureEntity implements Translatable, HasCustomFields, ChannelAware, Orderable {",
                    "    constructor(input?: DeepPartial<Collection>)",
                    "    @Column({ default: false })",
                    "    isRoot: boolean;",
                    "    @Column()",
                    "    position: number;",
                    "    @Column({ default: false })",
                    "    isPrivate: boolean;",
                    "    name: LocaleString;",
                    "    description: LocaleString;",
                    "    slug: LocaleString;",
                    "    @OneToMany(type => CollectionTranslation, translation => translation.base, { eager: true })",
                    "    translations: Array<Translation<Collection>>;",
                    "    @Index()",
                    "    @ManyToOne(type => Asset, { onDelete: 'SET NULL' })",
                    "    featuredAsset: Asset;",
                    "    @OneToMany(type => CollectionAsset, collectionAsset => collectionAsset.collection)",
                    "    assets: CollectionAsset[];",
                    "    @Column('simple-json') filters: ConfigurableOperation[];",
                    "    @Column({ default: true }) inheritFilters: boolean;",
                    "    @ManyToMany(type => ProductVariant, productVariant => productVariant.collections)",
                    "    @JoinTable()",
                    "    productVariants: ProductVariant[];",
                    "    @Column(type => CustomCollectionFields)",
                    "    customFields: CustomCollectionFields;",
                    "    @TreeChildren()",
                    "    children: Collection[];",
                    "    @TreeParent()",
                    "    parent: Collection;",
                    "    @EntityId({ nullable: true })",
                    "    parentId: ID;",
                    "    @ManyToMany(type => Channel)",
                    "    @JoinTable()",
                    "    channels: Channel[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "collectionfilter",
        "metadata": {
            "title": "CollectionFilter",
            "keywords": [
                "collectionfilter",
                "constructor",
                "apply"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/catalog/collection-filter.ts\" sourceLine=\"64\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "collectionfilter",
                "title": "CollectionFilter",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/catalog/collection-filter.ts\" sourceLine=\"64\" packageName=\"@vendure/core\" />\n\nA CollectionFilter defines a rule which can be used to associate ProductVariants with a Collection.\nThe filtering is done by defining the `apply()` function, which receives a TypeORM\n[`QueryBuilder`](https://typeorm.io/#/select-query-builder) object to which clauses may be added.\n\nCreating a CollectionFilter is considered an advanced Vendure topic. For more insight into how\nthey work, study the [default collection filters](https://github.com/vendure-ecommerce/vendure/blob/master/packages/core/src/config/catalog/default-collection-filters.ts)\n\nHere's a simple example of a custom CollectionFilter:\n\n*Example*\n\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/#configurableoperationdef'>ConfigurableOperationDef</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: CollectionFilterConfig&#60;T&#62;) => CollectionFilter`}   />\n\n\n"
                    },
                    {
                        "id": "apply",
                        "title": "apply",
                        "content": "\n<MemberInfo kind=\"method\" type={`(qb: SelectQueryBuilder&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;, args: ConfigArg[]) => SelectQueryBuilder&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { CollectionFilter, LanguageCode } from '@vendure/core';",
                    "",
                    "export const skuCollectionFilter = new CollectionFilter({",
                    "  args: {",
                    "    // The `args` object defines the user-configurable arguments",
                    "    // which will get passed to the filter's `apply()` function.",
                    "    sku: {",
                    "      type: 'string',",
                    "      label: [{ languageCode: LanguageCode.en, value: 'SKU' }],",
                    "      description: [",
                    "        {",
                    "          languageCode: LanguageCode.en,",
                    "          value: 'Matches any product variants with SKUs containing this value',",
                    "        },",
                    "      ],",
                    "    },",
                    "  },",
                    "  code: 'variant-sku-filter',",
                    "  description: [{ languageCode: LanguageCode.en, value: 'Filter by matching SKU' }],",
                    "",
                    "  // This is the function that defines the logic of the filter.",
                    "  apply: (qb, args) => {",
                    "    const LIKE = qb.connection.options.type === 'postgres' ? 'ILIKE' : 'LIKE';",
                    "    return qb.andWhere(`productVariant.sku ${LIKE} :sku`, { sku: `%${args.sku}%` });",
                    "  },",
                    "});",
                    "class CollectionFilter<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {",
                    "    constructor(config: CollectionFilterConfig<T>)",
                    "    apply(qb: SelectQueryBuilder<ProductVariant>, args: ConfigArg[]) => SelectQueryBuilder<ProductVariant>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "collections",
        "metadata": {
            "title": "Collections",
            "keywords": [
                "collections",
                "populating collections",
                "nesting collections",
                "public vs private collections"
            ],
            "description": "Collections allow you to group ProductVariants together by various criteria. A typical use of Collections is to create a hierarchical category tree which can be used in a navigation menu in your storefront. Collections are _dynamic_, which means that you define a set of rules, and Vendure will automatically populate the Collection with ProductVariants according to those rules. The rules are defined by **filters**. A Collection can define multiple filters, for example: * Include all ProductVariants with a certain FacetValue * Include all ProductVariants whose name includes the word \"sale\""
        },
        "content": "",
        "sections": [
            {
                "id": "populating-collections",
                "title": "Populating Collections",
                "content": "\nCollections are _dynamic_, which means that you define a set of rules, and Vendure will automatically populate the Collection with ProductVariants according to those rules.\n\nThe rules are defined by **filters**. A Collection can define multiple filters, for example:\n\n* Include all ProductVariants with a certain FacetValue\n* Include all ProductVariants whose name includes the word \"sale\"\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "nesting-collections",
                "title": "Nesting Collections",
                "content": "\nCollections can be nested inside one another, as many levels deep as needed.\n\nWhen populating a nested Collection, its own filters _plus the filters of all Collections above it_ are used to calculate the contents.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "public-vs-private-collections",
                "title": "Public vs Private Collections",
                "content": "\nA Collection can be made private, meaning that it will not be available in the storefront. This can be useful when you need to organize your inventory for internal purposes.\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "collectionservice",
        "metadata": {
            "title": "CollectionService",
            "keywords": [
                "collectionservice",
                "constructor",
                "findall",
                "findone",
                "findbyids",
                "findonebyslug",
                "getavailablefilters",
                "getparent",
                "getchildren",
                "getbreadcrumbs",
                "getcollectionsbyproductid",
                "getdescendants",
                "getancestors",
                "previewcollectionvariants",
                "create",
                "update",
                "delete",
                "move",
                "getcollectionproductvariantids",
                "assigncollectionstochannel",
                "removecollectionsfromchannel"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/collection.service.ts\" sourceLine=\"66\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "collectionservice",
                "title": "CollectionService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/collection.service.ts\" sourceLine=\"66\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/collection#collection'>Collection</a> entities.\n\n* Implements: <code>OnModuleInit</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, channelService: <a href='/reference/typescript-api/services/channel-service#channelservice'>ChannelService</a>, assetService: <a href='/reference/typescript-api/services/asset-service#assetservice'>AssetService</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, translatableSaver: <a href='/reference/typescript-api/service-helpers/translatable-saver#translatablesaver'>TranslatableSaver</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, jobQueueService: <a href='/reference/typescript-api/job-queue/job-queue-service#jobqueueservice'>JobQueueService</a>, configService: ConfigService, slugValidator: <a href='/reference/typescript-api/service-helpers/slug-validator#slugvalidator'>SlugValidator</a>, configArgService: ConfigArgService, customFieldRelationService: CustomFieldRelationService, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>, roleService: <a href='/reference/typescript-api/services/role-service#roleservice'>RoleService</a>) => CollectionService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62; &#38; { topLevelOnly?: boolean }, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;Translated&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, collectionId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findbyids",
                        "title": "findByIds",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, ids: <a href='/reference/typescript-api/common/id#id'>ID</a>[], relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findonebyslug",
                        "title": "findOneBySlug",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, slug: string, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getavailablefilters",
                        "title": "getAvailableFilters",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => ConfigurableOperationDefinition[]`}   />\n\nReturns all configured CollectionFilters, as specified by the <a href='/reference/typescript-api/products-stock/catalog-options#catalogoptions'>CatalogOptions</a>.\n"
                    },
                    {
                        "id": "getparent",
                        "title": "getParent",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, collectionId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getchildren",
                        "title": "getChildren",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, collectionId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>[]&#62;`}   />\n\nReturns all child Collections of the Collection with the given id.\n"
                    },
                    {
                        "id": "getbreadcrumbs",
                        "title": "getBreadcrumbs",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, collection: <a href='/reference/typescript-api/entities/collection#collection'>Collection</a>) => Promise&#60;Array&#60;{ name: string; id: <a href='/reference/typescript-api/common/id#id'>ID</a> }&#62;&#62;`}   />\n\nReturns an array of name/id pairs representing all ancestor Collections up\nto the Root Collection.\n"
                    },
                    {
                        "id": "getcollectionsbyproductid",
                        "title": "getCollectionsByProductId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productId: <a href='/reference/typescript-api/common/id#id'>ID</a>, publicOnly: boolean) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;&#62;&#62;`}   />\n\nReturns all Collections which are associated with the given Product ID.\n"
                    },
                    {
                        "id": "getdescendants",
                        "title": "getDescendants",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, rootId: <a href='/reference/typescript-api/common/id#id'>ID</a>, maxDepth: number = Number.MAX_SAFE_INTEGER) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;&#62;&#62;`}   />\n\nReturns the descendants of a Collection as a flat array. The depth of the traversal can be limited\nwith the maxDepth argument. So to get only the immediate children, set maxDepth = 1.\n"
                    },
                    {
                        "id": "getancestors",
                        "title": "getAncestors",
                        "content": "\n<MemberInfo kind=\"method\" type={`(collectionId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>[]&#62;`}   />\n\nGets the ancestors of a given collection. Note that since ProductCategories are implemented as an adjacency list, this method\nwill produce more queries the deeper the collection is in the tree.\n"
                    },
                    {
                        "id": "getancestors",
                        "title": "getAncestors",
                        "content": "\n<MemberInfo kind=\"method\" type={`(collectionId: <a href='/reference/typescript-api/common/id#id'>ID</a>, ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getancestors",
                        "title": "getAncestors",
                        "content": "\n<MemberInfo kind=\"method\" type={`(collectionId: <a href='/reference/typescript-api/common/id#id'>ID</a>, ctx?: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62; | <a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "previewcollectionvariants",
                        "title": "previewCollectionVariants",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: PreviewCollectionVariantsInput, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateCollectionInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateCollectionInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "move",
                        "title": "move",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: MoveCollectionInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;&#62;`}   />\n\nMoves a Collection by specifying the parent Collection ID, and an index representing the order amongst\nits siblings.\n"
                    },
                    {
                        "id": "getcollectionproductvariantids",
                        "title": "getCollectionProductVariantIds",
                        "content": "\n<MemberInfo kind=\"method\" type={`(collection: <a href='/reference/typescript-api/entities/collection#collection'>Collection</a>, ctx?: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;<a href='/reference/typescript-api/common/id#id'>ID</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "assigncollectionstochannel",
                        "title": "assignCollectionsToChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: AssignCollectionsToChannelInput) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;&#62;&#62;`}   />\n\nAssigns Collections to the specified Channel\n"
                    },
                    {
                        "id": "removecollectionsfromchannel",
                        "title": "removeCollectionsFromChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: RemoveCollectionsFromChannelInput) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>&#62;&#62;&#62;`}   />\n\nRemove Collections from the specified Channel\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class CollectionService implements OnModuleInit {",
                    "    constructor(connection: TransactionalConnection, channelService: ChannelService, assetService: AssetService, listQueryBuilder: ListQueryBuilder, translatableSaver: TranslatableSaver, eventBus: EventBus, jobQueueService: JobQueueService, configService: ConfigService, slugValidator: SlugValidator, configArgService: ConfigArgService, customFieldRelationService: CustomFieldRelationService, translator: TranslatorService, roleService: RoleService)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<Collection> & { topLevelOnly?: boolean }, relations?: RelationPaths<Collection>) => Promise<PaginatedList<Translated<Collection>>>;",
                    "    findOne(ctx: RequestContext, collectionId: ID, relations?: RelationPaths<Collection>) => Promise<Translated<Collection> | undefined>;",
                    "    findByIds(ctx: RequestContext, ids: ID[], relations?: RelationPaths<Collection>) => Promise<Array<Translated<Collection>>>;",
                    "    findOneBySlug(ctx: RequestContext, slug: string, relations?: RelationPaths<Collection>) => Promise<Translated<Collection> | undefined>;",
                    "    getAvailableFilters(ctx: RequestContext) => ConfigurableOperationDefinition[];",
                    "    getParent(ctx: RequestContext, collectionId: ID) => Promise<Collection | undefined>;",
                    "    getChildren(ctx: RequestContext, collectionId: ID) => Promise<Collection[]>;",
                    "    getBreadcrumbs(ctx: RequestContext, collection: Collection) => Promise<Array<{ name: string; id: ID }>>;",
                    "    getCollectionsByProductId(ctx: RequestContext, productId: ID, publicOnly: boolean) => Promise<Array<Translated<Collection>>>;",
                    "    getDescendants(ctx: RequestContext, rootId: ID, maxDepth: number = Number.MAX_SAFE_INTEGER) => Promise<Array<Translated<Collection>>>;",
                    "    getAncestors(collectionId: ID) => Promise<Collection[]>;",
                    "    getAncestors(collectionId: ID, ctx: RequestContext) => Promise<Array<Translated<Collection>>>;",
                    "    getAncestors(collectionId: ID, ctx?: RequestContext) => Promise<Array<Translated<Collection> | Collection>>;",
                    "    previewCollectionVariants(ctx: RequestContext, input: PreviewCollectionVariantsInput, options?: ListQueryOptions<ProductVariant>, relations?: RelationPaths<Collection>) => Promise<PaginatedList<ProductVariant>>;",
                    "    create(ctx: RequestContext, input: CreateCollectionInput) => Promise<Translated<Collection>>;",
                    "    update(ctx: RequestContext, input: UpdateCollectionInput) => Promise<Translated<Collection>>;",
                    "    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "    move(ctx: RequestContext, input: MoveCollectionInput) => Promise<Translated<Collection>>;",
                    "    getCollectionProductVariantIds(collection: Collection, ctx?: RequestContext) => Promise<ID[]>;",
                    "    assignCollectionsToChannel(ctx: RequestContext, input: AssignCollectionsToChannelInput) => Promise<Array<Translated<Collection>>>;",
                    "    removeCollectionsFromChannel(ctx: RequestContext, input: RemoveCollectionsFromChannelInput) => Promise<Array<Translated<Collection>>>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "common",
        "metadata": {
            "title": "Common",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "compileuiextensions",
        "metadata": {
            "title": "CompileUiExtensions",
            "keywords": [
                "compileuiextensions",
                "options"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/compile.ts\" sourceLine=\"35\" packageName=\"@vendure/ui-devkit\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "compileuiextensions",
                "title": "compileUiExtensions",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/compile.ts\" sourceLine=\"35\" packageName=\"@vendure/ui-devkit\" />\n\nCompiles the Admin UI app with the specified extensions.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/ui-devkit/ui-extension-compiler-options#uiextensioncompileroptions'>UiExtensionCompilerOptions</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "function compileUiExtensions(options: UiExtensionCompilerOptions): AdminUiAppConfig | AdminUiAppDevModeConfig"
                ]
            }
        ]
    },
    {
        "id": "components",
        "metadata": {
            "title": "Components",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "configargs",
        "metadata": {
            "title": "ConfigArgs",
            "keywords": [
                "configargs",
                "data types",
                "lists",
                "ui component",
                "[index]"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/configurable-operation.ts\" sourceLine=\"140\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "configargs",
                "title": "ConfigArgs",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/configurable-operation.ts\" sourceLine=\"140\" packageName=\"@vendure/core\" />\n\nA object which defines the configurable arguments which may be passed to\nfunctions in those classes which implement the <a href='/reference/typescript-api/configurable-operation-def/#configurableoperationdef'>ConfigurableOperationDef</a> interface.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "data-types",
                "title": "Data types",
                "content": "Each argument has a data type, which must be one of <a href='/reference/typescript-api/configurable-operation-def/config-arg-type#configargtype'>ConfigArgType</a>.\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "{",
                    "  apiKey: { type: 'string' },",
                    "  maxRetries: { type: 'int' },",
                    "  logErrors: { type: 'boolean' },",
                    "}"
                ]
            },
            {
                "id": "lists",
                "title": "Lists",
                "content": "Setting the `list` property to `true` will make the argument into an array of the specified\ndata type. For example, if you want to store an array of strings:\n\n*Example*\n\nIn the Admin UI, this will be rendered as an orderable list of string inputs.\n\n",
                "subsections": [],
                "code": [
                    "{",
                    "  aliases: {",
                    "    type: 'string',",
                    "    list: true,",
                    "  },",
                    "}"
                ]
            },
            {
                "id": "ui-component",
                "title": "UI Component",
                "content": "The `ui` field allows you to specify a specific input component to be used in the Admin UI.\nWhen not set, a default input component is used appropriate to the data type.\n\n*Example*\n\nThe available components as well as their configuration options can be found in the <a href='/reference/typescript-api/configurable-operation-def/default-form-config-hash#defaultformconfighash'>DefaultFormConfigHash</a> docs.\nCustom UI components may also be defined via an Admin UI extension using the `registerFormInputComponent()` function\nwhich is exported from `@vendure/admin-ui/core`.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "[index]",
                        "title": "[index]",
                        "content": "\n<MemberInfo kind=\"property\" type={`ConfigArgDef&#60;<a href='/reference/typescript-api/configurable-operation-def/config-arg-type#configargtype'>ConfigArgType</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "{",
                    "  operator: {",
                    "    type: 'string',",
                    "    ui: {",
                    "      component: 'select-form-input',",
                    "      options: [",
                    "        { value: 'startsWith' },",
                    "        { value: 'endsWith' },",
                    "        { value: 'contains' },",
                    "        { value: 'doesNotContain' },",
                    "      ],",
                    "    },",
                    "  },",
                    "  secretKey: {",
                    "    type: 'string',",
                    "    ui: { component: 'password-form-input' },",
                    "  },",
                    "}",
                    "type ConfigArgs = {",
                    "    [name: string]: ConfigArgDef<ConfigArgType>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "configargtype",
        "metadata": {
            "title": "ConfigArgType",
            "keywords": [
                "configargtype"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"125\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "configargtype",
                "title": "ConfigArgType",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"125\" packageName=\"@vendure/common\" />\n\nCertain entities (those which implement <a href='/reference/typescript-api/configurable-operation-def/#configurableoperationdef'>ConfigurableOperationDef</a>) allow arbitrary\nconfiguration arguments to be specified which can then be set in the admin-ui and used in\nthe business logic of the app. These are the valid data types of such arguments.\nThe data type influences:\n\n1. How the argument form field is rendered in the admin-ui\n2. The JavaScript type into which the value is coerced before being passed to the business logic.\n\n\n",
                "subsections": [],
                "code": [
                    "type ConfigArgType = 'string' | 'int' | 'float' | 'boolean' | 'datetime' | 'ID'"
                ]
            }
        ]
    },
    {
        "id": "configurable-products",
        "metadata": {
            "title": "Configurable Products",
            "keywords": [
                "defining custom fields",
                "setting the custom field value",
                "modifying the price"
            ],
            "description": "A \"configurable product\" is one where aspects can be configured by the customer, and are unrelated to the product's variants. Examples include: - Engraving text on an item - A gift message inserted with the packaging - An uploaded image to be printed on a t-shirt In Vendure this is done by defining one or more [custom fields](/guides/developer-guide/custom-fields/) on the [OrderLine](/reference/typescript-api/entities/order-line/) entity."
        },
        "content": "",
        "sections": [
            {
                "id": "defining-custom-fields",
                "title": "Defining custom fields",
                "content": "\nLet's take the example of an engraving service. Some products can be engraved, others cannot. We will record this information in a custom field on the [ProductVariant](/reference/typescript-api/entities/product-variant/) entity:\n\n\nFor those variants that _are_ engravable, we need to be able to record the text to be engraved. This is done by defining a custom field on the [OrderLine](/reference/typescript-api/entities/order-line/) entity:\n\n\n",
                "subsections": [],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    customFields: {",
                    "        ProductVariant: [",
                    "            {",
                    "                name: 'engravable',",
                    "                type: 'boolean',",
                    "                defaultValue: false,",
                    "                label: [",
                    "                    { languageCode: LanguageCode.en, value: 'Engravable' },",
                    "                ],",
                    "            },",
                    "        ],",
                    "    },",
                    "};",
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    customFields: {",
                    "        OrderLine: [",
                    "            {",
                    "                name: 'engravingText',",
                    "                type: 'string',",
                    "                validate: value => {",
                    "                    if (value.length > 100) {",
                    "                        return 'Engraving text must be less than 100 characters';",
                    "                    }",
                    "                },",
                    "                label: [",
                    "                    { languageCode: LanguageCode.en, value: 'Engraving text' },",
                    "                ],",
                    "            },",
                    "        ]",
                    "    },",
                    "};"
                ]
            },
            {
                "id": "setting-the-custom-field-value",
                "title": "Setting the custom field value",
                "content": "\nOnce the custom fields are defined, the [addItemToOrder mutation](/reference/graphql-api/shop/mutations/#additemtoorder) will have a third argument available, which accepts values for the custom field defined above:\n\n\nYour storefront application will need to provide a `<textarea>` for the customer to enter the engraving text, which would be displayed conditionally depending on the value of the `engravable` custom field on the `ProductVariant`. \n\n",
                "subsections": [],
                "code": [
                    "mutation {",
                    "    addItemToOrder(",
                    "        productVariantId: \"42\"",
                    "        quantity: 1",
                    "        // highlight-start",
                    "        customFields: {",
                    "            engravingText: \"Thanks for all the fish!\"",
                    "        }",
                    "        // highlight-end",
                    "    ) {",
                    "        ...on Order {",
                    "            id",
                    "            lines {",
                    "                id",
                    "                quantity",
                    "                customFields {",
                    "                    engravingText",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            {
                "id": "modifying-the-price",
                "title": "Modifying the price",
                "content": "\nThe values of these OrderLine custom fields can even be used to modify the price. This is done by defining a custom [OrderItemPriceCalculationStrategy](/reference/typescript-api/orders/order-item-price-calculation-strategy/). \n\nLet's say that our engraving service costs and extra $10 on top of the regular price of the product variant. Here's a strategy to implement this:\n\n\nThis is then added to the config:\n\n\n",
                "subsections": [],
                "code": [
                    "import {",
                    "    RequestContext, PriceCalculationResult,",
                    "    ProductVariant, OrderItemPriceCalculationStrategy",
                    "} from '@vendure/core';",
                    "",
                    "export class EngravingPriceStrategy implements OrderItemPriceCalculationStrategy {",
                    "",
                    "    calculateUnitPrice(",
                    "        ctx: RequestContext,",
                    "        productVariant: ProductVariant,",
                    "        customFields: { engravingText?: string },",
                    "    ) {",
                    "        let price = productVariant.listPrice;",
                    "        if (customFields.engravingText) {",
                    "            // Add $10 for engraving",
                    "            price += 1000;",
                    "        }",
                    "        return {",
                    "            price,",
                    "            priceIncludesTax: productVariant.listPriceIncludesTax,",
                    "        };",
                    "    }",
                    "}",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { EngravingPriceStrategy } from './engraving-price-calculation-strategy';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    orderOptions: {",
                    "        orderItemPriceCalculationStrategy: new EngravingPriceStrategy(),",
                    "    },",
                    "};"
                ]
            }
        ]
    },
    {
        "id": "configurableoperationdef",
        "metadata": {
            "title": "ConfigurableOperationDef",
            "keywords": [
                "configurableoperationdef",
                "the `args` property",
                "dependency injection",
                "code",
                "args",
                "description",
                "constructor",
                "init",
                "destroy",
                "tographqltype",
                "argsarraytohash"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/configurable-operation.ts\" sourceLine=\"335\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "configurableoperationdef",
                "title": "ConfigurableOperationDef",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/configurable-operation.ts\" sourceLine=\"335\" packageName=\"@vendure/core\" />\n\nA ConfigurableOperationDef is a special type of object used extensively by Vendure to define\ncode blocks which have arguments which are configurable at run-time by the administrator.\n\nThis is the mechanism used by:\n\n* <a href='/reference/typescript-api/configuration/collection-filter#collectionfilter'>CollectionFilter</a>\n* <a href='/reference/typescript-api/payment/payment-method-handler#paymentmethodhandler'>PaymentMethodHandler</a>\n* <a href='/reference/typescript-api/promotions/promotion-action#promotionaction'>PromotionAction</a>\n* <a href='/reference/typescript-api/promotions/promotion-condition#promotioncondition'>PromotionCondition</a>\n* <a href='/reference/typescript-api/shipping/shipping-calculator#shippingcalculator'>ShippingCalculator</a>\n* <a href='/reference/typescript-api/shipping/shipping-eligibility-checker#shippingeligibilitychecker'>ShippingEligibilityChecker</a>\n\nAny class which extends ConfigurableOperationDef works in the same way: it takes a\nconfig object as the constructor argument. That config object extends the <a href='/reference/typescript-api/configurable-operation-def/configurable-operation-def-options#configurableoperationdefoptions'>ConfigurableOperationDefOptions</a>\ninterface and typically adds some kind of business logic function to it.\n\nFor example, in the case of `ShippingEligibilityChecker`,\nit adds the `check()` function to the config object which defines the logic for checking whether an Order is eligible\nfor a particular ShippingMethod.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "the-`args`-property",
                "title": "The `args` property",
                "content": "\nThe key feature of the ConfigurableOperationDef is the `args` property. This is where we define those\narguments that are exposed via the Admin UI as data input components. This allows their values to\nbe set at run-time by the Administrator. Those values can then be accessed in the business logic\nof the operation.\n\nThe data type of the args can be one of <a href='/reference/typescript-api/configurable-operation-def/config-arg-type#configargtype'>ConfigArgType</a>, and the configuration is further explained in\nthe docs of <a href='/reference/typescript-api/configurable-operation-def/config-args#configargs'>ConfigArgs</a>.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "dependency-injection",
                "title": "Dependency Injection",
                "content": "If your business logic relies on injectable providers, such as the `TransactionalConnection` object, or any of the\ninternal Vendure services or those defined in a plugin, you can inject them by using the config object's\n`init()` method, which exposes the <a href='/reference/typescript-api/common/injector#injector'>Injector</a>.\n\nHere's an example of a ShippingCalculator that injects a service which has been defined in a plugin:\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "args",
                        "title": "args",
                        "content": "\n<MemberInfo kind=\"property\" type={`T`}   />\n\n\n"
                    },
                    {
                        "id": "description",
                        "title": "description",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/localized-string-array#localizedstringarray'>LocalizedStringArray</a>`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/typescript-api/configurable-operation-def/configurable-operation-def-options#configurableoperationdefoptions'>ConfigurableOperationDefOptions</a>&#60;T&#62;) => ConfigurableOperationDef`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "destroy",
                        "title": "destroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "tographqltype",
                        "title": "toGraphQlType",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => ConfigurableOperationDefinition`}   />\n\nConvert a ConfigurableOperationDef into a ConfigurableOperationDefinition object, typically\nso that it can be sent via the API.\n"
                    },
                    {
                        "id": "argsarraytohash",
                        "title": "argsArrayToHash",
                        "content": "\n<MemberInfo kind=\"method\" type={`(args: ConfigArg[]) => ConfigArgValues&#60;T&#62;`}   />\n\nCoverts an array of ConfigArgs into a hash object:\n\nfrom:\n`[{ name: 'foo', type: 'string', value: 'bar'}]`\n\nto:\n`{ foo: 'bar' }`\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { Injector, ShippingCalculator } from '@vendure/core';",
                    "import { ShippingRatesService } from './shipping-rates.service';",
                    "",
                    "// We keep reference to our injected service by keeping it",
                    "// in the top-level scope of the file.",
                    "let shippingRatesService: ShippingRatesService;",
                    "",
                    "export const customShippingCalculator = new ShippingCalculator({",
                    "  code: 'custom-shipping-calculator',",
                    "  description: [],",
                    "  args: {},",
                    "",
                    "  init(injector: Injector) {",
                    "    // The init function is called during bootstrap, and allows",
                    "    // us to inject any providers we need.",
                    "    shippingRatesService = injector.get(ShippingRatesService);",
                    "  },",
                    "",
                    "  calculate: async (order, args) => {",
                    "    // We can now use the injected provider in the business logic.",
                    "    const { price, priceWithTax } = await shippingRatesService.getRate({",
                    "      destination: order.shippingAddress,",
                    "      contents: order.lines,",
                    "    });",
                    "",
                    "    return {",
                    "      price,",
                    "      priceWithTax,",
                    "    };",
                    "  },",
                    "});",
                    "class ConfigurableOperationDef<T extends ConfigArgs = ConfigArgs> {",
                    "    code: string",
                    "    args: T",
                    "    description: LocalizedStringArray",
                    "    constructor(options: ConfigurableOperationDefOptions<T>)",
                    "    init(injector: Injector) => ;",
                    "    destroy() => ;",
                    "    toGraphQlType(ctx: RequestContext) => ConfigurableOperationDefinition;",
                    "    argsArrayToHash(args: ConfigArg[]) => ConfigArgValues<T>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "configurableoperationdefoptions",
        "metadata": {
            "title": "ConfigurableOperationDefOptions",
            "keywords": [
                "configurableoperationdefoptions",
                "code",
                "args",
                "description"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/configurable-operation.ts\" sourceLine=\"230\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "configurableoperationdefoptions",
                "title": "ConfigurableOperationDefOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/configurable-operation.ts\" sourceLine=\"230\" packageName=\"@vendure/core\" />\n\nCommon configuration options used when creating a new instance of a\n<a href='/reference/typescript-api/configurable-operation-def/#configurableoperationdef'>ConfigurableOperationDef</a> (\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nA unique code used to identify this operation.\n"
                    },
                    {
                        "id": "args",
                        "title": "args",
                        "content": "\n<MemberInfo kind=\"property\" type={`T`}   />\n\nOptional provider-specific arguments which, when specified, are\neditable in the admin-ui. For example, args could be used to store an API key\nfor a payment provider service.\n\n*Example*\n\n\nSee <a href='/reference/typescript-api/configurable-operation-def/config-args#configargs'>ConfigArgs</a> for available configuration options.\n"
                    },
                    {
                        "id": "description",
                        "title": "description",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/localized-string-array#localizedstringarray'>LocalizedStringArray</a>`}   />\n\nA human-readable description for the operation method.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ConfigurableOperationDefOptions<T extends ConfigArgs> extends InjectableStrategy {",
                    "    code: string;",
                    "    args: T;",
                    "    description: LocalizedStringArray;",
                    "}",
                    "args: {",
                    "  apiKey: { type: 'string' },",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "configuration",
        "metadata": {
            "title": "Configuration",
            "keywords": [
                "configuration"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "cookieoptions",
        "metadata": {
            "title": "CookieOptions",
            "keywords": [
                "cookieoptions",
                "name",
                "secret",
                "path",
                "domain",
                "samesite",
                "secure",
                "secureproxy",
                "httponly",
                "signed",
                "overwrite"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"221\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "cookieoptions",
                "title": "CookieOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"221\" packageName=\"@vendure/core\" />\n\nOptions for the handling of the cookies used to track sessions (only applicable if\n`authOptions.tokenMethod` is set to `'cookie'`). These options are passed directly\nto the Express [cookie-session middleware](https://github.com/expressjs/cookie-session).\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'session'\"   />\n\nThe name of the cookie to set.\n"
                    },
                    {
                        "id": "secret",
                        "title": "secret",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"(random character string)\"   />\n\nThe secret used for signing the session cookies for authenticated users. Only applies\ntokenMethod is set to 'cookie'.\n\nIn production applications, this should not be stored as a string in\nsource control for security reasons, but may be loaded from an external\nfile not under source control, or from an environment variable, for example.\n"
                    },
                    {
                        "id": "path",
                        "title": "path",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'/'\"   />\n\na string indicating the path of the cookie.\n"
                    },
                    {
                        "id": "domain",
                        "title": "domain",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\na string indicating the domain of the cookie (no default).\n"
                    },
                    {
                        "id": "samesite",
                        "title": "sameSite",
                        "content": "\n<MemberInfo kind=\"property\" type={`'strict' | 'lax' | 'none' | boolean`} default=\"false\"   />\n\na boolean or string indicating whether the cookie is a \"same site\" cookie (false by default). This can be set to 'strict',\n'lax', 'none', or true (which maps to 'strict').\n"
                    },
                    {
                        "id": "secure",
                        "title": "secure",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\na boolean indicating whether the cookie is only to be sent over HTTPS (false by default for HTTP, true by default for HTTPS).\n"
                    },
                    {
                        "id": "secureproxy",
                        "title": "secureProxy",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\na boolean indicating whether the cookie is only to be sent over HTTPS (use this if you handle SSL not in your node process).\n"
                    },
                    {
                        "id": "httponly",
                        "title": "httpOnly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\na boolean indicating whether the cookie is only to be sent over HTTP(S), and not made available to client JavaScript (true by default).\n"
                    },
                    {
                        "id": "signed",
                        "title": "signed",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\na boolean indicating whether the cookie is to be signed (true by default). If this is true, another cookie of the same name with the .sig\nsuffix appended will also be sent, with a 27-byte url-safe base64 SHA1 value representing the hash of cookie-name=cookie-value against the\nfirst Keygrip key. This signature key is used to detect tampering the next time a cookie is received.\n"
                    },
                    {
                        "id": "overwrite",
                        "title": "overwrite",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\na boolean indicating whether to overwrite previously set cookies of the same name (true by default). If this is true, all cookies set during\nthe same request with the same name (regardless of path or domain) are filtered out of the Set-Cookie header when setting this cookie.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface CookieOptions {",
                    "    name?: string;",
                    "    secret?: string;",
                    "    path?: string;",
                    "    domain?: string;",
                    "    sameSite?: 'strict' | 'lax' | 'none' | boolean;",
                    "    secure?: boolean;",
                    "    secureProxy?: boolean;",
                    "    httpOnly?: boolean;",
                    "    signed?: boolean;",
                    "    overwrite?: boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "core-plugins",
        "metadata": {
            "title": "Core Plugins",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "countries-&-zones",
        "metadata": {
            "title": "Countries & Zones",
            "keywords": [
                "countries & zones"
            ],
            "description": "**Countries** are where you define the list of countries which are relevant to your operations. This does not only include those countries you ship to, but also those countries which may appear on a billing address. By default, Vendure includes all countries in the list, but you are free to remove or disable any that you don't need. **Zones** provide a way to group countries. Zones are used mainly for defining [tax rates]({{< relref \"/user-guide/settings/taxes\" >}}) and can also be used in shipping calculations."
        },
        "content": "",
        "sections": []
    },
    {
        "id": "country",
        "metadata": {
            "title": "Country",
            "keywords": [
                "country",
                "constructor",
                "type"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/region/country.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "country",
                "title": "Country",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/region/country.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nA country to which is available when creating / updating an <a href='/reference/typescript-api/entities/address#address'>Address</a>. Countries are\ngrouped together into <a href='/reference/typescript-api/entities/zone#zone'>Zone</a>s which are in turn used to determine applicable shipping\nand taxes for an <a href='/reference/typescript-api/entities/order#order'>Order</a>.\n\n* Extends: <code><a href='/reference/typescript-api/entities/region#region'>Region</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/country#country'>Country</a>&#62;) => Country`}   />\n\n\n"
                    },
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`RegionType`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Country extends Region {",
                    "    constructor(input?: DeepPartial<Country>)",
                    "    readonly type: RegionType = 'country';",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "countryservice",
        "metadata": {
            "title": "CountryService",
            "keywords": [
                "countryservice",
                "constructor",
                "findall",
                "findone",
                "findallavailable",
                "findonebycode",
                "create",
                "update",
                "delete"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/country.service.ts\" sourceLine=\"33\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "countryservice",
                "title": "CountryService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/country.service.ts\" sourceLine=\"33\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/country#country'>Country</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, translatableSaver: <a href='/reference/typescript-api/service-helpers/translatable-saver#translatablesaver'>TranslatableSaver</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>) => CountryService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/country#country'>Country</a>&#62;, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/country#country'>Country</a>&#62; = []) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;Translated&#60;<a href='/reference/typescript-api/entities/country#country'>Country</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, countryId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/country#country'>Country</a>&#62; = []) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/country#country'>Country</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findallavailable",
                        "title": "findAllAvailable",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/country#country'>Country</a>&#62;&#62;&#62;`}   />\n\nReturns an array of enabled Countries, intended for use in a public-facing (ie. Shop) API.\n"
                    },
                    {
                        "id": "findonebycode",
                        "title": "findOneByCode",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, countryCode: string) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/country#country'>Country</a>&#62;&#62;`}   />\n\nReturns a Country based on its ISO country code.\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateCountryInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/country#country'>Country</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateCountryInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/country#country'>Country</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class CountryService {",
                    "    constructor(connection: TransactionalConnection, listQueryBuilder: ListQueryBuilder, translatableSaver: TranslatableSaver, eventBus: EventBus, translator: TranslatorService)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<Country>, relations: RelationPaths<Country> = []) => Promise<PaginatedList<Translated<Country>>>;",
                    "    findOne(ctx: RequestContext, countryId: ID, relations: RelationPaths<Country> = []) => Promise<Translated<Country> | undefined>;",
                    "    findAllAvailable(ctx: RequestContext) => Promise<Array<Translated<Country>>>;",
                    "    findOneByCode(ctx: RequestContext, countryCode: string) => Promise<Translated<Country>>;",
                    "    create(ctx: RequestContext, input: CreateCountryInput) => Promise<Translated<Country>>;",
                    "    update(ctx: RequestContext, input: UpdateCountryInput) => Promise<Translated<Country>>;",
                    "    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "createerrorresultguard",
        "metadata": {
            "title": "CreateErrorResultGuard",
            "keywords": [
                "createerrorresultguard",
                "testfn"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/testing/src/error-result-guard.ts\" sourceLine=\"18\" packageName=\"@vendure/testing\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "createerrorresultguard",
                "title": "createErrorResultGuard",
                "content": "\n<GenerationInfo sourceFile=\"packages/testing/src/error-result-guard.ts\" sourceLine=\"18\" packageName=\"@vendure/testing\" />\n\nConvenience method for creating an <a href='/reference/typescript-api/testing/error-result-guard#errorresultguard'>ErrorResultGuard</a>. Takes a predicate function which\ntests whether the input is considered successful (true) or an error result (false).\n\nNote that the resulting variable must _still_ be type annotated in order for the TypeScript\ntype inference to work as expected:\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "testfn",
                        "title": "testFn",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`(input: T) =&#62; boolean`} />\n\n\n"
                    }
                ],
                "code": [
                    "const orderResultGuard: ErrorResultGuard<AddItemToOrderResult>",
                    "  = createErrorResultGuard(order => !!order.lines);",
                    "function createErrorResultGuard<T>(testFn: (input: T) => boolean): ErrorResultGuard<T>"
                ]
            }
        ]
    },
    {
        "id": "createtestenvironment",
        "metadata": {
            "title": "CreateTestEnvironment",
            "keywords": [
                "createtestenvironment",
                "config"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/testing/src/create-test-environment.ts\" sourceLine=\"60\" packageName=\"@vendure/testing\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "createtestenvironment",
                "title": "createTestEnvironment",
                "content": "\n<GenerationInfo sourceFile=\"packages/testing/src/create-test-environment.ts\" sourceLine=\"60\" packageName=\"@vendure/testing\" />\n\nConfigures a <a href='/reference/typescript-api/testing/test-server#testserver'>TestServer</a> and a <a href='/reference/typescript-api/testing/simple-graph-qlclient#simplegraphqlclient'>SimpleGraphQLClient</a> for each of the GraphQL APIs\nfor use in end-to-end tests. Returns a <a href='/reference/typescript-api/testing/test-environment#testenvironment'>TestEnvironment</a> object.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`Required&#60;<a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a>&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { createTestEnvironment, testConfig } from '@vendure/testing';",
                    "",
                    "describe('some feature to test', () => {",
                    "",
                    "  const { server, adminClient, shopClient } = createTestEnvironment(testConfig);",
                    "",
                    "  beforeAll(async () => {",
                    "    await server.init({",
                    "        // ... server options",
                    "    });",
                    "    await adminClient.asSuperAdmin();",
                    "  });",
                    "",
                    "  afterAll(async () => {",
                    "      await server.destroy();",
                    "  });",
                    "",
                    "  // ... end-to-end tests here",
                    "});",
                    "function createTestEnvironment(config: Required<VendureConfig>): TestEnvironment"
                ]
            }
        ]
    },
    {
        "id": "creating-detail-views",
        "metadata": {
            "title": "Creating Detail Views",
            "keywords": [
                "creating detail views",
                "example: creating a product detail view",
                "extend the typedbasedetailcomponent class",
                "create the template",
                "route config"
            ],
            "description": "The two most common type of components you'll be creating in your UI extensions are list components and detail components. In Vendure, we have standardized the way you write these components so that your ui extensions can be made to fit seamlessly into the rest of the app. :::note The specific pattern described here is for Angular-based components. It is also possible to create detail views using React components, but in that case you won't be able to use the built-in Angular-specific components."
        },
        "content": "",
        "sections": [
            {
                "id": "example:-creating-a-product-detail-view",
                "title": "Example: Creating a Product Detail View",
                "content": "\nLet's say you have a plugin which adds a new entity to the database called `ProductReview`. You have already created a [list view](/guides/extending-the-admin-ui/creating-list-views/), and\nnow you need a detail view which can be used to view and edit individual reviews.\n\n",
                "subsections": [
                    {
                        "id": "extend-the-typedbasedetailcomponent-class",
                        "title": "Extend the TypedBaseDetailComponent class",
                        "content": "\nThe detail component itself is an Angular component which extends the [BaseDetailComponent](/reference/admin-ui-api/list-detail-views/base-detail-component/) or [TypedBaseDetailComponent](/reference/admin-ui-api/list-detail-views/typed-base-detail-component) class.\n\nThis example assumes you have set up your project to use code generation as described in the [GraphQL code generation guide](/guides/how-to/codegen/#codegen-for-admin-ui-extensions).\n\n\n"
                    },
                    {
                        "id": "create-the-template",
                        "title": "Create the template",
                        "content": "\nHere is the standard layout for detail views:\n\n\n"
                    },
                    {
                        "id": "route-config",
                        "title": "Route config",
                        "content": "\nHere's how the routing would look for a typical list & detail view:\n\n\n"
                    }
                ],
                "code": [
                    "import { ResultOf } from '@graphql-typed-document-node/core';",
                    "import { ChangeDetectionStrategy, Component, OnInit, OnDestroy } from '@angular/core';",
                    "import { FormBuilder } from '@angular/forms';",
                    "import { TypedBaseDetailComponent, LanguageCode, SharedModule } from '@vendure/admin-ui/core';",
                    "",
                    "// This is the TypedDocumentNode & type generated by GraphQL Code Generator",
                    "import { graphql } from '../../gql';",
                    "",
                    "export const reviewDetailFragment = graphql(`",
                    "  fragment ReviewDetail on ProductReview {",
                    "    id",
                    "    createdAt",
                    "    updatedAt",
                    "    title",
                    "    rating",
                    "    text",
                    "    authorName",
                    "    productId",
                    "  }",
                    "`);",
                    "",
                    "export const getReviewDetailDocument = graphql(`",
                    "  query GetReviewDetail($id: ID!) {",
                    "    review(id: $id) {",
                    "      ...ReviewDetail",
                    "    }",
                    "  }",
                    "`);",
                    "",
                    "export const createReviewDocument = graphql(`",
                    "  mutation CreateReview($input: CreateProductReviewInput!) {",
                    "    createProductReview(input: $input) {",
                    "      ...ReviewDetail",
                    "    }",
                    "  }",
                    "`);",
                    "",
                    "export const updateReviewDocument = graphql(`",
                    "  mutation UpdateReview($input: UpdateProductReviewInput!) {",
                    "    updateProductReview(input: $input) {",
                    "      ...ReviewDetail",
                    "    }",
                    "  }",
                    "`);",
                    "",
                    "@Component({",
                    "    selector: 'review-detail',",
                    "    templateUrl: './review-detail.component.html',",
                    "    styleUrls: ['./review-detail.component.scss'],",
                    "    changeDetection: ChangeDetectionStrategy.OnPush,",
                    "    standalone: true,",
                    "    imports: [SharedModule],",
                    "})",
                    "export class ReviewDetailComponent extends TypedBaseDetailComponent<typeof getReviewDetailDocument, 'review'> implements OnInit, OnDestroy {",
                    "    detailForm = this.formBuilder.group({",
                    "        title: [''],",
                    "        rating: [1],",
                    "        authorName: [''],",
                    "    });",
                    "",
                    "    constructor(private formBuilder: FormBuilder, private notificationService: NotificationService) {",
                    "        super();",
                    "    }",
                    "",
                    "    ngOnInit() {",
                    "        this.init();",
                    "    }",
                    "",
                    "    ngOnDestroy() {",
                    "        this.destroy();",
                    "    }",
                    "",
                    "    create() {",
                    "        const { title, rating, authorName } = this.detailForm.value;",
                    "        if (!title || rating == null || !authorName) {",
                    "            return;",
                    "        }",
                    "        this.dataService",
                    "            .mutate(createReviewDocument, {",
                    "                input: { title, rating, authorName },",
                    "            })",
                    "            .subscribe(({ createProductReview }) => {",
                    "                if (createProductReview.id) {",
                    "                    this.notificationService.success('Review created');",
                    "                    this.router.navigate(['extensions', 'reviews', createProductReview.id]);",
                    "                }",
                    "            });",
                    "    }",
                    "",
                    "    update() {",
                    "        const { title, rating, authorName } = this.detailForm.value;",
                    "        this.dataService",
                    "            .mutate(updateReviewDocument, {",
                    "                input: { id: this.id, title, rating, authorName },",
                    "            })",
                    "            .subscribe(() => {",
                    "                this.notificationService.success('Review updated');",
                    "            });",
                    "    }",
                    "",
                    "    protected setFormValues(entity: NonNullable<ResultOf<typeof getReviewDetailDocument>['review']>, languageCode: LanguageCode): void {",
                    "        this.detailForm.patchValue({",
                    "            title: entity.name,",
                    "            rating: entity.rating,",
                    "            authorName: entity.authorName,",
                    "            productId: entity.productId,",
                    "        });",
                    "    }",
                    "}",
                    "<vdr-page-block>",
                    "    <vdr-action-bar>",
                    "        <vdr-ab-left></vdr-ab-left>",
                    "        <vdr-ab-right>",
                    "            <button",
                    "                class=\"button primary\"",
                    "                *ngIf=\"isNew$ | async; else updateButton\"",
                    "                (click)=\"create()\"",
                    "                [disabled]=\"detailForm.pristine || detailForm.invalid\"",
                    "            >",
                    "                {{ 'common.create' | translate }}",
                    "            </button>",
                    "            <ng-template #updateButton>",
                    "                <button",
                    "                    class=\"btn btn-primary\"",
                    "                    (click)=\"update()\"",
                    "                    [disabled]=\"detailForm.pristine || detailForm.invalid\"",
                    "                >",
                    "                    {{ 'common.update' | translate }}",
                    "                </button>",
                    "            </ng-template>",
                    "        </vdr-ab-right>",
                    "    </vdr-action-bar>",
                    "</vdr-page-block>",
                    "",
                    "<form class=\"form\" [formGroup]=\"detailForm\">",
                    "    <vdr-page-detail-layout>",
                    "        <!-- The sidebar is used for displaying \"metadata\" type information about the entity -->",
                    "        <vdr-page-detail-sidebar>",
                    "            <vdr-card *ngIf=\"entity$ | async as entity\">",
                    "                <vdr-page-entity-info [entity]=\"entity\" />",
                    "            </vdr-card>",
                    "        </vdr-page-detail-sidebar>",
                    "",
                    "        <!-- The main content area is used for displaying the entity's fields -->",
                    "        <vdr-page-block>",
                    "            <!-- The vdr-card is the container for grouping items together on a page -->",
                    "            <!-- it can also take an optional [title] property to display a title -->",
                    "            <vdr-card>",
                    "                <!-- the form-grid class is used to lay out the form fields -->",
                    "                <div class=\"form-grid\">",
                    "                    <vdr-form-field label=\"Title\" for=\"title\">",
                    "                        <input id=\"title\" type=\"text\" formControlName=\"title\" />",
                    "                    </vdr-form-field>",
                    "                    <vdr-form-field label=\"Rating\" for=\"rating\">",
                    "                        <input id=\"rating\" type=\"number\" min=\"1\" max=\"5\" formControlName=\"rating\" />",
                    "                    </vdr-form-field>",
                    "",
                    "                    <!-- etc -->",
                    "                </div>",
                    "            </vdr-card>",
                    "        </vdr-page-block>",
                    "    </vdr-page-detail-layout>",
                    "</form>",
                    "import { registerRouteComponent } from '@vendure/admin-ui/core';",
                    "",
                    "import { ReviewDetailComponent, getReviewDetailDocument } from './components/review-detail/review-detail.component';",
                    "import { ReviewListComponent } from './components/review-list/review-list.component';",
                    "",
                    "export default [",
                    "    // List view",
                    "    registerRouteComponent({",
                    "        path: '',",
                    "        component: ReviewListComponent,",
                    "        breadcrumb: 'Product reviews',",
                    "    }),",
                    "    // highlight-start",
                    "    // Detail view",
                    "    registerRouteComponent({",
                    "        path: ':id',",
                    "        component: ReviewDetailComponent,",
                    "        query: getReviewDetailDocument,",
                    "        entityKey: 'productReview',",
                    "        getBreadcrumbs: entity => [",
                    "            {",
                    "                label: 'Product reviews',",
                    "                link: ['/extensions', 'product-reviews'],",
                    "            },",
                    "            {",
                    "                label: `#${entity?.id} (${entity?.product.name})`,",
                    "                link: [],",
                    "            },",
                    "        ],",
                    "    }),",
                    "    // highlight-end",
                    "]"
                ]
            }
        ]
    },
    {
        "id": "creating-list-views",
        "metadata": {
            "title": "Creating List Views",
            "keywords": [
                "example: creating a product reviews list",
                "use the paginatedlist interface",
                "create the list component",
                "create the template",
                "route config"
            ],
            "description": "The two most common type of components you'll be creating in your UI extensions are list components and detail components. In Vendure, we have standardized the way you write these components so that your ui extensions can be made to fit seamlessly into the rest of the app. :::note The specific pattern described here is for Angular-based components. It is also possible to create list views using React components, but in that case you won't be able to use the built-in data table & other Angular-specific components."
        },
        "content": "",
        "sections": [
            {
                "id": "example:-creating-a-product-reviews-list",
                "title": "Example: Creating a Product Reviews List",
                "content": "\nLet's say you have a plugin which adds a new entity to the database called `ProductReview`. You want to create a new list view in the Admin UI which displays all the reviews submitted.\n\n",
                "subsections": [
                    {
                        "id": "use-the-paginatedlist-interface",
                        "title": "Use the PaginatedList interface",
                        "content": "\nTo use the standardized list component, you need to make sure your plugin exposes this list in the GraphQL API following the [PaginatedList interface](/reference/typescript-api/common/paginated-list/):\n\n\n:::info\nSee the [Paginated Lists guide](/guides/how-to/paginated-list/) for details on how to implement this in your server plugin code.\n:::\n\n"
                    },
                    {
                        "id": "create-the-list-component",
                        "title": "Create the list component",
                        "content": "\nThe list component itself is an Angular component which extends the [BaseListComponent](/reference/admin-ui-api/list-detail-views/base-list-component/) or [TypedBaseListComponent](/reference/admin-ui-api/list-detail-views/typed-base-list-component) class.\n\nThis example assumes you have set up your project to use code generation as described in the [GraphQL code generation guide](/guides/how-to/codegen/#codegen-for-admin-ui-extensions).\n\n\n"
                    },
                    {
                        "id": "create-the-template",
                        "title": "Create the template",
                        "content": "\nThis is the standard layout for any list view. The main functionality is provided by the [DataTable2Component](/reference/admin-ui-api/components/data-table2component/).\n\n\n"
                    },
                    {
                        "id": "route-config",
                        "title": "Route config",
                        "content": "\n\n"
                    }
                ],
                "code": [
                    "type ProductReview implements Node {",
                    "  id: ID!",
                    "  createdAt: DateTime!",
                    "  updatedAt: DateTime!",
                    "  title: String!",
                    "  rating: Int!",
                    "  text: String!",
                    "  authorName: String!",
                    "  product: Product!",
                    "  productId: ID!  ",
                    "}",
                    "",
                    "type ProductReviewList implements PaginatedList {",
                    "  items: [ProductReview!]!",
                    "  totalItems: Int!",
                    "}",
                    "import { ChangeDetectionStrategy, Component } from '@angular/core';",
                    "import { TypedBaseListComponent, SharedModule } from '@vendure/admin-ui/core';",
                    "// This is the TypedDocumentNode generated by GraphQL Code Generator",
                    "import { graphql } from '../../gql';",
                    "",
                    "const getReviewListDocument = graphql(`",
                    "  query GetReviewList($options: ReviewListOptions) {",
                    "    reviews(options: $options) {",
                    "      items {",
                    "        id",
                    "        createdAt",
                    "        updatedAt",
                    "        title",
                    "        rating",
                    "        text",
                    "        authorName",
                    "        productId",
                    "      }",
                    "      totalItems",
                    "    }",
                    "  }",
                    "`);",
                    "",
                    "@Component({",
                    "    selector: 'review-list',",
                    "    templateUrl: './review-list.component.html',",
                    "    styleUrls: ['./review-list.component.scss'],",
                    "    changeDetection: ChangeDetectionStrategy.OnPush,",
                    "    standalone: true,",
                    "    imports: [SharedModule],",
                    "})",
                    "export class ReviewListComponent extends TypedBaseListComponent<typeof getReviewListDocument, 'reviews'> {",
                    "",
                    "    // Here we set up the filters that will be available",
                    "    // to use in the data table",
                    "    readonly filters = this.createFilterCollection()",
                    "        .addIdFilter()",
                    "        .addDateFilters()",
                    "        .addFilter({",
                    "            name: 'title',",
                    "            type: {kind: 'text'},",
                    "            label: 'Title',",
                    "            filterField: 'title',",
                    "        })",
                    "        .addFilter({",
                    "            name: 'rating',",
                    "            type: {kind: 'number'},",
                    "            label: 'Rating',",
                    "            filterField: 'rating',",
                    "        })",
                    "        .addFilter({",
                    "            name: 'authorName',",
                    "            type: {kind: 'text'},",
                    "            label: 'Author',",
                    "            filterField: 'authorName',",
                    "        })",
                    "        .connectToRoute(this.route);",
                    "",
                    "    // Here we set up the sorting options that will be available",
                    "    // to use in the data table",
                    "    readonly sorts = this.createSortCollection()",
                    "        .defaultSort('createdAt', 'DESC')",
                    "        .addSort({name: 'createdAt'})",
                    "        .addSort({name: 'updatedAt'})",
                    "        .addSort({name: 'title'})",
                    "        .addSort({name: 'rating'})",
                    "        .addSort({name: 'authorName'})",
                    "        .connectToRoute(this.route);",
                    "",
                    "    constructor() {",
                    "        super();",
                    "        super.configure({",
                    "            document: getReviewListDocument,",
                    "            getItems: data => data.reviews,",
                    "            setVariables: (skip, take) => ({",
                    "                options: {",
                    "                    skip,",
                    "                    take,",
                    "                    filter: {",
                    "                        title: {",
                    "                            contains: this.searchTermControl.value,",
                    "                        },",
                    "                        ...this.filters.createFilterInput(),",
                    "                    },",
                    "                    sort: this.sorts.createSortInput(),",
                    "                },",
                    "            }),",
                    "            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],",
                    "        });",
                    "    }",
                    "}",
                    "<!-- optional if you want some buttons at the top -->",
                    "<vdr-page-block>",
                    "    <vdr-action-bar>",
                    "        <vdr-ab-left></vdr-ab-left>",
                    "        <vdr-ab-right>",
                    "            <a class=\"btn btn-primary\" *vdrIfPermissions=\"['CreateReview']\" [routerLink]=\"['./', 'create']\">",
                    "                <clr-icon shape=\"plus\"></clr-icon>",
                    "                Create a review",
                    "            </a>",
                    "        </vdr-ab-right>",
                    "    </vdr-action-bar>",
                    "</vdr-page-block>",
                    "",
                    "<!-- The data table -->",
                    "<vdr-data-table-2",
                    "        id=\"review-list\"",
                    "        [items]=\"items$ | async\"",
                    "        [itemsPerPage]=\"itemsPerPage$ | async\"",
                    "        [totalItems]=\"totalItems$ | async\"",
                    "        [currentPage]=\"currentPage$ | async\"",
                    "        [filters]=\"filters\"",
                    "        (pageChange)=\"setPageNumber($event)\"",
                    "        (itemsPerPageChange)=\"setItemsPerPage($event)\"",
                    ">",
                    "    <!-- optional if you want to support bulk actions -->",
                    "    <vdr-bulk-action-menu",
                    "            locationId=\"review-list\"",
                    "            [hostComponent]=\"this\"",
                    "            [selectionManager]=\"selectionManager\"",
                    "    />",
                    "    ",
                    "    <!-- Adds a search bar -->",
                    "    <vdr-dt2-search",
                    "            [searchTermControl]=\"searchTermControl\"",
                    "            searchTermPlaceholder=\"Filter by title\"",
                    "    />",
                    "    ",
                    "    <!-- Here we define all the available columns -->",
                    "    <vdr-dt2-column id=\"id\" [heading]=\"'common.id' | translate\" [hiddenByDefault]=\"true\">",
                    "        <ng-template let-review=\"item\">",
                    "            {{ review.id }}",
                    "        </ng-template>",
                    "    </vdr-dt2-column>",
                    "    <vdr-dt2-column",
                    "            id=\"created-at\"",
                    "            [heading]=\"'common.created-at' | translate\"",
                    "            [hiddenByDefault]=\"true\"",
                    "            [sort]=\"sorts.get('createdAt')\"",
                    "    >",
                    "        <ng-template let-review=\"item\">",
                    "            {{ review.createdAt | localeDate : 'short' }}",
                    "        </ng-template>",
                    "    </vdr-dt2-column>",
                    "    <vdr-dt2-column",
                    "            id=\"updated-at\"",
                    "            [heading]=\"'common.updated-at' | translate\"",
                    "            [hiddenByDefault]=\"true\"",
                    "            [sort]=\"sorts.get('updatedAt')\"",
                    "    >",
                    "        <ng-template let-review=\"item\">",
                    "            {{ review.updatedAt | localeDate : 'short' }}",
                    "        </ng-template>",
                    "    </vdr-dt2-column>",
                    "    <vdr-dt2-column id=\"title\" heading=\"Title\" [optional]=\"false\" [sort]=\"sorts.get('title')\">",
                    "        <ng-template let-review=\"item\">",
                    "            <a class=\"button-ghost\" [routerLink]=\"['./', review.id]\"",
                    "            ><span>{{ review.title }}</span>",
                    "                <clr-icon shape=\"arrow right\"></clr-icon>",
                    "            </a>",
                    "        </ng-template>",
                    "    </vdr-dt2-column>",
                    "    <vdr-dt2-column id=\"rating\" heading=\"Rating\" [sort]=\"sorts.get('rating')\">",
                    "        <ng-template let-review=\"item\"><my-star-rating-component [rating]=\"review.rating\"    /></ng-template>",
                    "    </vdr-dt2-column>",
                    "    <vdr-dt2-column id=\"author\" heading=\"Author\" [sort]=\"sorts.get('authorName')\">",
                    "        <ng-template let-review=\"item\">{{ review.authorName }}</ng-template>",
                    "    </vdr-dt2-column>",
                    "</vdr-data-table-2>",
                    "import { registerRouteComponent } from '@vendure/admin-ui/core';",
                    "",
                    "import { ReviewListComponent } from './components/review-list/review-list.component';",
                    "",
                    "export default [",
                    "    // highlight-start",
                    "    registerRouteComponent({",
                    "        path: '',",
                    "        component: ReviewListComponent,",
                    "        breadcrumb: 'Product reviews',",
                    "    }),",
                    "    // highlight-end",
                    "]"
                ]
            }
        ]
    },
    {
        "id": "ctx-decorator",
        "metadata": {
            "title": "Ctx Decorator",
            "keywords": [
                "ctx"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/api/decorators/request-context.decorator.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "ctx",
                "title": "Ctx",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/api/decorators/request-context.decorator.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />\n\nResolver param decorator which extracts the <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> from the incoming\nrequest object.\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    " @Query()",
                    " getAdministrators(@Ctx() ctx: RequestContext) {",
                    "     // ...",
                    " }"
                ]
            }
        ]
    },
    {
        "id": "currencycode",
        "metadata": {
            "title": "CurrencyCode",
            "keywords": [
                "currencycode"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/generated-types.ts\" sourceLine=\"952\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "currencycode",
                "title": "CurrencyCode",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/generated-types.ts\" sourceLine=\"952\" packageName=\"@vendure/common\" />\n\nISO 4217 currency code\n\n\n",
                "subsections": [],
                "code": [
                    "enum CurrencyCode {",
                    "    AED = 'AED'",
                    "    AFN = 'AFN'",
                    "    ALL = 'ALL'",
                    "    AMD = 'AMD'",
                    "    ANG = 'ANG'",
                    "    AOA = 'AOA'",
                    "    ARS = 'ARS'",
                    "    AUD = 'AUD'",
                    "    AWG = 'AWG'",
                    "    AZN = 'AZN'",
                    "    BAM = 'BAM'",
                    "    BBD = 'BBD'",
                    "    BDT = 'BDT'",
                    "    BGN = 'BGN'",
                    "    BHD = 'BHD'",
                    "    BIF = 'BIF'",
                    "    BMD = 'BMD'",
                    "    BND = 'BND'",
                    "    BOB = 'BOB'",
                    "    BRL = 'BRL'",
                    "    BSD = 'BSD'",
                    "    BTN = 'BTN'",
                    "    BWP = 'BWP'",
                    "    BYN = 'BYN'",
                    "    BZD = 'BZD'",
                    "    CAD = 'CAD'",
                    "    CDF = 'CDF'",
                    "    CHF = 'CHF'",
                    "    CLP = 'CLP'",
                    "    CNY = 'CNY'",
                    "    COP = 'COP'",
                    "    CRC = 'CRC'",
                    "    CUC = 'CUC'",
                    "    CUP = 'CUP'",
                    "    CVE = 'CVE'",
                    "    CZK = 'CZK'",
                    "    DJF = 'DJF'",
                    "    DKK = 'DKK'",
                    "    DOP = 'DOP'",
                    "    DZD = 'DZD'",
                    "    EGP = 'EGP'",
                    "    ERN = 'ERN'",
                    "    ETB = 'ETB'",
                    "    EUR = 'EUR'",
                    "    FJD = 'FJD'",
                    "    FKP = 'FKP'",
                    "    GBP = 'GBP'",
                    "    GEL = 'GEL'",
                    "    GHS = 'GHS'",
                    "    GIP = 'GIP'",
                    "    GMD = 'GMD'",
                    "    GNF = 'GNF'",
                    "    GTQ = 'GTQ'",
                    "    GYD = 'GYD'",
                    "    HKD = 'HKD'",
                    "    HNL = 'HNL'",
                    "    HRK = 'HRK'",
                    "    HTG = 'HTG'",
                    "    HUF = 'HUF'",
                    "    IDR = 'IDR'",
                    "    ILS = 'ILS'",
                    "    INR = 'INR'",
                    "    IQD = 'IQD'",
                    "    IRR = 'IRR'",
                    "    ISK = 'ISK'",
                    "    JMD = 'JMD'",
                    "    JOD = 'JOD'",
                    "    JPY = 'JPY'",
                    "    KES = 'KES'",
                    "    KGS = 'KGS'",
                    "    KHR = 'KHR'",
                    "    KMF = 'KMF'",
                    "    KPW = 'KPW'",
                    "    KRW = 'KRW'",
                    "    KWD = 'KWD'",
                    "    KYD = 'KYD'",
                    "    KZT = 'KZT'",
                    "    LAK = 'LAK'",
                    "    LBP = 'LBP'",
                    "    LKR = 'LKR'",
                    "    LRD = 'LRD'",
                    "    LSL = 'LSL'",
                    "    LYD = 'LYD'",
                    "    MAD = 'MAD'",
                    "    MDL = 'MDL'",
                    "    MGA = 'MGA'",
                    "    MKD = 'MKD'",
                    "    MMK = 'MMK'",
                    "    MNT = 'MNT'",
                    "    MOP = 'MOP'",
                    "    MRU = 'MRU'",
                    "    MUR = 'MUR'",
                    "    MVR = 'MVR'",
                    "    MWK = 'MWK'",
                    "    MXN = 'MXN'",
                    "    MYR = 'MYR'",
                    "    MZN = 'MZN'",
                    "    NAD = 'NAD'",
                    "    NGN = 'NGN'",
                    "    NIO = 'NIO'",
                    "    NOK = 'NOK'",
                    "    NPR = 'NPR'",
                    "    NZD = 'NZD'",
                    "    OMR = 'OMR'",
                    "    PAB = 'PAB'",
                    "    PEN = 'PEN'",
                    "    PGK = 'PGK'",
                    "    PHP = 'PHP'",
                    "    PKR = 'PKR'",
                    "    PLN = 'PLN'",
                    "    PYG = 'PYG'",
                    "    QAR = 'QAR'",
                    "    RON = 'RON'",
                    "    RSD = 'RSD'",
                    "    RUB = 'RUB'",
                    "    RWF = 'RWF'",
                    "    SAR = 'SAR'",
                    "    SBD = 'SBD'",
                    "    SCR = 'SCR'",
                    "    SDG = 'SDG'",
                    "    SEK = 'SEK'",
                    "    SGD = 'SGD'",
                    "    SHP = 'SHP'",
                    "    SLL = 'SLL'",
                    "    SOS = 'SOS'",
                    "    SRD = 'SRD'",
                    "    SSP = 'SSP'",
                    "    STN = 'STN'",
                    "    SVC = 'SVC'",
                    "    SYP = 'SYP'",
                    "    SZL = 'SZL'",
                    "    THB = 'THB'",
                    "    TJS = 'TJS'",
                    "    TMT = 'TMT'",
                    "    TND = 'TND'",
                    "    TOP = 'TOP'",
                    "    TRY = 'TRY'",
                    "    TTD = 'TTD'",
                    "    TWD = 'TWD'",
                    "    TZS = 'TZS'",
                    "    UAH = 'UAH'",
                    "    UGX = 'UGX'",
                    "    USD = 'USD'",
                    "    UYU = 'UYU'",
                    "    UZS = 'UZS'",
                    "    VES = 'VES'",
                    "    VND = 'VND'",
                    "    VUV = 'VUV'",
                    "    WST = 'WST'",
                    "    XAF = 'XAF'",
                    "    XCD = 'XCD'",
                    "    XOF = 'XOF'",
                    "    XPF = 'XPF'",
                    "    YER = 'YER'",
                    "    ZAR = 'ZAR'",
                    "    ZMW = 'ZMW'",
                    "    ZWL = 'ZWL'",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "currencyinputcomponent",
        "metadata": {
            "title": "CurrencyInputComponent",
            "keywords": [
                "currencyinputcomponent",
                "disabled",
                "readonly",
                "value",
                "currencycode",
                "valuechange",
                "prefix$",
                "suffix$",
                "hasfractionpart",
                "onchange",
                "ontouch",
                "_inputvalue",
                "constructor",
                "ngoninit",
                "ngonchanges",
                "ngondestroy",
                "registeronchange",
                "registerontouched",
                "setdisabledstate",
                "oninput",
                "onfocus",
                "writevalue"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/currency-input/currency-input.component.ts\" sourceLine=\"33\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "currencyinputcomponent",
                "title": "CurrencyInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/currency-input/currency-input.component.ts\" sourceLine=\"33\" packageName=\"@vendure/admin-ui\" />\n\nA form input control which displays currency in decimal format, whilst working\nwith the integer cent value in the background.\n\n*Example*\n\n\n* Implements: <code>ControlValueAccessor</code>, <code>OnInit</code>, <code>OnChanges</code>, <code>OnDestroy</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "disabled",
                        "title": "disabled",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "value",
                        "title": "value",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "currencycode",
                        "title": "currencyCode",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "valuechange",
                        "title": "valueChange",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "prefix$",
                        "title": "prefix$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;string&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "suffix$",
                        "title": "suffix$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;string&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "hasfractionpart",
                        "title": "hasFractionPart",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "onchange",
                        "title": "onChange",
                        "content": "\n<MemberInfo kind=\"property\" type={`(val: any) =&#62; void`}   />\n\n\n"
                    },
                    {
                        "id": "ontouch",
                        "title": "onTouch",
                        "content": "\n<MemberInfo kind=\"property\" type={`() =&#62; void`}   />\n\n\n"
                    },
                    {
                        "id": "_inputvalue",
                        "title": "_inputValue",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>, changeDetectorRef: ChangeDetectorRef) => CurrencyInputComponent`}   />\n\n\n"
                    },
                    {
                        "id": "ngoninit",
                        "title": "ngOnInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "ngonchanges",
                        "title": "ngOnChanges",
                        "content": "\n<MemberInfo kind=\"method\" type={`(changes: SimpleChanges) => `}   />\n\n\n"
                    },
                    {
                        "id": "ngondestroy",
                        "title": "ngOnDestroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "registeronchange",
                        "title": "registerOnChange",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fn: any) => `}   />\n\n\n"
                    },
                    {
                        "id": "registerontouched",
                        "title": "registerOnTouched",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fn: any) => `}   />\n\n\n"
                    },
                    {
                        "id": "setdisabledstate",
                        "title": "setDisabledState",
                        "content": "\n<MemberInfo kind=\"method\" type={`(isDisabled: boolean) => `}   />\n\n\n"
                    },
                    {
                        "id": "oninput",
                        "title": "onInput",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: string) => `}   />\n\n\n"
                    },
                    {
                        "id": "onfocus",
                        "title": "onFocus",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "writevalue",
                        "title": "writeValue",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: any) => void`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<vdr-currency-input",
                    "    [(ngModel)]=\"entityPrice\"",
                    "    [currencyCode]=\"currencyCode\"",
                    "></vdr-currency-input>",
                    "class CurrencyInputComponent implements ControlValueAccessor, OnInit, OnChanges, OnDestroy {",
                    "    @Input() disabled = false;",
                    "    @Input() readonly = false;",
                    "    @Input() value: number;",
                    "    @Input() currencyCode = '';",
                    "    @Output() valueChange = new EventEmitter();",
                    "    prefix$: Observable<string>;",
                    "    suffix$: Observable<string>;",
                    "    hasFractionPart = true;",
                    "    onChange: (val: any) => void;",
                    "    onTouch: () => void;",
                    "    _inputValue: string;",
                    "    constructor(dataService: DataService, changeDetectorRef: ChangeDetectorRef)",
                    "    ngOnInit() => ;",
                    "    ngOnChanges(changes: SimpleChanges) => ;",
                    "    ngOnDestroy() => ;",
                    "    registerOnChange(fn: any) => ;",
                    "    registerOnTouched(fn: any) => ;",
                    "    setDisabledState(isDisabled: boolean) => ;",
                    "    onInput(value: string) => ;",
                    "    onFocus() => ;",
                    "    writeValue(value: any) => void;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "custom-datatable-components",
        "metadata": {
            "title": "Custom DataTable Components",
            "keywords": [
                "1. define a component",
                "2. register the component"
            ],
            "description": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; The Admin UI list views are powered by a data table component which features sorting, advanced filtering, pagination and more. It will also give you the option of displaying any configured [custom fields](/guides/developer-guide/custom-fields/) for the entity in question. With Admin UI extensions, you can specify custom components to use in rendering any column of any data table - both custom fields _and_ built-in fields, using either Angular or React components. Let's say we want to make the product \"slug\" column link to the matching product detail page in our storefront."
        },
        "content": "",
        "sections": []
    },
    {
        "id": "custom-detail-components",
        "metadata": {
            "title": "Custom Detail Components",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "custom-fields",
        "metadata": {
            "title": "Custom Fields",
            "keywords": [
                "defining custom fields",
                "available custom field types",
                "relations",
                "accessing custom fields in typescript",
                "custom field config properties",
                "common properties",
                "name",
                "type",
                "list",
                "label",
                "description",
                "public",
                "readonly",
                "internal",
                "defaultvalue",
                "nullable",
                "unique",
                "validate",
                "properties for `string` fields",
                "pattern",
                "options",
                "length",
                "properties for `localestring` fields",
                "properties for `int` & `float` fields",
                "min",
                "max",
                "step",
                "properties for `datetime` fields",
                "properties for `relation` fields",
                "entity",
                "eager",
                "graphqltype",
                "inverseside",
                "custom field ui",
                "default form inputs",
                "specifying the input component",
                "custom form input components",
                "tabbed custom fields",
                "typescript typings"
            ],
            "description": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import CustomFieldProperty from '@site/src/components/CustomFieldProperty'; Custom fields allow you to add your own custom data properties almost every Vendure entity. The entities which may have custom fields defined are listed in the [CustomFields interface documentation](/reference/typescript-api/custom-fields/). Some use-cases for custom fields include:"
        },
        "content": "",
        "sections": [
            {
                "id": "defining-custom-fields",
                "title": "Defining custom fields",
                "content": "\nCustom fields are specified in the VendureConfig:\n\n\nWith the example config above, the following will occur:\n\n1. The database schema will be altered, and a column will be added for each custom field. **Note: changes to custom fields require a database migration**. See the [Migrations guide](/guides/developer-guide/migrations/).\n2. The GraphQL APIs will be modified to add the custom fields to the `Product` and `User` types respectively.\n3. If you are using the [AdminUiPlugin](/reference/core-plugins/admin-ui-plugin/), the Admin UI detail pages will now contain form inputs to allow the custom field data to be added or edited, and the list view data tables will allow custom field columns to be added, sorted and filtered.\n\n![custom-fields-data-table.webp](custom-fields-data-table.webp)\n\nThe values of the custom fields can then be set and queried via the GraphQL APIs:\n\n\n<Tabs>\n<TabItem value=\"Request\" label=\"Request\" default>\n\n\n</TabItem>\n<TabItem value=\"Response\" label=\"Response\">\n\n\n</TabItem>\n</Tabs>\n\nThe custom fields will also extend the filter and sort options available to the `products` list query:\n\n\n\n",
                "subsections": [],
                "code": [
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            { name: 'infoUrl', type: 'string' },",
                    "            { name: 'downloadable', type: 'boolean' },",
                    "            { name: 'shortName', type: 'localeString' },",
                    "        ],",
                    "        User: [",
                    "            { name: 'socialLoginToken', type: 'string', unique: true },",
                    "        ],",
                    "    },",
                    "};",
                    "mutation {",
                    "    updateProduct(input: {",
                    "        id: 1",
                    "        // highlight-start",
                    "        customFields: {",
                    "            infoUrl: \"https://some-url.com\",",
                    "            downloadable: true,",
                    "        }",
                    "        // highlight-end",
                    "        translations: [",
                    "            // highlight-next-line",
                    "            { languageCode: en, customFields: { shortName: \"foo\" } }",
                    "        ]",
                    "    }) {",
                    "        id",
                    "        name",
                    "        // highlight-start",
                    "        customFields {",
                    "            infoUrl",
                    "            downloadable",
                    "            shortName",
                    "        }",
                    "        // highlight-end",
                    "    }",
                    "}",
                    "{",
                    "  \"data\": {",
                    "    \"product\": {",
                    "      \"id\": \"1\",",
                    "      \"name\": \"Laptop\",",
                    "      \"customFields\": {",
                    "          \"infoUrl\": \"https://some-url.com\",",
                    "          \"downloadable\": true,",
                    "          \"shortName\": \"foo\"",
                    "      }",
                    "    }",
                    "  }",
                    "}",
                    "mutation {",
                    "    products(options: {",
                    "        // highlight-start",
                    "        filter: {",
                    "            infoUrl: { contains: \"new\" },",
                    "            downloadable: { eq: true }",
                    "        },",
                    "        sort: {",
                    "            infoUrl: ASC",
                    "        }",
                    "        // highlight-end",
                    "    }) {",
                    "        items {",
                    "            id",
                    "            name",
                    "            // highlight-start",
                    "            customFields {",
                    "                infoUrl",
                    "                downloadable",
                    "                shortName",
                    "            }",
                    "            // highlight-end",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            {
                "id": "available-custom-field-types",
                "title": "Available custom field types",
                "content": "\nThe following types are available for custom fields:\n\n| Type           | Description                  | Example                                                  |\n|----------------|------------------------------|----------------------------------------------------------|\n| `string`       | Short string data            | url, label                                               |\n| `localeString` | Localized short strings      | localized url                                            |\n| `text`         | Long text data               | extended product info, json config object                |\n| `localeText`   | Localized long text          | localized extended product info                          |\n| `int`          | Integer                      | product weight, customer loyalty points, monetary values |\n| `float`        | Floating point number        | product review rating                                    |\n| `boolean`      | Boolean                      | isDownloadable flag on product                           |\n| `datetime`     | A datetime                   | date that variant is back in stock                       |\n| `relation`     | A relation to another entity | Asset used as a customer avatar, related Products        |\n\nTo see the underlying DB data type and GraphQL type used for each, see the [CustomFieldType doc](/reference/typescript-api/custom-fields/custom-field-type).\n\n#### Relations\n\nIt is possible to set up custom fields that hold references to other entities using the `'relation'` type:\n\n\nIn this example, we set up a many-to-one relationship from Customer to Asset, allowing us to specify an avatar image for each Customer. Relation custom fields are unique in that the input and output names are not the same - the input will expect an ID and will be named `'<field name>Id'` or `'<field name>Ids'` for list types.\n\n\n",
                "subsections": [],
                "code": [
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Customer: [",
                    "            {",
                    "                name: 'avatar',",
                    "                // highlight-start",
                    "                type: 'relation',",
                    "                entity: Asset,",
                    "                // highlight-end",
                    "            },",
                    "        ],",
                    "    },",
                    "};",
                    "mutation {",
                    "    updateCustomer(input: {",
                    "        id: 1",
                    "        customFields: {",
                    "            avatarId: 42,",
                    "        }",
                    "    }) {",
                    "        id",
                    "        customFields {",
                    "            avatar {",
                    "                id",
                    "                name",
                    "                preview",
                    "            }",
                    "        }",
                    "    }",
                    "}"
                ]
            },
            {
                "id": "accessing-custom-fields-in-typescript",
                "title": "Accessing custom fields in TypeScript",
                "content": "\nAs well as exposing custom fields via the GraphQL APIs, you can also access them directly in your TypeScript code. This is useful for plugins which need to access custom field data.\n\nGiven the following custom field configuration:\n\n\nthe `externalId` will be available whenever you access a `Customer` entity:\n\n\nThe `avatar` relation will require an explicit join to be performed in order to access the data, since it is not\neagerly loaded by default:\n\n\nor if using the QueryBuilder API:\n\n\nor using the EntityHydrator:\n\n\n",
                "subsections": [],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "const config: VendureConfig = {",
                    "    // ...",
                    "    customFields: {",
                    "        Customer: [",
                    "            { name: 'externalId', type: 'string' },",
                    "            { name: 'avatar', type: 'relation', entity: Asset },",
                    "        ],",
                    "    },",
                    "};",
                    "const customer = await this.connection.getRepository(ctx, Customer).findOne({",
                    "    where: { id: 1 },",
                    "});",
                    "console.log(customer.externalId);",
                    "const customer = await this.connection.getRepository(ctx, Customer).findOne({",
                    "    where: { id: 1 },",
                    "    relations: {",
                    "        customFields: {",
                    "            avatar: true,",
                    "        }",
                    "    }",
                    "});",
                    "console.log(customer.avatar);",
                    "const customer = await this.connection.getRepository(ctx, Customer).createQueryBuilder('customer')",
                    "    .leftJoinAndSelect('customer.customFields.avatar', 'avatar')",
                    "    .where('customer.id = :id', { id: 1 })",
                    "    .getOne();",
                    "console.log(customer.avatar);",
                    "const customer = await this.customerService.findOne(ctx, 1);",
                    "await this.entityHydrator.hydrate(ctx, customer, { relations: ['customFields.avatar'] });",
                    "console.log(customer.avatar);"
                ]
            },
            {
                "id": "custom-field-config-properties",
                "title": "Custom field config properties",
                "content": "\n",
                "subsections": [
                    {
                        "id": "common-properties",
                        "title": "Common properties",
                        "content": "\nAll custom fields share some common properties:\n\n#### name\n\n<CustomFieldProperty required={true} type=\"string\"/>\n\nThe name of the field. This is used as the column name in the database, and as the GraphQL field name. The name should not contain spaces and by convention should be camelCased.\n\n\n#### type\n\n<CustomFieldProperty required={true} type=\"CustomFieldType\" typeLink=\"/reference/typescript-api/custom-fields/custom-field-type\"/>\n\nThe type of data that will be stored in the field.\n\n#### list\n\n<CustomFieldProperty required={false} type=\"boolean\" />\n\nIf set to `true`, then the field will be an array of the specified type. Defaults to `false`.\n\n\nSetting a custom field to be a list has the following effects:\n\n* The GraphQL type will be an array of the specified type.\n* The Admin UI will display a list of inputs for the field.\n* For lists of primitive types (anything except `relation`), the database type will be set to `simple-json` which serializes the data into a JSON string. For lists of `relation` types, a separate many-to-many table will be created.\n\n#### label\n\n<CustomFieldProperty required={false} type=\"LocalizedStringArray\" typeLink=\"/reference/typescript-api/configurable-operation-def/localized-string-array\"/>\n\nAn array of localized labels for the field. These are used in the Admin UI to label the field.\n\n\n#### description\n\n<CustomFieldProperty required={false} type=\"LocalizedStringArray\" typeLink=\"/reference/typescript-api/configurable-operation-def/localized-string-array\"/>\n\nAn array of localized descriptions for the field. These are used in the Admin UI to describe the field.\n\n\n#### public\n\n<CustomFieldProperty required={false} type=\"boolean\" />\n\nWhether the custom field is available via the Shop API. Defaults to `true`.\n\n\n#### readonly\n\n<CustomFieldProperty required={false} type=\"boolean\" />\n\nWhether the custom field can be updated via the GraphQL APIs. Defaults to `false`. If set to `true`, then the field\ncan only be updated via direct manipulation via TypeScript code in a plugin.\n\n\n#### internal\n\n<CustomFieldProperty required={false} type=\"boolean\" />\n\nWhether the custom field is exposed at all via the GraphQL APIs. Defaults to `false`. If set to `true`, then the field will not be available\nvia the GraphQL API, but can still be used in TypeScript code in a plugin. Internal fields are useful for storing data which is not intended\nto be exposed to the outside world, but which can be used in plugin logic.\n\n\n#### defaultValue\n\n<CustomFieldProperty required={false} type=\"any\" />\n\nThe default value when an Entity is created with this field. If not provided, then the default value will be `null`. Note that if you set `nullable: false`, then\nyou should also provide a `defaultValue` to avoid database errors when creating new entities.\n\n\n#### nullable\n\n<CustomFieldProperty required={false} type=\"boolean\" />\n\nWhether the field is nullable in the database. If set to `false`, then a `defaultValue` should be provided.\n\n\n#### unique\n\n<CustomFieldProperty required={false} type=\"boolean\" />\n\nWhether the value of the field should be unique. When set to `true`, a UNIQUE constraint is added to the column. Defaults\nto `false`.\n\n\n#### validate\n\n<CustomFieldProperty required={false} type=\"(value: any) => string | LocalizedString[] | void\" />\n\nA custom validation function. If the value is valid, then the function should not return a value. If a string or LocalizedString array is returned, this is interpreted as an error message.\n\nNote that string, number and date fields also have some built-in validation options such as `min`, `max`, `pattern` which you can read about in the following sections.\n\n\nThis function can even be asynchronous and may use the [Injector](/reference/typescript-api/common/injector/) to access providers.\n\n\n"
                    },
                    {
                        "id": "properties-for-`string`-fields",
                        "title": "Properties for `string` fields",
                        "content": "\nIn addition to the common properties, the `string` custom fields have some type-specific properties:\n\n#### pattern\n\n<CustomFieldProperty required={false} type=\"string\" />\n\nA regex pattern which the field value must match. If the value does not match the pattern, then the validation will fail.\n\n\n#### options\n\n<CustomFieldProperty required={false} type=\"{ value: string; label?: LocalizedString[]; }[]\" />\n\nAn array of pre-defined options for the field. This is useful for fields which should only have a limited set of values. The `value` property is the value which will be stored in the database, and the `label` property is an optional array of localized strings which will be displayed in the admin UI.\n\n\nAttempting to set the value of the field to a value which is not in the `options` array will cause the validation to fail.\n\n#### length\n\n<CustomFieldProperty required={false} type=\"number\" />\n\nThe max length of the varchar created in the database. Defaults to 255. Maximum is 65,535.\n\n\n"
                    },
                    {
                        "id": "properties-for-`localestring`-fields",
                        "title": "Properties for `localeString` fields",
                        "content": "\nIn addition to the common properties, the `localeString` custom fields have some type-specific properties:\n\n#### pattern\n\n<CustomFieldProperty required={false} type=\"string\" />\n\nSame as the `pattern` property for `string` fields.\n\n#### length\n\n<CustomFieldProperty required={false} type=\"number\" />\n\nSame as the `length` property for `string` fields.\n\n"
                    },
                    {
                        "id": "properties-for-`int`-&-`float`-fields",
                        "title": "Properties for `int` & `float` fields",
                        "content": "\nIn addition to the common properties, the `int` & `float` custom fields have some type-specific properties:\n\n#### min\n\n<CustomFieldProperty required={false} type=\"number\" />\n\nThe minimum permitted value. If the value is less than this, then the validation will fail.\n\n\n#### max\n\n<CustomFieldProperty required={false} type=\"number\" />\n\nThe maximum permitted value. If the value is greater than this, then the validation will fail.\n\n\n#### step\n\n<CustomFieldProperty required={false} type=\"number\" />\n\nThe step value. This is used in the Admin UI to determine the increment/decrement value of the input field.\n\n\n"
                    },
                    {
                        "id": "properties-for-`datetime`-fields",
                        "title": "Properties for `datetime` fields",
                        "content": "\nIn addition to the common properties, the `datetime` custom fields have some type-specific properties.\nThe min, max & step properties for datetime fields are intended to be used as described in\n[the MDN datetime-local docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local#Additional_attributes)\n\n#### min\n\n<CustomFieldProperty required={false} type=\"string\" />\n\nThe earliest permitted date. If the value is earlier than this, then the validation will fail.\n\n\n#### max\n\n<CustomFieldProperty required={false} type=\"string\" />\n\nThe latest permitted date. If the value is later than this, then the validation will fail.\n\n\n#### step\n\n<CustomFieldProperty required={false} type=\"string\" />\n\nThe step value. See [the MDN datetime-local docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local#step) to understand how this is used.\n\n"
                    },
                    {
                        "id": "properties-for-`relation`-fields",
                        "title": "Properties for `relation` fields",
                        "content": "\nIn addition to the common properties, the `relation` custom fields have some type-specific properties:\n\n#### entity\n\n<CustomFieldProperty required={true} type=\"VendureEntity\" typeLink=\"/reference/typescript-api/entities/vendure-entity\" />\n\n\nThe entity which this custom field is referencing. This can be one of the built-in entities, or a custom entity. If the entity is a custom entity, it must extend the `VendureEntity` class.\n\n\n#### eager\n\n<CustomFieldProperty required={false} type=\"boolean\" />\n\nWhether to [eagerly load](https://typeorm.io/#/eager-and-lazy-relations) the relation. Defaults to false. Note that eager loading has performance implications, so should only be used when necessary.\n\n\n#### graphQLType\n\n<CustomFieldProperty required={false} type=\"string\" />\n\nThe name of the GraphQL type that corresponds to the entity. Can be omitted if the GraphQL type name is the same as the entity name, which is the case for all of the built-in entities.\n\n\nIn the above example, the `CmsArticle` entity is being used as a related entity. However, the GraphQL type name is `BlogPost`, so we must specify this in the `graphQLType` property, otherwise Vendure will try to extend the GraphQL schema with reference to a non-existent \"CmsArticle\" type.\n\n#### inverseSide\n\n<CustomFieldProperty required={false} type=\"string | ((object: VendureEntity) => any)\" />\n\nAllows you to specify the [inverse side of the relation](https://typeorm.io/#inverse-side-of-the-relationship). Let's say you are adding a relation from `Product`\nto a custom entity which refers back to the product. You can specify this inverse relation like so:\n\n\nThis then allows you to query the `ProductReview` entity and include the `product` relation:\n\n\n"
                    }
                ],
                "code": [
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            {",
                    "                // highlight-next-line",
                    "                name: 'infoUrl',",
                    "                type: 'string'",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            {",
                    "                name: 'infoUrls',",
                    "                type: 'string',",
                    "                // highlight-next-line",
                    "                list: true,",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "import { LanguageCode } from '@vendure/core';",
                    "",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            {",
                    "                name: 'infoUrl',",
                    "                type: 'string',",
                    "                // highlight-start",
                    "                label: [",
                    "                    {languageCode: LanguageCode.en, value: 'Info URL'},",
                    "                    {languageCode: LanguageCode.de, value: 'Info-URL'},",
                    "                    {languageCode: LanguageCode.es, value: 'URL de información'},",
                    "                ],",
                    "                // highlight-end",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "import { LanguageCode } from '@vendure/core';",
                    "",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            {",
                    "                name: 'infoUrl',",
                    "                type: 'string',",
                    "                // highlight-start",
                    "                description: [",
                    "                    {languageCode: LanguageCode.en, value: 'A URL to more information about the product'},",
                    "                    {languageCode: LanguageCode.de, value: 'Eine URL zu weiteren Informationen über das Produkt'},",
                    "                    {languageCode: LanguageCode.es, value: 'Una URL con más información sobre el producto'},",
                    "                ],",
                    "                // highlight-end",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            {",
                    "                name: 'profitMargin',",
                    "                type: 'int',",
                    "                // highlight-next-line",
                    "                public: false,",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            {",
                    "                name: 'profitMargin',",
                    "                type: 'int',",
                    "                // highlight-next-line",
                    "                readonly: true,",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        OrderLine: [",
                    "            {",
                    "                name: 'referralId',",
                    "                type: 'string',",
                    "                // highlight-next-line",
                    "                internal: true,",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            {",
                    "                name: 'reviewRating',",
                    "                type: 'float',",
                    "                // highlight-next-line",
                    "                defaultValue: 0,",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            {",
                    "                name: 'reviewRating',",
                    "                type: 'float',",
                    "                // highlight-start",
                    "                nullable: false,",
                    "                defaultValue: 0,",
                    "                // highlight-end",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Customer: [",
                    "            {",
                    "                name: 'externalId',",
                    "                type: 'string',",
                    "                // highlight-next-line",
                    "                unique: true,",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "import { LanguageCode } from '@vendure/core';",
                    "",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            {",
                    "                name: 'infoUrl',",
                    "                type: 'string',",
                    "                // highlight-start",
                    "                validate: (value: any) => {",
                    "                    if (!value.startsWith('http')) {",
                    "                        // If a localized error message is not required, a simple string can be returned.",
                    "                        // return 'The URL must start with \"http\"';",
                    "",
                    "                        // If a localized error message is required, return an array of LocalizedString objects.",
                    "                        return [",
                    "                            {languageCode: LanguageCode.en, value: 'The URL must start with \"http\"'},",
                    "                            {languageCode: LanguageCode.de, value: 'Die URL muss mit \"http\" beginnen'},",
                    "                            {languageCode: LanguageCode.es, value: 'La URL debe comenzar con \"http\"'},",
                    "                        ];",
                    "                    }",
                    "                },",
                    "                // highlight-end",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        ProductVariant: [",
                    "            {",
                    "                name: 'partCode',",
                    "                type: 'string',",
                    "                // highlight-start",
                    "                validate: async (value, injector) => {",
                    "                    const partCodeService = injector.get(PartCodeService);",
                    "                    const isValid = await partCodeService.validateCode(value);",
                    "                    if (!isValid) {",
                    "                        return `Part code ${value} is not valid`;",
                    "                    }",
                    "                },",
                    "                // highlight-end",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        ProductVariant: [",
                    "            {",
                    "                name: 'gtin',",
                    "                type: 'string',",
                    "                // highlight-next-line",
                    "                pattern: '^\\d{8}(?:\\d{4,6})?$',",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "import { LanguageCode } from '@vendure/core';",
                    "",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        ProductVariant: [",
                    "            {",
                    "                name: 'condition',",
                    "                type: 'string',",
                    "                // highlight-start",
                    "                options: [",
                    "                    {value: 'new', label: [{languageCode: LanguageCode.en, value: 'New'}]},",
                    "                    {value: 'used', label: [{languageCode: LanguageCode.en, value: 'Used'}]},",
                    "                ],",
                    "                // highlight-end",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        ProductVariant: [",
                    "            {",
                    "                name: 'partCode',",
                    "                type: 'string',",
                    "                // highlight-next-line",
                    "                length: 20,",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        ProductVariant: [",
                    "            {",
                    "                name: 'reviewRating',",
                    "                type: 'int',",
                    "                // highlight-next-line",
                    "                min: 0,",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        ProductVariant: [",
                    "            {",
                    "                name: 'reviewRating',",
                    "                type: 'int',",
                    "                // highlight-next-line",
                    "                max: 5,",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        ProductVariant: [",
                    "            {",
                    "                name: 'reviewRating',",
                    "                type: 'int',",
                    "                // highlight-next-line",
                    "                step: 0.5,",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        ProductVariant: [",
                    "            {",
                    "                name: 'releaseDate',",
                    "                type: 'datetime',",
                    "                // highlight-next-line",
                    "                min: '2019-01-01T00:00:00.000Z',",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        ProductVariant: [",
                    "            {",
                    "                name: 'releaseDate',",
                    "                type: 'datetime',",
                    "                // highlight-next-line",
                    "                max: '2019-12-31T23:59:59.999Z',",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "import { Product } from '\\@vendure/core';",
                    "",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            {",
                    "                name: 'relatedProducts',",
                    "                list: true,",
                    "                // highlight-next-line",
                    "                type: 'relation',",
                    "                // highlight-next-line",
                    "                entity: Product,",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "import { Product } from '\\@vendure/core';",
                    "",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            {",
                    "                name: 'relatedProducts',",
                    "                list: true,",
                    "                type: 'relation',",
                    "                entity: Product,",
                    "                // highlight-next-line",
                    "                eager: true,",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "import { CmsArticle } from './entities/cms-article.entity';",
                    "",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            {",
                    "                name: 'blogPosts',",
                    "                list: true,",
                    "                type: 'relation',",
                    "                entity: CmsArticle,",
                    "                // highlight-next-line",
                    "                graphQLType: 'BlogPost',",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "import { Product } from '\\@vendure/core';",
                    "import { ProductReview } from './entities/product-review.entity';",
                    "",
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            {",
                    "                name: 'reviews',",
                    "                list: true,",
                    "                type: 'relation',",
                    "                entity: ProductReview,",
                    "                // highlight-start",
                    "                inverseSide: (review: ProductReview) => review.product,",
                    "                // highlight-end",
                    "            },",
                    "        ]",
                    "    }",
                    "};",
                    "const { productReviews } = await this.connection.getRepository(ProductReview).findOne({",
                    "    where: { id: 1 },",
                    "    relations: ['product'],",
                    "});"
                ]
            },
            {
                "id": "custom-field-ui",
                "title": "Custom Field UI",
                "content": "\nIn the Admin UI, an appropriate default form input component is used for each custom field type. The Admin UI comes with a set of ready-made form input components, but it is also possible to create custom form input components. The ready-made components are:\n\n- `text-form-input`: A single-line text input\n- `password-form-input`: A single-line password input\n- `select-form-input`: A select input\n- `textarea-form-input`: A multi-line textarea input\n- `rich-text-form-input`: A rich text editor input that saves the content as HTML\n- `json-editor-form-input`: A simple JSON editor input\n- `html-editor-form-input`: A simple HTML text editor input\n- `number-form-input`: A number input\n- `currency-form-input`: A number input with currency formatting\n- `boolean-form-input`: A checkbox input\n- `date-form-input`: A date input\n- `relation-form-input`: A generic entity relation input which allows an ID to be manually specified\n- `customer-group-form-input`: A select input for selecting a CustomerGroup\n- `facet-value-form-input`: A select input for selecting a FacetValue\n- `product-selector-form-input`: A select input for selecting a Product from an autocomplete list\n- `product-multi-form-input`: A modal dialog for selecting multiple Products or ProductVariants\n\n#### Default form inputs\n\nThis table shows the default form input component used for each custom field type:\n\n| Type                     | Form input component                                                                         |\n|--------------------------|----------------------------------------------------------------------------------------------|\n| `string`, `localeString` | `text-form-input` or, if options are defined, `select-form-input`                            |\n| `text`, `localeText`     | `textarea-form-input`                                                                        |\n| `int`, `float`           | `number-form-input`                                                                          |\n| `boolean`                | `boolean-form-input`                                                                         |\n| `datetime`               | `date-form-input`                                                                            |\n| `relation`               | Depends on related entity, defaults to `relation-form-input` if no specific component exists |\n\n:::info\n**UI for relation type**\n\nThe Admin UI app has built-in selection components for \"relation\" custom fields that reference certain common entity types, such as Asset, Product, ProductVariant and Customer. If you are relating to an entity not covered by the built-in selection components, you will see a generic relation component which allows you to manually enter the ID of the entity you wish to select.\n\nIf the generic selector is not suitable, or is you wish to replace one of the built-in selector components, you can create a UI extension that defines a custom field control for that custom field. You can read more about this in the [custom form input guide](/guides/extending-the-admin-ui/custom-form-inputs/)\n:::\n\n",
                "subsections": [
                    {
                        "id": "specifying-the-input-component",
                        "title": "Specifying the input component",
                        "content": "\nThe defaults listed above can be overridden by using the `ui` property of the custom field config object. For example, if we want a number to be displayed as a currency input:\n\n\nHere's an example config demonstrating several ways to customize the UI controls for custom fields:\n\n\nand the resulting UI:\n\n![custom-fields-ui.webp](custom-fields-ui.webp)\n\n:::info\n\nThe various configuration options for each of the built-in form input  (e.g. `suffix`) is documented in the [`DefaultFormConfigHash` object](/reference/typescript-api/configurable-operation-def/default-form-config-hash/).\n\n:::\n\n"
                    },
                    {
                        "id": "custom-form-input-components",
                        "title": "Custom form input components",
                        "content": "\nIf none of the built-in form input components are suitable, you can create your own. This is a more advanced topic which is covered in detail in the [Custom Form Input Components](/guides/extending-the-admin-ui/custom-form-inputs/) guide.\n\n\n"
                    }
                ],
                "code": [
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        ProductVariant: [",
                    "            {",
                    "                name: 'rrp',",
                    "                type: 'int',",
                    "                // highlight-next-line",
                    "                ui: { component: 'currency-form-input' },",
                    "            },",
                    "        ]",
                    "    }",
                    "}",
                    "import { LanguageCode, VendureConfig } from '@vendure/core';",
                    "",
                    "const config: VendureConfig = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            // Rich text editor",
                    "            {name: 'additionalInfo', type: 'text', ui: {component: 'rich-text-form-input'}},",
                    "            // JSON editor",
                    "            {name: 'specs', type: 'text', ui: {component: 'json-editor-form-input'}},",
                    "            // Numeric with suffix",
                    "            {",
                    "                name: 'weight',",
                    "                type: 'int',",
                    "                ui: {component: 'number-form-input', suffix: 'g'},",
                    "            },",
                    "            // Currency input",
                    "            {",
                    "                name: 'RRP',",
                    "                type: 'int',",
                    "                ui: {component: 'currency-form-input'},",
                    "            },",
                    "            // Select with options",
                    "            {",
                    "                name: 'pageType',",
                    "                type: 'string',",
                    "                ui: {",
                    "                    component: 'select-form-input',",
                    "                    options: [",
                    "                        {value: 'static', label: [{languageCode: LanguageCode.en, value: 'Static'}]},",
                    "                        {value: 'dynamic', label: [{languageCode: LanguageCode.en, value: 'Dynamic'}]},",
                    "                    ],",
                    "                },",
                    "            },",
                    "            // Text with prefix",
                    "            {",
                    "                name: 'link',",
                    "                type: 'string',",
                    "                ui: {",
                    "                    component: 'text-form-input',",
                    "                    prefix: 'https://',",
                    "                },",
                    "            },",
                    "        ],",
                    "    },",
                    "};"
                ]
            },
            {
                "id": "tabbed-custom-fields",
                "title": "Tabbed custom fields",
                "content": "\nWith a large, complex project, it's common for lots of custom fields to be required. This can get visually noisy in the UI, so Vendure supports tabbed custom fields. Just specify the tab name in the `ui` object, and those fields with the same tab name will be grouped in the UI! The tab name can also be a translation token if you need to support multiple languages.\n\n:::note\n\nTabs will only be displayed if there is more than one tab name used in the custom fields. A lack of a `tab` property is counted as a tab (the \"general\" tab).\n\n:::\n\n\n\n\n",
                "subsections": [],
                "code": [
                    "const config = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            { name: 'additionalInfo', type: 'text', ui: {component: 'rich-text-form-input'} },",
                    "            { name: 'specs', type: 'text', ui: {component: 'json-editor-form-input'} },",
                    "            { name: 'width', type: 'int', ui: {tab: 'Shipping'} },",
                    "            { name: 'height', type: 'int', ui: {tab: 'Shipping'} },",
                    "            { name: 'depth', type: 'int', ui: {tab: 'Shipping'} },",
                    "            { name: 'weight', type: 'int', ui: {tab: 'Shipping'} },",
                    "        ],",
                    "    },",
                    "}"
                ]
            },
            {
                "id": "typescript-typings",
                "title": "TypeScript Typings",
                "content": "\nBecause custom fields are generated at run-time, TypeScript has no way of knowing about them based on your\nVendureConfig. Consider the example above - let's say we have a [plugin](/guides/developer-guide/plugins/) which needs to\naccess the custom field values on a Product entity.\n\nAttempting to access the custom field will result in a TS compiler error:\n\n\nThe \"easy\" way to solve this is to assert the `customFields` object as `any`:\n\n\nHowever, this sacrifices type safety. To make our custom fields type-safe we can take advantage of a couple of more advanced TypeScript features - [declaration merging](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#merging-interfaces) and [ambient modules](https://www.typescriptlang.org/docs/handbook/modules.html#ambient-modules). This allows us to extend the built-in `CustomProductFields` interface to add our custom fields to it:\n\n\nWhen this file is then imported into our service file (either directly or indirectly), TypeScript will know about our custom fields, and we do not need to do any type assertions.\n\n\n:::caution\nNote that for the typings to work correctly, **order of imports matters**.\n\nOne way to ensure that your custom field typings always get imported first is to include them as the first item in the tsconfig \"include\" array.\n:::\n\n:::tip\nFor a working example of this setup, see the [real-world-vendure repo](https://github.com/vendure-ecommerce/real-world-vendure/blob/master/src/plugins/reviews/types.ts)\n:::\n\n\n",
                "subsections": [],
                "code": [
                    "import { RequestContext, TransactionalConnection, ID, Product } from '@vendure/core';",
                    "",
                    "export class MyService {",
                    "    constructor(private connection: TransactionalConnection) {",
                    "    }",
                    "",
                    "    async getInfoUrl(ctx: RequestContext, productId: ID) {",
                    "        const product = await this.connection",
                    "            .getRepository(ctx, Product)",
                    "            .findOne(productId);",
                    "",
                    "        return product.customFields.infoUrl;",
                    "    }                           // ^ TS2339: Property 'infoUrl'",
                    "}                             // does not exist on type 'CustomProductFields'.",
                    "return (product.customFields as any).infoUrl;",
                    "// types.ts",
                    "",
                    "// Note: we are using deep a import here, rather than importing from `@vendure/core` due to",
                    "// a possible bug in TypeScript (https://github.com/microsoft/TypeScript/issues/46617) which",
                    "// causes issues when multiple plugins extend the same custom fields interface.",
                    "import { CustomProductFields } from '@vendure/core/dist/entity/custom-entity-fields';",
                    "",
                    "declare module '@vendure/core/dist/entity/custom-entity-fields' {",
                    "    interface CustomProductFields {",
                    "        infoUrl: string;",
                    "        downloadable: boolean;",
                    "        shortName: string;",
                    "    }",
                    "}",
                    "return product.customFields.infoUrl;",
                    "// no error, plus TS autocomplete works."
                ]
            }
        ]
    },
    {
        "id": "custom-form-inputs",
        "metadata": {
            "title": "Custom Form Inputs",
            "keywords": [
                "for custom fields",
                "1. define a component",
                "2. register the component",
                "3. register the providers",
                "4. update the custom field config",
                "custom field controls for relations",
                "for configargs"
            ],
            "description": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; You can define custom Angular or React components which can be used to render [Custom Fields](/guides/developer-guide/custom-fields/) you have defined on your entities as well as [configurable args](/reference/typescript-api/configurable-operation-def/config-args/) used by custom [Configurable Operations](/guides/developer-guide/strategies-configurable-operations/#configurable-operations). Let's say you define a custom \"intensity\" field on the Product entity: ```ts title=\"src/vendure-config.ts\""
        },
        "content": "",
        "sections": [
            {
                "id": "for-custom-fields",
                "title": "For Custom Fields",
                "content": "\nLet's say you define a custom \"intensity\" field on the Product entity:\n\n\nBy default, the \"intensity\" field will be displayed as a number input:\n\n![./ui-extensions-custom-field-default.webp](./ui-extensions-custom-field-default.webp)\n\nBut let's say we want to display a **range slider** instead.\n\n",
                "subsections": [
                    {
                        "id": "1.-define-a-component",
                        "title": "1. Define a component",
                        "content": "\nFirst we need to define a new Angular or React component to render the slider:\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\nAngular components will have the `readonly`, `config` and `formControl` properties populated automatically.\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\nReact components can use the [`useFormControl`](/reference/admin-ui-api/react-hooks/use-form-control) hook to access the form control and set its value. The \ncomponent will also receive `config` and `readonly` data as props. \n\n\n</TabItem>\n</Tabs>\n\n"
                    },
                    {
                        "id": "2.-register-the-component",
                        "title": "2. Register the component",
                        "content": "\nNext we will register this component in our `providers.ts` file and give it a unique ID, `'slider-form-input'`:\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\n"
                    },
                    {
                        "id": "3.-register-the-providers",
                        "title": "3. Register the providers",
                        "content": "\nThe `providers.ts` is then passed to the `compileUiExtensions()` function as described in the [UI Extensions Getting Started guide](/guides/extending-the-admin-ui/getting-started/):\n\n\n"
                    },
                    {
                        "id": "4.-update-the-custom-field-config",
                        "title": "4. Update the custom field config",
                        "content": "\nOnce registered, this new slider input can be used in our custom field config:\n\n\nAs we can see, adding the `ui` property to the custom field config allows us to specify our custom slider component.\nThe component id _'slider-form-input'_ **must match** the string passed as the first argument to `registerFormInputComponent()`.\n\n:::info\nIf we want, we can also pass any other arbitrary data in the `ui` object, which will then be available in our component as `this.config.ui.myField`. Note that only JSON-compatible data types are permitted, so no functions or class instances.\n:::\n\n\nRe-compiling the Admin UI will result in our SliderControl now being used for the \"intensity\" custom field:\n\n![./ui-extensions-custom-field-slider.webp](./ui-extensions-custom-field-slider.webp)\n\n"
                    }
                ],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            { name: 'intensity', type: 'int', min: 0, max: 100, defaultValue: 0 },",
                    "        ],",
                    "    },",
                    "}",
                    "import { Component } from '@angular/core';",
                    "import { FormControl } from '@angular/forms';",
                    "import { IntCustomFieldConfig, SharedModule, FormInputComponent } from '@vendure/admin-ui/core';",
                    "",
                    "@Component({",
                    "    template: `",
                    "      <input",
                    "          type=\"range\"",
                    "          [min]=\"config.min || 0\"",
                    "          [max]=\"config.max || 100\"",
                    "          [formControl]=\"formControl\" />",
                    "      {{ formControl.value }}",
                    "  `,",
                    "    standalone: true,",
                    "    imports: [SharedModule],",
                    "})",
                    "export class SliderControlComponent implements FormInputComponent<IntCustomFieldConfig> {",
                    "    readonly: boolean;",
                    "    config: IntCustomFieldConfig;",
                    "    formControl: FormControl;",
                    "}",
                    "import React from 'react';",
                    "import { useFormControl, ReactFormInputOptions, useInjector } from '@vendure/admin-ui/react';",
                    "",
                    "export function SliderFormInput({ readonly, config }: ReactFormInputOptions) {",
                    "    const { value, setFormValue } = useFormControl();",
                    "    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {",
                    "        const val = +e.target.value;",
                    "        setFormValue(val);",
                    "    };",
                    "    return (",
                    "        <>",
                    "            <input",
                    "                type=\"range\"",
                    "                readOnly={readonly}",
                    "                min={config.min || 0}",
                    "                max={config.max || 100}",
                    "                value={value}",
                    "                onChange={handleChange}",
                    "            />",
                    "            {value}",
                    "        </>",
                    "    );",
                    "};",
                    "import { registerFormInputComponent } from '@vendure/admin-ui/core';",
                    "import { SliderControlComponent } from './components/slider-form-input/slider-form-input.component';",
                    "",
                    "export default [",
                    "    registerFormInputComponent('slider-form-input', SliderControlComponent),",
                    "];",
                    "import { registerReactFormInputComponent } from '@vendure/admin-ui/react';",
                    "import { SliderControl } from './components/SliderFormInput';",
                    "",
                    "export default [",
                    "    registerReactFormInputComponent('slider-form-input', SliderFormInput),",
                    "];",
                    "import * as path from 'path';",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "import { compileUiExtensions } from '@vendure/ui-devkit/compiler';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AdminUiPlugin.init({",
                    "            port: 3302,",
                    "            app: compileUiExtensions({",
                    "                outputPath: path.join(__dirname, '../admin-ui'),",
                    "                extensions: [{",
                    "                    id: 'common',",
                    "                    // highlight-start",
                    "                    extensionPath: path.join(__dirname, 'plugins/common/ui'),",
                    "                    providers: ['providers.ts'],",
                    "                    // highlight-end",
                    "                }],",
                    "            }),",
                    "        }),",
                    "    ],",
                    "};",
                    "customFields: {",
                    "    Product: [",
                    "        {",
                    "            name: 'intensity', type: 'int', min: 0, max: 100, defaultValue: 0,",
                    "            // highlight-next-line",
                    "            ui: {component: 'slider-form-input'}",
                    "        },",
                    "    ],",
                    "}"
                ]
            },
            {
                "id": "custom-field-controls-for-relations",
                "title": "Custom Field Controls for Relations",
                "content": "\nIf you have a custom field of the `relation` type (which allows you to relate entities with one another), you can also define custom field controls for them. The basic mechanism is exactly the same as with primitive custom field types (i.e. `string`, `int` etc.), but there are a couple of important points to know:\n\n1. The value of the `formControl` will be the _related entity object_ rather than an id. The Admin UI will internally take care of converting the entity object into an ID when performing the create/update mutation.\n2. Your control will most likely need to fetch data in order to display a list of selections for the user.\n\nHere's an example of a custom field control for a `relation` field which relates a Product to a custom `ProductReview` entity:\n\n\n",
                "subsections": [],
                "code": [
                    "import { Component, OnInit } from '@angular/core';",
                    "import { FormControl } from '@angular/forms';",
                    "import { ActivatedRoute } from '@angular/router';",
                    "import { RelationCustomFieldConfig } from '@vendure/common/lib/generated-types';",
                    "import { FormInputComponent, DataService, SharedModule } from '@vendure/admin-ui/core';",
                    "import { Observable } from 'rxjs';",
                    "import { switchMap } from 'rxjs/operators';",
                    "",
                    "import { GET_REVIEWS_FOR_PRODUCT } from '../product-reviews-list/product-reviews-list.graphql';",
                    "",
                    "@Component({",
                    "    selector: 'relation-review-input',",
                    "    template: `",
                    "        <div *ngIf=\"formControl.value as review\">",
                    "            <vdr-chip>{{ review.rating }} / 5</vdr-chip>",
                    "            {{ review.summary }}",
                    "            <a [routerLink]=\"['/extensions', 'product-reviews', review.id]\">",
                    "                <clr-icon shape=\"link\"></clr-icon>",
                    "            </a>",
                    "        </div>",
                    "        <select [formControl]=\"formControl\">",
                    "            <option [ngValue]=\"null\">Select a review...</option>",
                    "            <option *ngFor=\"let item of reviews$ | async\" [ngValue]=\"item\">",
                    "                <b>{{ item.summary }}</b>",
                    "                {{ item.rating }} / 5",
                    "            </option>",
                    "        </select>",
                    "    `,",
                    "    standalone: true,",
                    "    imports: [SharedModule],",
                    "})",
                    "export class RelationReviewInputComponent implements OnInit, FormInputComponent<RelationCustomFieldConfig> {",
                    "    readonly: boolean;",
                    "    formControl: FormControl;",
                    "    config: RelationCustomFieldConfig;",
                    "",
                    "    reviews$: Observable<any[]>;",
                    "",
                    "    constructor(private dataService: DataService, private route: ActivatedRoute) {}",
                    "",
                    "    ngOnInit() {",
                    "        this.reviews$ = this.route.data.pipe(",
                    "            switchMap(data => data.entity),",
                    "            switchMap((product: any) => {",
                    "                return this.dataService",
                    "                    .query(GET_REVIEWS_FOR_PRODUCT, { productId: product.id })",
                    "                    .mapSingle(({ product }) => product?.reviews.items ?? []);",
                    "            }),",
                    "        );",
                    "    }",
                    "}"
                ]
            },
            {
                "id": "for-configargs",
                "title": "For ConfigArgs",
                "content": "\n[ConfigArgs](/reference/typescript-api/configurable-operation-def/config-args/) are used by classes which extend [Configurable Operations](/guides/developer-guide/strategies-configurable-operations/#configurable-operations) (such as ShippingCalculator or PaymentMethodHandler). These ConfigArgs allow user-input values to be passed to the operation's business logic.\n\nThey are configured in a very similar way to custom fields, and likewise can use custom form inputs by specifying the `ui` property. \n\nHere's an example:\n\n\n\n\n",
                "subsections": [],
                "code": [
                    "export const orderFixedDiscount = new PromotionOrderAction({",
                    "    code: 'order_fixed_discount',",
                    "    args: {",
                    "        discount: {",
                    "            type: 'int',",
                    "            // highlight-start",
                    "            ui: {",
                    "                component: 'currency-form-input',",
                    "            },",
                    "            // highlight-end",
                    "        },",
                    "    },",
                    "    execute(ctx, order, args) {",
                    "        return -args.discount;",
                    "    },",
                    "    description: [{languageCode: LanguageCode.en, value: 'Discount order by fixed amount'}],",
                    "});"
                ]
            }
        ]
    },
    {
        "id": "custom-history-entry-components",
        "metadata": {
            "title": "Custom History Entry Components",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "custom-history-timeline-components",
        "metadata": {
            "title": "Custom History Timeline Components",
            "keywords": [],
            "description": "The Order & Customer detail pages feature a timeline of history entries. Since v1.9.0 it is possible to define custom history entry types - see the [HistoryService docs](/reference/typescript-api/services/history-service/) for an example. You can also define a custom Angular component to render any timeline entry using the [registerHistoryEntryComponent function](/reference/admin-ui-api/custom-history-entry-components/register-history-entry-component/). ![./timeline-entry.webp](./timeline-entry.webp) :::note Currently it is only possible to define new tabs using Angular components."
        },
        "content": "",
        "sections": []
    },
    {
        "id": "custom-input-components",
        "metadata": {
            "title": "Custom Input Components",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "custom-table-components",
        "metadata": {
            "title": "Custom Table Components",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "customcolumncomponent",
        "metadata": {
            "title": "CustomColumnComponent",
            "keywords": [
                "customcolumncomponent",
                "rowitem"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/data-table-2/data-table-custom-component.service.ts\" sourceLine=\"44\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customcolumncomponent",
                "title": "CustomColumnComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/data-table-2/data-table-custom-component.service.ts\" sourceLine=\"44\" packageName=\"@vendure/admin-ui\" />\n\nComponents which are to be used to render custom cells in a data table should implement this interface.\n\nThe `rowItem` property is the data object for the row, e.g. the `Product` object if used\nin the `product-list` table.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "rowitem",
                        "title": "rowItem",
                        "content": "\n<MemberInfo kind=\"property\" type={`any`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface CustomColumnComponent {",
                    "    rowItem: any;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "customdetailcomponent",
        "metadata": {
            "title": "CustomDetailComponent",
            "keywords": [
                "customdetailcomponent",
                "entity$",
                "detailform"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/custom-detail-component/custom-detail-component-types.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customdetailcomponent",
                "title": "CustomDetailComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/custom-detail-component/custom-detail-component-types.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />\n\nCustomDetailComponents allow any arbitrary Angular components to be embedded in entity detail\npages of the Admin UI.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "entity$",
                        "title": "entity$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;any&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "detailform",
                        "title": "detailForm",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormGroup`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface CustomDetailComponent {",
                    "    entity$: Observable<any>;",
                    "    detailForm: UntypedFormGroup;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "customdetailcomponentconfig",
        "metadata": {
            "title": "CustomDetailComponentConfig",
            "keywords": [
                "customdetailcomponentconfig",
                "locationid",
                "component",
                "providers"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/custom-detail-component/custom-detail-component-types.ts\" sourceLine=\"25\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customdetailcomponentconfig",
                "title": "CustomDetailComponentConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/custom-detail-component/custom-detail-component-types.ts\" sourceLine=\"25\" packageName=\"@vendure/admin-ui\" />\n\nConfigures a <a href='/reference/admin-ui-api/custom-detail-components/custom-detail-component#customdetailcomponent'>CustomDetailComponent</a> to be placed in the given location.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "locationid",
                        "title": "locationId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/custom-detail-components/custom-detail-component-location-id#customdetailcomponentlocationid'>CustomDetailComponentLocationId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "component",
                        "title": "component",
                        "content": "\n<MemberInfo kind=\"property\" type={`Type&#60;<a href='/reference/admin-ui-api/custom-detail-components/custom-detail-component#customdetailcomponent'>CustomDetailComponent</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "providers",
                        "title": "providers",
                        "content": "\n<MemberInfo kind=\"property\" type={`Provider[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface CustomDetailComponentConfig {",
                    "    locationId: CustomDetailComponentLocationId;",
                    "    component: Type<CustomDetailComponent>;",
                    "    providers?: Provider[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "customdetailcomponentlocationid",
        "metadata": {
            "title": "CustomDetailComponentLocationId",
            "keywords": [
                "customdetailcomponentlocationid"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/component-registry-types.ts\" sourceLine=\"112\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customdetailcomponentlocationid",
                "title": "CustomDetailComponentLocationId",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/component-registry-types.ts\" sourceLine=\"112\" packageName=\"@vendure/admin-ui\" />\n\nThe valid locations for embedding a <a href='/reference/admin-ui-api/custom-detail-components/custom-detail-component#customdetailcomponent'>CustomDetailComponent</a>.\n\n\n",
                "subsections": [],
                "code": [
                    "type CustomDetailComponentLocationId = | 'administrator-profile'",
                    "    | 'administrator-detail'",
                    "    | 'channel-detail'",
                    "    | 'collection-detail'",
                    "    | 'country-detail'",
                    "    | 'customer-detail'",
                    "    | 'customer-group-detail'",
                    "    | 'draft-order-detail'",
                    "    | 'facet-detail'",
                    "    | 'global-settings-detail'",
                    "    | 'order-detail'",
                    "    | 'payment-method-detail'",
                    "    | 'product-detail'",
                    "    | 'product-variant-detail'",
                    "    | 'promotion-detail'",
                    "    | 'seller-detail'",
                    "    | 'shipping-method-detail'",
                    "    | 'stock-location-detail'",
                    "    | 'tax-category-detail'",
                    "    | 'tax-rate-detail'",
                    "    | 'zone-detail'"
                ]
            }
        ]
    },
    {
        "id": "customer",
        "metadata": {
            "title": "Customer",
            "keywords": [
                "customer",
                "constructor",
                "deletedat",
                "title",
                "firstname",
                "lastname",
                "phonenumber",
                "emailaddress",
                "groups",
                "addresses",
                "orders",
                "user",
                "customfields",
                "channels"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/customer/customer.entity.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customer",
                "title": "Customer",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/customer/customer.entity.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />\n\nThis entity represents a customer of the store, typically an individual person. A Customer can be\na guest, in which case it has no associated <a href='/reference/typescript-api/entities/user#user'>User</a>. Customers with registered account will\nhave an associated User entity.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a></code>, <code>HasCustomFields</code>, <code><a href='/reference/typescript-api/entities/interfaces#softdeletable'>SoftDeletable</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62;) => Customer`}   />\n\n\n"
                    },
                    {
                        "id": "deletedat",
                        "title": "deletedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n"
                    },
                    {
                        "id": "title",
                        "title": "title",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "firstname",
                        "title": "firstName",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "lastname",
                        "title": "lastName",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "phonenumber",
                        "title": "phoneNumber",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "emailaddress",
                        "title": "emailAddress",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "groups",
                        "title": "groups",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "addresses",
                        "title": "addresses",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/address#address'>Address</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "orders",
                        "title": "orders",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "user",
                        "title": "user",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/user#user'>User</a>`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomCustomerFields`}   />\n\n\n"
                    },
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Customer extends VendureEntity implements ChannelAware, HasCustomFields, SoftDeletable {",
                    "    constructor(input?: DeepPartial<Customer>)",
                    "    @Column({ type: Date, nullable: true })",
                    "    deletedAt: Date | null;",
                    "    @Column({ nullable: true })",
                    "    title: string;",
                    "    @Column() firstName: string;",
                    "    @Column() lastName: string;",
                    "    @Column({ nullable: true })",
                    "    phoneNumber: string;",
                    "    @Column()",
                    "    emailAddress: string;",
                    "    @ManyToMany(type => CustomerGroup, group => group.customers)",
                    "    @JoinTable()",
                    "    groups: CustomerGroup[];",
                    "    @OneToMany(type => Address, address => address.customer)",
                    "    addresses: Address[];",
                    "    @OneToMany(type => Order, order => order.customer)",
                    "    orders: Order[];",
                    "    @OneToOne(type => User, { eager: true })",
                    "    @JoinColumn()",
                    "    user?: User;",
                    "    @Column(type => CustomCustomerFields)",
                    "    customFields: CustomCustomerFields;",
                    "    @ManyToMany(type => Channel)",
                    "    @JoinTable()",
                    "    channels: Channel[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "customergroup",
        "metadata": {
            "title": "CustomerGroup",
            "keywords": [
                "customergroup",
                "constructor",
                "name",
                "customers",
                "customfields"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/customer-group/customer-group.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customergroup",
                "title": "CustomerGroup",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/customer-group/customer-group.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />\n\nA grouping of <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>s which enables features such as group-based promotions\nor tax rules.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code>HasCustomFields</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>&#62;) => CustomerGroup`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "customers",
                        "title": "customers",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomCustomerGroupFields`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class CustomerGroup extends VendureEntity implements HasCustomFields {",
                    "    constructor(input?: DeepPartial<CustomerGroup>)",
                    "    @Column() name: string;",
                    "    @ManyToMany(type => Customer, customer => customer.groups)",
                    "    customers: Customer[];",
                    "    @Column(type => CustomCustomerGroupFields)",
                    "    customFields: CustomCustomerGroupFields;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "customergroupservice",
        "metadata": {
            "title": "CustomerGroupService",
            "keywords": [
                "customergroupservice",
                "constructor",
                "findall",
                "findone",
                "getgroupcustomers",
                "create",
                "update",
                "delete",
                "addcustomerstogroup",
                "removecustomersfromgroup"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/customer-group.service.ts\" sourceLine=\"37\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customergroupservice",
                "title": "CustomerGroupService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/customer-group.service.ts\" sourceLine=\"37\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, historyService: <a href='/reference/typescript-api/services/history-service#historyservice'>HistoryService</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, customFieldRelationService: CustomFieldRelationService) => CustomerGroupService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: CustomerGroupListOptions, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>&#62; = []) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, customerGroupId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>&#62; = []) => Promise&#60;<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getgroupcustomers",
                        "title": "getGroupCustomers",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, customerGroupId: <a href='/reference/typescript-api/common/id#id'>ID</a>, options?: CustomerListOptions) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62;&#62;`}   />\n\nReturns a <a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a> of all the Customers in the group.\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateCustomerGroupInput) => Promise&#60;<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateCustomerGroupInput) => Promise&#60;<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "addcustomerstogroup",
                        "title": "addCustomersToGroup",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: MutationAddCustomersToGroupArgs) => Promise&#60;<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "removecustomersfromgroup",
                        "title": "removeCustomersFromGroup",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: MutationRemoveCustomersFromGroupArgs) => Promise&#60;<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class CustomerGroupService {",
                    "    constructor(connection: TransactionalConnection, listQueryBuilder: ListQueryBuilder, historyService: HistoryService, eventBus: EventBus, customFieldRelationService: CustomFieldRelationService)",
                    "    findAll(ctx: RequestContext, options?: CustomerGroupListOptions, relations: RelationPaths<CustomerGroup> = []) => Promise<PaginatedList<CustomerGroup>>;",
                    "    findOne(ctx: RequestContext, customerGroupId: ID, relations: RelationPaths<CustomerGroup> = []) => Promise<CustomerGroup | undefined>;",
                    "    getGroupCustomers(ctx: RequestContext, customerGroupId: ID, options?: CustomerListOptions) => Promise<PaginatedList<Customer>>;",
                    "    create(ctx: RequestContext, input: CreateCustomerGroupInput) => Promise<CustomerGroup>;",
                    "    update(ctx: RequestContext, input: UpdateCustomerGroupInput) => Promise<CustomerGroup>;",
                    "    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "    addCustomersToGroup(ctx: RequestContext, input: MutationAddCustomersToGroupArgs) => Promise<CustomerGroup>;",
                    "    removeCustomersFromGroup(ctx: RequestContext, input: MutationRemoveCustomersFromGroupArgs) => Promise<CustomerGroup>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "customerhistoryentry",
        "metadata": {
            "title": "CustomerHistoryEntry",
            "keywords": [
                "customerhistoryentry",
                "constructor",
                "customer"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/history-entry/customer-history-entry.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customerhistoryentry",
                "title": "CustomerHistoryEntry",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/history-entry/customer-history-entry.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nRepresents an event in the history of a particular <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>.\n\n* Extends: <code><a href='/reference/typescript-api/entities/history-entry#historyentry'>HistoryEntry</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: DeepPartial&#60;<a href='/reference/typescript-api/entities/customer-history-entry#customerhistoryentry'>CustomerHistoryEntry</a>&#62;) => CustomerHistoryEntry`}   />\n\n\n"
                    },
                    {
                        "id": "customer",
                        "title": "customer",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class CustomerHistoryEntry extends HistoryEntry {",
                    "    constructor(input: DeepPartial<CustomerHistoryEntry>)",
                    "    @Index()",
                    "    @ManyToOne(type => Customer, { onDelete: 'CASCADE' })",
                    "    customer: Customer;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "customerhistoryentrycomponent",
        "metadata": {
            "title": "CustomerHistoryEntryComponent",
            "keywords": [
                "customerhistoryentrycomponent",
                "customer"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/custom-history-entry-component/history-entry-component-types.ts\" sourceLine=\"64\" packageName=\"@vendure/admin-ui\" since=\"1.9.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customerhistoryentrycomponent",
                "title": "CustomerHistoryEntryComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/custom-history-entry-component/history-entry-component-types.ts\" sourceLine=\"64\" packageName=\"@vendure/admin-ui\" since=\"1.9.0\" />\n\nUsed to implement a <a href='/reference/admin-ui-api/custom-history-entry-components/history-entry-component#historyentrycomponent'>HistoryEntryComponent</a> which requires access to the Customer object.\n\n* Extends: <code><a href='/reference/admin-ui-api/custom-history-entry-components/history-entry-component#historyentrycomponent'>HistoryEntryComponent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "customer",
                        "title": "customer",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomerFragment`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface CustomerHistoryEntryComponent extends HistoryEntryComponent {",
                    "    customer: CustomerFragment;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "customers",
        "metadata": {
            "title": "Customers",
            "keywords": [
                "customers",
                "guest, registered, verified",
                "customer groups"
            ],
            "description": "A Customer is anybody who has: * Placed an order * Registered an account The Customers section allows you to view and search for your customers. Clicking \"edit\" in the list view brings up the detail view, allowing you to edit the customer details and view orders and history. * **Guest:** Vendure allows \"guest checkouts\", which means people may place orders without needing to register an account with the storefront."
        },
        "content": "",
        "sections": [
            {
                "id": "guest,-registered,-verified",
                "title": "Guest, Registered, Verified",
                "content": "\n* **Guest:** Vendure allows \"guest checkouts\", which means people may place orders without needing to register an account with the storefront. \n* **Registered:** When a customer registers for an account (using their email address by default), they are assigned this status.\n* **Verified:** A registered customer becomes verified once they have been able to confirm ownership of their email account. Note that if alternative authentication methods are set up on your store (e.g. Facebook login), then this workflow might be slightly different.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "customer-groups",
                "title": "Customer Groups",
                "content": "\nCustomer Groups can be used for things like:\n\n* Grouping wholesale customers so that alternative tax calculations may be applied\n* Grouping members of a loyalty scheme for access to exclusive Promotions\n* Segmenting customers for other marketing purposes\n\n![./screen-customer-group.webp](./screen-customer-group.webp)\n\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "customerservice",
        "metadata": {
            "title": "CustomerService",
            "keywords": [
                "customerservice",
                "constructor",
                "findall",
                "findone",
                "findonebyuserid",
                "findaddressesbycustomerid",
                "getcustomergroups",
                "create",
                "update",
                "registercustomeraccount",
                "refreshverificationtoken",
                "verifycustomeremailaddress",
                "requestpasswordreset",
                "resetpassword",
                "requestupdateemailaddress",
                "updateemailaddress",
                "createorupdate",
                "createaddress",
                "updateaddress",
                "deleteaddress",
                "softdelete",
                "createaddressesfornewcustomer",
                "addnotetocustomer",
                "updatecustomernote",
                "deletecustomernote"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/customer.service.ts\" sourceLine=\"79\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customerservice",
                "title": "CustomerService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/customer.service.ts\" sourceLine=\"79\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/customer#customer'>Customer</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, userService: <a href='/reference/typescript-api/services/user-service#userservice'>UserService</a>, countryService: <a href='/reference/typescript-api/services/country-service#countryservice'>CountryService</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, historyService: <a href='/reference/typescript-api/services/history-service#historyservice'>HistoryService</a>, channelService: <a href='/reference/typescript-api/services/channel-service#channelservice'>ChannelService</a>, customFieldRelationService: CustomFieldRelationService, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>) => CustomerService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62; | undefined, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62; = []) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62; = []) => Promise&#60;<a href='/reference/typescript-api/entities/customer#customer'>Customer</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findonebyuserid",
                        "title": "findOneByUserId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, userId: <a href='/reference/typescript-api/common/id#id'>ID</a>, filterOnChannel:  = true) => Promise&#60;<a href='/reference/typescript-api/entities/customer#customer'>Customer</a> | undefined&#62;`}   />\n\nReturns the Customer entity associated with the given userId, if one exists.\nSetting `filterOnChannel` to `true` will limit the results to Customers which are assigned\nto the current active Channel only.\n"
                    },
                    {
                        "id": "findaddressesbycustomerid",
                        "title": "findAddressesByCustomerId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, customerId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/address#address'>Address</a>[]&#62;`}   />\n\nReturns all <a href='/reference/typescript-api/entities/address#address'>Address</a> entities associated with the specified Customer.\n"
                    },
                    {
                        "id": "getcustomergroups",
                        "title": "getCustomerGroups",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, customerId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>[]&#62;`}   />\n\nReturns a list of all <a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a> entities.\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateCustomerInput, password?: string) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;CreateCustomerResult, <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62;&#62;`}   />\n\nCreates a new Customer, including creation of a new User with the special `customer` Role.\n\nIf the `password` argument is specified, the Customer will be immediately verified. If not,\nthen an <a href='/reference/typescript-api/events/event-types#accountregistrationevent'>AccountRegistrationEvent</a> is published, so that the customer can have their\nemail address verified and set their password in a later step using the `verifyCustomerEmailAddress()`\nmethod.\n\nThis method is intended to be used in admin-created Customer flows.\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateCustomerShopInput &#38; { id: <a href='/reference/typescript-api/common/id#id'>ID</a> }) => Promise&#60;<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateCustomerInput) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;UpdateCustomerResult, <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateCustomerInput | (UpdateCustomerShopInput &#38; { id: <a href='/reference/typescript-api/common/id#id'>ID</a> })) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;UpdateCustomerResult, <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "registercustomeraccount",
                        "title": "registerCustomerAccount",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: RegisterCustomerInput) => Promise&#60;RegisterCustomerAccountResult | EmailAddressConflictError | PasswordValidationError&#62;`}   />\n\nRegisters a new Customer account with the <a href='/reference/typescript-api/auth/native-authentication-strategy#nativeauthenticationstrategy'>NativeAuthenticationStrategy</a> and starts\nthe email verification flow (unless <a href='/reference/typescript-api/auth/auth-options#authoptions'>AuthOptions</a> `requireVerification` is set to `false`)\nby publishing an <a href='/reference/typescript-api/events/event-types#accountregistrationevent'>AccountRegistrationEvent</a>.\n\nThis method is intended to be used in storefront Customer-creation flows.\n"
                    },
                    {
                        "id": "refreshverificationtoken",
                        "title": "refreshVerificationToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, emailAddress: string) => Promise&#60;void&#62;`}   />\n\nRefreshes a stale email address verification token by generating a new one and\npublishing a <a href='/reference/typescript-api/events/event-types#accountregistrationevent'>AccountRegistrationEvent</a>.\n"
                    },
                    {
                        "id": "verifycustomeremailaddress",
                        "title": "verifyCustomerEmailAddress",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, verificationToken: string, password?: string) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;VerifyCustomerAccountResult, <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62;&#62;`}   />\n\nGiven a valid verification token which has been published in an <a href='/reference/typescript-api/events/event-types#accountregistrationevent'>AccountRegistrationEvent</a>, this\nmethod is used to set the Customer as `verified` as part of the account registration flow.\n"
                    },
                    {
                        "id": "requestpasswordreset",
                        "title": "requestPasswordReset",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, emailAddress: string) => Promise&#60;void&#62;`}   />\n\nPublishes a new <a href='/reference/typescript-api/events/event-types#passwordresetevent'>PasswordResetEvent</a> for the given email address. This event creates\na token which can be used in the `resetPassword()` method.\n"
                    },
                    {
                        "id": "resetpassword",
                        "title": "resetPassword",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, passwordResetToken: string, password: string) => Promise&#60;\n         <a href='/reference/typescript-api/entities/user#user'>User</a> | PasswordResetTokenExpiredError | PasswordResetTokenInvalidError | PasswordValidationError\n     &#62;`}   />\n\nGiven a valid password reset token created by a call to the `requestPasswordReset()` method,\nthis method will change the Customer's password to that given as the `password` argument.\n"
                    },
                    {
                        "id": "requestupdateemailaddress",
                        "title": "requestUpdateEmailAddress",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, userId: <a href='/reference/typescript-api/common/id#id'>ID</a>, newEmailAddress: string) => Promise&#60;boolean | EmailAddressConflictError&#62;`}   />\n\nPublishes a <a href='/reference/typescript-api/events/event-types#identifierchangerequestevent'>IdentifierChangeRequestEvent</a> for the given User. This event contains a token\nwhich is then used in the `updateEmailAddress()` method to change the email address of the User &\nCustomer.\n"
                    },
                    {
                        "id": "updateemailaddress",
                        "title": "updateEmailAddress",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, token: string) => Promise&#60;boolean | IdentifierChangeTokenInvalidError | IdentifierChangeTokenExpiredError&#62;`}   />\n\nGiven a valid email update token published in a <a href='/reference/typescript-api/events/event-types#identifierchangerequestevent'>IdentifierChangeRequestEvent</a>, this method\nwill update the Customer & User email address.\n"
                    },
                    {
                        "id": "createorupdate",
                        "title": "createOrUpdate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: Partial&#60;CreateCustomerInput&#62; &#38; { emailAddress: string }, errorOnExistingUser: boolean = false) => Promise&#60;<a href='/reference/typescript-api/entities/customer#customer'>Customer</a> | EmailAddressConflictError&#62;`}   />\n\nFor guest checkouts, we assume that a matching email address is the same customer.\n"
                    },
                    {
                        "id": "createaddress",
                        "title": "createAddress",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, customerId: <a href='/reference/typescript-api/common/id#id'>ID</a>, input: CreateAddressInput) => Promise&#60;<a href='/reference/typescript-api/entities/address#address'>Address</a>&#62;`}   />\n\nCreates a new <a href='/reference/typescript-api/entities/address#address'>Address</a> for the given Customer.\n"
                    },
                    {
                        "id": "updateaddress",
                        "title": "updateAddress",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateAddressInput) => Promise&#60;<a href='/reference/typescript-api/entities/address#address'>Address</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "deleteaddress",
                        "title": "deleteAddress",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;boolean&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "softdelete",
                        "title": "softDelete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, customerId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "createaddressesfornewcustomer",
                        "title": "createAddressesForNewCustomer",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => `}   />\n\nIf the Customer associated with the given Order does not yet have any Addresses,\nthis method will create new Address(es) based on the Order's shipping & billing\naddresses.\n"
                    },
                    {
                        "id": "addnotetocustomer",
                        "title": "addNoteToCustomer",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: AddNoteToCustomerInput) => Promise&#60;<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "updatecustomernote",
                        "title": "updateCustomerNote",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateCustomerNoteInput) => Promise&#60;<a href='/reference/typescript-api/entities/history-entry#historyentry'>HistoryEntry</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "deletecustomernote",
                        "title": "deleteCustomerNote",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class CustomerService {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, userService: UserService, countryService: CountryService, listQueryBuilder: ListQueryBuilder, eventBus: EventBus, historyService: HistoryService, channelService: ChannelService, customFieldRelationService: CustomFieldRelationService, translator: TranslatorService)",
                    "    findAll(ctx: RequestContext, options: ListQueryOptions<Customer> | undefined, relations: RelationPaths<Customer> = []) => Promise<PaginatedList<Customer>>;",
                    "    findOne(ctx: RequestContext, id: ID, relations: RelationPaths<Customer> = []) => Promise<Customer | undefined>;",
                    "    findOneByUserId(ctx: RequestContext, userId: ID, filterOnChannel:  = true) => Promise<Customer | undefined>;",
                    "    findAddressesByCustomerId(ctx: RequestContext, customerId: ID) => Promise<Address[]>;",
                    "    getCustomerGroups(ctx: RequestContext, customerId: ID) => Promise<CustomerGroup[]>;",
                    "    create(ctx: RequestContext, input: CreateCustomerInput, password?: string) => Promise<ErrorResultUnion<CreateCustomerResult, Customer>>;",
                    "    update(ctx: RequestContext, input: UpdateCustomerShopInput & { id: ID }) => Promise<Customer>;",
                    "    update(ctx: RequestContext, input: UpdateCustomerInput) => Promise<ErrorResultUnion<UpdateCustomerResult, Customer>>;",
                    "    update(ctx: RequestContext, input: UpdateCustomerInput | (UpdateCustomerShopInput & { id: ID })) => Promise<ErrorResultUnion<UpdateCustomerResult, Customer>>;",
                    "    registerCustomerAccount(ctx: RequestContext, input: RegisterCustomerInput) => Promise<RegisterCustomerAccountResult | EmailAddressConflictError | PasswordValidationError>;",
                    "    refreshVerificationToken(ctx: RequestContext, emailAddress: string) => Promise<void>;",
                    "    verifyCustomerEmailAddress(ctx: RequestContext, verificationToken: string, password?: string) => Promise<ErrorResultUnion<VerifyCustomerAccountResult, Customer>>;",
                    "    requestPasswordReset(ctx: RequestContext, emailAddress: string) => Promise<void>;",
                    "    resetPassword(ctx: RequestContext, passwordResetToken: string, password: string) => Promise<",
                    "        User | PasswordResetTokenExpiredError | PasswordResetTokenInvalidError | PasswordValidationError",
                    "    >;",
                    "    requestUpdateEmailAddress(ctx: RequestContext, userId: ID, newEmailAddress: string) => Promise<boolean | EmailAddressConflictError>;",
                    "    updateEmailAddress(ctx: RequestContext, token: string) => Promise<boolean | IdentifierChangeTokenInvalidError | IdentifierChangeTokenExpiredError>;",
                    "    createOrUpdate(ctx: RequestContext, input: Partial<CreateCustomerInput> & { emailAddress: string }, errorOnExistingUser: boolean = false) => Promise<Customer | EmailAddressConflictError>;",
                    "    createAddress(ctx: RequestContext, customerId: ID, input: CreateAddressInput) => Promise<Address>;",
                    "    updateAddress(ctx: RequestContext, input: UpdateAddressInput) => Promise<Address>;",
                    "    deleteAddress(ctx: RequestContext, id: ID) => Promise<boolean>;",
                    "    softDelete(ctx: RequestContext, customerId: ID) => Promise<DeletionResponse>;",
                    "    createAddressesForNewCustomer(ctx: RequestContext, order: Order) => ;",
                    "    addNoteToCustomer(ctx: RequestContext, input: AddNoteToCustomerInput) => Promise<Customer>;",
                    "    updateCustomerNote(ctx: RequestContext, input: UpdateCustomerNoteInput) => Promise<HistoryEntry>;",
                    "    deleteCustomerNote(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "customfieldconfig",
        "metadata": {
            "title": "CustomFieldConfig",
            "keywords": [
                "customfieldconfig"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/custom-field/custom-field-types.ts\" sourceLine=\"112\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customfieldconfig",
                "title": "CustomFieldConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/custom-field/custom-field-types.ts\" sourceLine=\"112\" packageName=\"@vendure/core\" />\n\nAn object used to configure a custom field.\n\n\n",
                "subsections": [],
                "code": [
                    "type CustomFieldConfig = | StringCustomFieldConfig",
                    "    | LocaleStringCustomFieldConfig",
                    "    | TextCustomFieldConfig",
                    "    | LocaleTextCustomFieldConfig",
                    "    | IntCustomFieldConfig",
                    "    | FloatCustomFieldConfig",
                    "    | BooleanCustomFieldConfig",
                    "    | DateTimeCustomFieldConfig",
                    "    | RelationCustomFieldConfig"
                ]
            }
        ]
    },
    {
        "id": "customfields",
        "metadata": {
            "title": "CustomFields",
            "keywords": [
                "customfields",
                "address",
                "administrator",
                "asset",
                "channel",
                "collection",
                "customer",
                "customergroup",
                "facet",
                "facetvalue",
                "fulfillment",
                "globalsettings",
                "order",
                "orderline",
                "paymentmethod",
                "product",
                "productoption",
                "productoptiongroup",
                "productvariant",
                "promotion",
                "region",
                "seller",
                "shippingmethod",
                "stocklocation",
                "taxcategory",
                "taxrate",
                "user",
                "zone"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/custom-field/custom-field-types.ts\" sourceLine=\"147\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customfields",
                "title": "CustomFields",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/custom-field/custom-field-types.ts\" sourceLine=\"147\" packageName=\"@vendure/core\" />\n\nMost entities can have additional fields added to them by defining an array of <a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>\nobjects on against the corresponding key.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "address",
                        "title": "Address",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "administrator",
                        "title": "Administrator",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "asset",
                        "title": "Asset",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "channel",
                        "title": "Channel",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "collection",
                        "title": "Collection",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "customer",
                        "title": "Customer",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "customergroup",
                        "title": "CustomerGroup",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "facet",
                        "title": "Facet",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "facetvalue",
                        "title": "FacetValue",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "fulfillment",
                        "title": "Fulfillment",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "globalsettings",
                        "title": "GlobalSettings",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "order",
                        "title": "Order",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "orderline",
                        "title": "OrderLine",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "paymentmethod",
                        "title": "PaymentMethod",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "product",
                        "title": "Product",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "productoption",
                        "title": "ProductOption",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "productoptiongroup",
                        "title": "ProductOptionGroup",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "productvariant",
                        "title": "ProductVariant",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "promotion",
                        "title": "Promotion",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "region",
                        "title": "Region",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "seller",
                        "title": "Seller",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "shippingmethod",
                        "title": "ShippingMethod",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "stocklocation",
                        "title": "StockLocation",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "taxcategory",
                        "title": "TaxCategory",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "taxrate",
                        "title": "TaxRate",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "user",
                        "title": "User",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "zone",
                        "title": "Zone",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "bootstrap({",
                    "    // ...",
                    "    customFields: {",
                    "        Product: [",
                    "            { name: 'infoUrl', type: 'string' },",
                    "            { name: 'downloadable', type: 'boolean', defaultValue: false },",
                    "            { name: 'shortName', type: 'localeString' },",
                    "        ],",
                    "        User: [",
                    "            { name: 'socialLoginToken', type: 'string', public: false },",
                    "        ],",
                    "    },",
                    "})",
                    "interface CustomFields {",
                    "    Address?: CustomFieldConfig[];",
                    "    Administrator?: CustomFieldConfig[];",
                    "    Asset?: CustomFieldConfig[];",
                    "    Channel?: CustomFieldConfig[];",
                    "    Collection?: CustomFieldConfig[];",
                    "    Customer?: CustomFieldConfig[];",
                    "    CustomerGroup?: CustomFieldConfig[];",
                    "    Facet?: CustomFieldConfig[];",
                    "    FacetValue?: CustomFieldConfig[];",
                    "    Fulfillment?: CustomFieldConfig[];",
                    "    GlobalSettings?: CustomFieldConfig[];",
                    "    Order?: CustomFieldConfig[];",
                    "    OrderLine?: CustomFieldConfig[];",
                    "    PaymentMethod?: CustomFieldConfig[];",
                    "    Product?: CustomFieldConfig[];",
                    "    ProductOption?: CustomFieldConfig[];",
                    "    ProductOptionGroup?: CustomFieldConfig[];",
                    "    ProductVariant?: CustomFieldConfig[];",
                    "    Promotion?: CustomFieldConfig[];",
                    "    Region?: CustomFieldConfig[];",
                    "    Seller?: CustomFieldConfig[];",
                    "    ShippingMethod?: CustomFieldConfig[];",
                    "    StockLocation?: CustomFieldConfig[];",
                    "    TaxCategory?: CustomFieldConfig[];",
                    "    TaxRate?: CustomFieldConfig[];",
                    "    User?: CustomFieldConfig[];",
                    "    Zone?: CustomFieldConfig[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "customfieldtype",
        "metadata": {
            "title": "CustomFieldType",
            "keywords": [
                "customfieldtype"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"102\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customfieldtype",
                "title": "CustomFieldType",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"102\" packageName=\"@vendure/common\" />\n\nA data type for a custom field. The CustomFieldType determines the data types used in the generated\ndatabase columns and GraphQL fields as follows (key: m = MySQL, p = Postgres, s = SQLite):\n\nType         | DB type                               | GraphQL type\n-----        |---------                              |---------------\nstring       | varchar                               | String\nlocaleString | varchar                               | String\ntext         | longtext(m), text(p,s)                | String\nlocaleText    | longtext(m), text(p,s)                | String\nint          | int                                   | Int\nfloat        | double precision                      | Float\nboolean      | tinyint (m), bool (p), boolean (s)    | Boolean\ndatetime     | datetime (m,s), timestamp (p)         | DateTime\nrelation     | many-to-one / many-to-many relation   | As specified in config\n\nAdditionally, the CustomFieldType also dictates which [configuration options](/reference/typescript-api/custom-fields/#configuration-options)\nare available for that custom field.\n\n\n",
                "subsections": [],
                "code": [
                    "type CustomFieldType = | 'string'",
                    "    | 'localeString'",
                    "    | 'int'",
                    "    | 'float'",
                    "    | 'boolean'",
                    "    | 'datetime'",
                    "    | 'relation'",
                    "    | 'text'",
                    "    | 'localeText'"
                ]
            }
        ]
    },
    {
        "id": "customorderstates",
        "metadata": {
            "title": "CustomOrderStates",
            "keywords": [
                "customorderstates"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/order-state-machine/order-state.ts\" sourceLine=\"11\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "customorderstates",
                "title": "CustomOrderStates",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/order-state-machine/order-state.ts\" sourceLine=\"11\" packageName=\"@vendure/core\" />\n\nAn interface to extend standard <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>.\n\n\n",
                "subsections": [],
                "code": [
                    "interface CustomOrderStates {",
                    "",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "dashboard-widgets",
        "metadata": {
            "title": "Dashboard Widgets",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "dashboardwidgetconfig",
        "metadata": {
            "title": "DashboardWidgetConfig",
            "keywords": [
                "dashboardwidgetconfig",
                "loadcomponent",
                "title",
                "supportedwidths",
                "requirespermissions"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/dashboard-widget/dashboard-widget-types.ts\" sourceLine=\"11\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "dashboardwidgetconfig",
                "title": "DashboardWidgetConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/dashboard-widget/dashboard-widget-types.ts\" sourceLine=\"11\" packageName=\"@vendure/admin-ui\" />\n\nA configuration object for a dashboard widget.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "loadcomponent",
                        "title": "loadComponent",
                        "content": "\n<MemberInfo kind=\"property\" type={`() =&#62; Promise&#60;Type&#60;any&#62;&#62; | Type&#60;any&#62;`}   />\n\nUsed to specify the widget component. Supports both eager- and lazy-loading.\n\n*Example*\n\n"
                    },
                    {
                        "id": "title",
                        "title": "title",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe title of the widget. Can be a translation token as it will get passed\nthrough the `translate` pipe.\n"
                    },
                    {
                        "id": "supportedwidths",
                        "title": "supportedWidths",
                        "content": "\n<MemberInfo kind=\"property\" type={`DashboardWidgetWidth[]`}   />\n\nThe supported widths of the widget, in terms of a Bootstrap-style 12-column grid.\nIf omitted, then it is assumed the widget supports all widths.\n"
                    },
                    {
                        "id": "requirespermissions",
                        "title": "requiresPermissions",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`}   />\n\nIf set, the widget will only be displayed if the current user has all the\nspecified permissions.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface DashboardWidgetConfig {",
                    "    loadComponent: () => Promise<Type<any>> | Type<any>;",
                    "    title?: string;",
                    "    supportedWidths?: DashboardWidgetWidth[];",
                    "    requiresPermissions?: string[];",
                    "}",
                    "// eager-loading",
                    "loadComponent: () => MyWidgetComponent,",
                    "",
                    "// lazy-loading",
                    "loadComponent: () => import('./path-to/widget.component').then(m => m.MyWidgetComponent),"
                ]
            }
        ]
    },
    {
        "id": "data-access",
        "metadata": {
            "title": "Data Access",
            "keywords": [
                "data-access"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "database-migration",
        "metadata": {
            "title": "Database Migration",
            "keywords": [
                "v2 database migration"
            ],
            "description": "Vendure v2 introduces a number of breaking changes to the database schema, some of which require quite complex migrations in order to preserve existing data. To make this process as smooth as possible, we have created a migration tool which will handle the hard parts for you! {{< alert \"warning\" >}} **Important!** It is _critical_ that you back up your production data prior to attempting this migration. **Note for MySQL/MariaDB users:** transactions for migrations are [not supported by these databases](https://dev.mysql.com/doc/refman/5.7/en/cannot-roll-back.html). This means that if the migration fails for some reason, the statements that have executed will not get rolled back, and your DB schema can be left in an inconsistent state from which is it can be hard to recover. Therefore, it is doubly critical that you have a good backup that you can easily restore prior to attempting this migration. {{< /alert >}}"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "database-subscribers",
        "metadata": {
            "title": "Database subscribers",
            "keywords": [
                "defining database subscribers",
                "simple subscribers",
                "injectable subscribers",
                "troubleshooting subscribers"
            ],
            "description": "TypeORM allows us to define [subscribers](https://typeorm.io/listeners-and-subscribers#what-is-a-subscriber). With a subscriber, we can listen to specific entity events and take actions based on inserts, updates, deletions and more. If you need lower-level access to database changes that you get with the [Vendure EventBus system](/reference/typescript-api/events/event-bus/), TypeORM subscribers can be useful. The simplest way to register a subscriber is to pass it to the `dbConnectionOptions.subscribers` array: ```ts title=\"src/plugins/my-plugin/product-subscriber.ts\" import { Product, VendureConfig } from '@vendure/core';"
        },
        "content": "",
        "sections": [
            {
                "id": "simple-subscribers",
                "title": "Simple subscribers",
                "content": "\nThe simplest way to register a subscriber is to pass it to the `dbConnectionOptions.subscribers` array:\n\n\n\nThe limitation of this method is that the `ProductSubscriber` class cannot make use of dependency injection, since it is not known to the underlying NestJS application and is instead instantiated by TypeORM directly.\n\nIf you need to make use of providers in your subscriber class, you'll need to use the following pattern.\n\n",
                "subsections": [],
                "code": [
                    "import { Product, VendureConfig } from '@vendure/core';",
                    "import { EntitySubscriberInterface, EventSubscriber, UpdateEvent } from 'typeorm';",
                    "",
                    "@EventSubscriber()",
                    "export class ProductSubscriber implements EntitySubscriberInterface<Product> {",
                    "  listenTo() {",
                    "    return Product;",
                    "  }",
                    "  ",
                    "  beforeUpdate(event: UpdateEvent<Product>) {",
                    "    console.log(`BEFORE PRODUCT UPDATED: `, event.entity);",
                    "  }",
                    "}",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { ProductSubscriber } from './plugins/my-plugin/product-subscriber';",
                    "",
                    "// ...",
                    "export const config: VendureConfig = {",
                    "  dbConnectionOptions: {",
                    "    // ...",
                    "    subscribers: [ProductSubscriber],",
                    "  }",
                    "}"
                ]
            },
            {
                "id": "injectable-subscribers",
                "title": "Injectable subscribers",
                "content": "\nBy defining the subscriber as an injectable provider, and passing it to a Vendure plugin, you can take advantage of Nest's dependency injection inside the subscriber methods.\n\n\n\n\n",
                "subsections": [],
                "code": [
                    "import {",
                    "  PluginCommonModule,",
                    "  Product,",
                    "  TransactionalConnection,",
                    "  VendureConfig,",
                    "  VendurePlugin,",
                    "} from '@vendure/core';",
                    "import { Injectable } from '@nestjs/common';",
                    "import { EntitySubscriberInterface, EventSubscriber, UpdateEvent } from 'typeorm';",
                    "import { MyService } from './services/my.service';",
                    "",
                    "@Injectable()",
                    "@EventSubscriber()",
                    "export class ProductSubscriber implements EntitySubscriberInterface<Product> {",
                    "    constructor(private connection: TransactionalConnection,",
                    "                private myService: MyService) {",
                    "        // This is how we can dynamically register the subscriber",
                    "        // with TypeORM",
                    "        connection.rawConnection.subscribers.push(this);",
                    "    }",
                    "",
                    "    listenTo() {",
                    "        return Product;",
                    "    }",
                    "",
                    "    async beforeUpdate(event: UpdateEvent<Product>) {",
                    "        console.log(`BEFORE PRODUCT UPDATED: `, event.entity);",
                    "        // Now we can make use of our injected provider",
                    "        await this.myService.handleProductUpdate(event);",
                    "    }",
                    "}",
                    "@VendurePlugin({",
                    "    imports: [PluginCommonModule],",
                    "    providers: [ProductSubscriber, MyService],",
                    "})",
                    "class MyPlugin {",
                    "}",
                    "// ...",
                    "export const config: VendureConfig = {",
                    "    dbConnectionOptions: {",
                    "        // We no longer need to pass the subscriber here",
                    "        // subscribers: [ProductSubscriber],",
                    "    },",
                    "    plugins: [",
                    "        MyPlugin,",
                    "    ],",
                    "}"
                ]
            },
            {
                "id": "troubleshooting-subscribers",
                "title": "Troubleshooting subscribers",
                "content": "\nAn important factor when working with TypeORM subscribers is that they are very low-level and require some understanding of the Vendure schema.\n\nFor example consider the `ProductSubscriber` above. If an admin changes a product's name in the Admin UI, this subscriber **will not fire**. The reason is that the `name` property is actually stored on the `ProductTranslation` entity, rather than on the `Product` entity.\n\nSo if your subscribers do not seem to work as expected, check your database schema and make sure you are really targeting the correct entity which has the property that you are interested in.\n\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "dataservice",
        "metadata": {
            "title": "DataService",
            "keywords": [
                "dataservice",
                "query",
                "mutate",
                "queryresult",
                "constructor",
                "completed$",
                "refetchonchannelchange",
                "single$",
                "stream$",
                "ref",
                "mapsingle",
                "mapstream"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/data/providers/data.service.ts\" sourceLine=\"33\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "dataservice",
                "title": "DataService",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/data/providers/data.service.ts\" sourceLine=\"33\" packageName=\"@vendure/admin-ui\" />\n\nUsed to interact with the Admin API via GraphQL queries. Internally this service uses the\nApollo Client, which means it maintains a normalized entity cache. For this reason, it is\nadvisable to always select the `id` field of any entity, which will allow the returned data\nto be effectively cached.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "query",
                        "title": "query",
                        "content": "\n<MemberInfo kind=\"method\" type={`(query: DocumentNode | TypedDocumentNode&#60;T, V&#62;, variables?: V, fetchPolicy: WatchQueryFetchPolicy = 'cache-and-network') => <a href='/reference/admin-ui-api/services/data-service#queryresult'>QueryResult</a>&#60;T, V&#62;`}   />\n\nPerform a GraphQL query. Returns a <a href='/reference/admin-ui-api/services/data-service#queryresult'>QueryResult</a> which allows further control over\nthey type of result returned, e.g. stream of values, single value etc.\n\n*Example*\n\n"
                    },
                    {
                        "id": "mutate",
                        "title": "mutate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(mutation: DocumentNode | TypedDocumentNode&#60;T, V&#62;, variables?: V, update?: MutationUpdaterFn&#60;T&#62;) => Observable&#60;T&#62;`}   />\n\nPerform a GraphQL mutation.\n\n*Example*\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class DataService {",
                    "    query(query: DocumentNode | TypedDocumentNode<T, V>, variables?: V, fetchPolicy: WatchQueryFetchPolicy = 'cache-and-network') => QueryResult<T, V>;",
                    "    mutate(mutation: DocumentNode | TypedDocumentNode<T, V>, variables?: V, update?: MutationUpdaterFn<T>) => Observable<T>;",
                    "}",
                    "const result$ = this.dataService.query(gql`",
                    "  query MyQuery($id: ID!) {",
                    "    product(id: $id) {",
                    "      id",
                    "      name",
                    "      slug",
                    "    }",
                    "  },",
                    "  { id: 123 },",
                    ").mapSingle(data => data.product);",
                    "const result$ = this.dataService.mutate(gql`",
                    "  mutation MyMutation($Codegen.UpdateEntityInput!) {",
                    "    updateEntity(input: $input) {",
                    "      id",
                    "      name",
                    "    }",
                    "  },",
                    "  { Codegen.updateEntityInput },",
                    ");"
                ]
            },
            {
                "id": "queryresult",
                "title": "QueryResult",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/data/query-result.ts\" sourceLine=\"19\" packageName=\"@vendure/admin-ui\" />\n\nThis class wraps the Apollo Angular QueryRef object and exposes some getters\nfor convenience.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queryRef: QueryRef&#60;T, V&#62;, apollo: Apollo) => QueryResult`}   />\n\n\n"
                    },
                    {
                        "id": "completed$",
                        "title": "completed$",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "refetchonchannelchange",
                        "title": "refetchOnChannelChange",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => <a href='/reference/admin-ui-api/services/data-service#queryresult'>QueryResult</a>&#60;T, V&#62;`}   />\n\nRe-fetch this query whenever the active Channel changes.\n"
                    },
                    {
                        "id": "single$",
                        "title": "single$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;T&#62;`}   />\n\nReturns an Observable which emits a single result and then completes.\n"
                    },
                    {
                        "id": "stream$",
                        "title": "stream$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;T&#62;`}   />\n\nReturns an Observable which emits until unsubscribed.\n"
                    },
                    {
                        "id": "ref",
                        "title": "ref",
                        "content": "\n<MemberInfo kind=\"property\" type={`QueryRef&#60;T, V&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "mapsingle",
                        "title": "mapSingle",
                        "content": "\n<MemberInfo kind=\"method\" type={`(mapFn: (item: T) =&#62; R) => Observable&#60;R&#62;`}   />\n\nReturns a single-result Observable after applying the map function.\n"
                    },
                    {
                        "id": "mapstream",
                        "title": "mapStream",
                        "content": "\n<MemberInfo kind=\"method\" type={`(mapFn: (item: T) =&#62; R) => Observable&#60;R&#62;`}   />\n\nReturns a multiple-result Observable after applying the map function.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class QueryResult<T, V extends Record<string, any> = Record<string, any>> {",
                    "    constructor(queryRef: QueryRef<T, V>, apollo: Apollo)",
                    "    completed$ = new Subject<void>();",
                    "    refetchOnChannelChange() => QueryResult<T, V>;",
                    "    single$: Observable<T>",
                    "    stream$: Observable<T>",
                    "    ref: QueryRef<T, V>",
                    "    mapSingle(mapFn: (item: T) => R) => Observable<R>;",
                    "    mapStream(mapFn: (item: T) => R) => Observable<R>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "datatable2component",
        "metadata": {
            "title": "DataTable2Component",
            "keywords": [
                "datatable2component",
                "id",
                "items",
                "itemsperpage",
                "currentpage",
                "totalitems",
                "emptystatelabel",
                "filters",
                "activeindex",
                "pagechange",
                "itemsperpagechange",
                "columns",
                "customfieldcolumns",
                "searchcomponent",
                "bulkactionmenucomponent",
                "customsearchtemplate",
                "templaterefs",
                "injector",
                "route",
                "filterpresetservice",
                "datatablecustomcomponentservice",
                "customcomponents",
                "rowtemplate",
                "currentstart",
                "currentend",
                "disableselect",
                "showsearchfilterrow",
                "uilanguage$",
                "destroy$",
                "constructor",
                "selectionmanager",
                "allcolumns",
                "visiblesortedcolumns",
                "sortedcolumns",
                "ngonchanges",
                "ngondestroy",
                "ngaftercontentinit",
                "oncolumnreorder",
                "oncolumnsreset",
                "togglesearchfilterrow",
                "trackbyfn",
                "ontoggleallclick",
                "onrowclick",
                "getdatatableconfig"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/data-table-2/data-table2.component.ts\" sourceLine=\"101\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "datatable2component",
                "title": "DataTable2Component",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/data-table-2/data-table2.component.ts\" sourceLine=\"101\" packageName=\"@vendure/admin-ui\" />\n\nA table for displaying PaginatedList results. It is designed to be used inside components which\nextend the <a href='/reference/admin-ui-api/list-detail-views/base-list-component#baselistcomponent'>BaseListComponent</a> or <a href='/reference/admin-ui-api/list-detail-views/typed-base-list-component#typedbaselistcomponent'>TypedBaseListComponent</a> class.\n\n*Example*\n\n\n* Implements: <code>AfterContentInit</code>, <code>OnChanges</code>, <code>OnDestroy</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`DataTableLocationId`}   />\n\n\n"
                    },
                    {
                        "id": "items",
                        "title": "items",
                        "content": "\n<MemberInfo kind=\"property\" type={`T[]`}   />\n\n\n"
                    },
                    {
                        "id": "itemsperpage",
                        "title": "itemsPerPage",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "currentpage",
                        "title": "currentPage",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "totalitems",
                        "title": "totalItems",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "emptystatelabel",
                        "title": "emptyStateLabel",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "filters",
                        "title": "filters",
                        "content": "\n<MemberInfo kind=\"property\" type={`DataTableFilterCollection`}   />\n\n\n"
                    },
                    {
                        "id": "activeindex",
                        "title": "activeIndex",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "pagechange",
                        "title": "pageChange",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "itemsperpagechange",
                        "title": "itemsPerPageChange",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "columns",
                        "title": "columns",
                        "content": "\n<MemberInfo kind=\"property\" type={`QueryList&#60;DataTable2ColumnComponent&#60;T&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "customfieldcolumns",
                        "title": "customFieldColumns",
                        "content": "\n<MemberInfo kind=\"property\" type={`QueryList&#60;DataTableCustomFieldColumnComponent&#60;T&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "searchcomponent",
                        "title": "searchComponent",
                        "content": "\n<MemberInfo kind=\"property\" type={`DataTable2SearchComponent`}   />\n\n\n"
                    },
                    {
                        "id": "bulkactionmenucomponent",
                        "title": "bulkActionMenuComponent",
                        "content": "\n<MemberInfo kind=\"property\" type={`BulkActionMenuComponent`}   />\n\n\n"
                    },
                    {
                        "id": "customsearchtemplate",
                        "title": "customSearchTemplate",
                        "content": "\n<MemberInfo kind=\"property\" type={`TemplateRef&#60;any&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "templaterefs",
                        "title": "templateRefs",
                        "content": "\n<MemberInfo kind=\"property\" type={`QueryList&#60;TemplateRef&#60;any&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "injector",
                        "title": "injector",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "filterpresetservice",
                        "title": "filterPresetService",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "datatablecustomcomponentservice",
                        "title": "dataTableCustomComponentService",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "customcomponents",
                        "title": "customComponents",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "rowtemplate",
                        "title": "rowTemplate",
                        "content": "\n<MemberInfo kind=\"property\" type={`TemplateRef&#60;any&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "currentstart",
                        "title": "currentStart",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "currentend",
                        "title": "currentEnd",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "disableselect",
                        "title": "disableSelect",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "showsearchfilterrow",
                        "title": "showSearchFilterRow",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "uilanguage$",
                        "title": "uiLanguage$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "destroy$",
                        "title": "destroy$",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(changeDetectorRef: ChangeDetectorRef, localStorageService: LocalStorageService, dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>) => DataTable2Component`}   />\n\n\n"
                    },
                    {
                        "id": "selectionmanager",
                        "title": "selectionManager",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "allcolumns",
                        "title": "allColumns",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "visiblesortedcolumns",
                        "title": "visibleSortedColumns",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "sortedcolumns",
                        "title": "sortedColumns",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "ngonchanges",
                        "title": "ngOnChanges",
                        "content": "\n<MemberInfo kind=\"method\" type={`(changes: SimpleChanges) => `}   />\n\n\n"
                    },
                    {
                        "id": "ngondestroy",
                        "title": "ngOnDestroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "ngaftercontentinit",
                        "title": "ngAfterContentInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => void`}   />\n\n\n"
                    },
                    {
                        "id": "oncolumnreorder",
                        "title": "onColumnReorder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(event: { column: DataTable2ColumnComponent&#60;any&#62;; newIndex: number }) => `}   />\n\n\n"
                    },
                    {
                        "id": "oncolumnsreset",
                        "title": "onColumnsReset",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "togglesearchfilterrow",
                        "title": "toggleSearchFilterRow",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "trackbyfn",
                        "title": "trackByFn",
                        "content": "\n<MemberInfo kind=\"method\" type={`(index: number, item: any) => `}   />\n\n\n"
                    },
                    {
                        "id": "ontoggleallclick",
                        "title": "onToggleAllClick",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "onrowclick",
                        "title": "onRowClick",
                        "content": "\n<MemberInfo kind=\"method\" type={`(item: T, event: MouseEvent) => `}   />\n\n\n"
                    },
                    {
                        "id": "getdatatableconfig",
                        "title": "getDataTableConfig",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => DataTableConfig`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<vdr-data-table-2",
                    "    id=\"product-review-list\"",
                    "    [items]=\"items$ | async\"",
                    "    [itemsPerPage]=\"itemsPerPage$ | async\"",
                    "    [totalItems]=\"totalItems$ | async\"",
                    "    [currentPage]=\"currentPage$ | async\"",
                    "    [filters]=\"filters\"",
                    "    (pageChange)=\"setPageNumber($event)\"",
                    "    (itemsPerPageChange)=\"setItemsPerPage($event)\"",
                    ">",
                    "    <vdr-bulk-action-menu",
                    "        locationId=\"product-review-list\"",
                    "        [hostComponent]=\"this\"",
                    "        [selectionManager]=\"selectionManager\"",
                    "    />",
                    "    <vdr-dt2-search",
                    "        [searchTermControl]=\"searchTermControl\"",
                    "        searchTermPlaceholder=\"Filter by title\"",
                    "    />",
                    "    <vdr-dt2-column [heading]=\"'common.id' | translate\" [hiddenByDefault]=\"true\">",
                    "        <ng-template let-review=\"item\">",
                    "            {{ review.id }}",
                    "        </ng-template>",
                    "    </vdr-dt2-column>",
                    "    <vdr-dt2-column",
                    "        [heading]=\"'common.created-at' | translate\"",
                    "        [hiddenByDefault]=\"true\"",
                    "        [sort]=\"sorts.get('createdAt')\"",
                    "    >",
                    "        <ng-template let-review=\"item\">",
                    "            {{ review.createdAt | localeDate : 'short' }}",
                    "        </ng-template>",
                    "    </vdr-dt2-column>",
                    "    <vdr-dt2-column",
                    "        [heading]=\"'common.updated-at' | translate\"",
                    "        [hiddenByDefault]=\"true\"",
                    "        [sort]=\"sorts.get('updatedAt')\"",
                    "    >",
                    "        <ng-template let-review=\"item\">",
                    "            {{ review.updatedAt | localeDate : 'short' }}",
                    "        </ng-template>",
                    "    </vdr-dt2-column>",
                    "    <vdr-dt2-column [heading]=\"'common.name' | translate\" [optional]=\"false\" [sort]=\"sorts.get('name')\">",
                    "        <ng-template let-review=\"item\">",
                    "            <a class=\"button-ghost\" [routerLink]=\"['./', review.id]\"",
                    "                ><span>{{ review.name }}</span>",
                    "                <clr-icon shape=\"arrow right\"></clr-icon>",
                    "            </a>",
                    "        </ng-template>",
                    "    </vdr-dt2-column>",
                    "</vdr-data-table-2>",
                    "class DataTable2Component<T> implements AfterContentInit, OnChanges, OnDestroy {",
                    "    @Input() id: DataTableLocationId;",
                    "    @Input() items: T[];",
                    "    @Input() itemsPerPage: number;",
                    "    @Input() currentPage: number;",
                    "    @Input() totalItems: number;",
                    "    @Input() emptyStateLabel: string;",
                    "    @Input() filters: DataTableFilterCollection;",
                    "    @Input() activeIndex = -1;",
                    "    @Output() pageChange = new EventEmitter<number>();",
                    "    @Output() itemsPerPageChange = new EventEmitter<number>();",
                    "    @ContentChildren(DataTable2ColumnComponent) columns: QueryList<DataTable2ColumnComponent<T>>;",
                    "    @ContentChildren(DataTableCustomFieldColumnComponent)",
                    "    customFieldColumns: QueryList<DataTableCustomFieldColumnComponent<T>>;",
                    "    @ContentChild(DataTable2SearchComponent) searchComponent: DataTable2SearchComponent;",
                    "    @ContentChild(BulkActionMenuComponent) bulkActionMenuComponent: BulkActionMenuComponent;",
                    "    @ContentChild('vdrDt2CustomSearch') customSearchTemplate: TemplateRef<any>;",
                    "    @ContentChildren(TemplateRef) templateRefs: QueryList<TemplateRef<any>>;",
                    "    injector = inject(Injector);",
                    "    route = inject(ActivatedRoute);",
                    "    filterPresetService = inject(FilterPresetService);",
                    "    dataTableCustomComponentService = inject(DataTableCustomComponentService);",
                    "    protected customComponents = new Map<string, { config: DataTableComponentConfig; injector: Injector }>();",
                    "    rowTemplate: TemplateRef<any>;",
                    "    currentStart: number;",
                    "    currentEnd: number;",
                    "    disableSelect = false;",
                    "    showSearchFilterRow = false;",
                    "    protected uiLanguage$: Observable<LanguageCode>;",
                    "    protected destroy$ = new Subject<void>();",
                    "    constructor(changeDetectorRef: ChangeDetectorRef, localStorageService: LocalStorageService, dataService: DataService)",
                    "    selectionManager: void",
                    "    allColumns: void",
                    "    visibleSortedColumns: void",
                    "    sortedColumns: void",
                    "    ngOnChanges(changes: SimpleChanges) => ;",
                    "    ngOnDestroy() => ;",
                    "    ngAfterContentInit() => void;",
                    "    onColumnReorder(event: { column: DataTable2ColumnComponent<any>; newIndex: number }) => ;",
                    "    onColumnsReset() => ;",
                    "    toggleSearchFilterRow() => ;",
                    "    trackByFn(index: number, item: any) => ;",
                    "    onToggleAllClick() => ;",
                    "    onRowClick(item: T, event: MouseEvent) => ;",
                    "    getDataTableConfig() => DataTableConfig;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "datatablecomponent",
        "metadata": {
            "title": "DataTableComponent",
            "keywords": [
                "datatablecomponent",
                "items",
                "itemsperpage",
                "currentpage",
                "totalitems",
                "emptystatelabel",
                "selectionmanager",
                "pagechange",
                "itemsperpagechange",
                "allselected",
                "isrowselectedfn",
                "allselectchange",
                "rowselectchange",
                "columns",
                "templaterefs",
                "rowtemplate",
                "currentstart",
                "currentend",
                "disableselect",
                "constructor",
                "ngoninit",
                "ngonchanges",
                "ngondestroy",
                "ngaftercontentinit",
                "trackbyfn",
                "ontoggleallclick",
                "onrowclick"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/data-table/data-table.component.ts\" sourceLine=\"86\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "datatablecomponent",
                "title": "DataTableComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/data-table/data-table.component.ts\" sourceLine=\"86\" packageName=\"@vendure/admin-ui\" />\n\nA table for displaying PaginatedList results. It is designed to be used inside components which\nextend the <a href='/reference/admin-ui-api/list-detail-views/base-list-component#baselistcomponent'>BaseListComponent</a> class.\n\n**Deprecated** This component is deprecated. Use the <a href='/reference/admin-ui-api/components/data-table2component#datatable2component'>DataTable2Component</a> instead.\n\n*Example*\n\n\n* Implements: <code>AfterContentInit</code>, <code>OnChanges</code>, <code>OnInit</code>, <code>OnDestroy</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "items",
                        "title": "items",
                        "content": "\n<MemberInfo kind=\"property\" type={`T[]`}   />\n\n\n"
                    },
                    {
                        "id": "itemsperpage",
                        "title": "itemsPerPage",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "currentpage",
                        "title": "currentPage",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "totalitems",
                        "title": "totalItems",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "emptystatelabel",
                        "title": "emptyStateLabel",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "selectionmanager",
                        "title": "selectionManager",
                        "content": "\n<MemberInfo kind=\"property\" type={`SelectionManager&#60;T&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "pagechange",
                        "title": "pageChange",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "itemsperpagechange",
                        "title": "itemsPerPageChange",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "allselected",
                        "title": "allSelected",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "isrowselectedfn",
                        "title": "isRowSelectedFn",
                        "content": "\n<MemberInfo kind=\"property\" type={`(item: T) =&#62; boolean`}   />\n\n\n"
                    },
                    {
                        "id": "allselectchange",
                        "title": "allSelectChange",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "rowselectchange",
                        "title": "rowSelectChange",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "columns",
                        "title": "columns",
                        "content": "\n<MemberInfo kind=\"property\" type={`QueryList&#60;DataTableColumnComponent&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "templaterefs",
                        "title": "templateRefs",
                        "content": "\n<MemberInfo kind=\"property\" type={`QueryList&#60;TemplateRef&#60;any&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "rowtemplate",
                        "title": "rowTemplate",
                        "content": "\n<MemberInfo kind=\"property\" type={`TemplateRef&#60;any&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "currentstart",
                        "title": "currentStart",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "currentend",
                        "title": "currentEnd",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "disableselect",
                        "title": "disableSelect",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(changeDetectorRef: ChangeDetectorRef) => DataTableComponent`}   />\n\n\n"
                    },
                    {
                        "id": "ngoninit",
                        "title": "ngOnInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "ngonchanges",
                        "title": "ngOnChanges",
                        "content": "\n<MemberInfo kind=\"method\" type={`(changes: SimpleChanges) => `}   />\n\n\n"
                    },
                    {
                        "id": "ngondestroy",
                        "title": "ngOnDestroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "ngaftercontentinit",
                        "title": "ngAfterContentInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => void`}   />\n\n\n"
                    },
                    {
                        "id": "trackbyfn",
                        "title": "trackByFn",
                        "content": "\n<MemberInfo kind=\"method\" type={`(index: number, item: any) => `}   />\n\n\n"
                    },
                    {
                        "id": "ontoggleallclick",
                        "title": "onToggleAllClick",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "onrowclick",
                        "title": "onRowClick",
                        "content": "\n<MemberInfo kind=\"method\" type={`(item: T, event: MouseEvent) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<vdr-data-table",
                    "  [items]=\"items$ | async\"",
                    "  [itemsPerPage]=\"itemsPerPage$ | async\"",
                    "  [totalItems]=\"totalItems$ | async\"",
                    "  [currentPage]=\"currentPage$ | async\"",
                    "  (pageChange)=\"setPageNumber($event)\"",
                    "  (itemsPerPageChange)=\"setItemsPerPage($event)\"",
                    ">",
                    "  <!-- The header columns are defined first -->",
                    "  <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>",
                    "  <vdr-dt-column></vdr-dt-column>",
                    "  <vdr-dt-column></vdr-dt-column>",
                    "",
                    "  <!-- Then we define how a row is rendered -->",
                    "  <ng-template let-taxRate=\"item\">",
                    "    <td class=\"left align-middle\">{{ taxRate.name }}</td>",
                    "    <td class=\"left align-middle\">{{ taxRate.category.name }}</td>",
                    "    <td class=\"left align-middle\">{{ taxRate.zone.name }}</td>",
                    "    <td class=\"left align-middle\">{{ taxRate.value }}%</td>",
                    "    <td class=\"right align-middle\">",
                    "      <vdr-table-row-action",
                    "        iconShape=\"edit\"",
                    "        [label]=\"'common.edit' | translate\"",
                    "        [linkTo]=\"['./', taxRate.id]\"",
                    "      ></vdr-table-row-action>",
                    "    </td>",
                    "    <td class=\"right align-middle\">",
                    "      <vdr-dropdown>",
                    "        <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>",
                    "          {{ 'common.actions' | translate }}",
                    "          <clr-icon shape=\"caret down\"></clr-icon>",
                    "        </button>",
                    "        <vdr-dropdown-menu vdrPosition=\"bottom-right\">",
                    "          <button",
                    "              type=\"button\"",
                    "              class=\"delete-button\"",
                    "              (click)=\"deleteTaxRate(taxRate)\"",
                    "              [disabled]=\"!(['DeleteSettings', 'DeleteTaxRate'] | hasPermission)\"",
                    "              vdrDropdownItem",
                    "          >",
                    "              <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>",
                    "              {{ 'common.delete' | translate }}",
                    "          </button>",
                    "        </vdr-dropdown-menu>",
                    "      </vdr-dropdown>",
                    "    </td>",
                    "  </ng-template>",
                    "</vdr-data-table>",
                    "class DataTableComponent<T> implements AfterContentInit, OnChanges, OnInit, OnDestroy {",
                    "    @Input() items: T[];",
                    "    @Input() itemsPerPage: number;",
                    "    @Input() currentPage: number;",
                    "    @Input() totalItems: number;",
                    "    @Input() emptyStateLabel: string;",
                    "    @Input() selectionManager?: SelectionManager<T>;",
                    "    @Output() pageChange = new EventEmitter<number>();",
                    "    @Output() itemsPerPageChange = new EventEmitter<number>();",
                    "    @Input() allSelected: boolean;",
                    "    @Input() isRowSelectedFn: (item: T) => boolean;",
                    "    @Output() allSelectChange = new EventEmitter<void>();",
                    "    @Output() rowSelectChange = new EventEmitter<{ event: MouseEvent; item: T }>();",
                    "    @ContentChildren(DataTableColumnComponent) columns: QueryList<DataTableColumnComponent>;",
                    "    @ContentChildren(TemplateRef) templateRefs: QueryList<TemplateRef<any>>;",
                    "    rowTemplate: TemplateRef<any>;",
                    "    currentStart: number;",
                    "    currentEnd: number;",
                    "    disableSelect = false;",
                    "    constructor(changeDetectorRef: ChangeDetectorRef)",
                    "    ngOnInit() => ;",
                    "    ngOnChanges(changes: SimpleChanges) => ;",
                    "    ngOnDestroy() => ;",
                    "    ngAfterContentInit() => void;",
                    "    trackByFn(index: number, item: any) => ;",
                    "    onToggleAllClick() => ;",
                    "    onRowClick(item: T, event: MouseEvent) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "datatablecomponentconfig",
        "metadata": {
            "title": "DataTableComponentConfig",
            "keywords": [
                "datatablecomponentconfig",
                "tableid",
                "columnid",
                "component",
                "providers"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/data-table-2/data-table-custom-component.service.ts\" sourceLine=\"54\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "datatablecomponentconfig",
                "title": "DataTableComponentConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/data-table-2/data-table-custom-component.service.ts\" sourceLine=\"54\" packageName=\"@vendure/admin-ui\" />\n\nConfigures a <a href='/reference/admin-ui-api/custom-detail-components/custom-detail-component#customdetailcomponent'>CustomDetailComponent</a> to be placed in the given location.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "tableid",
                        "title": "tableId",
                        "content": "\n<MemberInfo kind=\"property\" type={`DataTableLocationId`}   />\n\nThe location in the UI where the custom component should be placed.\n"
                    },
                    {
                        "id": "columnid",
                        "title": "columnId",
                        "content": "\n<MemberInfo kind=\"property\" type={`DataTableColumnId`}   />\n\nThe column in the table where the custom component should be placed.\n"
                    },
                    {
                        "id": "component",
                        "title": "component",
                        "content": "\n<MemberInfo kind=\"property\" type={`Type&#60;<a href='/reference/admin-ui-api/custom-table-components/custom-column-component#customcolumncomponent'>CustomColumnComponent</a>&#62;`}   />\n\nThe component to render in the table cell. This component should implement the\n<a href='/reference/admin-ui-api/custom-table-components/custom-column-component#customcolumncomponent'>CustomColumnComponent</a> interface.\n"
                    },
                    {
                        "id": "providers",
                        "title": "providers",
                        "content": "\n<MemberInfo kind=\"property\" type={`Provider[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface DataTableComponentConfig {",
                    "    tableId: DataTableLocationId;",
                    "    columnId: DataTableColumnId;",
                    "    component: Type<CustomColumnComponent>;",
                    "    providers?: Provider[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "datetimepickercomponent",
        "metadata": {
            "title": "DatetimePickerComponent",
            "keywords": [
                "datetimepickercomponent",
                "yearrange",
                "weekstartday",
                "timegranularityinterval",
                "min",
                "max",
                "readonly",
                "dropdowncomponent",
                "datetimeinput",
                "calendartable",
                "disabled",
                "calendarview$",
                "current$",
                "selected$",
                "selectedhours$",
                "selectedminutes$",
                "years",
                "weekdays",
                "hours",
                "minutes",
                "constructor",
                "ngoninit",
                "ngafterviewinit",
                "ngondestroy",
                "registeronchange",
                "registerontouched",
                "setdisabledstate",
                "writevalue",
                "prevmonth",
                "nextmonth",
                "selecttoday",
                "setyear",
                "setmonth",
                "selectday",
                "clearvalue",
                "handlecalendarkeydown",
                "sethour",
                "setminute",
                "closedatepicker"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/datetime-picker/datetime-picker.component.ts\" sourceLine=\"39\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "datetimepickercomponent",
                "title": "DatetimePickerComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/datetime-picker/datetime-picker.component.ts\" sourceLine=\"39\" packageName=\"@vendure/admin-ui\" />\n\nA form input for selecting datetime values.\n\n*Example*\n\n\n* Implements: <code>ControlValueAccessor</code>, <code>AfterViewInit</code>, <code>OnInit</code>, <code>OnDestroy</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "yearrange",
                        "title": "yearRange",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\nThe range above and below the current year which is selectable from\nthe year select control. If a min or max value is set, these will\noverride the yearRange.\n"
                    },
                    {
                        "id": "weekstartday",
                        "title": "weekStartDay",
                        "content": "\n<MemberInfo kind=\"property\" type={`DayOfWeek`}   />\n\nThe day that the week should start with in the calendar view.\n"
                    },
                    {
                        "id": "timegranularityinterval",
                        "title": "timeGranularityInterval",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\nThe granularity of the minutes time picker\n"
                    },
                    {
                        "id": "min",
                        "title": "min",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | null`}   />\n\nThe minimum date as an ISO string\n"
                    },
                    {
                        "id": "max",
                        "title": "max",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | null`}   />\n\nThe maximum date as an ISO string\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\nSets the readonly state\n"
                    },
                    {
                        "id": "dropdowncomponent",
                        "title": "dropdownComponent",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/components/dropdown-component#dropdowncomponent'>DropdownComponent</a>`}   />\n\n\n"
                    },
                    {
                        "id": "datetimeinput",
                        "title": "datetimeInput",
                        "content": "\n<MemberInfo kind=\"property\" type={`ElementRef&#60;HTMLInputElement&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "calendartable",
                        "title": "calendarTable",
                        "content": "\n<MemberInfo kind=\"property\" type={`ElementRef&#60;HTMLTableElement&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "disabled",
                        "title": "disabled",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "calendarview$",
                        "title": "calendarView$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;CalendarView&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "current$",
                        "title": "current$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;CurrentView&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "selected$",
                        "title": "selected$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;Date | null&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "selectedhours$",
                        "title": "selectedHours$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;number | null&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "selectedminutes$",
                        "title": "selectedMinutes$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;number | null&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "years",
                        "title": "years",
                        "content": "\n<MemberInfo kind=\"property\" type={`number[]`}   />\n\n\n"
                    },
                    {
                        "id": "weekdays",
                        "title": "weekdays",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`}   />\n\n\n"
                    },
                    {
                        "id": "hours",
                        "title": "hours",
                        "content": "\n<MemberInfo kind=\"property\" type={`number[]`}   />\n\n\n"
                    },
                    {
                        "id": "minutes",
                        "title": "minutes",
                        "content": "\n<MemberInfo kind=\"property\" type={`number[]`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(changeDetectorRef: ChangeDetectorRef, datetimePickerService: DatetimePickerService) => DatetimePickerComponent`}   />\n\n\n"
                    },
                    {
                        "id": "ngoninit",
                        "title": "ngOnInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "ngafterviewinit",
                        "title": "ngAfterViewInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => void`}   />\n\n\n"
                    },
                    {
                        "id": "ngondestroy",
                        "title": "ngOnDestroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => void`}   />\n\n\n"
                    },
                    {
                        "id": "registeronchange",
                        "title": "registerOnChange",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fn: any) => `}   />\n\n\n"
                    },
                    {
                        "id": "registerontouched",
                        "title": "registerOnTouched",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fn: any) => `}   />\n\n\n"
                    },
                    {
                        "id": "setdisabledstate",
                        "title": "setDisabledState",
                        "content": "\n<MemberInfo kind=\"method\" type={`(isDisabled: boolean) => `}   />\n\n\n"
                    },
                    {
                        "id": "writevalue",
                        "title": "writeValue",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: string | null) => `}   />\n\n\n"
                    },
                    {
                        "id": "prevmonth",
                        "title": "prevMonth",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "nextmonth",
                        "title": "nextMonth",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "selecttoday",
                        "title": "selectToday",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "setyear",
                        "title": "setYear",
                        "content": "\n<MemberInfo kind=\"method\" type={`(event: Event) => `}   />\n\n\n"
                    },
                    {
                        "id": "setmonth",
                        "title": "setMonth",
                        "content": "\n<MemberInfo kind=\"method\" type={`(event: Event) => `}   />\n\n\n"
                    },
                    {
                        "id": "selectday",
                        "title": "selectDay",
                        "content": "\n<MemberInfo kind=\"method\" type={`(day: DayCell) => `}   />\n\n\n"
                    },
                    {
                        "id": "clearvalue",
                        "title": "clearValue",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "handlecalendarkeydown",
                        "title": "handleCalendarKeydown",
                        "content": "\n<MemberInfo kind=\"method\" type={`(event: KeyboardEvent) => `}   />\n\n\n"
                    },
                    {
                        "id": "sethour",
                        "title": "setHour",
                        "content": "\n<MemberInfo kind=\"method\" type={`(event: Event) => `}   />\n\n\n"
                    },
                    {
                        "id": "setminute",
                        "title": "setMinute",
                        "content": "\n<MemberInfo kind=\"method\" type={`(event: Event) => `}   />\n\n\n"
                    },
                    {
                        "id": "closedatepicker",
                        "title": "closeDatepicker",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<vdr-datetime-picker [(ngModel)]=\"startDate\"></vdr-datetime-picker>",
                    "class DatetimePickerComponent implements ControlValueAccessor, AfterViewInit, OnInit, OnDestroy {",
                    "    @Input() yearRange;",
                    "    @Input() weekStartDay: DayOfWeek = 'mon';",
                    "    @Input() timeGranularityInterval = 5;",
                    "    @Input() min: string | null = null;",
                    "    @Input() max: string | null = null;",
                    "    @Input() readonly = false;",
                    "    @ViewChild('dropdownComponent', { static: true }) dropdownComponent: DropdownComponent;",
                    "    @ViewChild('datetimeInput', { static: true }) datetimeInput: ElementRef<HTMLInputElement>;",
                    "    @ViewChild('calendarTable') calendarTable: ElementRef<HTMLTableElement>;",
                    "    disabled = false;",
                    "    calendarView$: Observable<CalendarView>;",
                    "    current$: Observable<CurrentView>;",
                    "    selected$: Observable<Date | null>;",
                    "    selectedHours$: Observable<number | null>;",
                    "    selectedMinutes$: Observable<number | null>;",
                    "    years: number[];",
                    "    weekdays: string[] = [];",
                    "    hours: number[];",
                    "    minutes: number[];",
                    "    constructor(changeDetectorRef: ChangeDetectorRef, datetimePickerService: DatetimePickerService)",
                    "    ngOnInit() => ;",
                    "    ngAfterViewInit() => void;",
                    "    ngOnDestroy() => void;",
                    "    registerOnChange(fn: any) => ;",
                    "    registerOnTouched(fn: any) => ;",
                    "    setDisabledState(isDisabled: boolean) => ;",
                    "    writeValue(value: string | null) => ;",
                    "    prevMonth() => ;",
                    "    nextMonth() => ;",
                    "    selectToday() => ;",
                    "    setYear(event: Event) => ;",
                    "    setMonth(event: Event) => ;",
                    "    selectDay(day: DayCell) => ;",
                    "    clearValue() => ;",
                    "    handleCalendarKeydown(event: KeyboardEvent) => ;",
                    "    setHour(event: Event) => ;",
                    "    setMinute(event: Event) => ;",
                    "    closeDatepicker() => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "default-inputs",
        "metadata": {
            "title": "Default Inputs",
            "keywords": [
                "booleanforminputcomponent",
                "id",
                "readonly",
                "formcontrol",
                "config",
                "htmleditorforminputcomponent",
                "constructor",
                "ngoninit",
                "jsoneditorforminputcomponent",
                "combinationmodeforminputcomponent",
                "selectable$",
                "setcombinationmodeand",
                "setcombinationmodeor",
                "currencyforminputcomponent",
                "currencycode$",
                "customergroupforminputcomponent",
                "customergroups$",
                "selectgroup",
                "comparewith",
                "dateforminputcomponent",
                "min",
                "max",
                "yearrange",
                "facetvalueforminputcomponent",
                "islistinput",
                "valuetransformfn",
                "numberforminputcomponent",
                "prefix",
                "suffix",
                "step",
                "passwordforminputcomponent",
                "productselectorforminputcomponent",
                "selection$",
                "addproductvariant",
                "removeproductvariant",
                "relationforminputcomponent",
                "richtextforminputcomponent",
                "selectforminputcomponent",
                "uilanguage$",
                "options",
                "trackbyfn",
                "textforminputcomponent",
                "textareaforminputcomponent",
                "spellcheck"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/boolean-form-input/boolean-form-input.component.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "booleanforminputcomponent",
                "title": "BooleanFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/boolean-form-input/boolean-form-input.component.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />\n\nA checkbox input. The default input component for `boolean` fields.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormControl`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`DefaultFormComponentConfig&#60;'boolean-form-input'&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class BooleanFormInputComponent implements FormInputComponent {",
                    "    static readonly id: DefaultFormComponentId = 'boolean-form-input';",
                    "    readonly: boolean;",
                    "    formControl: UntypedFormControl;",
                    "    config: DefaultFormComponentConfig<'boolean-form-input'>;",
                    "}"
                ]
            },
            {
                "id": "htmleditorforminputcomponent",
                "title": "HtmlEditorFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/code-editor-form-input/html-editor-form-input.component.ts\" sourceLine=\"23\" packageName=\"@vendure/admin-ui\" />\n\nA JSON editor input with syntax highlighting and error detection. Works well\nwith `text` type fields.\n\n* Extends: <code>BaseCodeEditorFormInputComponent</code>\n\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>, <code>AfterViewInit</code>, <code>OnInit</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(changeDetector: ChangeDetectorRef) => HtmlEditorFormInputComponent`}   />\n\n\n"
                    },
                    {
                        "id": "ngoninit",
                        "title": "ngOnInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class HtmlEditorFormInputComponent extends BaseCodeEditorFormInputComponent implements FormInputComponent, AfterViewInit, OnInit {",
                    "    static readonly id: DefaultFormComponentId = 'html-editor-form-input';",
                    "    constructor(changeDetector: ChangeDetectorRef)",
                    "    ngOnInit() => ;",
                    "}"
                ]
            },
            {
                "id": "jsoneditorforminputcomponent",
                "title": "JsonEditorFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/code-editor-form-input/json-editor-form-input.component.ts\" sourceLine=\"33\" packageName=\"@vendure/admin-ui\" />\n\nA JSON editor input with syntax highlighting and error detection. Works well\nwith `text` type fields.\n\n* Extends: <code>BaseCodeEditorFormInputComponent</code>\n\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>, <code>AfterViewInit</code>, <code>OnInit</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(changeDetector: ChangeDetectorRef) => JsonEditorFormInputComponent`}   />\n\n\n"
                    },
                    {
                        "id": "ngoninit",
                        "title": "ngOnInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class JsonEditorFormInputComponent extends BaseCodeEditorFormInputComponent implements FormInputComponent, AfterViewInit, OnInit {",
                    "    static readonly id: DefaultFormComponentId = 'json-editor-form-input';",
                    "    constructor(changeDetector: ChangeDetectorRef)",
                    "    ngOnInit() => ;",
                    "}"
                ]
            },
            {
                "id": "combinationmodeforminputcomponent",
                "title": "CombinationModeFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/combination-mode-form-input/combination-mode-form-input.component.ts\" sourceLine=\"17\" packageName=\"@vendure/admin-ui\" />\n\nA special input used to display the \"Combination mode\" AND/OR toggle.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>, <code>OnInit</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormControl`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`DefaultFormComponentConfig&#60;'combination-mode-form-input'&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "selectable$",
                        "title": "selectable$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;boolean&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(configurableInputComponent: ConfigurableInputComponent) => CombinationModeFormInputComponent`}   />\n\n\n"
                    },
                    {
                        "id": "ngoninit",
                        "title": "ngOnInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "setcombinationmodeand",
                        "title": "setCombinationModeAnd",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "setcombinationmodeor",
                        "title": "setCombinationModeOr",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class CombinationModeFormInputComponent implements FormInputComponent, OnInit {",
                    "    static readonly id: DefaultFormComponentId = 'combination-mode-form-input';",
                    "    readonly: boolean;",
                    "    formControl: UntypedFormControl;",
                    "    config: DefaultFormComponentConfig<'combination-mode-form-input'>;",
                    "    selectable$: Observable<boolean>;",
                    "    constructor(configurableInputComponent: ConfigurableInputComponent)",
                    "    ngOnInit() => ;",
                    "    setCombinationModeAnd() => ;",
                    "    setCombinationModeOr() => ;",
                    "}"
                ]
            },
            {
                "id": "currencyforminputcomponent",
                "title": "CurrencyFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/currency-form-input/currency-form-input.component.ts\" sourceLine=\"17\" packageName=\"@vendure/admin-ui\" />\n\nAn input for monetary values. Should be used with `int` type fields.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormControl`}   />\n\n\n"
                    },
                    {
                        "id": "currencycode$",
                        "title": "currencyCode$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;<a href='/reference/typescript-api/common/currency-code#currencycode'>CurrencyCode</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`DefaultFormComponentConfig&#60;'currency-form-input'&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>) => CurrencyFormInputComponent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class CurrencyFormInputComponent implements FormInputComponent {",
                    "    static readonly id: DefaultFormComponentId = 'currency-form-input';",
                    "    @Input() readonly: boolean;",
                    "    formControl: UntypedFormControl;",
                    "    currencyCode$: Observable<CurrencyCode>;",
                    "    config: DefaultFormComponentConfig<'currency-form-input'>;",
                    "    constructor(dataService: DataService)",
                    "}"
                ]
            },
            {
                "id": "customergroupforminputcomponent",
                "title": "CustomerGroupFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/customer-group-form-input/customer-group-form-input.component.ts\" sourceLine=\"20\" packageName=\"@vendure/admin-ui\" />\n\nAllows the selection of a Customer via an autocomplete select input.\nShould be used with `ID` type fields which represent Customer IDs.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>, <code>OnInit</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`FormControl&#60;string | { id: string }&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "customergroups$",
                        "title": "customerGroups$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;GetCustomerGroupsQuery['customerGroups']['items']&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`DefaultFormComponentConfig&#60;'customer-group-form-input'&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>) => CustomerGroupFormInputComponent`}   />\n\n\n"
                    },
                    {
                        "id": "ngoninit",
                        "title": "ngOnInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "selectgroup",
                        "title": "selectGroup",
                        "content": "\n<MemberInfo kind=\"method\" type={`(group: ItemOf&#60;GetCustomerGroupsQuery, 'customerGroups'&#62;) => `}   />\n\n\n"
                    },
                    {
                        "id": "comparewith",
                        "title": "compareWith",
                        "content": "\n<MemberInfo kind=\"method\" type={`(o1: T, o2: T) => `}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class CustomerGroupFormInputComponent implements FormInputComponent, OnInit {",
                    "    static readonly id: DefaultFormComponentId = 'customer-group-form-input';",
                    "    @Input() readonly: boolean;",
                    "    formControl: FormControl<string | { id: string }>;",
                    "    customerGroups$: Observable<GetCustomerGroupsQuery['customerGroups']['items']>;",
                    "    config: DefaultFormComponentConfig<'customer-group-form-input'>;",
                    "    constructor(dataService: DataService)",
                    "    ngOnInit() => ;",
                    "    selectGroup(group: ItemOf<GetCustomerGroupsQuery, 'customerGroups'>) => ;",
                    "    compareWith(o1: T, o2: T) => ;",
                    "}"
                ]
            },
            {
                "id": "dateforminputcomponent",
                "title": "DateFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/date-form-input/date-form-input.component.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />\n\nAllows selection of a datetime. Default input for `datetime` type fields.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormControl`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`DefaultFormComponentConfig&#60;'date-form-input'&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "min",
                        "title": "min",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "max",
                        "title": "max",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "yearrange",
                        "title": "yearRange",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class DateFormInputComponent implements FormInputComponent {",
                    "    static readonly id: DefaultFormComponentId = 'date-form-input';",
                    "    @Input() readonly: boolean;",
                    "    formControl: UntypedFormControl;",
                    "    config: DefaultFormComponentConfig<'date-form-input'>;",
                    "    min: void",
                    "    max: void",
                    "    yearRange: void",
                    "}"
                ]
            },
            {
                "id": "facetvalueforminputcomponent",
                "title": "FacetValueFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/facet-value-form-input/facet-value-form-input.component.ts\" sourceLine=\"16\" packageName=\"@vendure/admin-ui\" />\n\nAllows the selection of multiple FacetValues via an autocomplete select input.\nShould be used with `ID` type **list** fields which represent FacetValue IDs.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "islistinput",
                        "title": "isListInput",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormControl`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`InputComponentConfig`}   />\n\n\n"
                    },
                    {
                        "id": "valuetransformfn",
                        "title": "valueTransformFn",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class FacetValueFormInputComponent implements FormInputComponent {",
                    "    static readonly id: DefaultFormComponentId = 'facet-value-form-input';",
                    "    readonly isListInput = true;",
                    "    readonly: boolean;",
                    "    formControl: UntypedFormControl;",
                    "    config: InputComponentConfig;",
                    "    valueTransformFn = (values: FacetValueFragment[]) => {",
                    "        const isUsedInConfigArg = this.config.__typename === 'ConfigArgDefinition';",
                    "        if (isUsedInConfigArg) {",
                    "            return JSON.stringify(values.map(s => s.id));",
                    "        } else {",
                    "            return values;",
                    "        }",
                    "    };",
                    "}"
                ]
            },
            {
                "id": "numberforminputcomponent",
                "title": "NumberFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/number-form-input/number-form-input.component.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />\n\nDisplays a number input. Default input for `int` and `float` type fields.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormControl`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`DefaultFormComponentConfig&#60;'number-form-input'&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "prefix",
                        "title": "prefix",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "suffix",
                        "title": "suffix",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "min",
                        "title": "min",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "max",
                        "title": "max",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "step",
                        "title": "step",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class NumberFormInputComponent implements FormInputComponent {",
                    "    static readonly id: DefaultFormComponentId = 'number-form-input';",
                    "    @Input() readonly: boolean;",
                    "    formControl: UntypedFormControl;",
                    "    config: DefaultFormComponentConfig<'number-form-input'>;",
                    "    prefix: void",
                    "    suffix: void",
                    "    min: void",
                    "    max: void",
                    "    step: void",
                    "}"
                ]
            },
            {
                "id": "passwordforminputcomponent",
                "title": "PasswordFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/password-form-input/password-form-input.component.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />\n\nDisplays a password text input. Should be used with `string` type fields.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormControl`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`InputComponentConfig`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class PasswordFormInputComponent implements FormInputComponent {",
                    "    static readonly id: DefaultFormComponentId = 'password-form-input';",
                    "    readonly: boolean;",
                    "    formControl: UntypedFormControl;",
                    "    config: InputComponentConfig;",
                    "}"
                ]
            },
            {
                "id": "productselectorforminputcomponent",
                "title": "ProductSelectorFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/product-selector-form-input/product-selector-form-input.component.ts\" sourceLine=\"20\" packageName=\"@vendure/admin-ui\" />\n\nAllows the selection of multiple ProductVariants via an autocomplete select input.\nShould be used with `ID` type **list** fields which represent ProductVariant IDs.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>, <code>OnInit</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "islistinput",
                        "title": "isListInput",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`FormControl&#60;Array&#60;string | { id: string }&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`DefaultFormComponentUiConfig&#60;'product-selector-form-input'&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "selection$",
                        "title": "selection$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;Array&#60;GetProductVariantQuery['productVariant']&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>) => ProductSelectorFormInputComponent`}   />\n\n\n"
                    },
                    {
                        "id": "ngoninit",
                        "title": "ngOnInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "addproductvariant",
                        "title": "addProductVariant",
                        "content": "\n<MemberInfo kind=\"method\" type={`(product: ProductSelectorSearchQuery['search']['items'][number]) => `}   />\n\n\n"
                    },
                    {
                        "id": "removeproductvariant",
                        "title": "removeProductVariant",
                        "content": "\n<MemberInfo kind=\"method\" type={`(id: string) => `}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ProductSelectorFormInputComponent implements FormInputComponent, OnInit {",
                    "    static readonly id: DefaultFormComponentId = 'product-selector-form-input';",
                    "    readonly isListInput = true;",
                    "    readonly: boolean;",
                    "    formControl: FormControl<Array<string | { id: string }>>;",
                    "    config: DefaultFormComponentUiConfig<'product-selector-form-input'>;",
                    "    selection$: Observable<Array<GetProductVariantQuery['productVariant']>>;",
                    "    constructor(dataService: DataService)",
                    "    ngOnInit() => ;",
                    "    addProductVariant(product: ProductSelectorSearchQuery['search']['items'][number]) => ;",
                    "    removeProductVariant(id: string) => ;",
                    "}"
                ]
            },
            {
                "id": "relationforminputcomponent",
                "title": "RelationFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/relation-form-input/relation-form-input.component.ts\" sourceLine=\"17\" packageName=\"@vendure/admin-ui\" />\n\nThe default input component for `relation` type custom fields. Allows the selection\nof a ProductVariant, Product, Customer or Asset. For other entity types, a custom\nimplementation will need to be defined. See <a href='/reference/admin-ui-api/custom-input-components/register-form-input-component#registerforminputcomponent'>registerFormInputComponent</a>.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormControl`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`RelationCustomFieldConfig`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class RelationFormInputComponent implements FormInputComponent {",
                    "    static readonly id: DefaultFormComponentId = 'relation-form-input';",
                    "    @Input() readonly: boolean;",
                    "    formControl: UntypedFormControl;",
                    "    config: RelationCustomFieldConfig;",
                    "}"
                ]
            },
            {
                "id": "richtextforminputcomponent",
                "title": "RichTextFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/rich-text-form-input/rich-text-form-input.component.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />\n\nUses the <a href='/reference/admin-ui-api/components/rich-text-editor-component#richtexteditorcomponent'>RichTextEditorComponent</a> as in input for `text` type fields.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormControl`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`DefaultFormComponentConfig&#60;'rich-text-form-input'&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class RichTextFormInputComponent implements FormInputComponent {",
                    "    static readonly id: DefaultFormComponentId = 'rich-text-form-input';",
                    "    readonly: boolean;",
                    "    formControl: UntypedFormControl;",
                    "    config: DefaultFormComponentConfig<'rich-text-form-input'>;",
                    "}"
                ]
            },
            {
                "id": "selectforminputcomponent",
                "title": "SelectFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/select-form-input/select-form-input.component.ts\" sourceLine=\"18\" packageName=\"@vendure/admin-ui\" />\n\nUses a select input to allow the selection of a string value. Should be used with\n`string` type fields with options.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>, <code>OnInit</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormControl`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`DefaultFormComponentConfig&#60;'select-form-input'&#62; &#38; CustomFieldConfigFragment`}   />\n\n\n"
                    },
                    {
                        "id": "uilanguage$",
                        "title": "uiLanguage$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>) => SelectFormInputComponent`}   />\n\n\n"
                    },
                    {
                        "id": "ngoninit",
                        "title": "ngOnInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "trackbyfn",
                        "title": "trackByFn",
                        "content": "\n<MemberInfo kind=\"method\" type={`(index: number, item: any) => `}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class SelectFormInputComponent implements FormInputComponent, OnInit {",
                    "    static readonly id: DefaultFormComponentId = 'select-form-input';",
                    "    @Input() readonly: boolean;",
                    "    formControl: UntypedFormControl;",
                    "    config: DefaultFormComponentConfig<'select-form-input'> & CustomFieldConfigFragment;",
                    "    uiLanguage$: Observable<LanguageCode>;",
                    "    options: void",
                    "    constructor(dataService: DataService)",
                    "    ngOnInit() => ;",
                    "    trackByFn(index: number, item: any) => ;",
                    "}"
                ]
            },
            {
                "id": "textforminputcomponent",
                "title": "TextFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/text-form-input/text-form-input.component.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />\n\nUses a regular text form input. This is the default input for `string` and `localeString` type fields.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormControl`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`DefaultFormComponentConfig&#60;'text-form-input'&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "prefix",
                        "title": "prefix",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "suffix",
                        "title": "suffix",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class TextFormInputComponent implements FormInputComponent {",
                    "    static readonly id: DefaultFormComponentId = 'text-form-input';",
                    "    readonly: boolean;",
                    "    formControl: UntypedFormControl;",
                    "    config: DefaultFormComponentConfig<'text-form-input'>;",
                    "    prefix: void",
                    "    suffix: void",
                    "}"
                ]
            },
            {
                "id": "textareaforminputcomponent",
                "title": "TextareaFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/dynamic-form-inputs/textarea-form-input/textarea-form-input.component.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />\n\nUses textarea form input. This is the default input for `text` type fields.\n\n* Implements: <code><a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configurable-operation-def/default-form-component-id#defaultformcomponentid'>DefaultFormComponentId</a>`}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`UntypedFormControl`}   />\n\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`DefaultFormComponentConfig&#60;'textarea-form-input'&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "spellcheck",
                        "title": "spellcheck",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class TextareaFormInputComponent implements FormInputComponent {",
                    "    static readonly id: DefaultFormComponentId = 'textarea-form-input';",
                    "    readonly: boolean;",
                    "    formControl: UntypedFormControl;",
                    "    config: DefaultFormComponentConfig<'textarea-form-input'>;",
                    "    spellcheck: boolean",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultactiveorderstrategy",
        "metadata": {
            "title": "DefaultActiveOrderStrategy",
            "keywords": [
                "defaultactiveorderstrategy",
                "name",
                "init",
                "createactiveorder",
                "determineactiveorder"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/default-active-order-strategy.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"1.9.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultactiveorderstrategy",
                "title": "DefaultActiveOrderStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/default-active-order-strategy.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"1.9.0\" />\n\nThe default <a href='/reference/typescript-api/orders/active-order-strategy#activeorderstrategy'>ActiveOrderStrategy</a>, which uses the current <a href='/reference/typescript-api/entities/session#session'>Session</a> to determine\nthe active Order, and requires no additional input in the Shop API since it is based on the\nsession which is part of the RequestContext.\n\n* Implements: <code><a href='/reference/typescript-api/orders/active-order-strategy#activeorderstrategy'>ActiveOrderStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`'default-active-order-strategy'`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "createactiveorder",
                        "title": "createActiveOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "determineactiveorder",
                        "title": "determineActiveOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultActiveOrderStrategy implements ActiveOrderStrategy {",
                    "    name: 'default-active-order-strategy';",
                    "    init(injector: Injector) => ;",
                    "    createActiveOrder(ctx: RequestContext) => ;",
                    "    determineActiveOrder(ctx: RequestContext) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultassetimportstrategy",
        "metadata": {
            "title": "DefaultAssetImportStrategy",
            "keywords": [
                "defaultassetimportstrategy",
                "constructor",
                "init",
                "getstreamfrompath"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/asset-import-strategy/default-asset-import-strategy.ts\" sourceLine=\"50\" packageName=\"@vendure/core\" since=\"1.7.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultassetimportstrategy",
                "title": "DefaultAssetImportStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/asset-import-strategy/default-asset-import-strategy.ts\" sourceLine=\"50\" packageName=\"@vendure/core\" since=\"1.7.0\" />\n\nThe DefaultAssetImportStrategy is able to import paths from the local filesystem (taking into account the\n`importExportOptions.importAssetsDir` setting) as well as remote http/https urls.\n\n* Implements: <code><a href='/reference/typescript-api/import-export/asset-import-strategy#assetimportstrategy'>AssetImportStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options?: {\n             retryDelayMs: number;\n             retryCount: number;\n         }) => DefaultAssetImportStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "getstreamfrompath",
                        "title": "getStreamFromPath",
                        "content": "\n<MemberInfo kind=\"method\" type={`(assetPath: string) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultAssetImportStrategy implements AssetImportStrategy {",
                    "    constructor(options?: {",
                    "            retryDelayMs: number;",
                    "            retryCount: number;",
                    "        })",
                    "    init(injector: Injector) => ;",
                    "    getStreamFromPath(assetPath: string) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultassetnamingstrategy",
        "metadata": {
            "title": "DefaultAssetNamingStrategy",
            "keywords": [
                "defaultassetnamingstrategy",
                "generatesourcefilename",
                "generatepreviewfilename"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/asset-naming-strategy/default-asset-naming-strategy.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultassetnamingstrategy",
                "title": "DefaultAssetNamingStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/asset-naming-strategy/default-asset-naming-strategy.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />\n\nThe default strategy normalizes the file names to remove unwanted characters and\nin the case of conflicts, increments a counter suffix.\n\n* Implements: <code><a href='/reference/typescript-api/assets/asset-naming-strategy#assetnamingstrategy'>AssetNamingStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "generatesourcefilename",
                        "title": "generateSourceFileName",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, originalFileName: string, conflictFileName?: string) => string`}   />\n\n\n"
                    },
                    {
                        "id": "generatepreviewfilename",
                        "title": "generatePreviewFileName",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, sourceFileName: string, conflictFileName?: string) => string`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultAssetNamingStrategy implements AssetNamingStrategy {",
                    "    generateSourceFileName(ctx: RequestContext, originalFileName: string, conflictFileName?: string) => string;",
                    "    generatePreviewFileName(ctx: RequestContext, sourceFileName: string, conflictFileName?: string) => string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultconfig",
        "metadata": {
            "title": "DefaultConfig",
            "keywords": [
                "defaultconfig"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/default-config.ts\" sourceLine=\"58\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultconfig",
                "title": "defaultConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/default-config.ts\" sourceLine=\"58\" packageName=\"@vendure/core\" />\n\nThe default configuration settings which are used if not explicitly overridden in the bootstrap() call.\n\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "defaultformcomponentid",
        "metadata": {
            "title": "DefaultFormComponentId",
            "keywords": [
                "defaultformcomponentid"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"134\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultformcomponentid",
                "title": "DefaultFormComponentId",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"134\" packageName=\"@vendure/common\" />\n\nThe ids of the default form input components that ship with the\nAdmin UI.\n\n\n",
                "subsections": [],
                "code": [
                    "type DefaultFormComponentId = | 'boolean-form-input'",
                    "    | 'currency-form-input'",
                    "    | 'customer-group-form-input'",
                    "    | 'date-form-input'",
                    "    | 'facet-value-form-input'",
                    "    | 'json-editor-form-input'",
                    "    | 'html-editor-form-input'",
                    "    | 'number-form-input'",
                    "    | 'password-form-input'",
                    "    | 'product-selector-form-input'",
                    "    | 'relation-form-input'",
                    "    | 'rich-text-form-input'",
                    "    | 'select-form-input'",
                    "    | 'text-form-input'",
                    "    | 'textarea-form-input'",
                    "    | 'product-multi-form-input'",
                    "    | 'combination-mode-form-input'"
                ]
            }
        ]
    },
    {
        "id": "defaultformconfighash",
        "metadata": {
            "title": "DefaultFormConfigHash",
            "keywords": [
                "defaultformconfighash",
                "'boolean-form-input'",
                "'currency-form-input'",
                "'customer-group-form-input'",
                "'date-form-input'",
                "'facet-value-form-input'",
                "'json-editor-form-input'",
                "'html-editor-form-input'",
                "'number-form-input'",
                "'password-form-input'",
                "'product-selector-form-input'",
                "'relation-form-input'",
                "'rich-text-form-input'",
                "'select-form-input'",
                "'text-form-input'",
                "'textarea-form-input'",
                "'product-multi-form-input'",
                "'combination-mode-form-input'"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"159\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultformconfighash",
                "title": "DefaultFormConfigHash",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"159\" packageName=\"@vendure/common\" />\n\nUsed to define the expected arguments for a given default form input component.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "'boolean-form-input'",
                        "title": "'boolean-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`Record&#60;string, never&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "'currency-form-input'",
                        "title": "'currency-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`Record&#60;string, never&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "'customer-group-form-input'",
                        "title": "'customer-group-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`Record&#60;string, never&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "'date-form-input'",
                        "title": "'date-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`{ min?: string; max?: string; yearRange?: number }`}   />\n\n\n"
                    },
                    {
                        "id": "'facet-value-form-input'",
                        "title": "'facet-value-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`Record&#60;string, never&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "'json-editor-form-input'",
                        "title": "'json-editor-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`{ height?: string }`}   />\n\n\n"
                    },
                    {
                        "id": "'html-editor-form-input'",
                        "title": "'html-editor-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`{ height?: string }`}   />\n\n\n"
                    },
                    {
                        "id": "'number-form-input'",
                        "title": "'number-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`{ min?: number; max?: number; step?: number; prefix?: string; suffix?: string }`}   />\n\n\n"
                    },
                    {
                        "id": "'password-form-input'",
                        "title": "'password-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`Record&#60;string, never&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "'product-selector-form-input'",
                        "title": "'product-selector-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`Record&#60;string, never&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "'relation-form-input'",
                        "title": "'relation-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`Record&#60;string, never&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "'rich-text-form-input'",
                        "title": "'rich-text-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`Record&#60;string, never&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "'select-form-input'",
                        "title": "'select-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`{\n         options?: Array&#60;{ value: string; label?: Array&#60;Omit&#60;LocalizedString, '__typename'&#62;&#62; }&#62;;\n     }`}   />\n\n\n"
                    },
                    {
                        "id": "'text-form-input'",
                        "title": "'text-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`{ prefix?: string; suffix?: string }`}   />\n\n\n"
                    },
                    {
                        "id": "'textarea-form-input'",
                        "title": "'textarea-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`{\n         spellcheck?: boolean;\n     }`}   />\n\n\n"
                    },
                    {
                        "id": "'product-multi-form-input'",
                        "title": "'product-multi-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`{\n         selectionMode?: 'product' | 'variant';\n     }`}   />\n\n\n"
                    },
                    {
                        "id": "'combination-mode-form-input'",
                        "title": "'combination-mode-form-input'",
                        "content": "\n<MemberInfo kind=\"property\" type={`Record&#60;string, never&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "type DefaultFormConfigHash = {",
                    "    'boolean-form-input': Record<string, never>;",
                    "    'currency-form-input': Record<string, never>;",
                    "    'customer-group-form-input': Record<string, never>;",
                    "    'date-form-input': { min?: string; max?: string; yearRange?: number };",
                    "    'facet-value-form-input': Record<string, never>;",
                    "    'json-editor-form-input': { height?: string };",
                    "    'html-editor-form-input': { height?: string };",
                    "    'number-form-input': { min?: number; max?: number; step?: number; prefix?: string; suffix?: string };",
                    "    'password-form-input': Record<string, never>;",
                    "    'product-selector-form-input': Record<string, never>;",
                    "    'relation-form-input': Record<string, never>;",
                    "    'rich-text-form-input': Record<string, never>;",
                    "    'select-form-input': {",
                    "        options?: Array<{ value: string; label?: Array<Omit<LocalizedString, '__typename'>> }>;",
                    "    };",
                    "    'text-form-input': { prefix?: string; suffix?: string };",
                    "    'textarea-form-input': {",
                    "        spellcheck?: boolean;",
                    "    };",
                    "    'product-multi-form-input': {",
                    "        selectionMode?: 'product' | 'variant';",
                    "    };",
                    "    'combination-mode-form-input': Record<string, never>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultguestcheckoutstrategy",
        "metadata": {
            "title": "DefaultGuestCheckoutStrategy",
            "keywords": [
                "defaultguestcheckoutstrategy",
                "init",
                "constructor",
                "setcustomerfororder",
                "defaultguestcheckoutstrategyoptions",
                "allowguestcheckouts",
                "allowguestcheckoutforregisteredcustomers"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/default-guest-checkout-strategy.ts\" sourceLine=\"64\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultguestcheckoutstrategy",
                "title": "DefaultGuestCheckoutStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/default-guest-checkout-strategy.ts\" sourceLine=\"64\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThe default implementation of the <a href='/reference/typescript-api/orders/guest-checkout-strategy#guestcheckoutstrategy'>GuestCheckoutStrategy</a>. This strategy allows\nguest checkouts by default, but can be configured to disallow them.\n\n*Example*\n\n\n* Implements: <code><a href='/reference/typescript-api/orders/guest-checkout-strategy#guestcheckoutstrategy'>GuestCheckoutStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options?: <a href='/reference/typescript-api/orders/default-guest-checkout-strategy#defaultguestcheckoutstrategyoptions'>DefaultGuestCheckoutStrategyOptions</a>) => DefaultGuestCheckoutStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "setcustomerfororder",
                        "title": "setCustomerForOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, input: CreateCustomerInput) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;SetCustomerForOrderResult, <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62;&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "import { DefaultGuestCheckoutStrategy, VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "  orderOptions: {",
                    "    guestCheckoutStrategy: new DefaultGuestCheckoutStrategy({",
                    "      allowGuestCheckouts: false,",
                    "      allowGuestCheckoutForRegisteredCustomers: false,",
                    "    }),",
                    "  },",
                    "  // ...",
                    "};",
                    "class DefaultGuestCheckoutStrategy implements GuestCheckoutStrategy {",
                    "    init(injector: Injector) => ;",
                    "    constructor(options?: DefaultGuestCheckoutStrategyOptions)",
                    "    setCustomerForOrder(ctx: RequestContext, order: Order, input: CreateCustomerInput) => Promise<ErrorResultUnion<SetCustomerForOrderResult, Customer>>;",
                    "}"
                ]
            },
            {
                "id": "defaultguestcheckoutstrategyoptions",
                "title": "DefaultGuestCheckoutStrategyOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/default-guest-checkout-strategy.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nOptions available for the <a href='/reference/typescript-api/orders/default-guest-checkout-strategy#defaultguestcheckoutstrategy'>DefaultGuestCheckoutStrategy</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "allowguestcheckouts",
                        "title": "allowGuestCheckouts",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nWhether to allow guest checkouts.\n"
                    },
                    {
                        "id": "allowguestcheckoutforregisteredcustomers",
                        "title": "allowGuestCheckoutForRegisteredCustomers",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nWhether to allow guest checkouts for customers who already have an account.\nNote that when this is enabled, the details provided in the `CreateCustomerInput`\nwill overwrite the existing customer details of the registered customer.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface DefaultGuestCheckoutStrategyOptions {",
                    "    allowGuestCheckouts?: boolean;",
                    "    allowGuestCheckoutForRegisteredCustomers?: boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultjobqueueplugin",
        "metadata": {
            "title": "DefaultJobQueuePlugin",
            "keywords": [
                "defaultjobqueueplugin",
                "configuration",
                "pollinterval",
                "concurrency",
                "backoffstrategy",
                "init",
                "defaultjobqueueoptions",
                "setretries",
                "usedatabaseforbuffer"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/plugin/default-job-queue-plugin/default-job-queue-plugin.ts\" sourceLine=\"171\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultjobqueueplugin",
                "title": "DefaultJobQueuePlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/plugin/default-job-queue-plugin/default-job-queue-plugin.ts\" sourceLine=\"171\" packageName=\"@vendure/core\" />\n\nA plugin which configures Vendure to use the SQL database to persist the JobQueue jobs using the <a href='/reference/typescript-api/job-queue/sql-job-queue-strategy#sqljobqueuestrategy'>SqlJobQueueStrategy</a>. If you add this\nplugin to an existing Vendure installation, you'll need to run a [database migration](/guides/developer-guide/migrations), since this\nplugin will add a new \"job_record\" table to the database.\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "import { DefaultJobQueuePlugin, VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "  // Add an instance of the plugin to the plugins array",
                    "  plugins: [",
                    "    DefaultJobQueuePlugin,",
                    "  ],",
                    "};"
                ]
            },
            {
                "id": "configuration",
                "title": "Configuration",
                "content": "\nIt is possible to configure the behaviour of the <a href='/reference/typescript-api/job-queue/sql-job-queue-strategy#sqljobqueuestrategy'>SqlJobQueueStrategy</a> by passing options to the static `init()` function:\n\n",
                "subsections": [
                    {
                        "id": "pollinterval",
                        "title": "pollInterval",
                        "content": "The interval in ms between polling for new jobs. The default is 200ms.\nUsing a longer interval reduces load on the database but results in a slight\ndelay in processing jobs. For more control, it is possible to supply a function which can specify\na pollInterval based on the queue name:\n\n*Example*\n\n"
                    },
                    {
                        "id": "concurrency",
                        "title": "concurrency",
                        "content": "The number of jobs to process concurrently per worker. Defaults to 1.\n\n"
                    },
                    {
                        "id": "backoffstrategy",
                        "title": "backoffStrategy",
                        "content": "Defines the backoff strategy used when retrying failed jobs. In other words, if a job fails\nand is configured to be re-tried, how long should we wait before the next attempt?\n\nBy default, a job will be retried as soon as possible, but in some cases this is not desirable. For example,\na job may interact with an unreliable 3rd-party API which is sensitive to too many requests. In this case, an\nexponential backoff may be used which progressively increases the delay between each subsequent retry.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/typescript-api/job-queue/default-job-queue-plugin#defaultjobqueueoptions'>DefaultJobQueueOptions</a>) => Type&#60;<a href='/reference/typescript-api/job-queue/default-job-queue-plugin#defaultjobqueueplugin'>DefaultJobQueuePlugin</a>&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "export const config: VendureConfig = {",
                    "  plugins: [",
                    "    DefaultJobQueuePlugin.init({",
                    "      pollInterval: queueName => {",
                    "        if (queueName === 'cart-recovery-email') {",
                    "          // This queue does not need to be polled so frequently,",
                    "          // so we set a longer interval in order to reduce load",
                    "          // on the database.",
                    "          return 10000;",
                    "        }",
                    "        return 200;",
                    "      },",
                    "    }),",
                    "  ],",
                    "};",
                    "export const config: VendureConfig = {",
                    "  plugins: [",
                    "    DefaultJobQueuePlugin.init({",
                    "      pollInterval: 5000,",
                    "      concurrency: 2",
                    "      backoffStrategy: (queueName, attemptsMade, job) => {",
                    "        if (queueName === 'transcode-video') {",
                    "          // exponential backoff example",
                    "          return (attemptsMade ** 2) * 1000;",
                    "        }",
                    "",
                    "        // A default delay for all other queues",
                    "        return 1000;",
                    "      },",
                    "      setRetries: (queueName, job) => {",
                    "        if (queueName === 'send-email') {",
                    "          // Override the default number of retries",
                    "          // for the 'send-email' job because we have",
                    "          // a very unreliable email service.",
                    "          return 10;",
                    "        }",
                    "        return job.retries;",
                    "      }",
                    "    }),",
                    "  ],",
                    "};",
                    "class DefaultJobQueuePlugin {",
                    "    init(options: DefaultJobQueueOptions) => Type<DefaultJobQueuePlugin>;",
                    "}"
                ]
            },
            {
                "id": "defaultjobqueueoptions",
                "title": "DefaultJobQueueOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/plugin/default-job-queue-plugin/default-job-queue-plugin.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />\n\nConfiguration options for the DefaultJobQueuePlugin. These values get passed into the\n<a href='/reference/typescript-api/job-queue/sql-job-queue-strategy#sqljobqueuestrategy'>SqlJobQueueStrategy</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "pollinterval",
                        "title": "pollInterval",
                        "content": "\n<MemberInfo kind=\"property\" type={`number | ((queueName: string) =&#62; number)`} default=\"200\"   />\n\nThe interval in ms between polling the database for new jobs. If many job queues\nare active, the polling may cause undue load on the database, in which case this value\nshould be increased to e.g. 1000.\n"
                    },
                    {
                        "id": "concurrency",
                        "title": "concurrency",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"1\"   />\n\nHow many jobs from a given queue to process concurrently.\n"
                    },
                    {
                        "id": "backoffstrategy",
                        "title": "backoffStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/job-queue/types#backoffstrategy'>BackoffStrategy</a>`} default=\"() =&#62; 1000\"   />\n\nThe strategy used to decide how long to wait before retrying a failed job.\n"
                    },
                    {
                        "id": "setretries",
                        "title": "setRetries",
                        "content": "\n<MemberInfo kind=\"property\" type={`(queueName: string, job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>) =&#62; number`}   />\n\nWhen a job is added to the JobQueue using `JobQueue.add()`, the calling\ncode may specify the number of retries in case of failure. This option allows\nyou to override that number and specify your own number of retries based on\nthe job being added.\n\n*Example*\n\n"
                    },
                    {
                        "id": "usedatabaseforbuffer",
                        "title": "useDatabaseForBuffer",
                        "content": ""
                    }
                ],
                "code": [
                    "interface DefaultJobQueueOptions {",
                    "    pollInterval?: number | ((queueName: string) => number);",
                    "    concurrency?: number;",
                    "    backoffStrategy?: BackoffStrategy;",
                    "    setRetries?: (queueName: string, job: Job) => number;",
                    "    useDatabaseForBuffer?: boolean;",
                    "}",
                    "setRetries: (queueName, job) => {",
                    "  if (queueName === 'send-email') {",
                    "    // Override the default number of retries",
                    "    // for the 'send-email' job because we have",
                    "    // a very unreliable email service.",
                    "    return 10;",
                    "  }",
                    "  return job.retries;",
                    "}",
                    " ```",
                    "",
                    "<MemberInfo kind=\"property\" type={`boolean`}  since=\"1.3.0\"  />",
                    "",
                    "If set to `true`, the database will be used to store buffered jobs. This is",
                    "recommended for production.",
                    "",
                    "When enabled, a new `JobRecordBuffer` database entity will be defined which will",
                    "require a migration when first enabling this option.",
                    "",
                    "",
                    "</div>",
                    ""
                ]
            }
        ]
    },
    {
        "id": "defaultlogger",
        "metadata": {
            "title": "DefaultLogger",
            "keywords": [
                "defaultlogger",
                "constructor",
                "setdefaultcontext",
                "error",
                "warn",
                "info",
                "verbose",
                "debug"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/logger/default-logger.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultlogger",
                "title": "DefaultLogger",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/logger/default-logger.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />\n\nThe default logger, which logs to the console (stdout) with optional timestamps. Since this logger is part of the\ndefault Vendure configuration, you do not need to specify it explicitly in your server config. You would only need\nto specify it if you wish to change the log level (which defaults to `LogLevel.Info`) or remove the timestamp.\n\n*Example*\n\n\n* Implements: <code><a href='/reference/typescript-api/logger/vendure-logger#vendurelogger'>VendureLogger</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options?: { level?: <a href='/reference/typescript-api/logger/log-level#loglevel'>LogLevel</a>; timestamp?: boolean }) => DefaultLogger`}   />\n\n\n"
                    },
                    {
                        "id": "setdefaultcontext",
                        "title": "setDefaultContext",
                        "content": "\n<MemberInfo kind=\"method\" type={`(defaultContext: string) => `}   />\n\n\n"
                    },
                    {
                        "id": "error",
                        "title": "error",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string, trace?: string | undefined) => void`}   />\n\n\n"
                    },
                    {
                        "id": "warn",
                        "title": "warn",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "info",
                        "title": "info",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "verbose",
                        "title": "verbose",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "debug",
                        "title": "debug",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { DefaultLogger, LogLevel, VendureConfig } from '@vendure/core';",
                    "",
                    "export config: VendureConfig = {",
                    "    // ...",
                    "    logger: new DefaultLogger({ level: LogLevel.Debug, timestamp: false }),",
                    "}",
                    "class DefaultLogger implements VendureLogger {",
                    "    constructor(options?: { level?: LogLevel; timestamp?: boolean })",
                    "    setDefaultContext(defaultContext: string) => ;",
                    "    error(message: string, context?: string, trace?: string | undefined) => void;",
                    "    warn(message: string, context?: string) => void;",
                    "    info(message: string, context?: string) => void;",
                    "    verbose(message: string, context?: string) => void;",
                    "    debug(message: string, context?: string) => void;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultmoneystrategy",
        "metadata": {
            "title": "DefaultMoneyStrategy",
            "keywords": [
                "defaultmoneystrategy",
                "moneycolumnoptions",
                "round"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/entity/default-money-strategy.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultmoneystrategy",
                "title": "DefaultMoneyStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/entity/default-money-strategy.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nA <a href='/reference/typescript-api/money/money-strategy#moneystrategy'>MoneyStrategy</a> that stores monetary values as a `int` type in the database.\nThe storage configuration and rounding logic replicates the behaviour of Vendure pre-2.0.\n\n* Implements: <code><a href='/reference/typescript-api/money/money-strategy#moneystrategy'>MoneyStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "moneycolumnoptions",
                        "title": "moneyColumnOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`ColumnOptions`}   />\n\n\n"
                    },
                    {
                        "id": "round",
                        "title": "round",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: number, quantity:  = 1) => number`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultMoneyStrategy implements MoneyStrategy {",
                    "    readonly moneyColumnOptions: ColumnOptions = {",
                    "        type: 'int',",
                    "    };",
                    "    round(value: number, quantity:  = 1) => number;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultorderitempricecalculationstrategy",
        "metadata": {
            "title": "DefaultOrderItemPriceCalculationStrategy",
            "keywords": [
                "defaultorderitempricecalculationstrategy",
                "calculateunitprice"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/default-order-item-price-calculation-strategy.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultorderitempricecalculationstrategy",
                "title": "DefaultOrderItemPriceCalculationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/default-order-item-price-calculation-strategy.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nThe default <a href='/reference/typescript-api/orders/order-item-price-calculation-strategy#orderitempricecalculationstrategy'>OrderItemPriceCalculationStrategy</a>, which simply passes through the price of\nthe ProductVariant without performing any calculations\n\n* Implements: <code><a href='/reference/typescript-api/orders/order-item-price-calculation-strategy#orderitempricecalculationstrategy'>OrderItemPriceCalculationStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "calculateunitprice",
                        "title": "calculateUnitPrice",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariant: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>) => <a href='/reference/typescript-api/common/price-calculation-result#pricecalculationresult'>PriceCalculationResult</a> | Promise&#60;<a href='/reference/typescript-api/common/price-calculation-result#pricecalculationresult'>PriceCalculationResult</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultOrderItemPriceCalculationStrategy implements OrderItemPriceCalculationStrategy {",
                    "    calculateUnitPrice(ctx: RequestContext, productVariant: ProductVariant) => PriceCalculationResult | Promise<PriceCalculationResult>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultorderplacedstrategy",
        "metadata": {
            "title": "DefaultOrderPlacedStrategy",
            "keywords": [
                "defaultorderplacedstrategy",
                "shouldsetasplaced"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/default-order-placed-strategy.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultorderplacedstrategy",
                "title": "DefaultOrderPlacedStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/default-order-placed-strategy.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nThe default <a href='/reference/typescript-api/orders/order-placed-strategy#orderplacedstrategy'>OrderPlacedStrategy</a>. The order is set as \"placed\" when it transitions from\n'ArrangingPayment' to either 'PaymentAuthorized' or 'PaymentSettled'.\n\n* Implements: <code><a href='/reference/typescript-api/orders/order-placed-strategy#orderplacedstrategy'>OrderPlacedStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "shouldsetasplaced",
                        "title": "shouldSetAsPlaced",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, fromState: <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, toState: <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => boolean`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultOrderPlacedStrategy implements OrderPlacedStrategy {",
                    "    shouldSetAsPlaced(ctx: RequestContext, fromState: OrderState, toState: OrderState, order: Order) => boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultpasswordvalidationstrategy",
        "metadata": {
            "title": "DefaultPasswordValidationStrategy",
            "keywords": [
                "defaultpasswordvalidationstrategy",
                "constructor",
                "validate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/auth/default-password-validation-strategy.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"1.5.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultpasswordvalidationstrategy",
                "title": "DefaultPasswordValidationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/auth/default-password-validation-strategy.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"1.5.0\" />\n\nThe DefaultPasswordValidationStrategy allows you to specify a minimum length and/or\na regular expression to match passwords against.\n\nTODO:\nBy default, the `minLength` will be set to `4`. This is rather permissive and is only\nthis way in order to reduce the risk of backward-compatibility breaks. In the next major version\nthis default will be made more strict.\n\n* Implements: <code><a href='/reference/typescript-api/auth/password-validation-strategy#passwordvalidationstrategy'>PasswordValidationStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: { minLength?: number; regexp?: RegExp }) => DefaultPasswordValidationStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "validate",
                        "title": "validate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, password: string) => boolean | string`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultPasswordValidationStrategy implements PasswordValidationStrategy {",
                    "    constructor(options: { minLength?: number; regexp?: RegExp })",
                    "    validate(ctx: RequestContext, password: string) => boolean | string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultpaymentprocess",
        "metadata": {
            "title": "DefaultPaymentProcess",
            "keywords": [
                "defaultpaymentprocess"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/payment/default-payment-process.ts\" sourceLine=\"26\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultpaymentprocess",
                "title": "defaultPaymentProcess",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/default-payment-process.ts\" sourceLine=\"26\" packageName=\"@vendure/core\" />\n\nThe default <a href='/reference/typescript-api/payment/payment-process#paymentprocess'>PaymentProcess</a>\n\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "defaultproductvariantpricecalculationstrategy",
        "metadata": {
            "title": "DefaultProductVariantPriceCalculationStrategy",
            "keywords": [
                "defaultproductvariantpricecalculationstrategy",
                "init",
                "calculate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/catalog/default-product-variant-price-calculation-strategy.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultproductvariantpricecalculationstrategy",
                "title": "DefaultProductVariantPriceCalculationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/catalog/default-product-variant-price-calculation-strategy.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nA default ProductVariant price calculation function.\n\n* Implements: <code><a href='/reference/typescript-api/products-stock/product-variant-price-calculation-strategy#productvariantpricecalculationstrategy'>ProductVariantPriceCalculationStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "calculate",
                        "title": "calculate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(args: <a href='/reference/typescript-api/products-stock/product-variant-price-calculation-strategy#productvariantpricecalculationargs'>ProductVariantPriceCalculationArgs</a>) => Promise&#60;<a href='/reference/typescript-api/common/price-calculation-result#pricecalculationresult'>PriceCalculationResult</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultProductVariantPriceCalculationStrategy implements ProductVariantPriceCalculationStrategy {",
                    "    init(injector: Injector) => ;",
                    "    calculate(args: ProductVariantPriceCalculationArgs) => Promise<PriceCalculationResult>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultsearchplugin",
        "metadata": {
            "title": "DefaultSearchPlugin",
            "keywords": [
                "defaultsearchplugin",
                "options",
                "init"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/plugin/default-search-plugin/default-search-plugin.ts\" sourceLine=\"69\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultsearchplugin",
                "title": "DefaultSearchPlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/plugin/default-search-plugin/default-search-plugin.ts\" sourceLine=\"69\" packageName=\"@vendure/core\" />\n\nThe DefaultSearchPlugin provides a full-text Product search based on the full-text searching capabilities of the\nunderlying database.\n\nThe DefaultSearchPlugin is bundled with the `@vendure/core` package. If you are not using an alternative search\nplugin, then make sure this one is used, otherwise you will not be able to search products via the\n[`search` query](/reference/graphql-api/shop/queries#search).\n\n:::caution\nNote that the quality of the fulltext search capabilities varies depending on the underlying database being used. For example,\nthe MySQL & Postgres implementations will typically yield better results than the SQLite implementation.\n:::\n\n*Example*\n\n\n* Implements: <code>OnApplicationBootstrap</code>, <code>OnApplicationShutdown</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/default-search-plugin/default-search-plugin-init-options#defaultsearchplugininitoptions'>DefaultSearchPluginInitOptions</a>`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/typescript-api/default-search-plugin/default-search-plugin-init-options#defaultsearchplugininitoptions'>DefaultSearchPluginInitOptions</a>) => Type&#60;<a href='/reference/typescript-api/default-search-plugin/#defaultsearchplugin'>DefaultSearchPlugin</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { DefaultSearchPlugin, VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "  // Add an instance of the plugin to the plugins array",
                    "  plugins: [",
                    "    DefaultSearchPlugin.init({",
                    "      indexStockStatus: true,",
                    "      bufferUpdates: true,",
                    "    }),",
                    "  ],",
                    "};",
                    "class DefaultSearchPlugin implements OnApplicationBootstrap, OnApplicationShutdown {",
                    "    static options: DefaultSearchPluginInitOptions = {};",
                    "    init(options: DefaultSearchPluginInitOptions) => Type<DefaultSearchPlugin>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultsearchplugininitoptions",
        "metadata": {
            "title": "DefaultSearchPluginInitOptions",
            "keywords": [
                "defaultsearchplugininitoptions",
                "indexstockstatus",
                "bufferupdates",
                "searchstrategy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/plugin/default-search-plugin/types.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultsearchplugininitoptions",
                "title": "DefaultSearchPluginInitOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/plugin/default-search-plugin/types.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />\n\nOptions which configure the behaviour of the DefaultSearchPlugin\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "indexstockstatus",
                        "title": "indexStockStatus",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false.\"   />\n\nIf set to `true`, the stock status of a ProductVariant (inStock: Boolean) will\nbe exposed in the `search` query results. Enabling this option on an existing\nVendure installation will require a DB migration/synchronization.\n"
                    },
                    {
                        "id": "bufferupdates",
                        "title": "bufferUpdates",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"  since=\"1.3.0\"  />\n\nIf set to `true`, updates to Products, ProductVariants and Collections will not immediately\ntrigger an update to the search index. Instead, all these changes will be buffered and will\nonly be run via a call to the `runPendingSearchIndexUpdates` mutation in the Admin API.\n\nThis is very useful for installations with a large number of ProductVariants and/or\nCollections, as the buffering allows better control over when these expensive jobs are run,\nand also performs optimizations to minimize the amount of work that needs to be performed by\nthe worker.\n"
                    },
                    {
                        "id": "searchstrategy",
                        "title": "searchStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`SearchStrategy`} default=\"undefined\"  since=\"1.6.0\"  />\n\nSet a custom search strategy that implements {@link SearchStrategy} or extends an existing search strategy\nsuch as {@link MysqlSearchStrategy}, {@link PostgresSearchStrategy} or {@link SqliteSearchStrategy}.\n\n*Example*\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface DefaultSearchPluginInitOptions {",
                    "    indexStockStatus?: boolean;",
                    "    bufferUpdates?: boolean;",
                    "    searchStrategy?: SearchStrategy;",
                    "}",
                    "export class MySearchStrategy implements SearchStrategy {",
                    "    private readonly minTermLength = 2;",
                    "    private connection: TransactionalConnection;",
                    "    private options: DefaultSearchPluginInitOptions;",
                    "",
                    "    async init(injector: Injector) {",
                    "        this.connection = injector.get(TransactionalConnection);",
                    "        this.options = injector.get(PLUGIN_INIT_OPTIONS);",
                    "    }",
                    "",
                    "    async getFacetValueIds(",
                    "        ctx: RequestContext,",
                    "        input: SearchInput,",
                    "        enabledOnly: boolean,",
                    "    ): Promise<Map<ID, number>> {",
                    "        // ...",
                    "        return createFacetIdCountMap(facetValuesResult);",
                    "    }",
                    "",
                    "    async getCollectionIds(",
                    "        ctx: RequestContext,",
                    "        input: SearchInput,",
                    "        enabledOnly: boolean,",
                    "    ): Promise<Map<ID, number>> {",
                    "        // ...",
                    "        return createCollectionIdCountMap(collectionsResult);",
                    "    }",
                    "",
                    "    async getSearchResults(",
                    "        ctx: RequestContext,",
                    "        input: SearchInput,",
                    "        enabledOnly: boolean,",
                    "    ): Promise<SearchResult[]> {",
                    "        const take = input.take || 25;",
                    "        const skip = input.skip || 0;",
                    "        const sort = input.sort;",
                    "        const qb = this.connection",
                    "            .getRepository(SearchIndexItem)",
                    "            .createQueryBuilder('si')",
                    "            .select(this.createMysqlSelect(!!input.groupByProduct));",
                    "        // ...",
                    "",
                    "        return qb",
                    "            .take(take)",
                    "            .skip(skip)",
                    "            .getRawMany()",
                    "            .then(res => res.map(r => mapToSearchResult(r, ctx.channel.currencyCode)));",
                    "    }",
                    "",
                    "    async getTotalCount(ctx: RequestContext, input: SearchInput, enabledOnly: boolean): Promise<number> {",
                    "        const innerQb = this.applyTermAndFilters(",
                    "            ctx,",
                    "            this.connection",
                    "                .getRepository(SearchIndexItem)",
                    "                .createQueryBuilder('si')",
                    "                .select(this.createMysqlSelect(!!input.groupByProduct)),",
                    "            input,",
                    "        );",
                    "        if (enabledOnly) {",
                    "            innerQb.andWhere('si.enabled = :enabled', { enabled: true });",
                    "        }",
                    "",
                    "        const totalItemsQb = this.connection.rawConnection",
                    "            .createQueryBuilder()",
                    "            .select('COUNT(*) as total')",
                    "            .from(`(${innerQb.getQuery()})`, 'inner')",
                    "            .setParameters(innerQb.getParameters());",
                    "        return totalItemsQb.getRawOne().then(res => res.total);",
                    "    }",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultshippinglineassignmentstrategy",
        "metadata": {
            "title": "DefaultShippingLineAssignmentStrategy",
            "keywords": [
                "defaultshippinglineassignmentstrategy",
                "assignshippinglinetoorderlines"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/default-shipping-line-assignment-strategy.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultshippinglineassignmentstrategy",
                "title": "DefaultShippingLineAssignmentStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/default-shipping-line-assignment-strategy.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThis is the default <a href='/reference/typescript-api/shipping/shipping-line-assignment-strategy#shippinglineassignmentstrategy'>ShippingLineAssignmentStrategy</a> which simply assigns all OrderLines to the\nShippingLine, and is suitable for the most common scenario of a single shipping method per Order.\n\n* Implements: <code><a href='/reference/typescript-api/shipping/shipping-line-assignment-strategy#shippinglineassignmentstrategy'>ShippingLineAssignmentStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "assignshippinglinetoorderlines",
                        "title": "assignShippingLineToOrderLines",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, shippingLine: <a href='/reference/typescript-api/entities/shipping-line#shippingline'>ShippingLine</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>[] | Promise&#60;<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>[]&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultShippingLineAssignmentStrategy implements ShippingLineAssignmentStrategy {",
                    "    assignShippingLineToOrderLines(ctx: RequestContext, shippingLine: ShippingLine, order: Order) => OrderLine[] | Promise<OrderLine[]>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultstockallocationstrategy",
        "metadata": {
            "title": "DefaultStockAllocationStrategy",
            "keywords": [
                "defaultstockallocationstrategy",
                "shouldallocatestock"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/default-stock-allocation-strategy.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultstockallocationstrategy",
                "title": "DefaultStockAllocationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/default-stock-allocation-strategy.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nAllocates stock when the Order transitions from `ArrangingPayment` to either\n`PaymentAuthorized` or `PaymentSettled`.\n\n* Implements: <code><a href='/reference/typescript-api/orders/stock-allocation-strategy#stockallocationstrategy'>StockAllocationStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "shouldallocatestock",
                        "title": "shouldAllocateStock",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, fromState: <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, toState: <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => boolean | Promise&#60;boolean&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultStockAllocationStrategy implements StockAllocationStrategy {",
                    "    shouldAllocateStock(ctx: RequestContext, fromState: OrderState, toState: OrderState, order: Order) => boolean | Promise<boolean>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultstockdisplaystrategy",
        "metadata": {
            "title": "DefaultStockDisplayStrategy",
            "keywords": [
                "defaultstockdisplaystrategy",
                "constructor",
                "getstocklevel"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/catalog/default-stock-display-strategy.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultstockdisplaystrategy",
                "title": "DefaultStockDisplayStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/catalog/default-stock-display-strategy.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nDisplays the `ProductVariant.stockLevel` as either `'IN_STOCK'`, `'OUT_OF_STOCK'` or `'LOW_STOCK'`.\nLow stock is defined as a saleable stock level less than or equal to the `lowStockLevel` as passed in\nto the constructor (defaults to `2`).\n\n* Implements: <code><a href='/reference/typescript-api/products-stock/stock-display-strategy#stockdisplaystrategy'>StockDisplayStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(lowStockLevel: number = 2) => DefaultStockDisplayStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "getstocklevel",
                        "title": "getStockLevel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariant: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>, saleableStockLevel: number) => string`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultStockDisplayStrategy implements StockDisplayStrategy {",
                    "    constructor(lowStockLevel: number = 2)",
                    "    getStockLevel(ctx: RequestContext, productVariant: ProductVariant, saleableStockLevel: number) => string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultstocklocationstrategy",
        "metadata": {
            "title": "DefaultStockLocationStrategy",
            "keywords": [
                "defaultstocklocationstrategy",
                "connection",
                "init",
                "getavailablestock",
                "forallocation",
                "forcancellation",
                "forrelease",
                "forsale"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/catalog/default-stock-location-strategy.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultstocklocationstrategy",
                "title": "DefaultStockLocationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/catalog/default-stock-location-strategy.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThe DefaultStockLocationStrategy is the default implementation of the <a href='/reference/typescript-api/products-stock/stock-location-strategy#stocklocationstrategy'>StockLocationStrategy</a>.\nIt assumes only a single StockLocation and that all stock is allocated from that location.\n\n* Implements: <code><a href='/reference/typescript-api/products-stock/stock-location-strategy#stocklocationstrategy'>StockLocationStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "connection",
                        "title": "connection",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "getavailablestock",
                        "title": "getAvailableStock",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>, stockLevels: <a href='/reference/typescript-api/entities/stock-level#stocklevel'>StockLevel</a>[]) => <a href='/reference/typescript-api/products-stock/stock-location-strategy#availablestock'>AvailableStock</a>`}   />\n\n\n"
                    },
                    {
                        "id": "forallocation",
                        "title": "forAllocation",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, stockLocations: <a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>[], orderLine: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>, quantity: number) => <a href='/reference/typescript-api/products-stock/stock-location-strategy#locationwithquantity'>LocationWithQuantity</a>[] | Promise&#60;<a href='/reference/typescript-api/products-stock/stock-location-strategy#locationwithquantity'>LocationWithQuantity</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "forcancellation",
                        "title": "forCancellation",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, stockLocations: <a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>[], orderLine: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>, quantity: number) => Promise&#60;<a href='/reference/typescript-api/products-stock/stock-location-strategy#locationwithquantity'>LocationWithQuantity</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "forrelease",
                        "title": "forRelease",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, stockLocations: <a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>[], orderLine: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>, quantity: number) => Promise&#60;<a href='/reference/typescript-api/products-stock/stock-location-strategy#locationwithquantity'>LocationWithQuantity</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "forsale",
                        "title": "forSale",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, stockLocations: <a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>[], orderLine: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>, quantity: number) => Promise&#60;<a href='/reference/typescript-api/products-stock/stock-location-strategy#locationwithquantity'>LocationWithQuantity</a>[]&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultStockLocationStrategy implements StockLocationStrategy {",
                    "    protected connection: TransactionalConnection;",
                    "    init(injector: Injector) => ;",
                    "    getAvailableStock(ctx: RequestContext, productVariantId: ID, stockLevels: StockLevel[]) => AvailableStock;",
                    "    forAllocation(ctx: RequestContext, stockLocations: StockLocation[], orderLine: OrderLine, quantity: number) => LocationWithQuantity[] | Promise<LocationWithQuantity[]>;",
                    "    forCancellation(ctx: RequestContext, stockLocations: StockLocation[], orderLine: OrderLine, quantity: number) => Promise<LocationWithQuantity[]>;",
                    "    forRelease(ctx: RequestContext, stockLocations: StockLocation[], orderLine: OrderLine, quantity: number) => Promise<LocationWithQuantity[]>;",
                    "    forSale(ctx: RequestContext, stockLocations: StockLocation[], orderLine: OrderLine, quantity: number) => Promise<LocationWithQuantity[]>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaulttaxlinecalculationstrategy",
        "metadata": {
            "title": "DefaultTaxLineCalculationStrategy",
            "keywords": [
                "defaulttaxlinecalculationstrategy",
                "calculate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/tax/default-tax-line-calculation-strategy.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaulttaxlinecalculationstrategy",
                "title": "DefaultTaxLineCalculationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/tax/default-tax-line-calculation-strategy.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" />\n\nThe default <a href='/reference/typescript-api/tax/tax-line-calculation-strategy#taxlinecalculationstrategy'>TaxLineCalculationStrategy</a> which applies a single TaxLine to the OrderLine\nbased on the applicable <a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>.\n\n* Implements: <code><a href='/reference/typescript-api/tax/tax-line-calculation-strategy#taxlinecalculationstrategy'>TaxLineCalculationStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "calculate",
                        "title": "calculate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(args: <a href='/reference/typescript-api/tax/tax-line-calculation-strategy#calculatetaxlinesargs'>CalculateTaxLinesArgs</a>) => TaxLine[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultTaxLineCalculationStrategy implements TaxLineCalculationStrategy {",
                    "    calculate(args: CalculateTaxLinesArgs) => TaxLine[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaulttaxzonestrategy",
        "metadata": {
            "title": "DefaultTaxZoneStrategy",
            "keywords": [
                "defaulttaxzonestrategy",
                "determinetaxzone"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/tax/default-tax-zone-strategy.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaulttaxzonestrategy",
                "title": "DefaultTaxZoneStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/tax/default-tax-zone-strategy.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" />\n\nA default method of determining Zone for tax calculations.\n\n* Implements: <code><a href='/reference/typescript-api/tax/tax-zone-strategy#taxzonestrategy'>TaxZoneStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "determinetaxzone",
                        "title": "determineTaxZone",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, zones: <a href='/reference/typescript-api/entities/zone#zone'>Zone</a>[], channel: <a href='/reference/typescript-api/entities/channel#channel'>Channel</a>, order?: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => <a href='/reference/typescript-api/entities/zone#zone'>Zone</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultTaxZoneStrategy implements TaxZoneStrategy {",
                    "    determineTaxZone(ctx: RequestContext, zones: Zone[], channel: Channel, order?: Order) => Zone;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "defaultvendurecomplexityestimator",
        "metadata": {
            "title": "DefaultVendureComplexityEstimator",
            "keywords": [
                "defaultvendurecomplexityestimator",
                "customcomplexityfactors",
                "logfieldscores"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/harden-plugin/src/middleware/query-complexity-plugin.ts\" sourceLine=\"94\" packageName=\"@vendure/harden-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultvendurecomplexityestimator",
                "title": "defaultVendureComplexityEstimator",
                "content": "\n<GenerationInfo sourceFile=\"packages/harden-plugin/src/middleware/query-complexity-plugin.ts\" sourceLine=\"94\" packageName=\"@vendure/harden-plugin\" />\n\nA complexity estimator which takes into account List and PaginatedList types and can\nbe further configured by providing a customComplexityFactors object.\n\nWhen selecting PaginatedList types, the \"take\" argument is used to estimate a complexity\nfactor. If the \"take\" argument is omitted, a default factor of 1000 is applied.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "customcomplexityfactors",
                        "title": "customComplexityFactors",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`{ [path: string]: number }`} />\n\n"
                    },
                    {
                        "id": "logfieldscores",
                        "title": "logFieldScores",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`boolean`} />\n\n\n"
                    }
                ],
                "code": [
                    "function defaultVendureComplexityEstimator(customComplexityFactors: { [path: string]: number }, logFieldScores: boolean): void"
                ]
            }
        ]
    },
    {
        "id": "define-a-database-entity",
        "metadata": {
            "title": "Define a database entity",
            "keywords": [
                "create the entity class",
                "register the entity",
                "using the entity",
                "available entity decorators",
                "corresponding graphql type"
            ],
            "description": "Your plugin can define new database entities to model the data it needs to store. For instance, a product review plugin would need a way to store reviews. This would be done by defining a new database entity. This example shows how new [TypeORM database entities](https://typeorm.io/entities) can be defined by plugins. ```ts title=\"src/plugins/reviews/entities/product-review.entity.ts\" import { DeepPartial } from '@vendure/common/lib/shared-types';"
        },
        "content": "",
        "sections": [
            {
                "id": "create-the-entity-class",
                "title": "Create the entity class",
                "content": "\n\n:::note\nAny custom entities *must* extend the [`VendureEntity`](/reference/typescript-api/entities/vendure-entity/) class.\n:::\n\nIn this example, we are making use of the following TypeORM decorators:\n\n* [`@Entity()`](https://typeorm.io/decorator-reference#entity) - defines the entity as a TypeORM entity. This is **required** for all entities. It tells TypeORM to create a new table in the database for this entity.\n* [`@Column()`](https://typeorm.io/decorator-reference#column) - defines a column in the database table. The data type of the column is inferred from the TypeScript type of the property, but can be overridden by passing an options object to the decorator. The `@Column()` also supports many other options for defining the column, such as `nullable`, `default`, `unique`, `primary`, `enum` etc.\n* [`@ManyToOne()`](https://typeorm.io/decorator-reference#manytoone) - defines a many-to-one relationship between this entity and another entity. In this case, many  `ProductReview` entities can be associated with a given `Product`. There are other types of relations that can be defined - see the [TypeORM relations docs](https://typeorm.io/relations).\n\nThere is an additional Vendure-specific decorator:\n\n* [`@EntityId()`](/reference/typescript-api/configuration/entity-id-decorator) marks a property as the ID of another entity. In this case, the `productId` property is the ID of the `Product` entity. The reason that we have a special decorator for this is that Vendure supports both numeric and string IDs, and the `@EntityId()` decorator will automatically set the database column to be the correct type. This `productId` is not _necessary_, but it is a useful convention to allow access to the ID of the associated entity without having to perform a database join.\n\n",
                "subsections": [],
                "code": [
                    "import { DeepPartial } from '@vendure/common/lib/shared-types';",
                    "import { VendureEntity, Product, EntityId, ID } from '@vendure/core';",
                    "import { Column, Entity, ManyToOne } from 'typeorm';",
                    "",
                    "@Entity()",
                    "class ProductReview extends VendureEntity {",
                    "    constructor(input?: DeepPartial<ProductReview>) {",
                    "        super(input);",
                    "    }",
                    "",
                    "    @ManyToOne(type => Product)",
                    "    product: Product;",
                    "    ",
                    "    @EntityId()",
                    "    productId: ID;",
                    "",
                    "    @Column()",
                    "    text: string;",
                    "",
                    "    @Column()",
                    "    rating: number;",
                    "}"
                ]
            },
            {
                "id": "register-the-entity",
                "title": "Register the entity",
                "content": "\nThe new entity is then passed to the `entities` array of the VendurePlugin metadata:\n\n\n:::note\nOnce you have added a new entity to your plugin, and the plugin has been added to your VendureConfig plugins array, you must create a [database migration](/guides/developer-guide/migrations/) to create the new table in the database.\n:::\n\n",
                "subsections": [],
                "code": [
                    "import { VendurePlugin } from '@vendure/core';",
                    "import { ProductReview } from './entities/product-review.entity';",
                    "",
                    "@VendurePlugin({",
                    "    // highlight-next-line",
                    "    entities: [ProductReview],",
                    "})",
                    "export class ReviewsPlugin {}"
                ]
            },
            {
                "id": "using-the-entity",
                "title": "Using the entity",
                "content": "\nThe new entity can now be used in your plugin code. For example, you might want to create a new product review when a customer submits a review via the storefront:\n\n\n",
                "subsections": [],
                "code": [
                    "import { Injectable } from '@nestjs/common';",
                    "import { RequestContext, Product, TransactionalConnection } from '@vendure/core';",
                    "",
                    "import { ProductReview } from '../entities/product-review.entity';",
                    "",
                    "@Injectable()",
                    "export class ReviewService {",
                    "    constructor(private connection: TransactionalConnection) {}",
                    "",
                    "    async createReview(ctx: RequestContext, productId: string, rating: number, text: string) {",
                    "        const product = await this.connection.getEntityOrThrow(ctx, Product, productId);",
                    "        // highlight-start",
                    "        const review = new ProductReview({",
                    "            product,",
                    "            rating,",
                    "            text,",
                    "        });",
                    "        return this.connection.getRepository(ctx, ProductReview).save(review);",
                    "        // highlight-end",
                    "    }",
                    "}"
                ]
            },
            {
                "id": "available-entity-decorators",
                "title": "Available entity decorators",
                "content": "\nIn addition to the decorators described above, there are many other decorators provided by TypeORM. Some commonly used ones are:\n\n- [`@OneToOne()`](https://typeorm.io/decorator-reference#onetoone)\n- [`@OneToMany()`](https://typeorm.io/decorator-reference#onetomany)\n- [`@ManyToMany()`](https://typeorm.io/decorator-reference#manytomany)\n- [`@Index()`](https://typeorm.io/decorator-reference#index)\n- [`@Unique()`](https://typeorm.io/decorator-reference#unique)\n\nThere is also another Vendure-specific decorator for representing monetary values specifically:\n\n- [`@Money()`](/reference/typescript-api/money/money-decorator): This works together with the [`MoneyStrategy`](/reference/typescript-api/money/money-strategy) to allow configurable control over how monetary values are stored in the database. For more information see the [Money & Currency guide](/guides/core-concepts/money/#the-money-decorator).\n\n:::info\nThe full list of TypeORM decorators can be found in the [TypeORM decorator reference](https://typeorm.io/decorator-reference)\n:::\n\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "corresponding-graphql-type",
                "title": "Corresponding GraphQL type",
                "content": "\nOnce you have defined a new DB entity, it is likely that you want to expose it in your GraphQL API. Here's how to [define a new type in your GraphQL API](/guides/developer-guide/extend-graphql-api/#defining-a-new-type).\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "define-custom-permissions",
        "metadata": {
            "title": "Define custom permissions",
            "keywords": [
                "defining a single permission",
                "custom crud permissions"
            ],
            "description": "Vendure uses a fine-grained access control system based on roles & permissions. This is described in detail in the [Auth guide](/guides/core-concepts/auth/). The built-in [`Permission` enum](/reference/typescript-api/common/permission/) includes a range of permissions to control create, read, update, and delete access to the built-in entities. When building plugins, you may need to define new permissions to control access to new functionality. This guide explains how to do so. For example, let's imagine you are creating a plugin which exposes a new mutation that can be used by remote services to sync your inventory. First of all we will define the new permission using the [`PermissionDefinition`](/reference/typescript-api/auth/permission-definition/) class: ```ts title=\"src/plugins/inventory-sync/constants.ts\" import { PermissionDefinition } from '@vendure/core';"
        },
        "content": "",
        "sections": [
            {
                "id": "defining-a-single-permission",
                "title": "Defining a single permission",
                "content": "\nFor example, let's imagine you are creating a plugin which exposes a new mutation that can be used by remote services to sync your inventory. First of all we will define the new permission using the [`PermissionDefinition`](/reference/typescript-api/auth/permission-definition/) class:\n\n\nThis permission can then be used in conjuction with the [@Allow() decorator](/reference/typescript-api/request/allow-decorator/) to limit access to the mutation:\n\n\nFinally, the `sync` PermissionDefinition must be passed into the VendureConfig so that Vendure knows about this new custom permission:\n\n\nOn starting the Vendure server, this custom permission will now be visible in the Role detail view of the Admin UI, and can be assigned to Roles.\n\n",
                "subsections": [],
                "code": [
                    "import { PermissionDefinition } from '@vendure/core';",
                    "",
                    "export const sync = new PermissionDefinition({",
                    "    name: 'SyncInventory',",
                    "    description: 'Allows syncing stock levels via Admin API'",
                    "});",
                    "import { Mutation, Resolver } from '@nestjs/graphql';",
                    "import { Allow } from '@vendure/core';",
                    "import { sync } from '../constants';",
                    "",
                    "@Resolver()",
                    "export class InventorySyncResolver {",
                    "",
                    "    // highlight-next-line",
                    "    @Allow(sync.Permission)",
                    "    @Mutation()",
                    "    syncInventory(/* ... */) {",
                    "        // ...",
                    "    }",
                    "}",
                    "import gql from 'graphql-tag';",
                    "import { VendurePlugin } from '@vendure/core';",
                    "",
                    "import { InventorySyncResolver } from './api/inventory-sync.resolver'",
                    "import { sync } from './constants';",
                    "",
                    "@VendurePlugin({",
                    "    adminApiExtensions: {",
                    "        schema: gql`",
                    "            input InventoryDataInput {",
                    "              # omitted for brevity",
                    "            }",
                    "        ",
                    "            extend type Mutation {",
                    "              syncInventory(input: InventoryDataInput!): Boolean!",
                    "            }",
                    "        `,",
                    "        resolvers: [InventorySyncResolver]",
                    "    },",
                    "    configuration: config => {",
                    "        // highlight-next-line",
                    "        config.authOptions.customPermissions.push(sync);",
                    "        return config;",
                    "    },",
                    "})",
                    "export class InventorySyncPlugin {}"
                ]
            },
            {
                "id": "custom-crud-permissions",
                "title": "Custom CRUD permissions",
                "content": "\nQuite often your plugin will define a new entity on which you must perform create, read, update and delete (CRUD) operations. In this case, you can use the [CrudPermissionDefinition](/reference/typescript-api/auth/permission-definition/#crudpermissiondefinition) which simplifies the creation of the set of 4 CRUD permissions. \n\nFor example, let's imagine we are creating a plugin which adds a new entity called `ProductReview`. We can define the CRUD permissions like so:\n\n\nThese permissions can then be used in our resolver:\n\n\nFinally, the `productReview` CrudPermissionDefinition must be passed into the VendureConfig so that Vendure knows about this new custom permission:\n\n\n",
                "subsections": [],
                "code": [
                    "import { CrudPermissionDefinition } from '@vendure/core';",
                    "",
                    "export const productReview = new CrudPermissionDefinition('ProductReview');",
                    "import { Mutation, Resolver } from '@nestjs/graphql';",
                    "import { Allow, Transaction } from '@vendure/core';",
                    "import { productReview } from '../constants';",
                    "",
                    "@Resolver()",
                    "export class ProductReviewResolver {",
                    "",
                    "    // highlight-next-line",
                    "    @Allow(productReview.Read)",
                    "    @Query()",
                    "    productReviews(/* ... */) {",
                    "        // ...",
                    "    }",
                    "    ",
                    "    // highlight-next-line",
                    "    @Allow(productReview.Create)",
                    "    @Mutation()",
                    "    @Transaction()",
                    "    createProductReview(/* ... */) {",
                    "        // ...",
                    "    }",
                    "    ",
                    "    // highlight-next-line",
                    "    @Allow(productReview.Update)",
                    "    @Mutation()",
                    "    @Transaction()",
                    "    updateProductReview(/* ... */) {",
                    "        // ...",
                    "    }",
                    "    ",
                    "    // highlight-next-line",
                    "    @Allow(productReview.Delete)",
                    "    @Mutation()",
                    "    @Transaction()",
                    "    deleteProductReview(/* ... */) {",
                    "        // ...",
                    "    }",
                    "}",
                    "import gql from 'graphql-tag';",
                    "import { VendurePlugin } from '@vendure/core';",
                    "",
                    "import { ProductReviewResolver } from './api/product-review.resolver'",
                    "import { productReview } from './constants';",
                    "",
                    "@VendurePlugin({",
                    "    adminApiExtensions: {",
                    "        schema: gql`",
                    "            # omitted for brevity",
                    "        `,",
                    "        resolvers: [ProductReviewResolver]",
                    "    },",
                    "    configuration: config => {",
                    "        // highlight-next-line",
                    "        config.authOptions.customPermissions.push(productReview);",
                    "        return config;",
                    "    },",
                    "})",
                    "export class ProductReviewPlugin {}"
                ]
            }
        ]
    },
    {
        "id": "defining-routes",
        "metadata": {
            "title": "Defining routes",
            "keywords": [
                "example: creating a \"greeter\" route",
                "1. create the route component",
                "2. define the route",
                "3. add the route to the extension config",
                "links",
                "route parameters",
                "injecting services",
                "setting page title",
                "in the route definition",
                "dynamically from the component",
                "setting breadcrumbs",
                "advanced configuration"
            ],
            "description": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; Routes allow you to mount entirely custom components at a given URL in the Admin UI. New routes will appear in this area of the Admin UI: ![Route area](./route-area.webp) Routes can be defined natively using either **Angular** or **React**. It is also possible to [use other frameworks](/guides/extending-the-admin-ui/using-other-frameworks/) in a more limited capacity."
        },
        "content": "",
        "sections": [
            {
                "id": "example:-creating-a-\"greeter\"-route",
                "title": "Example: Creating a \"Greeter\" route",
                "content": "\n",
                "subsections": [
                    {
                        "id": "1.-create-the-route-component",
                        "title": "1. Create the route component",
                        "content": "\nFirst we need to create the component which will be mounted at the route. This component can be either an Angular component or a React component.\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\n:::note\nThe `<vdr-page-block>` (Angular) and `<div className=\"page-block\">` (React) is a wrapper that sets the layout and max width of your component to match the rest of the Admin UI. You should usually wrap your component in this element.\n:::\n\n\n"
                    },
                    {
                        "id": "2.-define-the-route",
                        "title": "2. Define the route",
                        "content": "\nNext we need to define a route in our `routes.ts` file. Note that this file can have any name, but \"routes.ts\" is a convention.\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\nUsing [`registerRouteComponent`](/reference/admin-ui-api/routes/register-route-component) you can define a new route based on an Angular component.\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\nHere's the equivalent example using React and [`registerReactRouteComponent`](/reference/admin-ui-api/react-extensions/register-react-route-component):\n\n\n</TabItem>\n</Tabs>\n\nThe `path: ''` is actually optional, since `''` is the default value. But this is included here to show that you can mount different components at different paths. See the section on route parameters below.\n\n"
                    },
                    {
                        "id": "3.-add-the-route-to-the-extension-config",
                        "title": "3. Add the route to the extension config",
                        "content": "\nNow we need to add this routes file to our extension definition:\n\n\nNote that by specifying `route: 'greet'`, we are \"mounting\" the routes at the `/extensions/greet` path.\n\nThe `filePath` property is relative to the directory specified in the `extensionPath` property. In this case, the `routes.ts` file is located at `src/plugins/greeter/ui/routes.ts`.\n\nNow go to the Admin UI app in your browser and log in. You should now be able to manually enter the URL `http://localhost:3000/admin/extensions/greet` and you should see the component with the \"Hello!\" header:\n\n![./ui-extensions-greeter.webp](./ui-extensions-greeter.webp)\n\n\n"
                    }
                ],
                "code": [
                    "import { SharedModule } from '@vendure/admin-ui/core';",
                    "import { Component } from '@angular/core';",
                    "",
                    "@Component({",
                    "    selector: 'greeter',",
                    "    template: `",
                    "        <vdr-page-block>",
                    "            <h2>{{ greeting }}</h2>",
                    "        </vdr-page-block>`,",
                    "    standalone: true,",
                    "    imports: [SharedModule],",
                    "})",
                    "export class GreeterComponent {",
                    "    greeting = 'Hello!';",
                    "}",
                    "import React from 'react';",
                    "",
                    "export function Greeter() {",
                    "    const greeting = 'Hello!';",
                    "    return (",
                    "        <div className=\"page-block\">",
                    "            <h2>{greeting}</h2>",
                    "        </div>",
                    "    );",
                    "}",
                    "import { registerRouteComponent } from '@vendure/admin-ui/core';",
                    "import { GreeterComponent } from './components/greeter/greeter.component';",
                    "",
                    "export default [",
                    "    registerRouteComponent({",
                    "        component: GreeterComponent,",
                    "        path: '',",
                    "        title: 'Greeter Page',",
                    "        breadcrumb: 'Greeter',",
                    "    }),",
                    "];",
                    "import { registerReactRouteComponent } from '@vendure/admin-ui/react';",
                    "import { Greeter } from './components/Greeter';",
                    "",
                    "export default [",
                    "    registerReactRouteComponent({",
                    "        component: Greeter,",
                    "        path: '',",
                    "        title: 'Greeter Page',",
                    "        breadcrumb: 'Greeter',",
                    "    }),",
                    "];",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "import { compileUiExtensions } from '@vendure/ui-devkit/compiler';",
                    "import * as path from 'path';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AdminUiPlugin.init({",
                    "            port: 3002,",
                    "            app: compileUiExtensions({",
                    "                outputPath: path.join(__dirname, '../admin-ui'),",
                    "                extensions: [",
                    "                    {",
                    "                        id: 'greeter',",
                    "                        extensionPath: path.join(__dirname, 'plugins/greeter/ui'),",
                    "                        // highlight-start",
                    "                        routes: [{ route: 'greet', filePath: 'routes.ts' }],",
                    "                        // highlight-end",
                    "                    },",
                    "                ],",
                    "            }),",
                    "        }),",
                    "    ],",
                    "};"
                ]
            },
            {
                "id": "links",
                "title": "Links",
                "content": "\nTo link to other routes, you must use the `routerLink` directive for Angular, or the `Link` component for React:\n\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\n",
                "subsections": [],
                "code": [
                    "<a class=\"button-ghost\" [routerLink]=\"['/extensions/my-plugin/my-custom-route']\">",
                    "    John Smith",
                    "</a>",
                    "import React from 'react';",
                    "import { Link } from '@vendure/admin-ui/react';",
                    "",
                    "export function DemoComponent() {",
                    "    return (",
                    "        <Link className=\"button-ghost\" href=\"/extensions/my-plugin/my-custom-route\">",
                    "            John Smith",
                    "        </Link>",
                    "    );",
                    "}"
                ]
            },
            {
                "id": "route-parameters",
                "title": "Route parameters",
                "content": "\nThe `path` property is used to specify the path to a specific component. This path can contain parameters, which will then be made available to the component. Parameters are defined using the `:` prefix. For example:\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\nThe `id` parameter will then be available in the component:\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\nLoading the route `/extensions/test/123` will then display the id \"123\".\n\n",
                "subsections": [],
                "code": [
                    "import { registerRouteComponent } from '@vendure/admin-ui/core';",
                    "import { TestComponent } from './components/test/test.component';",
                    "",
                    "export default [",
                    "    registerRouteComponent({",
                    "        component: TestComponent,",
                    "        // highlight-next-line",
                    "        path: ':id',",
                    "        title: 'Test',",
                    "        breadcrumb: 'Test',",
                    "    }),",
                    "];",
                    "import { registerReactRouteComponent } from '@vendure/admin-ui/react';",
                    "import { Test } from './components/Test';",
                    "",
                    "export default [",
                    "    registerReactRouteComponent({",
                    "        component: Test,",
                    "        // highlight-next-line",
                    "        path: ':id',",
                    "        title: 'Test',",
                    "        breadcrumb: 'Test',",
                    "    }),",
                    "];",
                    "import { SharedModule } from '@vendure/admin-ui/core';",
                    "import { Component } from '@angular/core';",
                    "import { ActivatedRoute } from '@angular/router';",
                    "",
                    "@Component({",
                    "    selector: 'test',",
                    "    template: `",
                    "        <vdr-page-block>",
                    "            // highlight-next-line",
                    "            <p>id: {{ id }}</p>",
                    "        </vdr-page-block>`,",
                    "    standalone: true,",
                    "    imports: [SharedModule],",
                    "})",
                    "export class TestComponent {",
                    "    id: string;",
                    "",
                    "    constructor(private route: ActivatedRoute) {",
                    "        // highlight-next-line",
                    "        this.id = this.route.snapshot.paramMap.get('id');",
                    "    }",
                    "}",
                    "import React from 'react';",
                    "import { useRouteParams } from '@vendure/admin-ui/react';",
                    "",
                    "export function Test() {",
                    "    // highlight-next-line",
                    "    const { params } = useRouteParams();",
                    "    return (",
                    "        <div className=\"page-block\">",
                    "            // highlight-next-line",
                    "            <p>id: {params.id}</p>",
                    "        </div>",
                    "    );",
                    "}"
                ]
            },
            {
                "id": "injecting-services",
                "title": "Injecting services",
                "content": "\nIt is possible to inject services into your components. This includes both the [built-in services](/reference/admin-ui-api/services/) for things like data fetching, notifications and modals, as well as any custom services you have defined in your UI extension.\n\nHere's an example of injecting the built-in `NotificationService` into a component to display a toast notification:\n\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\nIn Angular, we can use either the constructor to inject the service (as shown below), or the `inject()` function. See the [Angular dependency injection guide](https://angular.io/guide/dependency-injection#injecting-a-dependency) for more information.\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\nIn React, we use the [`useInjector()`](/reference/admin-ui-api/react-hooks/use-injector) hook to inject the service:\n\n\n</TabItem>\n</Tabs>\n\n",
                "subsections": [],
                "code": [
                    "import { SharedModule, NotificationService } from '@vendure/admin-ui/core';",
                    "import { Component } from '@angular/core';",
                    "",
                    "@Component({",
                    "    selector: 'test',",
                    "    template: `",
                    "        <vdr-page-block>",
                    "            <button class=\"button primary\" (click)=\"showNotification()\">Click me</button>",
                    "        </vdr-page-block>`,",
                    "    standalone: true,",
                    "    imports: [SharedModule],",
                    "})",
                    "export class TestComponent {",
                    "    // highlight-next-line",
                    "    constructor(private notificationService: NotificationService) {}",
                    "    ",
                    "    showNotification() {",
                    "        // highlight-next-line",
                    "        this.notificationService.success('Hello!');",
                    "    }",
                    "}",
                    "import { NotificationService } from '@vendure/admin-ui/core';",
                    "// highlight-next-line",
                    "import { useInjector } from '@vendure/admin-ui/react';",
                    "import React from 'react';",
                    "",
                    "export function Test() {",
                    "    // highlight-next-line",
                    "    const notificationService = useInjector(NotificationService);",
                    "    ",
                    "    function showNotification() {",
                    "        // highlight-next-line",
                    "        notificationService.success('Hello!');",
                    "    }",
                    "    return (",
                    "        <div className=\"page-block\">",
                    "            <button className=\"button primary\" onClick={showNotification}>Click me</button>",
                    "        </div>",
                    "    );",
                    "}"
                ]
            },
            {
                "id": "setting-page-title",
                "title": "Setting page title",
                "content": "\nThe `title` property is used to set the page title. This is displayed in the browser tab as well as in the page header.\n\n",
                "subsections": [
                    {
                        "id": "in-the-route-definition",
                        "title": "In the route definition",
                        "content": "\nThe page title can be set in the route definition:\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\n"
                    },
                    {
                        "id": "dynamically-from-the-component",
                        "title": "Dynamically from the component",
                        "content": "\nIt is also possible to update the page title dynamically from the route component itself:\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\n"
                    }
                ],
                "code": [
                    "import { registerRouteComponent } from '@vendure/admin-ui/core';",
                    "import { TestComponent } from './components/test/test.component';",
                    "",
                    "export default [",
                    "    registerRouteComponent({",
                    "        component: TestComponent,",
                    "        // highlight-next-line",
                    "        title: 'Test',",
                    "        breadcrumb: 'Test',",
                    "    }),",
                    "];",
                    "import { registerReactRouteComponent } from '@vendure/admin-ui/react';",
                    "import { Test } from './components/Test';",
                    "",
                    "export default [",
                    "    registerReactRouteComponent({",
                    "        component: Test,",
                    "        // highlight-next-line",
                    "        title: 'Test',",
                    "        breadcrumb: 'Test',",
                    "    }),",
                    "];",
                    "import { PageMetadataService, SharedModule } from '@vendure/admin-ui/core';",
                    "import { Component } from '@angular/core';",
                    "",
                    "@Component({",
                    "    selector: 'test',",
                    "    template: `",
                    "        <vdr-page-block>",
                    "            <vdr-card>",
                    "                // highlight-next-line",
                    "                <button class=\"button primary\" (click)=\"handleClick()\">Update title</button>",
                    "            </vdr-card>",
                    "        </vdr-page-block>`,",
                    "    standalone: true,",
                    "    imports: [SharedModule],",
                    "})",
                    "export class TestComponent {",
                    "    // highlight-next-line",
                    "    constructor(private pageMetadataService: PageMetadataService) {}",
                    "",
                    "    handleClick() {",
                    "        // highlight-next-line",
                    "        pageMetadataService.setTitle('New title');",
                    "    }",
                    "}",
                    "import { Card, usePageMetadata } from '@vendure/admin-ui/react';",
                    "import React from 'react';",
                    "",
                    "export function Test() {",
                    "    // highlight-next-line",
                    "    const { setTitle } = usePageMetadata();",
                    "",
                    "    function handleClick() {",
                    "        // highlight-next-line",
                    "        setTitle('New title');",
                    "    }",
                    "    return (",
                    "        <div className=\"page-block\">",
                    "            <Card>",
                    "                <button className=\"button primary\" onClick={handleClick}>",
                    "                    Update title",
                    "                </button>",
                    "            </Card>",
                    "        </div>",
                    "    );",
                    "}"
                ]
            },
            {
                "id": "setting-breadcrumbs",
                "title": "Setting breadcrumbs",
                "content": "\n",
                "subsections": [
                    {
                        "id": "in-the-route-definition",
                        "title": "In the route definition",
                        "content": "\nThe page breadcumbs can be set in the route definition in a couple of ways. The simplest is to specify the `breadcumb` property:\n\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\nThis can be a string (as above), a link/label pair, or an array of link/label pairs:\n\n\nA more powerful way to set the breadcrumbs is by using the `getBreadcrumbs` property. This is a function that receives any resolved detail data and returns an array of link/label pairs. An example of its use can be seen in the [Creating detail views guide](/guides/extending-the-admin-ui/creating-detail-views/#route-config).\n\n"
                    },
                    {
                        "id": "dynamically-from-the-component",
                        "title": "Dynamically from the component",
                        "content": "\nSimilar to setting the title, the breadcrumbs can also be updated dynamically from the route component itself:\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\n"
                    }
                ],
                "code": [
                    "import { registerRouteComponent } from '@vendure/admin-ui/core';",
                    "import { TestComponent } from './components/test/test.component';",
                    "",
                    "export default [",
                    "    registerRouteComponent({",
                    "        component: TestComponent,",
                    "        title: 'Test',",
                    "        // highlight-next-line",
                    "        breadcrumb: 'Test',",
                    "    }),",
                    "];",
                    "import { registerReactRouteComponent } from '@vendure/admin-ui/react';",
                    "import { Test } from './components/Test';",
                    "",
                    "export default [",
                    "    registerReactRouteComponent({",
                    "        component: Test,",
                    "        title: 'Test',",
                    "        // highlight-next-line",
                    "        breadcrumb: 'Test',",
                    "    }),",
                    "];",
                    "import { registerRouteComponent } from '@vendure/admin-ui/core';",
                    "import { TestComponent } from './components/test/test.component';",
                    "",
                    "export default [",
                    "    registerRouteComponent({",
                    "        component: TestComponent,",
                    "        path: 'test-1',",
                    "        title: 'Test 1',",
                    "        // highlight-start",
                    "        breadcrumb: { label: 'Test', link: '/extensions/test' },",
                    "        // highlight-end",
                    "    }),",
                    "    registerRouteComponent({",
                    "        component: TestComponent,",
                    "        path: 'test-2',",
                    "        title: 'Test 2',",
                    "        // highlight-start",
                    "        breadcrumb: [",
                    "            { label: 'Parent', link: '/extensions/test' },",
                    "            { label: 'Child', link: '/extensions/test/test-2' },",
                    "        ],",
                    "        // highlight-end",
                    "    }),",
                    "];",
                    "import { PageMetadataService, SharedModule } from '@vendure/admin-ui/core';",
                    "import { Component } from '@angular/core';",
                    "",
                    "@Component({",
                    "    selector: 'test',",
                    "    template: `",
                    "        <vdr-page-block>",
                    "            <vdr-card>",
                    "                // highlight-next-line",
                    "                <button class=\"button primary\" (click)=\"handleClick()\">Update breadcrumb</button>",
                    "            </vdr-card>",
                    "        </vdr-page-block>`,",
                    "    standalone: true,",
                    "    imports: [SharedModule],",
                    "})",
                    "export class TestComponent {",
                    "    // highlight-next-line",
                    "    constructor(private pageMetadataService: PageMetadataService) {}",
                    "",
                    "    handleClick() {",
                    "        // highlight-next-line",
                    "        pageMetadataService.setBreadcrumb('New breadcrumb');",
                    "    }",
                    "}",
                    "import { Card, usePageMetadata } from '@vendure/admin-ui/react';",
                    "import React from 'react';",
                    "",
                    "export function Test() {",
                    "    // highlight-next-line",
                    "    const { setBreadcrumb } = usePageMetadata();",
                    "",
                    "    function handleClick() {",
                    "        // highlight-next-line",
                    "        setBreadcrumb('New breadcrumb');",
                    "    }",
                    "    return (",
                    "        <div className=\"page-block\">",
                    "            <Card>",
                    "                <button className=\"button primary\" onClick={handleClick}>",
                    "                    Update title",
                    "                </button>",
                    "            </Card>",
                    "        </div>",
                    "    );",
                    "}"
                ]
            },
            {
                "id": "advanced-configuration",
                "title": "Advanced configuration",
                "content": "\nThe Admin UI app routing is built on top of the [Angular router](https://angular.io/guide/routing-overview) - a very advanced and robust router. As such, you are able to tap into all the advanced features it provides by using the `routeConfig` property, which takes an Angular [`Route` definition object](https://angular.io/api/router/Route) and passes it directly to the router.\n\n\nThis allows you to leverage advanced features such as:\n\n- [Route guards](https://angular.io/api/router/CanActivateFn)\n- [Data resolvers](https://angular.io/api/router/ResolveFn)\n- [Nested routes](https://angular.io/guide/router#nesting-routes)\n- [Redirects](https://angular.io/guide/router#setting-up-redirects)\n\n",
                "subsections": [],
                "code": [
                    "import { registerRouteComponent } from '@vendure/admin-ui/core';",
                    "import { inject } from '@angular/core';",
                    "import { ActivatedRouteSnapshot } from '@angular/router';",
                    "import { TestComponent } from './components/test/test.component';",
                    "import { PermissionsService } from './services';",
                    "",
                    "export default [",
                    "    registerRouteComponent({",
                    "        component: TestComponent,",
                    "        path: ':id',",
                    "        title: 'Test',",
                    "        breadcrumb: 'Test',",
                    "        // highlight-start",
                    "        routeConfig: {",
                    "            pathMatch: 'full',",
                    "            canActivate: [(route: ActivatedRouteSnapshot) => {",
                    "                return inject(PermissionsService).canActivate(route.params.id);",
                    "            }],",
                    "        },",
                    "        // highlight-end",
                    "    }),",
                    "];"
                ]
            }
        ]
    },
    {
        "id": "deploying-the-admin-ui",
        "metadata": {
            "title": "Deploying the Admin UI",
            "keywords": [
                "setting the api host & port",
                "deploying a stand-alone admin ui",
                "metrics",
                "example script"
            ],
            "description": "If you have customized the Admin UI with extensions, you should [compile your extensions ahead of time as part of the deployment process](/guides/extending-the-admin-ui/getting-started/#compiling-as-a-deployment-step). When running in development mode, the Admin UI app will \"guess\" the API host and port based on the current URL in the browser. Typically, this will be `http://localhost:3000`. For production deployments where the Admin UI app is served from a different host or port than the Vendure server, you'll need to configure the Admin UI app to point to the correct API host and port. ```ts title=\"src/vendure-config.ts\""
        },
        "content": "",
        "sections": [
            {
                "id": "setting-the-api-host-&-port",
                "title": "Setting the API host & port",
                "content": "\nWhen running in development mode, the Admin UI app will \"guess\" the API host and port based on the current URL in the browser. Typically, this will\nbe `http://localhost:3000`. For production deployments where the Admin UI app is served from a different host or port than the Vendure server, you'll need to\nconfigure the Admin UI app to point to the correct API host and port.\n\n\n",
                "subsections": [],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "",
                    "const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AdminUiPlugin.init({",
                    "            port: 3001,",
                    "            route: 'admin',",
                    "            adminUiConfig: {",
                    "                apiHost: 'https://api.example.com',",
                    "                apiPort: 443,",
                    "            },",
                    "        }),",
                    "    ],",
                    "};"
                ]
            },
            {
                "id": "deploying-a-stand-alone-admin-ui",
                "title": "Deploying a stand-alone Admin UI",
                "content": "\nUsually, the Admin UI is served from the Vendure server via the AdminUiPlugin. However, you may wish to deploy the Admin UI app elsewhere. Since it is just a static Angular app, it can be deployed to any static hosting service such as Vercel or Netlify.\n\n#### Metrics\n\nThe AdminUiPlugin not only serves the Admin UI app, but also provides a `metricSummary` query which is used to display the order metrics on the dashboard. If you wish to deploy the Admin UI app stand-alone (not served by the AdminUiPlugin), but still want to display the metrics on the dashboard, you'll need to include the AdminUiPlugin in your server's plugins array, but do not call `init()`:\n\n\n#### Example Script\n\nHere's an example script that can be run as part of your host's `build` command, which will generate a stand-alone app bundle and configure it to point to your remote server API.\n\nThis example is for Vercel, and assumes:\n\n* A `BASE_HREF` environment variable to be set to `/`\n* A public (output) directory set to `build/dist`\n* A build command set to `npm run build` or `yarn build`\n* A package.json like this:\n    ```json title=\"package.json\"\n    {\n      \"name\": \"standalone-admin-ui\",\n      \"version\": \"0.1.0\",\n      \"private\": true,\n      \"scripts\": {\n        \"build\": \"ts-node compile.ts\"\n      },\n      \"devDependencies\": {\n        \"@vendure/ui-devkit\": \"^1.4.5\",\n        \"ts-node\": \"^10.2.1\",\n        \"typescript\": \"~4.3.5\"\n      }\n    }\n    ```\n\n\n",
                "subsections": [],
                "code": [
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "",
                    "const config: VendureConfig = {",
                    "    plugins: [",
                    "        AdminUiPlugin, // <== include the plugin, but don't call init()",
                    "    ],",
                    "    // ...",
                    "};",
                    "import { compileUiExtensions } from '@vendure/ui-devkit/compiler';",
                    "import { DEFAULT_BASE_HREF } from '@vendure/ui-devkit/compiler/constants';",
                    "import path from 'path';",
                    "import { promises as fs } from 'fs';",
                    "",
                    "/**",
                    " * Compiles the Admin UI. If the BASE_HREF is defined, use that.",
                    " * Otherwise, go back to the default admin route.",
                    " */",
                    "compileUiExtensions({",
                    "    outputPath: path.join(__dirname, 'build'),",
                    "    baseHref: process.env.BASE_HREF ?? DEFAULT_BASE_HREF,",
                    "    extensions: [",
                    "        /* any UI extensions would go here, or leave empty */",
                    "    ],",
                    "})",
                    "    .compile?.()",
                    "    .then(() => {",
                    "        // If building for Vercel deployment, replace the config to make ",
                    "        // api calls to api.example.com instead of localhost.",
                    "        if (process.env.VERCEL) {",
                    "            console.log('Overwriting the vendure-ui-config.json for Vercel deployment.');",
                    "            return fs.writeFile(",
                    "                path.join(__dirname, 'build', 'dist', 'vendure-ui-config.json'),",
                    "                JSON.stringify({",
                    "                    apiHost: 'https://api.example.com',",
                    "                    apiPort: '443',",
                    "                    adminApiPath: 'admin-api',",
                    "                    tokenMethod: 'cookie',",
                    "                    defaultLanguage: 'en',",
                    "                    availableLanguages: ['en', 'de'],",
                    "                    hideVendureBranding: false,",
                    "                    hideVersion: false,",
                    "                }),",
                    "            );",
                    "        }",
                    "    })",
                    "    .then(() => {",
                    "        process.exit(0);",
                    "    });"
                ]
            }
        ]
    },
    {
        "id": "deploying-to-digital-ocean",
        "metadata": {
            "title": "Deploying to Digital Ocean",
            "keywords": [
                "prerequisites",
                "configuration",
                "database connection",
                "asset storage",
                "create spaces object storage",
                "create the server resource",
                "add a database",
                "set up environment variables",
                "create the worker resource",
                "test your vendure server"
            ],
            "description": "![Deploy to Digital Ocean App Platform](./deploy-to-do-app-platform.webp) [App Platform](https://www.digitalocean.com/products/app-platform) is a fully managed platform which allows you to deploy and scale your Vendure server and infrastructure with ease. :::note The configuration in this guide will cost around $22 per month to run. :::"
        },
        "content": "",
        "sections": [
            {
                "id": "prerequisites",
                "title": "Prerequisites",
                "content": "\nFirst of all you'll need to [create a new Digital Ocean account](https://cloud.digitalocean.com/registrations/new) if you\ndon't already have one.\n\nFor this guide you'll need to have your Vendure project in a git repo on either GitHub or GitLab. App Platform also supports\ndeploying from docker registries, but that is out of the scope of this guide.\n\n:::info\nIf you'd like to quickly get started with a ready-made Vendure project which includes sample data, you can clone our\n[Vendure one-click-deploy repo](https://github.com/vendure-ecommerce/one-click-deploy).\n:::\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "configuration",
                "title": "Configuration",
                "content": "\n",
                "subsections": [
                    {
                        "id": "database-connection",
                        "title": "Database connection",
                        "content": "\n:::info\nThe following is already pre-configured if you are using the one-click-deploy repo.\n:::\n\nMake sure your DB connection options uses the following environment variables:\n\n"
                    },
                    {
                        "id": "asset-storage",
                        "title": "Asset storage",
                        "content": "\n:::info\nThe following is already pre-configured if you are using the one-click-deploy repo.\n:::\n\nSince App Platform services do not include any persistent storage, we need to configure Vendure to use Digital Ocean's\nSpaces service, which is an S3-compatible object storage service. This means you'll need to make sure to have the\nfollowing packages installed:\n\n\n\nand set up your AssetServerPlugin like this:\n\n\n"
                    }
                ],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    dbConnectionOptions: {",
                    "        // ...",
                    "        type: 'postgres',",
                    "        database: process.env.DB_NAME,",
                    "        host: process.env.DB_HOST,",
                    "        port: +process.env.DB_PORT,",
                    "        username: process.env.DB_USERNAME,",
                    "        password: process.env.DB_PASSWORD,",
                    "        ssl: process.env.DB_CA_CERT ? {",
                    "            ca: process.env.DB_CA_CERT,",
                    "        } : undefined,",
                    "    },",
                    "};",
                    "npm install @aws-sdk/client-s3 @aws-sdk/lib-storage",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { AssetServerPlugin, configureS3AssetStorage } from '@vendure/asset-server-plugin';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AssetServerPlugin.init({",
                    "            route: 'assets',",
                    "            assetUploadDir: process.env.ASSET_UPLOAD_DIR || path.join(__dirname, '../static/assets'),",
                    "            // highlight-start",
                    "            // If the MINIO_ENDPOINT environment variable is set, we'll use",
                    "            // Minio as the asset storage provider. Otherwise, we'll use the",
                    "            // default local provider.",
                    "            storageStrategyFactory: process.env.MINIO_ENDPOINT ?  configureS3AssetStorage({",
                    "                bucket: 'vendure-assets',",
                    "                credentials: {",
                    "                    accessKeyId: process.env.MINIO_ACCESS_KEY,",
                    "                    secretAccessKey: process.env.MINIO_SECRET_KEY,",
                    "                },",
                    "                nativeS3Configuration: {",
                    "                    endpoint: process.env.MINIO_ENDPOINT,",
                    "                    forcePathStyle: true,",
                    "                    signatureVersion: 'v4',",
                    "                    // The `region` is required by the AWS SDK even when using MinIO,",
                    "                    // so we just use a dummy value here.",
                    "                    region: 'eu-west-1',",
                    "                },",
                    "            }) : undefined,",
                    "            // highlight-end",
                    "        }),",
                    "    ],",
                    "    // ...",
                    "};"
                ]
            },
            {
                "id": "create-spaces-object-storage",
                "title": "Create Spaces Object Storage",
                "content": "\nFirst we'll create a Spaces bucket to store our assets. Click the \"Spaces Object Storage\" nav item and\ncreate a new space and call it \"vendure-assets\".\n\n![Create Spaces Object Storage](./01-create-space.webp)\n\nNext we need to create an access key and secret. Click the \"API\" nav item and generate a new key.\n\n![Create API key](./02-space-access-keys.webp)\n\nName the key something meaningful like \"vendure-assets-key\" and then **make sure to copy the secret as it will only be\nshown once**. Store the access key and secret key in a safe place for later - we'll be using it when we set up our \napp's environment variables.\n\n:::caution\nIf you forget to copy the secret key, you'll need to delete the key and create a new one.\n:::\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "create-the-server-resource",
                "title": "Create the server resource",
                "content": "\nNow we're ready to create our app infrastructure! Click the \"Create\" button in the top bar and select \"Apps\".\n\n![Create App](./03-create-app.webp)\n\nNow connect to your git repo, and select the repo of your Vendure project.\n\nDepending on your repo, App Platform may suggest more than one app: in this screenshot we are using the one-click-deploy\nrepo which contains a Dockerfile, so App Platform is suggesting two different ways to deploy the app. We'll select the\nDockerfile option, but either option should work fine. Delete the unused resource.\n\nWe need to edit the details of the server app. Click the \"Edit\" button and set the following:\n\n* **Resource Name**: \"vendure-server\"\n* **Resource Type**: Web Service\n* **Run Command**: `node ./dist/index.js`\n* **HTTP Port**: 3000\n\nAt this point you can also click the \"Edit Plan\" button to select the resource allocation for the server, which will\ndetermine performance and price. For testing purposes the smallest Basic server (512MB, 1vCPU) is fine. This can also be changed later.\n\n",
                "subsections": [
                    {
                        "id": "add-a-database-",
                        "title": "Add a database ",
                        "content": "\nNext click \"Add Resource\", select **Database** and click \"Add\", and then accept the default Postgres database. Click the\n\"Create and Attach\" to create the database and attach it to the server app.\n\nYour config should now look like this:\n\n![App setup](./04-configure-server.webp)\n\n"
                    }
                ],
                "code": []
            },
            {
                "id": "set-up-environment-variables",
                "title": "Set up environment variables",
                "content": "\nNext we need to set up the environment variables. Since these will be shared by both the server and worker apps, we'll create\nthem at the Global level. \n\nYou can use the \"bulk editor\" to paste in the following variables (making sure to replace the values in `<angle brackets>` with\nyour own values):\n\n\n:::note\nThe values starting with `${db...}` are automatically populated by App Platform and should not be changed, unless you chose\nto name your database something other than `db`.\n:::\n\nAfter saving your environment variables you can click through the confirmation screens to create the app.\n\n",
                "subsections": [],
                "code": [
                    "DB_NAME=${db.DATABASE}",
                    "DB_USERNAME=${db.USERNAME}",
                    "DB_PASSWORD=${db.PASSWORD}",
                    "DB_HOST=${db.HOSTNAME}",
                    "DB_PORT=${db.PORT}",
                    "DB_CA_CERT=${db.CA_CERT}",
                    "// highlight-next-line",
                    "COOKIE_SECRET=<add some random characters>",
                    "SUPERADMIN_USERNAME=superadmin",
                    "// highlight-next-line",
                    "SUPERADMIN_PASSWORD=<create some strong password>",
                    "// highlight-start",
                    "MINIO_ACCESS_KEY=<use the key generated earlier>",
                    "MINIO_SECRET_KEY=<use the secret generated earlier>",
                    "MINIO_ENDPOINT=<use the endpoint of your spaces bucket>",
                    "// highlight-end"
                ]
            },
            {
                "id": "create-the-worker-resource",
                "title": "Create the worker resource",
                "content": "\nNow we need to set up the [Vendure worker](/guides/developer-guide/worker-job-queue/) which will handle background tasks. From the dashboard of your newly-created\napp, click the \"Create\" button and then select \"Create Resources From Source Code\".\n\nYou will be prompted to select the repo again, and then you'll need to set up a new single resource with the following \nsettings:\n\n* **Resource Name**: \"vendure-worker\"\n* **Resource Type**: Worker\n* **Run Command**: `node ./dist/index-worker.js`\n\nAgain you can edit the plan, and the smallest Basic plan is fine for testing purposes.\n\nNo new environment variables are needed since we'll be sharing the Global variables with the worker.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "test-your-vendure-server",
                "title": "Test your Vendure server",
                "content": "\nOnce everything has finished deploying, you can click the app URL to open your Vendure server in a new tab. \n\n![Open app](./05-open-app.webp)\n\n:::info\nAppend `/admin` to the URL to access the admin UI, and log in with the superadmin credentials you set in the environment variables.\n:::\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "deploying-to-google-cloud-run",
        "metadata": {
            "title": "Deploying to Google Cloud Run",
            "keywords": [
                "prerequisites",
                "setting up a mysql database with google cloud sql",
                "google cloud storage for assets",
                "google cloud tasks for vendure's worker",
                "running locally",
                "dockerize vendure",
                "deployment",
                "keep alive"
            ],
            "description": "![./deploy-to-gcr.webp](./deploy-to-gcr.webp) [Google Cloud Run](https://cloud.google.com/run) is a fully managed platform which allows you to run containerized apps and only pay while your app code is actually running. This guide was written by Martijn from [Pinelab](https://pinelab.studio/), who have been successfully running multiple Vendure projects on Google Cloud Run. The step by step commands can be found here on GitHub: - https://github.com/Pinelab-studio/vendure-google-cloud-run-starter/blob/main/README.md. This guide assumes you have:"
        },
        "content": "",
        "sections": [
            {
                "id": "prerequisites",
                "title": "Prerequisites",
                "content": "This guide assumes you have:\n\n* Google cloud's `gcloud` cli installed locally\n* Created a Google Cloud project and enabled the API's we need: https://github.com/Pinelab-studio/vendure-google-cloud-run-starter/blob/main/README.md#create-a-google-cloud-project \n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "setting-up-a-mysql-database-with-google-cloud-sql",
                "title": "Setting up a MySQL database with Google Cloud SQL",
                "content": "Google Cloud SQL is a fully-managed relational database service that makes it easy to set up, maintain, and manage databases in the cloud. \nVendure requires an SQL database to store its data, and Google Cloud SQL is a great option for this because it provides a reliable, scalable, and secure way to host our database.\n\nYou can find the `gcloud` commands to create a MySQL database here: https://github.com/Pinelab-studio/vendure-google-cloud-run-starter/blob/main/README.md#create-a-mysql-database\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "google-cloud-storage-for-assets",
                "title": "Google Cloud Storage for assets",
                "content": "Vendure stores assets such as product images on file system by default. However, Google Cloud Run does not have internal file storage, so we need to use an external storage service. \nGoogle Cloud Storage is a great option for this because it provides a scalable and reliable way to store our assets in the cloud.\n\nUse these `gcloud` [commands](https://github.com/Pinelab-studio/vendure-google-cloud-run-starter/blob/main/README.md#asset-storage) to create a storage bucket for our assets.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "google-cloud-tasks-for-vendure's-worker",
                "title": "Google Cloud Tasks for Vendure's worker",
                "content": "Vendure uses a worker process to perform asynchronous tasks such as sending emails. To communicate between the main application and the worker process, we need a message queue. Google Cloud Tasks is a great option for this because it provides a fully-managed, scalable, and reliable way to send and receive messages between applications.\n\nYou don't need to do anything to enable Cloud Tasks: [this plugin](https://github.com/Pinelab-studio/vendure-google-cloud-run-starter/blob/8fd342c15fa7b38e3662311f176901a5d38cde3d/src/vendure-config.ts#L88) automatically creates task queues for you.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "running-locally",
                "title": "Running locally",
                "content": "Let's test out our application locally before deploying to Cloud Run. Copy [this](https://github.com/Pinelab-studio/vendure-google-cloud-run-starter/blob/main/.env.example) `.env.example` to `.env` and fill in your variables. You can skip the `WORKER_HOST` variable, because we don't have it yet.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "dockerize-vendure",
                "title": "Dockerize Vendure",
                "content": "Google Cloud Run allows us to deploy containerized applications without worrying about the underlying infrastructure. To deploy Vendure to Google Cloud Run, we need to Dockerize it. Dockerizing Vendure means packaging the application and its dependencies into a container that can be easily deployed to Google Cloud Run.\n\nThe setup for containerizing Vendure is already done: [This file](https://github.com/Pinelab-studio/vendure-google-cloud-run-starter/blob/main/Dockerfile) and [this file](https://github.com/Pinelab-studio/vendure-google-cloud-run-starter/blob/main/build-docker.sh) will build your container.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "deployment",
                "title": "Deployment",
                "content": "The example repository contains GitHub action definitions to automatically deploy your app to Cloud Run when you push to the `main` branch.\n\nFollow [these steps](https://github.com/Pinelab-studio/vendure-google-cloud-run-starter/blob/main/build-docker.sh) to create a service account and set your variables as repository secret in GitHub.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "keep-alive",
                "title": "Keep alive",
                "content": "As final improvement, you can use Google Cloud Scheduler to poll your Cloud Run instance to prevent cold starts with [this command](https://github.com/Pinelab-studio/vendure-google-cloud-run-starter/blob/main/build-docker.sh).\n\nThat's it! Feel free to reach out for any questions, or create a [Pull Request in the repository](https://github.com/Pinelab-studio/vendure-google-cloud-run-starter/pulls) if you have any improvements.\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "deploying-to-northflank",
        "metadata": {
            "title": "Deploying to Northflank",
            "keywords": [
                "set up a northflank account",
                "create a custom template",
                "run the template",
                "find the public url",
                "next steps"
            ],
            "description": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; ![./deploy-to-northflank.webp](./deploy-to-northflank.webp) [Northflank](https://northflank.com) is a comprehensive developer platform to build and scale your apps. It has an outstanding developer experience and has a free tier for small projects, and is well-suited for deploying and scaling Vendure applications. This guide will walk you through the steps to deploy [a sample Vendure application](https://github.com/vendure-ecommerce/one-click-deploy) to Northflank."
        },
        "content": "",
        "sections": [
            {
                "id": "set-up-a-northflank-account",
                "title": "Set up a Northflank account",
                "content": "\nGo to the Northflank [sign up page](https://app.northflank.com/signup) to create a new account. As part of the sign-up you'll be asked for credit card details, but you won't be charged unless you upgrade to a paid plan.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "create-a-custom-template",
                "title": "Create a custom template",
                "content": "\nA template defines the infrastructure that is needed to run your Vendure server. Namely, a **server**, a **worker**, \n**MinIO object storage** for assets and a **Postgres database**.\n\nClick the templates menu item in the navbar and click the \"Create template\" button.\n\n![./01-create-template-screen.webp](./01-create-template-screen.webp)\n\nNow paste the following configuration into the editor in the \"code\" tab:\n\n![./02-paste-config.webp](./02-paste-config.webp)\n\n<Tabs>\n<TabItem label=\"Full Template\" value=\"Full Template\">\n\n:::note\nThis template configures a production-like setup for Vendure, with the server and worker running in separate processes\nand a separate MinIO instance for asset storage.\n\nThe resources configured here will cost around $20 per month.\n\nIf you want to use the free plan, use the \"Lite Template\".\n:::\n\n<div class=\"limited-height-code-block\">\n\n\n</div>\n\n</TabItem>\n\n\n<TabItem label=\"Lite Template\" value=\"Lite Template\">\n\n:::note\nThis template runs the Vendure server & worker in a single process, and as such will fit within the\nresource limits of the Northflank free plan. Local disk storage is used for assets, which means that\nhorizontal scaling is not possible.\n\nThis setup is suitable for testing purposes, but is not recommended for production use.\n:::\n\n\n<div class=\"limited-height-code-block\">\n\n\n</div>\n\n</TabItem>\n</Tabs>\n\nThen click the \"Create template\" button.\n\n",
                "subsections": [],
                "code": [
                    "{",
                    "  \"apiVersion\": \"v1\",",
                    "  \"name\": \"Vendure Template\",",
                    "  \"description\": \"Vendure is a modern, open-source composable commerce platform\",",
                    "  \"project\": {",
                    "    \"spec\": {",
                    "      \"name\": \"Vendure\",",
                    "      \"region\": \"europe-west\",",
                    "      \"description\": \"Vendure is a modern, open-source composable commerce platform\",",
                    "      \"color\": \"#57637A\"",
                    "    }",
                    "  },",
                    "  \"spec\": {",
                    "    \"kind\": \"Workflow\",",
                    "    \"spec\": {",
                    "      \"type\": \"sequential\",",
                    "      \"steps\": [",
                    "        {",
                    "          \"kind\": \"Workflow\",",
                    "          \"spec\": {",
                    "            \"type\": \"parallel\",",
                    "            \"steps\": [",
                    "              {",
                    "                \"kind\": \"Addon\",",
                    "                \"ref\": \"database\",",
                    "                \"spec\": {",
                    "                  \"name\": \"database\",",
                    "                  \"type\": \"postgres\",",
                    "                  \"version\": \"14-latest\",",
                    "                  \"billing\": {",
                    "                    \"deploymentPlan\": \"nf-compute-20\",",
                    "                    \"storageClass\": \"ssd\",",
                    "                    \"storage\": 4096,",
                    "                    \"replicas\": 1",
                    "                  },",
                    "                  \"tlsEnabled\": false,",
                    "                  \"externalAccessEnabled\": false,",
                    "                  \"ipPolicies\": [],",
                    "                  \"pitrEnabled\": false",
                    "                }",
                    "              },",
                    "              {",
                    "                \"kind\": \"Addon\",",
                    "                \"ref\": \"storage\",",
                    "                \"spec\": {",
                    "                  \"name\": \"minio\",",
                    "                  \"type\": \"minio\",",
                    "                  \"version\": \"latest\",",
                    "                  \"billing\": {",
                    "                    \"deploymentPlan\": \"nf-compute-20\",",
                    "                    \"storageClass\": \"ssd\",",
                    "                    \"storage\": 4096,",
                    "                    \"replicas\": 1",
                    "                  },",
                    "                  \"tlsEnabled\": true,",
                    "                  \"externalAccessEnabled\": false,",
                    "                  \"ipPolicies\": [],",
                    "                  \"pitrEnabled\": false,",
                    "                  \"typeSpecificSettings\": {},",
                    "                  \"backupSchedules\": []",
                    "                }",
                    "              }",
                    "            ]",
                    "          }",
                    "        },",
                    "        {",
                    "          \"kind\": \"SecretGroup\",",
                    "          \"spec\": {",
                    "            \"secretType\": \"environment-arguments\",",
                    "            \"priority\": 10,",
                    "            \"name\": \"secrets\",",
                    "            \"secrets\": {",
                    "              \"variables\": {",
                    "                \"APP_ENV\": \"production\",",
                    "                \"COOKIE_SECRET\": \"${fn.randomSecret(32)}\",",
                    "                \"SUPERADMIN_USERNAME\": \"superadmin\",",
                    "                \"SUPERADMIN_PASSWORD\": \"${fn.randomSecret(16)}\",",
                    "                \"DB_SCHEMA\": \"public\"",
                    "              },",
                    "              \"files\": {}",
                    "            },",
                    "            \"addonDependencies\": [",
                    "              {",
                    "                \"addonId\": \"${refs.database.id}\",",
                    "                \"keys\": [",
                    "                  {",
                    "                    \"keyName\": \"HOST\",",
                    "                    \"aliases\": [",
                    "                      \"DB_HOST\"",
                    "                    ]",
                    "                  },",
                    "                  {",
                    "                    \"keyName\": \"PORT\",",
                    "                    \"aliases\": [",
                    "                      \"DB_PORT\"",
                    "                    ]",
                    "                  },",
                    "                  {",
                    "                    \"keyName\": \"DATABASE\",",
                    "                    \"aliases\": [",
                    "                      \"DB_NAME\"",
                    "                    ]",
                    "                  },",
                    "                  {",
                    "                    \"keyName\": \"USERNAME\",",
                    "                    \"aliases\": [",
                    "                      \"DB_USERNAME\"",
                    "                    ]",
                    "                  },",
                    "                  {",
                    "                    \"keyName\": \"PASSWORD\",",
                    "                    \"aliases\": [",
                    "                      \"DB_PASSWORD\"",
                    "                    ]",
                    "                  }",
                    "                ]",
                    "              },",
                    "              {",
                    "                \"addonId\": \"${refs.storage.id}\",",
                    "                \"keys\": [",
                    "                  {",
                    "                    \"keyName\": \"MINIO_ENDPOINT\",",
                    "                    \"aliases\": [",
                    "                      \"MINIO_ENDPOINT\"",
                    "                    ]",
                    "                  },",
                    "                  {",
                    "                    \"keyName\": \"ACCESS_KEY\",",
                    "                    \"aliases\": [",
                    "                      \"MINIO_ACCESS_KEY\"",
                    "                    ]",
                    "                  },",
                    "                  {",
                    "                    \"keyName\": \"SECRET_KEY\",",
                    "                    \"aliases\": [",
                    "                      \"MINIO_SECRET_KEY\"",
                    "                    ]",
                    "                  }",
                    "                ]",
                    "              }",
                    "            ],",
                    "            \"restrictions\": {",
                    "              \"restricted\": false,",
                    "              \"nfObjects\": [],",
                    "              \"tags\": []",
                    "            }",
                    "          }",
                    "        },",
                    "        {",
                    "          \"kind\": \"BuildService\",",
                    "          \"ref\": \"builder\",",
                    "          \"spec\": {",
                    "            \"name\": \"builder\",",
                    "            \"billing\": {",
                    "              \"deploymentPlan\": \"nf-compute-20\"",
                    "            },",
                    "            \"vcsData\": {",
                    "              \"projectUrl\": \"https://github.com/vendure-ecommerce/one-click-deploy\",",
                    "              \"projectType\": \"github\"",
                    "            },",
                    "            \"buildSettings\": {",
                    "              \"dockerfile\": {",
                    "                \"buildEngine\": \"kaniko\",",
                    "                \"dockerFilePath\": \"/Dockerfile\",",
                    "                \"dockerWorkDir\": \"/\",",
                    "                \"useCache\": false",
                    "              }",
                    "            },",
                    "            \"disabledCI\": false,",
                    "            \"buildArguments\": {}",
                    "          }",
                    "        },",
                    "        {",
                    "          \"kind\": \"Build\",",
                    "          \"spec\": {",
                    "            \"id\": \"${refs.builder.id}\",",
                    "            \"type\": \"service\",",
                    "            \"branch\": \"master\",",
                    "            \"buildOverrides\": {",
                    "              \"buildArguments\": {}",
                    "            },",
                    "            \"reuseExistingBuilds\": true",
                    "          },",
                    "          \"condition\": \"success\",",
                    "          \"ref\": \"build\"",
                    "        },",
                    "        {",
                    "          \"kind\": \"Workflow\",",
                    "          \"spec\": {",
                    "            \"type\": \"parallel\",",
                    "            \"steps\": [",
                    "              {",
                    "                \"kind\": \"DeploymentService\",",
                    "                \"spec\": {",
                    "                  \"deployment\": {",
                    "                    \"instances\": 1,",
                    "                    \"docker\": {",
                    "                      \"configType\": \"customCommand\",",
                    "                      \"customCommand\": \"node ./dist/index.js\"",
                    "                    },",
                    "                    \"internal\": {",
                    "                      \"buildId\": \"${refs.build.id}\",",
                    "                      \"buildSHA\": \"latest\"",
                    "                    }",
                    "                  },",
                    "                  \"name\": \"server\",",
                    "                  \"billing\": {",
                    "                    \"deploymentPlan\": \"nf-compute-20\"",
                    "                  },",
                    "                  \"ports\": [",
                    "                    {",
                    "                      \"name\": \"app\",",
                    "                      \"internalPort\": 3000,",
                    "                      \"public\": true,",
                    "                      \"protocol\": \"HTTP\",",
                    "                      \"security\": {",
                    "                        \"credentials\": [],",
                    "                        \"policies\": []",
                    "                      },",
                    "                      \"domains\": [],",
                    "                      \"disableNfDomain\": false",
                    "                    }",
                    "                  ],",
                    "                  \"runtimeEnvironment\": {},",
                    "                  \"runtimeFiles\": {}",
                    "                }",
                    "              },",
                    "              {",
                    "                \"kind\": \"DeploymentService\",",
                    "                \"spec\": {",
                    "                  \"name\": \"worker\",",
                    "                  \"billing\": {",
                    "                    \"deploymentPlan\": \"nf-compute-10\"",
                    "                  },",
                    "                  \"deployment\": {",
                    "                    \"instances\": 1,",
                    "                    \"docker\": {",
                    "                      \"configType\": \"customCommand\",",
                    "                      \"customCommand\": \"node ./dist/index-worker.js\"",
                    "                    },",
                    "                    \"internal\": {",
                    "                      \"buildId\": \"${refs.build.id}\",",
                    "                      \"buildSHA\": \"latest\"",
                    "                    }",
                    "                  },",
                    "                  \"ports\": [],",
                    "                  \"runtimeEnvironment\": {}",
                    "                }",
                    "              }",
                    "            ]",
                    "          }",
                    "        }",
                    "      ]",
                    "    }",
                    "  }",
                    "}",
                    "{",
                    "  \"apiVersion\": \"v1\",",
                    "  \"name\": \"Vendure Lite Template\",",
                    "  \"description\": \"Vendure is a modern, open-source composable commerce platform\",",
                    "  \"project\": {",
                    "    \"spec\": {",
                    "      \"name\": \"Vendure Lite\",",
                    "      \"region\": \"europe-west\",",
                    "      \"description\": \"Vendure is a modern, open-source composable commerce platform\",",
                    "      \"color\": \"#17b9ff\"",
                    "    }",
                    "  },",
                    "  \"spec\": {",
                    "    \"kind\": \"Workflow\",",
                    "    \"spec\": {",
                    "      \"type\": \"sequential\",",
                    "      \"steps\": [",
                    "        {",
                    "          \"kind\": \"Addon\",",
                    "          \"spec\": {",
                    "            \"name\": \"database\",",
                    "            \"type\": \"postgres\",",
                    "            \"version\": \"14-latest\",",
                    "            \"billing\": {",
                    "              \"deploymentPlan\": \"nf-compute-20\",",
                    "              \"storageClass\": \"ssd\",",
                    "              \"storage\": 4096,",
                    "              \"replicas\": 1",
                    "            },",
                    "            \"tlsEnabled\": false,",
                    "            \"externalAccessEnabled\": false,",
                    "            \"ipPolicies\": [],",
                    "            \"pitrEnabled\": false",
                    "          }",
                    "        },",
                    "        {",
                    "          \"kind\": \"SecretGroup\",",
                    "          \"spec\": {",
                    "            \"name\": \"secrets\",",
                    "            \"secretType\": \"environment-arguments\",",
                    "            \"priority\": 10,",
                    "            \"secrets\": {",
                    "              \"variables\": {",
                    "                \"APP_ENV\": \"production\",",
                    "                \"COOKIE_SECRET\": \"${fn.randomSecret(32)}\",",
                    "                \"SUPERADMIN_USERNAME\": \"superadmin\",",
                    "                \"SUPERADMIN_PASSWORD\": \"${fn.randomSecret(16)}\",",
                    "                \"DB_SCHEMA\": \"public\",",
                    "                \"ASSET_UPLOAD_DIR\": \"/data\",",
                    "                \"RUN_JOB_QUEUE_FROM_SERVER\": \"true\"",
                    "              }",
                    "            },",
                    "            \"addonDependencies\": [",
                    "              {",
                    "                \"addonId\": \"database\",",
                    "                \"keys\": [",
                    "                  {",
                    "                    \"keyName\": \"HOST\",",
                    "                    \"aliases\": [",
                    "                      \"DB_HOST\"",
                    "                    ]",
                    "                  },",
                    "                  {",
                    "                    \"keyName\": \"PORT\",",
                    "                    \"aliases\": [",
                    "                      \"DB_PORT\"",
                    "                    ]",
                    "                  },",
                    "                  {",
                    "                    \"keyName\": \"DATABASE\",",
                    "                    \"aliases\": [",
                    "                      \"DB_NAME\"",
                    "                    ]",
                    "                  },",
                    "                  {",
                    "                    \"keyName\": \"USERNAME\",",
                    "                    \"aliases\": [",
                    "                      \"DB_USERNAME\"",
                    "                    ]",
                    "                  },",
                    "                  {",
                    "                    \"keyName\": \"PASSWORD\",",
                    "                    \"aliases\": [",
                    "                      \"DB_PASSWORD\"",
                    "                    ]",
                    "                  }",
                    "                ]",
                    "              }",
                    "            ],",
                    "            \"restrictions\": {",
                    "              \"restricted\": false,",
                    "              \"nfObjects\": [],",
                    "              \"tags\": []",
                    "            }",
                    "          }",
                    "        },",
                    "        {",
                    "          \"kind\": \"BuildService\",",
                    "          \"spec\": {",
                    "            \"name\": \"builder\",",
                    "            \"billing\": {",
                    "              \"deploymentPlan\": \"nf-compute-10\"",
                    "            },",
                    "            \"vcsData\": {",
                    "              \"projectUrl\": \"https://github.com/vendure-ecommerce/one-click-deploy\",",
                    "              \"projectType\": \"github\"",
                    "            },",
                    "            \"buildSettings\": {",
                    "              \"dockerfile\": {",
                    "                \"buildEngine\": \"kaniko\",",
                    "                \"dockerFilePath\": \"/Dockerfile\",",
                    "                \"dockerWorkDir\": \"/\",",
                    "                \"useCache\": false",
                    "              }",
                    "            },",
                    "            \"disabledCI\": false,",
                    "            \"buildArguments\": {}",
                    "          }",
                    "        },",
                    "        {",
                    "          \"kind\": \"Build\",",
                    "          \"ref\": \"build\",",
                    "          \"spec\": {",
                    "            \"id\": \"builder\",",
                    "            \"type\": \"service\",",
                    "            \"branch\": \"master\",",
                    "            \"reuseExistingBuilds\": true",
                    "          },",
                    "          \"condition\": \"success\"",
                    "        },",
                    "        {",
                    "          \"kind\": \"DeploymentService\",",
                    "          \"ref\": \"server\",",
                    "          \"spec\": {",
                    "            \"name\": \"server\",",
                    "            \"billing\": {",
                    "              \"deploymentPlan\": \"nf-compute-20\"",
                    "            },",
                    "            \"deployment\": {",
                    "              \"instances\": 1,",
                    "              \"docker\": {",
                    "                \"configType\": \"customCommand\",",
                    "                \"customCommand\": \"yarn start:server\"",
                    "              },",
                    "              \"internal\": {",
                    "                \"buildId\": \"${refs.build.id}\",",
                    "                \"buildSHA\": \"latest\"",
                    "              }",
                    "            },",
                    "            \"ports\": [",
                    "              {",
                    "                \"name\": \"app\",",
                    "                \"internalPort\": 3000,",
                    "                \"public\": true,",
                    "                \"protocol\": \"HTTP\",",
                    "                \"security\": {",
                    "                  \"credentials\": [],",
                    "                  \"policies\": []",
                    "                },",
                    "                \"domains\": []",
                    "              }",
                    "            ],",
                    "            \"runtimeEnvironment\": {}",
                    "          }",
                    "        },",
                    "        {",
                    "          \"kind\": \"Volume\",",
                    "          \"spec\": {",
                    "            \"spec\": {",
                    "              \"storageSize\": 5120,",
                    "              \"accessMode\": \"ReadWriteOnce\",",
                    "              \"storageClassName\": \"ssd\"",
                    "            },",
                    "            \"name\": \"storage\",",
                    "            \"mounts\": [",
                    "              {",
                    "                \"containerMountPath\": \"/data\",",
                    "                \"volumeMountPath\": \"\"",
                    "              }",
                    "            ],",
                    "            \"attachedObjects\": [",
                    "              {",
                    "                \"id\": \"${refs.server.id}\",",
                    "                \"type\": \"service\"",
                    "              }",
                    "            ]",
                    "          }",
                    "        }",
                    "      ]",
                    "    }",
                    "  }",
                    "}"
                ]
            },
            {
                "id": "run-the-template",
                "title": "Run the template",
                "content": "\nNext, click the \"run template\" button to start the deployment process.\n\n![./03-run-template.webp](./03-run-template.webp)\n\nOnce the template run has completed, you should be able to see the newly-created project in the project selector.\n\n![./04-find-project.webp](./04-find-project.webp)\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "find-the-public-url",
                "title": "Find the public URL",
                "content": "\nClick the \"Services\" menu item in the left sidebar and then click the \"Server\" service.\n\n![./05-server-service.webp](./05-server-service.webp)\n\nIn the top right corner you'll see the public URL of your new Vendure server!\n\nNote that it may take a few minutes for the server to start up and populate all the test data because the free tier has limited CPU and memory resources.\n\nOnce it is ready, you can navigate to the public URL and append `/admin` to the end of the URL to access the admin panel. \n\n\n![./06-find-url.webp](./06-find-url.webp)\n\n:::note\nThe superadmin password was generated for you by the template, and can be found in the \"Secrets\" section from the project nav bar\nas `SUPERADMIN_PASSWORD`.\n:::\n\nCongratulations on deploying your Vendure server!\n\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "next-steps",
                "title": "Next steps",
                "content": "\nNow that you have a basic Vendure server up and running, you can explore some of the other features offered by Northflank \nthat you might need for a full production setup:\n\n- Configure [health checks](https://northflank.com/docs/v1/application/observe/configure-health-checks) to ensure any container crashes are rapidly detected and restarted. Also see the\n[Vendure health check docs](/guides/deployment/using-docker#healthreadiness-checks).\n- [Set up a Redis instance](https://northflank.com/docs/v1/application/databases-and-persistence/deploy-databases-on-northflank/deploy-redis-on-northflank) so that you can take advantage of our highly performant [BullMQJobQueuePlugin](/reference/core-plugins/job-queue-plugin/bull-mqjob-queue-plugin) and set up [Redis-based session caching](/reference/typescript-api/auth/session-cache-strategy/) to handle multi-instance deployments.\n- With the above in place, you can safely start to [scale your server instances](https://northflank.com/docs/v1/application/scale/scaling-replicas) to handle more traffic. \n- [Add a custom domain](https://northflank.com/docs/v1/application/domains/add-a-domain-to-your-account) using Northflank's powerful DNS management system.\n- Set up [infrastructure alerts](https://northflank.com/docs/v1/application/observe/set-infrastructure-alerts) to be notified when any of your containers crash or experience load spikes.\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "deploying-to-railway",
        "metadata": {
            "title": "Deploying to Railway",
            "keywords": [
                "prerequisites",
                "configuration",
                "port",
                "database connection",
                "asset storage",
                "create a new railway project",
                "create the database",
                "create the vendure server",
                "configure the server service",
                "create a volume",
                "configure server env vars",
                "create the vendure worker",
                "configure the worker service",
                "configure worker env vars",
                "test your vendure server",
                "next steps"
            ],
            "description": "![Deploy to Railway](./deploy-to-railway.webp) [Railway](https://railway.app/) is a managed hosting platform which allows you to deploy and scale your Vendure server and infrastructure with ease. :::note This guide should be runnable on the Railway free trial plan, which means you can deploy it for free and thereafter pay only for the resources you use, which should be around $5 per month."
        },
        "content": "",
        "sections": [
            {
                "id": "prerequisites",
                "title": "Prerequisites",
                "content": "\nFirst of all you'll need to create a new Railway account (click \"login\" on the website and enter your email address) if you\ndon't already have one.\n\nYou'll also need a GitHub account and you'll need to have your Vendure project hosted there. \n\nIn order to use the Railway trial plan, you'll need to connect your GitHub account to Railway via the Railway dashboard.\n\n:::info\nIf you'd like to quickly get started with a ready-made Vendure project which includes sample data, you can clone our\n[Vendure one-click-deploy repo](https://github.com/vendure-ecommerce/one-click-deploy).\n:::\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "configuration",
                "title": "Configuration",
                "content": "\n",
                "subsections": [
                    {
                        "id": "port",
                        "title": "Port",
                        "content": "\nRailway defines the port via the `PORT` environment variable, so make sure your Vendure Config uses this variable:\n\n\n"
                    },
                    {
                        "id": "database-connection",
                        "title": "Database connection",
                        "content": "\n:::info\nThe following is already pre-configured if you are using the one-click-deploy repo.\n:::\n\nMake sure your DB connection options uses the following environment variables:\n\n"
                    },
                    {
                        "id": "asset-storage",
                        "title": "Asset storage",
                        "content": "\n:::info\nThe following is already pre-configured if you are using the one-click-deploy repo.\n:::\n\nIn this guide we will use the AssetServerPlugin's default local disk storage strategy. Make sure you use the\n`ASSET_UPLOAD_DIR` environment variable to set the path to the directory where the uploaded assets will be stored.\n\n\n"
                    }
                ],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "    apiOptions: {",
                    "        // highlight-next-line",
                    "        port: +(process.env.PORT || 3000),",
                    "        // ...",
                    "    },",
                    "    // ...",
                    "};",
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    dbConnectionOptions: {",
                    "        // ...",
                    "        database: process.env.DB_NAME,",
                    "        host: process.env.DB_HOST,",
                    "        port: +process.env.DB_PORT,",
                    "        username: process.env.DB_USERNAME,",
                    "        password: process.env.DB_PASSWORD,",
                    "    },",
                    "};",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { AssetServerPlugin } from '@vendure/asset-server-plugin';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AssetServerPlugin.init({",
                    "            route: 'assets',",
                    "            // highlight-next-line",
                    "            assetUploadDir: process.env.ASSET_UPLOAD_DIR || path.join(__dirname, '../static/assets'),",
                    "        }),",
                    "    ],",
                    "    // ...",
                    "};"
                ]
            },
            {
                "id": "create-a-new-railway-project",
                "title": "Create a new Railway project",
                "content": "\nFrom the Railway dashboard, click \"New Project\" and select \"Empty Project\". You'll be taken to a screen where you can\nadd the first service to your project. \n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "create-the-database",
                "title": "Create the database",
                "content": "\nClick the \"Add a Service\" button and select \"database\". Choose a database that matches the one you are using in your\nVendure project. If you are following along using the one-click-deploy repo, then choose \"Postgres\".\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "create-the-vendure-server",
                "title": "Create the Vendure server",
                "content": "\nClick the \"new\" button to create a new service, and select \"GitHub repo\". Select the repository which contains your\nVendure project. You may need to configure access to this repo if you haven't already done so.\n\n![Create new service](./01-new-service.webp)\n\n",
                "subsections": [
                    {
                        "id": "configure-the-server-service",
                        "title": "Configure the server service",
                        "content": "\nYou should then see a card representing this service in the main area of the dashboard. Click the card and go to the\n\"settings\" tab.\n\n* Scroll to the \"Service\" section and rename the service to \"vendure-server\".\n* Check the \"Build\" section and make sure the build settings make sense for your repo. If you are using\nthe one-click-deploy repo, then it should detect the Dockerfile.\n* In the \"Deploy\" section, set the \"Custom start command\" to `node ./dist/index.js`.\n* Finally, scroll up to the \"Networking\" section and click \"Generate domain\" to set up a temporary domain for your\nVendure server.\n\n"
                    },
                    {
                        "id": "create-a-volume",
                        "title": "Create a Volume",
                        "content": "\nIn order to persist the uploaded product images, we need to create a volume. Click the \"new\" button and select \"Volume\".\nAttach it to the \"vendure-server\" service and set the mount path to `/vendure-assets`.\n\n"
                    },
                    {
                        "id": "configure-server-env-vars",
                        "title": "Configure server env vars",
                        "content": "\nClick on the \"vendure-server\" service and go to the \"Variables\" tab. This is where we will set up the environment\nvariables which are used in our Vendure Config. You can use the raw editor to add the following variables, making\nsure to replace the highlighted values with your own:\n\n\n![Setting env vars](./02-env-vars.webp) \n\n:::note\nThe variables starting with `${{Postgres...}}` assume that your database service is called \"Postgres\". If you have\nnamed it differently, then you'll need to change these variables accordingly.\n:::\n\n"
                    }
                ],
                "code": [
                    "DB_NAME=${{Postgres.PGDATABASE}}",
                    "DB_USERNAME=${{Postgres.PGUSER}}",
                    "DB_PASSWORD=${{Postgres.PGPASSWORD}}",
                    "DB_HOST=${{Postgres.PGHOST}}",
                    "DB_PORT=${{Postgres.PGPORT}}",
                    "ASSET_UPLOAD_DIR=/vendure-assets",
                    "// highlight-next-line",
                    "COOKIE_SECRET=<add some random characters>",
                    "SUPERADMIN_USERNAME=superadmin",
                    "// highlight-next-line",
                    "SUPERADMIN_PASSWORD=<create some strong password>"
                ]
            },
            {
                "id": "create-the-vendure-worker",
                "title": "Create the Vendure worker",
                "content": "\nFinally, we need to define the worker process which will run the background tasks. Click the \"new\" button and select\n\"GitHub repo\". Select again the repository which contains your Vendure project. \n\n",
                "subsections": [
                    {
                        "id": "configure-the-worker-service",
                        "title": "Configure the worker service",
                        "content": "\nYou should then see a card representing this service in the main area of the dashboard. Click the card and go to the\n\"settings\" tab.\n\n* Scroll to the \"Service\" section and rename the service to \"vendure-worker\".\n* Check the \"Build\" section and make sure the build settings make sense for your repo. If you are using\n  the one-click-deploy repo, then it should detect the Dockerfile.\n* In the \"Deploy\" section, set the \"Custom start command\" to `node ./dist/index-worker.js`.\n\n"
                    },
                    {
                        "id": "configure-worker-env-vars",
                        "title": "Configure worker env vars",
                        "content": "\nThe worker will need to know how to connect to the database, so add the following variables to the \"Variables\" tab:\n\n\n"
                    }
                ],
                "code": [
                    "DB_NAME=${{Postgres.PGDATABASE}}",
                    "DB_USERNAME=${{Postgres.PGUSER}}",
                    "DB_PASSWORD=${{Postgres.PGPASSWORD}}",
                    "DB_HOST=${{Postgres.PGHOST}}",
                    "DB_PORT=${{Postgres.PGPORT}}"
                ]
            },
            {
                "id": "test-your-vendure-server",
                "title": "Test your Vendure server",
                "content": "\nTo test that everything is working, click the \"vendure-server\" card and then the link to the temporary domain.\n\n![Test server](./03-test-server.webp)\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "next-steps",
                "title": "Next Steps",
                "content": "\nThis setup gives you a basic Vendure server to get started with. When moving to a more production-ready setup, you'll\nwant to consider the following:\n\n- Use MinIO for asset storage. This is a more robust and scalable solution than the local disk storage used here. \n  - [MinIO template for Railway](https://railway.app/template/SMKOEA), \n  - [Configuring the AssetServerPlugin for MinIO](/reference/core-plugins/asset-server-plugin/s3asset-storage-strategy/#usage-with-minio)\n- Use Redis to power the job queue and session cache. This is not only more performant, but will enable horizontal scaling of your\nserver and worker instances.\n  - [Railway Redis docs](https://docs.railway.app/guides/redis)\n  - [Vendure horizontal scaling docs](/guides/deployment/horizontal-scaling)\n  \n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "deploying-to-render",
        "metadata": {
            "title": "Deploying to Render",
            "keywords": [
                "prerequisites",
                "configuration",
                "port",
                "database connection",
                "asset storage",
                "create a database",
                "create the vendure server",
                "configure the server service",
                "configure environment variables",
                "create the vendure worker",
                "test your vendure server",
                "next steps"
            ],
            "description": "![Deploy to Render](./deploy-to-render.webp) [Render](https://render.com/) is a managed hosting platform which allows you to deploy and scale your Vendure server and infrastructure with ease. :::note The configuration in this guide will cost from around $12 per month to run. :::"
        },
        "content": "",
        "sections": [
            {
                "id": "prerequisites",
                "title": "Prerequisites",
                "content": "\nFirst of all you'll need to [create a new Render account](https://dashboard.render.com/register) if you\ndon't already have one.\n\nFor this guide you'll need to have your Vendure project in a git repo on either GitHub or GitLab.\n\n:::info\nIf you'd like to quickly get started with a ready-made Vendure project which includes sample data, you can use our\n[Vendure one-click-deploy repo](https://github.com/vendure-ecommerce/one-click-deploy), which means you won't have\nto set up your own git repo.\n:::\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "configuration",
                "title": "Configuration",
                "content": "\n",
                "subsections": [
                    {
                        "id": "port",
                        "title": "Port",
                        "content": "\nRender defines the port via the `PORT` environment variable and [defaults to `10000`](https://docs.render.com/web-services#host-and-port-configuration), so make sure your Vendure Config uses this variable:\n\n\n"
                    },
                    {
                        "id": "database-connection",
                        "title": "Database connection",
                        "content": "\n:::info\nThe following is already pre-configured if you are using the one-click-deploy repo.\n:::\n\nMake sure your DB connection options uses the following environment variables:\n\n"
                    },
                    {
                        "id": "asset-storage",
                        "title": "Asset storage",
                        "content": "\n:::info\nThe following is already pre-configured if you are using the one-click-deploy repo.\n:::\n\nIn this guide we will use the AssetServerPlugin's default local disk storage strategy. Make sure you use the\n`ASSET_UPLOAD_DIR` environment variable to set the path to the directory where the uploaded assets will be stored.\n\n\n"
                    }
                ],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "    apiOptions: {",
                    "        // highlight-next-line",
                    "        port: +(process.env.PORT || 3000),",
                    "        // ...",
                    "    },",
                    "    // ...",
                    "};",
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    dbConnectionOptions: {",
                    "        // ...",
                    "        database: process.env.DB_NAME,",
                    "        host: process.env.DB_HOST,",
                    "        port: +process.env.DB_PORT,",
                    "        username: process.env.DB_USERNAME,",
                    "        password: process.env.DB_PASSWORD,",
                    "    },",
                    "};",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { AssetServerPlugin } from '@vendure/asset-server-plugin';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AssetServerPlugin.init({",
                    "            route: 'assets',",
                    "            // highlight-next-line",
                    "            assetUploadDir: process.env.ASSET_UPLOAD_DIR || path.join(__dirname, '../static/assets'),",
                    "        }),",
                    "    ],",
                    "    // ...",
                    "};"
                ]
            },
            {
                "id": "create-a-database",
                "title": "Create a database",
                "content": "\nFrom the Render dashboard, click the \"New\" button and select \"PostgreSQL\" from the list of services:\n\n![Create a new PostgreSQL database](./01-create-db.webp)\n\nGive the database a name (e.g. \"postgres\"), select a region close to you, select an appropriate plan\nand click \"Create Database\".\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "create-the-vendure-server",
                "title": "Create the Vendure server",
                "content": "\nClick the \"New\" button again and select \"Web Service\" from the list of services. Choose the \"Build and deploy from a Git repository\" option.\n\nIn the next step you will be prompted to connect to either GitHub or GitLab. Select the appropriate option and follow the instructions\nto connect your account and grant access to the repository containing your Vendure project.\n\n:::info\nIf you are using the one-click-deploy repo, you should instead use the \"Public Git repository\" option and enter the URL of the repo:\n\n:::\n\n",
                "subsections": [
                    {
                        "id": "configure-the-server-service",
                        "title": "Configure the server service",
                        "content": "\nIn the next step you will configure the server:\n\n- **Name**: \"vendure-server\"\n- **Region**: Select a region close to you\n- **Branch**: Select the branch you want to deploy, usually \"main\" or \"master\"\n- **Runtime**: If you have a Dockerfile then it should be auto-detected. If not you should select \"Node\" and enter the appropriate build and start commands. For a\ntypical Vendure project these would be:\n  - **Build Command**: `yarn; yarn build` or `npm install; npm run build`\n  - **Start Command**: `node ./dist/index.js`\n- **Instance Type**: Select the appropriate instance type. Since we want to use a persistent volume to store our assets, we need to\nuse at least the \"Starter\" instance type or higher.\n\nClick the \"Advanced\" button to expand the advanced options:\n\n- Click \"Add Disk\" to set up a persistent volume for the assets and use the following settings:\n  - **Name**: \"vendure-assets\"\n  - **Mount Path**: `/vendure-assets`\n  - **Size**: As appropriate. For testing purposes you can use the smallest size (1GB)\n- **Health Check Path**: `/health`\n- **Docker Command**: `node ./dist/index.js` (if you are _not_ using a Dockerfile this option will not be available)\n\nClick \"Create Web Service\" to create the service.\n\n:::note\nIf you have not already set up payment, you will be prompted to enter credit card details at this point.\n:::\n\n"
                    }
                ],
                "code": [
                    "https://github.com/vendure-ecommerce/one-click-deploy"
                ]
            },
            {
                "id": "configure-environment-variables",
                "title": "Configure environment variables",
                "content": "\nNext we need to set up the environment variables which will be used by both the server and worker. Click the \"Env Groups\" tab\nand then click the \"New Environment Group\" button.\n\nName the group \"vendure configuration\" and add the following variables. The database variables can be found by navigating\nto the database service, clicking the \"Info\" tab and scrolling to the \"Connections\" section:\n\n![Database connection settings](./03-db-connection.webp)\n\nOnce the correct values have been entered, click \"Create Environment Group\".\n\nNext, click the \"vendure-server\" service and go to the \"Environment\" tab to link the environment group to the service:\n\n![Link environment group](./04-link-env-group.webp)\n\n",
                "subsections": [],
                "code": [
                    "DB_NAME=<database \"Database\">",
                    "DB_USERNAME=<database \"Username\">",
                    "DB_PASSWORD=<database \"Password\">",
                    "DB_HOST=<database \"Hostname\">",
                    "DB_PORT=<database \"Port\">",
                    "ASSET_UPLOAD_DIR=/vendure-assets",
                    "// highlight-next-line",
                    "COOKIE_SECRET=<add some random characters>",
                    "SUPERADMIN_USERNAME=superadmin",
                    "// highlight-next-line",
                    "SUPERADMIN_PASSWORD=<create some strong password>"
                ]
            },
            {
                "id": "create-the-vendure-worker",
                "title": "Create the Vendure worker",
                "content": "\nFinally, we need to define the worker process which will run the background tasks. Click the \"New\" button and select\n\"Background Worker\".\n\nSelect the same git repo as before, and in the next step configure the worker:\n\n- **Name**: \"vendure-worker\"\n- **Region**: Same as the server\n- **Branch**: Select the branch you want to deploy, usually \"main\" or \"master\"\n- **Runtime**: If you have a Dockerfile then it should be auto-detected. If not you should select \"Node\" and enter the appropriate build and start commands. For a\n  typical Vendure project these would be:\n  - **Build Command**: `yarn; yarn build` or `npm install; npm run build`\n  - **Start Command**: `node ./dist/index-worker.js`\n- **Instance Type**: Select the appropriate instance type. The Starter size is fine to get started.\n\nClick the \"Advanced\" button to expand the advanced options:\n\n- **Docker Command**: `node ./dist/index-worker.js` (if you are _not_ using a Dockerfile this option will not be available)\n\nClick \"Create Background Worker\" to create the worker.\n\nFinally, click the \"Environment\" tab and link the \"vendure configuration\" environment group to the worker.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "test-your-vendure-server",
                "title": "Test your Vendure server",
                "content": "\nNavigate back to the dashboard, click the \"vendure-server\" service, and you should see a link to the temporary domain:\n\n![Test server](./05-server-url.webp)\n\nClick the link and append `/admin` to the URL to open the Admin UI. Log in with the username and password you set in the\nenvironment variables.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "next-steps",
                "title": "Next Steps",
                "content": "\nThis setup gives you a basic Vendure server to get started with. When moving to a more production-ready setup, you'll\nwant to consider the following:\n\n- Use MinIO for asset storage. This is a more robust and scalable solution than the local disk storage used here.\n  - [Deploying MinIO to Render](https://docs.render.com/deploy-minio),\n  - [Configuring the AssetServerPlugin for MinIO](/reference/core-plugins/asset-server-plugin/s3asset-storage-strategy/#usage-with-minio)\n- Use Redis to power the job queue and session cache. This is not only more performant, but will enable horizontal scaling of your\n  server and worker instances.\n  - [Render Redis docs](https://docs.render.com/redis#creating-a-redis-instance)\n  - [Vendure horizontal scaling docs](/guides/deployment/horizontal-scaling)\n  \n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "detailcomponentwithresolver",
        "metadata": {
            "title": "DetailComponentWithResolver",
            "keywords": [
                "detailcomponentwithresolver",
                "config"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/base-detail.component.ts\" sourceLine=\"243\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "detailcomponentwithresolver",
                "title": "detailComponentWithResolver",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/base-detail.component.ts\" sourceLine=\"243\" packageName=\"@vendure/admin-ui\" />\n\nA helper function for creating tabs that point to a <a href='/reference/admin-ui-api/list-detail-views/typed-base-detail-component#typedbasedetailcomponent'>TypedBaseDetailComponent</a>. This takes\ncare of the route resolver parts so that the detail component automatically has access to the\ncorrect resolved detail data.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`{\n     component: Type&#60;<a href='/reference/admin-ui-api/list-detail-views/typed-base-detail-component#typedbasedetailcomponent'>TypedBaseDetailComponent</a>&#60;T, Field&#62;&#62;;\n     query: T;\n     entityKey: R;\n     getBreadcrumbs?: (entity: ResultOf&#60;T&#62;[R]) =&#62; BreadcrumbValue;\n     variables?: T extends TypedDocumentNode&#60;any, infer V&#62; ? Omit&#60;V, 'id'&#62; : never;\n }`} />\n\n\n"
                    }
                ],
                "code": [
                    "@NgModule({",
                    "  imports: [ReviewsSharedModule],",
                    "  declarations: [/* ... *\\/],",
                    "  providers: [",
                    "    registerPageTab({",
                    "      location: 'product-detail',",
                    "      tab: 'Specs',",
                    "      route: 'specs',",
                    "      component: detailComponentWithResolver({",
                    "        component: ProductSpecDetailComponent,",
                    "        query: GetProductSpecsDocument,",
                    "        entityKey: 'spec',",
                    "      }),",
                    "    }),",
                    "  ],",
                    "})",
                    "export class ProductSpecsUiExtensionModule {}",
                    "function detailComponentWithResolver<T extends TypedDocumentNode<any, { id: string }>, Field extends keyof ResultOf<T>, R extends Field>(config: {",
                    "    component: Type<TypedBaseDetailComponent<T, Field>>;",
                    "    query: T;",
                    "    entityKey: R;",
                    "    getBreadcrumbs?: (entity: ResultOf<T>[R]) => BreadcrumbValue;",
                    "    variables?: T extends TypedDocumentNode<any, infer V> ? Omit<V, 'id'> : never;",
                    "}): void"
                ]
            }
        ]
    },
    {
        "id": "directives",
        "metadata": {
            "title": "Directives",
            "keywords": [
                "directives"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "draft-orders",
        "metadata": {
            "title": "Draft Orders",
            "keywords": [
                "draft orders"
            ],
            "description": "{{% alert \"warning\" %}} Note: Draft Orders are available from Vendure v1.8+ {{% /alert %}} Draft Orders are used when an Administrator would like to manually create an order via the Admin UI. For example, this can be useful when: - A customer phones up to place an order"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "dropdowncomponent",
        "metadata": {
            "title": "DropdownComponent",
            "keywords": [
                "dropdowncomponent",
                "isopen",
                "trigger",
                "manualtoggle",
                "onclick",
                "toggleopen",
                "onopenchange",
                "settriggerelement"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/dropdown/dropdown.component.ts\" sourceLine=\"28\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "dropdowncomponent",
                "title": "DropdownComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/dropdown/dropdown.component.ts\" sourceLine=\"28\" packageName=\"@vendure/admin-ui\" />\n\nUsed for building dropdown menus.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "isopen",
                        "title": "isOpen",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "trigger",
                        "title": "trigger",
                        "content": "\n<MemberInfo kind=\"property\" type={`ElementRef`}   />\n\n\n"
                    },
                    {
                        "id": "manualtoggle",
                        "title": "manualToggle",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "onclick",
                        "title": "onClick",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "toggleopen",
                        "title": "toggleOpen",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "onopenchange",
                        "title": "onOpenChange",
                        "content": "\n<MemberInfo kind=\"method\" type={`(callback: (isOpen: boolean) =&#62; void) => `}   />\n\n\n"
                    },
                    {
                        "id": "settriggerelement",
                        "title": "setTriggerElement",
                        "content": "\n<MemberInfo kind=\"method\" type={`(elementRef: ElementRef) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<vdr-dropdown>",
                    "  <button class=\"btn btn-outline\" vdrDropdownTrigger>",
                    "      <clr-icon shape=\"plus\"></clr-icon>",
                    "      Select type",
                    "  </button>",
                    "  <vdr-dropdown-menu vdrPosition=\"bottom-left\">",
                    "    <button",
                    "      *ngFor=\"let typeName of allTypes\"",
                    "      type=\"button\"",
                    "      vdrDropdownItem",
                    "      (click)=\"selectType(typeName)\"",
                    "    >",
                    "      typeName",
                    "    </button>",
                    "  </vdr-dropdown-menu>",
                    "</vdr-dropdown>",
                    "class DropdownComponent {",
                    "    isOpen = false;",
                    "    public trigger: ElementRef;",
                    "    @Input() manualToggle = false;",
                    "    onClick() => ;",
                    "    toggleOpen() => ;",
                    "    onOpenChange(callback: (isOpen: boolean) => void) => ;",
                    "    setTriggerElement(elementRef: ElementRef) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "dummypaymenthandler",
        "metadata": {
            "title": "DummyPaymentHandler",
            "keywords": [
                "dummypaymenthandler"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/payment/dummy-payment-method-handler.ts\" sourceLine=\"27\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "dummypaymenthandler",
                "title": "dummyPaymentHandler",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/dummy-payment-method-handler.ts\" sourceLine=\"27\" packageName=\"@vendure/core\" />\n\nA dummy PaymentMethodHandler which simply creates a Payment without any integration\nwith an external payment provider. Intended only for use in development.\n\nBy specifying certain metadata keys, failures can be simulated:\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    "addPaymentToOrder(input: {",
                    "  method: 'dummy-payment-method',",
                    "  metadata: {",
                    "    shouldDecline: false,",
                    "    shouldError: false,",
                    "    shouldErrorOnSettle: true,",
                    "  }",
                    "}) {",
                    "  # ...",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "durationpipe",
        "metadata": {
            "title": "DurationPipe",
            "keywords": [
                "durationpipe",
                "constructor",
                "transform"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/duration.pipe.ts\" sourceLine=\"18\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "durationpipe",
                "title": "DurationPipe",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/duration.pipe.ts\" sourceLine=\"18\" packageName=\"@vendure/admin-ui\" />\n\nDisplays a number of milliseconds in a more human-readable format,\ne.g. \"12ms\", \"33s\", \"2:03m\"\n\n*Example*\n\n\n* Implements: <code>PipeTransform</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(i18nService: <a href='/reference/typescript-api/common/i18n-service#i18nservice'>I18nService</a>) => DurationPipe`}   />\n\n\n"
                    },
                    {
                        "id": "transform",
                        "title": "transform",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: number) => string`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "{{ timeInMs | duration }}",
                    "class DurationPipe implements PipeTransform {",
                    "    constructor(i18nService: I18nService)",
                    "    transform(value: number) => string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "elasticsearchoptions",
        "metadata": {
            "title": "ElasticsearchOptions",
            "keywords": [
                "elasticsearchoptions",
                "host",
                "port",
                "connectionattempts",
                "connectionattemptinterval",
                "clientoptions",
                "indexprefix",
                "indexsettings",
                "indexmappingproperties",
                "batchsize",
                "searchconfig",
                "customproductmappings",
                "customproductvariantmappings",
                "bufferupdates",
                "hydrateproductrelations",
                "hydrateproductvariantrelations",
                "extendsearchinputtype",
                "extendsearchsorttype",
                "facetvaluemaxsize",
                "collectionmaxsize",
                "totalitemsmaxsize",
                "multimatchtype",
                "boostfields",
                "pricerangebucketinterval",
                "mapquery",
                "scriptfields",
                "mapsort",
                "boostfieldsconfig",
                "productname",
                "productvariantname",
                "description",
                "sku"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/elasticsearch-plugin/src/options.ts\" sourceLine=\"30\" packageName=\"@vendure/elasticsearch-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "elasticsearchoptions",
                "title": "ElasticsearchOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/elasticsearch-plugin/src/options.ts\" sourceLine=\"30\" packageName=\"@vendure/elasticsearch-plugin\" />\n\nConfiguration options for the <a href='/reference/core-plugins/elasticsearch-plugin/#elasticsearchplugin'>ElasticsearchPlugin</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "host",
                        "title": "host",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'http://localhost'\"   />\n\nThe host of the Elasticsearch server. May also be specified in `clientOptions.node`.\n"
                    },
                    {
                        "id": "port",
                        "title": "port",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"9200\"   />\n\nThe port of the Elasticsearch server. May also be specified in `clientOptions.node`.\n"
                    },
                    {
                        "id": "connectionattempts",
                        "title": "connectionAttempts",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"10\"   />\n\nMaximum amount of attempts made to connect to the ElasticSearch server on startup.\n"
                    },
                    {
                        "id": "connectionattemptinterval",
                        "title": "connectionAttemptInterval",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"5000\"   />\n\nInterval in milliseconds between attempts to connect to the ElasticSearch server on startup.\n"
                    },
                    {
                        "id": "clientoptions",
                        "title": "clientOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`ClientOptions`}   />\n\nOptions to pass directly to the\n[Elasticsearch Node.js client](https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/index.html). For example, to\nset authentication or other more advanced options.\nNote that if the `node` or `nodes` option is specified, it will override the values provided in the `host` and `port` options.\n"
                    },
                    {
                        "id": "indexprefix",
                        "title": "indexPrefix",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'vendure-'\"   />\n\nPrefix for the indices created by the plugin.\n"
                    },
                    {
                        "id": "indexsettings",
                        "title": "indexSettings",
                        "content": "\n<MemberInfo kind=\"property\" type={`object`} default=\"{}\"  since=\"1.2.0\"  />\n\n[These options](https://www.elastic.co/guide/en/elasticsearch/reference/7.x/index-modules.html#index-modules-settings)\nare directly passed to index settings. To apply some settings indices will be recreated.\n\n*Example*\n\nA more complete example can be found in the discussion thread\n[How to make elastic plugin to search by substring with stemming](https://github.com/vendure-ecommerce/vendure/discussions/1066).\n"
                    },
                    {
                        "id": "indexmappingproperties",
                        "title": "indexMappingProperties",
                        "content": "\n<MemberInfo kind=\"property\" type={`{\n         [indexName: string]: object;\n     }`} default=\"{}\"  since=\"1.2.0\"  />\n\nThis option allow to redefine or define new properties in mapping. More about elastic\n[mapping](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html)\nAfter changing this option indices will be recreated.\n\n*Example*\n\n\nTo reference a field defined by `customProductMappings` or `customProductVariantMappings`, you will\nneed to prefix the name with `'product-<name>'` or `'variant-<name>'` respectively, e.g.:\n\n*Example*\n\n"
                    },
                    {
                        "id": "batchsize",
                        "title": "batchSize",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"2000\"   />\n\nBatch size for bulk operations (e.g. when rebuilding the indices).\n"
                    },
                    {
                        "id": "searchconfig",
                        "title": "searchConfig",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/elasticsearch-plugin/elasticsearch-options#searchconfig'>SearchConfig</a>`}   />\n\nConfiguration of the internal Elasticsearch query.\n"
                    },
                    {
                        "id": "customproductmappings",
                        "title": "customProductMappings",
                        "content": "\n<MemberInfo kind=\"property\" type={`{\n         [fieldName: string]: CustomMapping&#60;[<a href='/reference/typescript-api/entities/product#product'>Product</a>, <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>[], <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>, <a href='/reference/typescript-api/common/injector#injector'>Injector</a>]&#62;;\n     }`}   />\n\nCustom mappings may be defined which will add the defined data to the\nElasticsearch index and expose that data via the SearchResult GraphQL type,\nadding a new `customMappings`, `customProductMappings` & `customProductVariantMappings` fields.\n\nThe `graphQlType` property may be one of `String`, `Int`, `Float`, `Boolean`, `ID` or list\nversions thereof (`[String!]` etc) and can be appended with a `!` to indicate non-nullable fields.\n\nThe `public` (default = `true`) property is used to reveal or hide the property in the GraphQL API schema.\nIf this property is set to `false` it's not accessible in the `customMappings` field but it's still getting\nparsed to the elasticsearch index.\n\nThis config option defines custom mappings which are accessible when the \"groupByProduct\"\ninput options is set to `true`. In addition, custom variant mappings can be accessed by using\nthe `customProductVariantMappings` field, which is always available.\n\n*Example*\n\n\n*Example*\n\n"
                    },
                    {
                        "id": "customproductvariantmappings",
                        "title": "customProductVariantMappings",
                        "content": "\n<MemberInfo kind=\"property\" type={`{\n         [fieldName: string]: CustomMapping&#60;[<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>, <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>, <a href='/reference/typescript-api/common/injector#injector'>Injector</a>]&#62;;\n     }`}   />\n\nThis config option defines custom mappings which are accessible when the \"groupByProduct\"\ninput options is set to `false`. In addition, custom product mappings can be accessed by using\nthe `customProductMappings` field, which is always available.\n\n*Example*\n\n"
                    },
                    {
                        "id": "bufferupdates",
                        "title": "bufferUpdates",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"  since=\"1.3.0\"  />\n\nIf set to `true`, updates to Products, ProductVariants and Collections will not immediately\ntrigger an update to the search index. Instead, all these changes will be buffered and will\nonly be run via a call to the `runPendingSearchIndexUpdates` mutation in the Admin API.\n\nThis is very useful for installations with a large number of ProductVariants and/or\nCollections, as the buffering allows better control over when these expensive jobs are run,\nand also performs optimizations to minimize the amount of work that needs to be performed by\nthe worker.\n"
                    },
                    {
                        "id": "hydrateproductrelations",
                        "title": "hydrateProductRelations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/common/entity-relation-paths#entityrelationpaths'>EntityRelationPaths</a>&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;&#62;`} default=\"[]\"  since=\"1.3.0\"  />\n\nAdditional product relations that will be fetched from DB while reindexing. This can be used\nin combination with `customProductMappings` to ensure that the required relations are joined\nbefore the `product` object is passed to the `valueFn`.\n\n*Example*\n\n"
                    },
                    {
                        "id": "hydrateproductvariantrelations",
                        "title": "hydrateProductVariantRelations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/common/entity-relation-paths#entityrelationpaths'>EntityRelationPaths</a>&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;&#62;`} default=\"[]\"  since=\"1.3.0\"  />\n\nAdditional variant relations that will be fetched from DB while reindexing. See\n`hydrateProductRelations` for more explanation and a usage example.\n"
                    },
                    {
                        "id": "extendsearchinputtype",
                        "title": "extendSearchInputType",
                        "content": "\n<MemberInfo kind=\"property\" type={`{\n         [name: string]: PrimitiveTypeVariations&#60;GraphQlPrimitive&#62;;\n     }`} default=\"{}\"  since=\"1.3.0\"  />\n\nAllows the `SearchInput` type to be extended with new input fields. This allows arbitrary\ndata to be passed in, which can then be used e.g. in the `mapQuery()` function or\ncustom `scriptFields` functions.\n\n*Example*\n\n\nThis allows the search query to include these new fields:\n\n*Example*\n\n"
                    },
                    {
                        "id": "extendsearchsorttype",
                        "title": "extendSearchSortType",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`} default=\"[]\"  since=\"1.4.0\"  />\n\nAdds a list of sort parameters. This is mostly important to make the\ncorrect sort order values available inside `input` parameter of the `mapSort` option.\n\n*Example*\n\n\nwill extend the `SearchResultSortParameter` input type like this:\n\n*Example*\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface ElasticsearchOptions {",
                    "    host?: string;",
                    "    port?: number;",
                    "    connectionAttempts?: number;",
                    "    connectionAttemptInterval?: number;",
                    "    clientOptions?: ClientOptions;",
                    "    indexPrefix?: string;",
                    "    indexSettings?: object;",
                    "    indexMappingProperties?: {",
                    "        [indexName: string]: object;",
                    "    };",
                    "    batchSize?: number;",
                    "    searchConfig?: SearchConfig;",
                    "    customProductMappings?: {",
                    "        [fieldName: string]: CustomMapping<[Product, ProductVariant[], LanguageCode, Injector]>;",
                    "    };",
                    "    customProductVariantMappings?: {",
                    "        [fieldName: string]: CustomMapping<[ProductVariant, LanguageCode, Injector]>;",
                    "    };",
                    "    bufferUpdates?: boolean;",
                    "    hydrateProductRelations?: Array<EntityRelationPaths<Product>>;",
                    "    hydrateProductVariantRelations?: Array<EntityRelationPaths<ProductVariant>>;",
                    "    extendSearchInputType?: {",
                    "        [name: string]: PrimitiveTypeVariations<GraphQlPrimitive>;",
                    "    };",
                    "    extendSearchSortType?: string[];",
                    "}",
                    "// Configuring an English stemmer",
                    "indexSettings: {",
                    "  analysis: {",
                    "    analyzer: {",
                    "      custom_analyzer: {",
                    "        tokenizer: 'standard',",
                    "        filter: [",
                    "          'lowercase',",
                    "          'english_stemmer'",
                    "        ]",
                    "      }",
                    "    },",
                    "    filter : {",
                    "      english_stemmer : {",
                    "        type : 'stemmer',",
                    "        name : 'english'",
                    "      }",
                    "    }",
                    "  }",
                    "},",
                    "// Configuring custom analyzer for the `productName` field.",
                    "indexMappingProperties: {",
                    "  productName: {",
                    "    type: 'text',",
                    "    analyzer:'custom_analyzer',",
                    "    fields: {",
                    "      keyword: {",
                    "        type: 'keyword',",
                    "        ignore_above: 256,",
                    "      }",
                    "    }",
                    "  }",
                    "}",
                    "customProductMappings: {",
                    "   variantCount: {",
                    "       graphQlType: 'Int!',",
                    "       valueFn: (product, variants) => variants.length,",
                    "   },",
                    "},",
                    "indexMappingProperties: {",
                    "  'product-variantCount': {",
                    "    type: 'integer',",
                    "  }",
                    "}",
                    "customProductMappings: {",
                    "   variantCount: {",
                    "       graphQlType: 'Int!',",
                    "       valueFn: (product, variants) => variants.length,",
                    "   },",
                    "   reviewRating: {",
                    "       graphQlType: 'Float',",
                    "       public: true,",
                    "       valueFn: product => (product.customFields as any).reviewRating,",
                    "   },",
                    "   priority: {",
                    "       graphQlType: 'Int!',",
                    "       public: false,",
                    "       valueFn: product => (product.customFields as any).priority,",
                    "   },",
                    "}",
                    "query SearchProducts($input: SearchInput!) {",
                    "    search(input: $input) {",
                    "        totalItems",
                    "        items {",
                    "            productId",
                    "            productName",
                    "            customProductMappings {",
                    "                variantCount",
                    "                reviewRating",
                    "            }",
                    "            customMappings {",
                    "                ...on CustomProductMappings {",
                    "                    variantCount",
                    "                    reviewRating",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "query SearchProducts($input: SearchInput!) {",
                    "    search(input: $input) {",
                    "        totalItems",
                    "        items {",
                    "            productId",
                    "            productName",
                    "            customProductVariantMappings {",
                    "                weight",
                    "            }",
                    "            customMappings {",
                    "                ...on CustomProductVariantMappings {",
                    "                    weight",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "{",
                    "  hydrateProductRelations: ['assets.asset'],",
                    "  customProductMappings: {",
                    "    assetPreviews: {",
                    "      graphQlType: '[String!]',",
                    "      // Here we can be sure that the `product.assets` array is populated",
                    "      // with an Asset object",
                    "      valueFn: (product) => product.assets.map(a => a.asset.preview),",
                    "    }",
                    "  }",
                    "}",
                    "extendSearchInputType: {",
                    "  longitude: 'Float',",
                    "  latitude: 'Float',",
                    "  radius: 'Float',",
                    "}",
                    "query {",
                    "  search(input: {",
                    "    longitude: 101.7117,",
                    "    latitude: 3.1584,",
                    "    radius: 50.00",
                    "  }) {",
                    "    items {",
                    "      productName",
                    "    }",
                    "  }",
                    "}",
                    "extendSearchSortType: [\"distance\"]",
                    "extend input SearchResultSortParameter {",
                    "     distance: SortOrder",
                    "}"
                ]
            },
            {
                "id": "searchconfig",
                "title": "SearchConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/elasticsearch-plugin/src/options.ts\" sourceLine=\"385\" packageName=\"@vendure/elasticsearch-plugin\" />\n\nConfiguration options for the internal Elasticsearch query which is generated when performing a search.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "facetvaluemaxsize",
                        "title": "facetValueMaxSize",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"50\"   />\n\nThe maximum number of FacetValues to return from the search query. Internally, this\nvalue sets the \"size\" property of an Elasticsearch aggregation.\n"
                    },
                    {
                        "id": "collectionmaxsize",
                        "title": "collectionMaxSize",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"50\"  since=\"1.1.0\"  />\n\nThe maximum number of Collections to return from the search query. Internally, this\nvalue sets the \"size\" property of an Elasticsearch aggregation.\n"
                    },
                    {
                        "id": "totalitemsmaxsize",
                        "title": "totalItemsMaxSize",
                        "content": "\n<MemberInfo kind=\"property\" type={`number | boolean`} default=\"10000\"  since=\"1.2.0\"  />\n\nThe maximum number of totalItems to return from the search query. Internally, this\nvalue sets the \"track_total_hits\" property of an Elasticsearch query.\nIf this parameter is set to \"True\", accurate count of totalItems will be returned.\nIf this parameter is set to \"False\", totalItems will be returned as 0.\nIf this parameter is set to integer, accurate count of totalItems will be returned not bigger than integer.\n"
                    },
                    {
                        "id": "multimatchtype",
                        "title": "multiMatchType",
                        "content": "\n<MemberInfo kind=\"property\" type={`'best_fields' | 'most_fields' | 'cross_fields' | 'phrase' | 'phrase_prefix' | 'bool_prefix'`} default=\"'best_fields'\"   />\n\nDefines the\n[multi match type](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html#multi-match-types)\nused when matching against a search term.\n"
                    },
                    {
                        "id": "boostfields",
                        "title": "boostFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/elasticsearch-plugin/elasticsearch-options#boostfieldsconfig'>BoostFieldsConfig</a>`}   />\n\nSet custom boost values for particular fields when matching against a search term.\n"
                    },
                    {
                        "id": "pricerangebucketinterval",
                        "title": "priceRangeBucketInterval",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe interval used to group search results into buckets according to price range. For example, setting this to\n`2000` will group into buckets every $20.00:\n\n"
                    },
                    {
                        "id": "mapquery",
                        "title": "mapQuery",
                        "content": "\n<MemberInfo kind=\"property\" type={`(\n         query: any,\n         input: ElasticSearchInput,\n         searchConfig: DeepRequired&#60;<a href='/reference/core-plugins/elasticsearch-plugin/elasticsearch-options#searchconfig'>SearchConfig</a>&#62;,\n         channelId: <a href='/reference/typescript-api/common/id#id'>ID</a>,\n         enabledOnly: boolean,\n     ) =&#62; any`}   />\n\nThis config option allows the the modification of the whole (already built) search query. This allows\nfor e.g. wildcard / fuzzy searches on the index.\n\n*Example*\n\n"
                    },
                    {
                        "id": "scriptfields",
                        "title": "scriptFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`{ [fieldName: string]: CustomScriptMapping&#60;[ElasticSearchInput]&#62; }`}  since=\"1.3.0\"  />\n\nSets `script_fields` inside the elasticsearch body which allows returning a script evaluation for each hit.\n\nThe script field definition consists of three properties:\n\n* `graphQlType`: This is the type that will be returned when this script field is queried\nvia the GraphQL API. It may be one of `String`, `Int`, `Float`, `Boolean`, `ID` or list\nversions thereof (`[String!]` etc) and can be appended with a `!` to indicate non-nullable fields.\n* `context`: determines whether this script field is available when grouping by product. Can be\n`product`, `variant` or `both`.\n* `scriptFn`: This is the function to run on each hit. Should return an object with a `script` property,\nas covered in the\n[Elasticsearch script fields docs](https://www.elastic.co/guide/en/elasticsearch/reference/7.15/search-fields.html#script-fields)\n\n*Example*\n\n"
                    },
                    {
                        "id": "mapsort",
                        "title": "mapSort",
                        "content": "\n<MemberInfo kind=\"property\" type={`(sort: ElasticSearchSortInput, input: ElasticSearchInput) =&#62; ElasticSearchSortInput`} default=\"{}\"  since=\"1.4.0\"  />\n\nAllows extending the `sort` input of the elasticsearch body as covered in\n[Elasticsearch sort docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html)\n\nThe `sort` input parameter contains the ElasticSearchSortInput generated for the default sort parameters \"name\" and \"price\".\nIf neither of those are applied it will be empty.\n\n*Example*\n\n\nA more generic example would be a sort function based on a product location like this:\n\n*Example*\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface SearchConfig {",
                    "    facetValueMaxSize?: number;",
                    "    collectionMaxSize?: number;",
                    "    totalItemsMaxSize?: number | boolean;",
                    "    multiMatchType?: 'best_fields' | 'most_fields' | 'cross_fields' | 'phrase' | 'phrase_prefix' | 'bool_prefix';",
                    "    boostFields?: BoostFieldsConfig;",
                    "    priceRangeBucketInterval?: number;",
                    "    mapQuery?: (",
                    "        query: any,",
                    "        input: ElasticSearchInput,",
                    "        searchConfig: DeepRequired<SearchConfig>,",
                    "        channelId: ID,",
                    "        enabledOnly: boolean,",
                    "    ) => any;",
                    "    scriptFields?: { [fieldName: string]: CustomScriptMapping<[ElasticSearchInput]> };",
                    "    mapSort?: (sort: ElasticSearchSortInput, input: ElasticSearchInput) => ElasticSearchSortInput;",
                    "}",
                    "{",
                    "  \"data\": {",
                    "    \"search\": {",
                    "      \"totalItems\": 32,",
                    "      \"priceRange\": {",
                    "        \"buckets\": [",
                    "          {",
                    "            \"to\": 2000,",
                    "            \"count\": 21",
                    "          },",
                    "          {",
                    "            \"to\": 4000,",
                    "            \"count\": 7",
                    "          },",
                    "          {",
                    "            \"to\": 6000,",
                    "            \"count\": 3",
                    "          },",
                    "          {",
                    "            \"to\": 12000,",
                    "            \"count\": 1",
                    "          }",
                    "        ]",
                    "      }",
                    "    }",
                    "  }",
                    "}",
                    "mapQuery: (query, input, searchConfig, channelId, enabledOnly){",
                    "  if(query.bool.must){",
                    "    delete query.bool.must;",
                    "  }",
                    "  query.bool.should = [",
                    "    {",
                    "      query_string: {",
                    "        query: \"*\" + term + \"*\",",
                    "        fields: [",
                    "          `productName^${searchConfig.boostFields.productName}`,",
                    "          `productVariantName^${searchConfig.boostFields.productVariantName}`,",
                    "        ]",
                    "      }",
                    "    },",
                    "    {",
                    "      multi_match: {",
                    "        query: term,",
                    "        type: searchConfig.multiMatchType,",
                    "        fields: [",
                    "          `description^${searchConfig.boostFields.description}`,",
                    "          `sku^${searchConfig.boostFields.sku}`,",
                    "        ],",
                    "      },",
                    "    },",
                    "  ];",
                    "",
                    "  return query;",
                    "}",
                    "extendSearchInputType: {",
                    "  latitude: 'Float',",
                    "  longitude: 'Float',",
                    "},",
                    "indexMappingProperties: {",
                    "  // The `product-location` field corresponds to the `location` customProductMapping",
                    "  // defined below. Here we specify that it would be index as a `geo_point` type,",
                    "  // which will allow us to perform geo-spacial calculations on it in our script field.",
                    "  'product-location': {",
                    "    type: 'geo_point', // contains function arcDistance",
                    "  },",
                    "},",
                    "customProductMappings: {",
                    "  location: {",
                    "    graphQlType: 'String',",
                    "    valueFn: (product: Product) => {",
                    "      // Assume that the Product entity has this customField defined",
                    "      const custom = product.customFields.location;",
                    "      return `${custom.latitude},${custom.longitude}`;",
                    "    },",
                    "  }",
                    "},",
                    "searchConfig: {",
                    "  scriptFields: {",
                    "    distance: {",
                    "      graphQlType: 'Float!',",
                    "      // Run this script only when grouping results by product",
                    "      context: 'product',",
                    "      scriptFn: (input) => {",
                    "        // The SearchInput was extended with latitude and longitude",
                    "        // via the `extendSearchInputType` option above.",
                    "        const lat = input.latitude;",
                    "        const lon = input.longitude;",
                    "        return {",
                    "          script: `doc['product-location'].arcDistance(${lat}, ${lon})`,",
                    "        }",
                    "      }",
                    "    }",
                    "  }",
                    "}",
                    "mapSort: (sort, input) => {",
                    "    // Assuming `extendSearchSortType: [\"priority\"]`",
                    "    // Assuming priority is never undefined",
                    "    const { priority } = input.sort;",
                    "    return [",
                    "         ...sort,",
                    "         {",
                    "             // The `product-priority` field corresponds to the `priority` customProductMapping",
                    "             // Depending on the index type, this field might require a",
                    "             // more detailed input (example: 'productName.keyword')",
                    "             [\"product-priority\"]: {",
                    "                 order: priority === SortOrder.ASC ? 'asc' : 'desc'",
                    "             }",
                    "         }",
                    "     ];",
                    "}",
                    "extendSearchInputType: {",
                    "  latitude: 'Float',",
                    "  longitude: 'Float',",
                    "},",
                    "extendSearchSortType: [\"distance\"],",
                    "indexMappingProperties: {",
                    "  // The `product-location` field corresponds to the `location` customProductMapping",
                    "  // defined below. Here we specify that it would be index as a `geo_point` type,",
                    "  // which will allow us to perform geo-spacial calculations on it in our script field.",
                    "  'product-location': {",
                    "    type: 'geo_point',",
                    "  },",
                    "},",
                    "customProductMappings: {",
                    "  location: {",
                    "    graphQlType: 'String',",
                    "    valueFn: (product: Product) => {",
                    "      // Assume that the Product entity has this customField defined",
                    "      const custom = product.customFields.location;",
                    "      return `${custom.latitude},${custom.longitude}`;",
                    "    },",
                    "  }",
                    "},",
                    "searchConfig: {",
                    "     mapSort: (sort, input) => {",
                    "         // Assuming distance is never undefined",
                    "         const { distance } = input.sort;",
                    "         return [",
                    "             ...sort,",
                    "             {",
                    "                 [\"_geo_distance\"]: {",
                    "                     \"product-location\": [",
                    "                         input.longitude,",
                    "                         input.latitude",
                    "                     ],",
                    "                     order: distance === SortOrder.ASC ? 'asc' : 'desc',",
                    "                     unit: \"km\"",
                    "                 }",
                    "             }",
                    "         ];",
                    "     }",
                    "}"
                ]
            },
            {
                "id": "boostfieldsconfig",
                "title": "BoostFieldsConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/elasticsearch-plugin/src/options.ts\" sourceLine=\"670\" packageName=\"@vendure/elasticsearch-plugin\" />\n\nConfiguration for [boosting](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-match-query.html#field-boost)\nthe scores of given fields when performing a search against a term.\n\nBoosting a field acts as a score multiplier for matches against that field.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "productname",
                        "title": "productName",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"1\"   />\n\nDefines the boost factor for the productName field.\n"
                    },
                    {
                        "id": "productvariantname",
                        "title": "productVariantName",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"1\"   />\n\nDefines the boost factor for the productVariantName field.\n"
                    },
                    {
                        "id": "description",
                        "title": "description",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"1\"   />\n\nDefines the boost factor for the description field.\n"
                    },
                    {
                        "id": "sku",
                        "title": "sku",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"1\"   />\n\nDefines the boost factor for the sku field.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface BoostFieldsConfig {",
                    "    productName?: number;",
                    "    productVariantName?: number;",
                    "    description?: number;",
                    "    sku?: number;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "elasticsearchplugin",
        "metadata": {
            "title": "ElasticsearchPlugin",
            "keywords": [
                "elasticsearchplugin",
                "installation",
                "search api extensions",
                "example request & response",
                "init"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/elasticsearch-plugin/src/plugin.ts\" sourceLine=\"223\" packageName=\"@vendure/elasticsearch-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "elasticsearchplugin",
                "title": "ElasticsearchPlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/elasticsearch-plugin/src/plugin.ts\" sourceLine=\"223\" packageName=\"@vendure/elasticsearch-plugin\" />\n\nThis plugin allows your product search to be powered by [Elasticsearch](https://github.com/elastic/elasticsearch) - a powerful Open Source search\nengine. This is a drop-in replacement for the DefaultSearchPlugin which exposes many powerful configuration options enabling your storefront\nto support a wide range of use-cases such as indexing of custom properties, fine control over search index configuration, and to leverage\nadvanced Elasticsearch features like spacial search.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "installation",
                "title": "Installation",
                "content": "\n**Requires Elasticsearch v7.0 < required Elasticsearch version < 7.10 **\nElasticsearch version 7.10.2 will throw error due to incompatibility with elasticsearch-js client.\n[Check here for more info](https://github.com/elastic/elasticsearch-js/issues/1519).\n\n`yarn add @elastic/elasticsearch @vendure/elasticsearch-plugin`\n\nor\n\n`npm install @elastic/elasticsearch @vendure/elasticsearch-plugin`\n\nMake sure to remove the `DefaultSearchPlugin` if it is still in the VendureConfig plugins array.\n\nThen add the `ElasticsearchPlugin`, calling the `.init()` method with <a href='/reference/core-plugins/elasticsearch-plugin/elasticsearch-options#elasticsearchoptions'>ElasticsearchOptions</a>:\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "import { ElasticsearchPlugin } from '@vendure/elasticsearch-plugin';",
                    "",
                    "const config: VendureConfig = {",
                    "  // Add an instance of the plugin to the plugins array",
                    "  plugins: [",
                    "    ElasticsearchPlugin.init({",
                    "      host: 'http://localhost',",
                    "      port: 9200,",
                    "    }),",
                    "  ],",
                    "};"
                ]
            },
            {
                "id": "search-api-extensions",
                "title": "Search API Extensions",
                "content": "This plugin extends the default search query of the Shop API, allowing richer querying of your product data.\n\nThe [SearchResponse](/reference/graphql-api/admin/object-types/#searchresponse) type is extended with information\nabout price ranges in the result set:\n\nThis `SearchResponsePriceData` type allows you to query data about the range of prices in the result set.\n\n",
                "subsections": [],
                "code": [
                    "extend type SearchResponse {",
                    "    prices: SearchResponsePriceData!",
                    "}",
                    "",
                    "type SearchResponsePriceData {",
                    "    range: PriceRange!",
                    "    rangeWithTax: PriceRange!",
                    "    buckets: [PriceRangeBucket!]!",
                    "    bucketsWithTax: [PriceRangeBucket!]!",
                    "}",
                    "",
                    "type PriceRangeBucket {",
                    "    to: Int!",
                    "    count: Int!",
                    "}",
                    "",
                    "extend input SearchInput {",
                    "    priceRange: PriceRangeInput",
                    "    priceRangeWithTax: PriceRangeInput",
                    "}",
                    "",
                    "input PriceRangeInput {",
                    "    min: Int!",
                    "    max: Int!",
                    "}"
                ]
            },
            {
                "id": "example-request-&-response",
                "title": "Example Request & Response",
                "content": "\n\n\n* Implements: <code>OnApplicationBootstrap</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/elasticsearch-plugin/elasticsearch-options#elasticsearchoptions'>ElasticsearchOptions</a>) => Type&#60;<a href='/reference/core-plugins/elasticsearch-plugin/#elasticsearchplugin'>ElasticsearchPlugin</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "{",
                    "  search (input: {",
                    "    term: \"table easel\"",
                    "    groupByProduct: true",
                    "    priceRange: {",
                    "      min: 500",
                    "      max: 7000",
                    "    }",
                    "  }) {",
                    "    totalItems",
                    "    prices {",
                    "      range {",
                    "        min",
                    "        max",
                    "      }",
                    "      buckets {",
                    "        to",
                    "        count",
                    "      }",
                    "    }",
                    "    items {",
                    "      productName",
                    "      score",
                    "      price {",
                    "        ...on PriceRange {",
                    "          min",
                    "          max",
                    "        }",
                    "      }",
                    "    }",
                    "  }",
                    "}",
                    "{",
                    " \"data\": {",
                    "   \"search\": {",
                    "     \"totalItems\": 9,",
                    "     \"prices\": {",
                    "       \"range\": {",
                    "         \"min\": 999,",
                    "         \"max\": 6396,",
                    "       },",
                    "       \"buckets\": [",
                    "         {",
                    "           \"to\": 1000,",
                    "           \"count\": 1",
                    "         },",
                    "         {",
                    "           \"to\": 2000,",
                    "           \"count\": 2",
                    "         },",
                    "         {",
                    "           \"to\": 3000,",
                    "           \"count\": 3",
                    "         },",
                    "         {",
                    "           \"to\": 4000,",
                    "           \"count\": 1",
                    "         },",
                    "         {",
                    "           \"to\": 5000,",
                    "           \"count\": 1",
                    "         },",
                    "         {",
                    "           \"to\": 7000,",
                    "           \"count\": 1",
                    "         }",
                    "       ]",
                    "     },",
                    "     \"items\": [",
                    "       {",
                    "         \"productName\": \"Loxley Yorkshire Table Easel\",",
                    "         \"score\": 30.58831,",
                    "         \"price\": {",
                    "           \"min\": 4984,",
                    "           \"max\": 4984",
                    "         }",
                    "       },",
                    "       // ... truncated",
                    "     ]",
                    "   }",
                    " }",
                    "}",
                    "class ElasticsearchPlugin implements OnApplicationBootstrap {",
                    "    init(options: ElasticsearchOptions) => Type<ElasticsearchPlugin>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "email-plugin-types",
        "metadata": {
            "title": "Email Plugin Types",
            "keywords": [
                "eventwithcontext",
                "eventwithasyncdata",
                "emaildetails",
                "from",
                "recipient",
                "subject",
                "body",
                "attachments",
                "cc",
                "bcc",
                "replyto",
                "loaddatafn",
                "emailattachment",
                "settemplatevarsfn",
                "setattachmentsfn",
                "optionaladdressfields",
                "setoptionaladdressfieldsfn"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"21\" packageName=\"@vendure/email-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "eventwithcontext",
                "title": "EventWithContext",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"21\" packageName=\"@vendure/email-plugin\" />\n\nA VendureEvent which also includes a `ctx` property containing the current\n<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, which is used to determine the channel and language\nto use when generating the email.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type EventWithContext = VendureEvent & { ctx: RequestContext }"
                ]
            },
            {
                "id": "eventwithasyncdata",
                "title": "EventWithAsyncData",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"31\" packageName=\"@vendure/email-plugin\" />\n\nA VendureEvent with a <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> and a `data` property which contains the\nvalue resolved from the <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>`.loadData()` callback.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type EventWithAsyncData<Event extends EventWithContext, R> = Event & { data: R }"
                ]
            },
            {
                "id": "emaildetails",
                "title": "EmailDetails",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"248\" packageName=\"@vendure/email-plugin\" />\n\nThe final, generated email details to be sent.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "from",
                        "title": "from",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "recipient",
                        "title": "recipient",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "subject",
                        "title": "subject",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "body",
                        "title": "body",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "attachments",
                        "title": "attachments",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Type extends 'serialized' ? SerializedAttachment : Attachment&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "cc",
                        "title": "cc",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "bcc",
                        "title": "bcc",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "replyto",
                        "title": "replyTo",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface EmailDetails<Type extends 'serialized' | 'unserialized' = 'unserialized'> {",
                    "    from: string;",
                    "    recipient: string;",
                    "    subject: string;",
                    "    body: string;",
                    "    attachments: Array<Type extends 'serialized' ? SerializedAttachment : Attachment>;",
                    "    cc?: string;",
                    "    bcc?: string;",
                    "    replyTo?: string;",
                    "}"
                ]
            },
            {
                "id": "loaddatafn",
                "title": "LoadDataFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"282\" packageName=\"@vendure/email-plugin\" />\n\nA function used to load async data for use by an <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type LoadDataFn<Event extends EventWithContext, R> = (context: {",
                    "    event: Event;",
                    "    injector: Injector;",
                    "}) => Promise<R>"
                ]
            },
            {
                "id": "emailattachment",
                "title": "EmailAttachment",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"301\" packageName=\"@vendure/email-plugin\" />\n\nAn object defining a file attachment for an email. Based on the object described\n[here in the Nodemailer docs](https://nodemailer.com/message/attachments/), but\nonly uses the `path` property to define a filesystem path or a URL pointing to\nthe attachment file.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type EmailAttachment = Omit<Attachment, 'raw'> & { path?: string }"
                ]
            },
            {
                "id": "settemplatevarsfn",
                "title": "SetTemplateVarsFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"414\" packageName=\"@vendure/email-plugin\" />\n\nA function used to define template variables available to email templates.\nSee <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>.setTemplateVars().\n\n\n\n",
                "subsections": [],
                "code": [
                    "type SetTemplateVarsFn<Event> = (",
                    "    event: Event,",
                    "    globals: { [key: string]: any },",
                    ") => { [key: string]: any }"
                ]
            },
            {
                "id": "setattachmentsfn",
                "title": "SetAttachmentsFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"428\" packageName=\"@vendure/email-plugin\" />\n\nA function used to define attachments to be sent with the email.\nSee https://nodemailer.com/message/attachments/ for more information about\nhow attachments work in Nodemailer.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type SetAttachmentsFn<Event> = (event: Event) => EmailAttachment[] | Promise<EmailAttachment[]>"
                ]
            },
            {
                "id": "optionaladdressfields",
                "title": "OptionalAddressFields",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"438\" packageName=\"@vendure/email-plugin\" since=\"1.1.0\" />\n\nOptional address-related fields for sending the email.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "cc",
                        "title": "cc",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nComma separated list of recipients email addresses that will appear on the _Cc:_ field\n"
                    },
                    {
                        "id": "bcc",
                        "title": "bcc",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nComma separated list of recipients email addresses that will appear on the _Bcc:_ field\n"
                    },
                    {
                        "id": "replyto",
                        "title": "replyTo",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nAn email address that will appear on the _Reply-To:_ field\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface OptionalAddressFields {",
                    "    cc?: string;",
                    "    bcc?: string;",
                    "    replyTo?: string;",
                    "}"
                ]
            },
            {
                "id": "setoptionaladdressfieldsfn",
                "title": "SetOptionalAddressFieldsFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"464\" packageName=\"@vendure/email-plugin\" since=\"1.1.0\" />\n\nA function used to set the <a href='/reference/core-plugins/email-plugin/email-plugin-types#optionaladdressfields'>OptionalAddressFields</a>.\n\n\n",
                "subsections": [],
                "code": [
                    "type SetOptionalAddressFieldsFn<Event> = (",
                    "    event: Event,",
                    ") => OptionalAddressFields | Promise<OptionalAddressFields>"
                ]
            }
        ]
    },
    {
        "id": "email-utils",
        "metadata": {
            "title": "Email Utils",
            "keywords": [
                "transformorderlineasseturls",
                "ctx",
                "order",
                "injector",
                "hydrateshippinglines"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/email-plugin/src/default-email-handlers.ts\" sourceLine=\"101\" packageName=\"@vendure/email-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "transformorderlineasseturls",
                "title": "transformOrderLineAssetUrls",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/default-email-handlers.ts\" sourceLine=\"101\" packageName=\"@vendure/email-plugin\" />\n\nApplies the configured `AssetStorageStrategy.toAbsoluteUrl()` function to each of the\nOrderLine's `featuredAsset.preview` properties, so that they can be correctly displayed\nin the email template.\nThis is required since that step usually happens at the API in middleware, which is not\napplicable in this context. So we need to do it manually.\n\n**Note: Mutates the Order object**\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "ctx",
                        "title": "ctx",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>`} />\n\n"
                    },
                    {
                        "id": "order",
                        "title": "order",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>`} />\n\n"
                    },
                    {
                        "id": "injector",
                        "title": "injector",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/typescript-api/common/injector#injector'>Injector</a>`} />\n\n\n\n"
                    }
                ],
                "code": [
                    "function transformOrderLineAssetUrls(ctx: RequestContext, order: Order, injector: Injector): Order"
                ]
            },
            {
                "id": "hydrateshippinglines",
                "title": "hydrateShippingLines",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/default-email-handlers.ts\" sourceLine=\"122\" packageName=\"@vendure/email-plugin\" />\n\nEnsures that the ShippingLines are hydrated so that we can use the\n`shippingMethod.name` property in the email template.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "ctx",
                        "title": "ctx",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>`} />\n\n"
                    },
                    {
                        "id": "order",
                        "title": "order",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>`} />\n\n"
                    },
                    {
                        "id": "injector",
                        "title": "injector",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/typescript-api/common/injector#injector'>Injector</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "function hydrateShippingLines(ctx: RequestContext, order: Order, injector: Injector): Promise<ShippingLine[]>"
                ]
            }
        ]
    },
    {
        "id": "emaileventhandler",
        "metadata": {
            "title": "EmailEventHandler",
            "keywords": [
                "emaileventhandler",
                "handling other languages",
                "defining a custom handler",
                "1. create a new handler",
                "2. create the email template",
                "3. register the handler",
                "constructor",
                "filter",
                "setrecipient",
                "setlanguagecode",
                "settemplatevars",
                "setsubject",
                "setfrom",
                "setoptionaladdressfields",
                "setattachments",
                "addtemplate",
                "loaddata",
                "setmockevent"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/email-plugin/src/event-handler.ts\" sourceLine=\"131\" packageName=\"@vendure/email-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "emaileventhandler",
                "title": "EmailEventHandler",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/event-handler.ts\" sourceLine=\"131\" packageName=\"@vendure/email-plugin\" />\n\nThe EmailEventHandler defines how the EmailPlugin will respond to a given event.\n\nA handler is created by creating a new <a href='/reference/core-plugins/email-plugin/email-event-listener#emaileventlistener'>EmailEventListener</a> and calling the `.on()` method\nto specify which event to respond to.\n\n*Example*\n\n\nThis example creates a handler which listens for the `OrderStateTransitionEvent` and if the Order has\ntransitioned to the `'PaymentSettled'` state, it will generate and send an email.\n\nThe string argument passed into the `EmailEventListener` constructor is used to identify the handler, and\nalso to locate the directory of the email template files. So in the example above, there should be a directory\n`<app root>/static/email/templates/order-confirmation` which contains a Handlebars template named `body.hbs`.\n\n",
                "subsections": [],
                "code": [
                    "const confirmationHandler = new EmailEventListener('order-confirmation')",
                    "  .on(OrderStateTransitionEvent)",
                    "  .filter(event => event.toState === 'PaymentSettled')",
                    "  .setRecipient(event => event.order.customer.emailAddress)",
                    "  .setSubject(`Order confirmation for #{{ order.code }}`)",
                    "  .setTemplateVars(event => ({ order: event.order }));"
                ]
            },
            {
                "id": "handling-other-languages",
                "title": "Handling other languages",
                "content": "\nBy default, the handler will respond to all events on all channels and use the same subject (\"Order confirmation for #12345\" above)\nand body template. Where the server is intended to support multiple languages, the `.addTemplate()` method may be used\nto define the subject and body template for specific language and channel combinations.\n\nThe language is determined by looking at the `languageCode` property of the event's `ctx` (<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) object.\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "const extendedConfirmationHandler = confirmationHandler",
                    "  .addTemplate({",
                    "    channelCode: 'default',",
                    "    languageCode: LanguageCode.de,",
                    "    templateFile: 'body.de.hbs',",
                    "    subject: 'Bestellbestätigung für #{{ order.code }}',",
                    "  })"
                ]
            },
            {
                "id": "defining-a-custom-handler",
                "title": "Defining a custom handler",
                "content": "\nLet's say you have a plugin which defines a new event type, `QuoteRequestedEvent`. In your plugin you have defined a mutation\nwhich is executed when the customer requests a quote in your storefront, and in your resolver, you use the <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a> to publish a\nnew `QuoteRequestedEvent`.\n\nYou now want to email the customer with their quote. Here are the steps you would take to set this up:\n\n",
                "subsections": [
                    {
                        "id": "1.-create-a-new-handler",
                        "title": "1. Create a new handler",
                        "content": "\n\n"
                    },
                    {
                        "id": "2.-create-the-email-template",
                        "title": "2. Create the email template",
                        "content": "\nNext you need to make sure there is a template defined at `<app root>/static/email/templates/quote-requested/body.hbs`. The template\nwould look something like this:\n\n\nYou can find pre-made templates on the [MJML website](https://mjml.io/templates/).\n\n"
                    },
                    {
                        "id": "3.-register-the-handler",
                        "title": "3. Register the handler",
                        "content": "\nFinally, you need to register the handler with the EmailPlugin:\n\n\n\n<div className=\"members-wrapper\">\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(listener: <a href='/reference/core-plugins/email-plugin/email-event-listener#emaileventlistener'>EmailEventListener</a>&#60;T&#62;, event: Type&#60;Event&#62;) => EmailEventHandler`}   />\n\n\n"
                    },
                    {
                        "id": "filter",
                        "title": "filter",
                        "content": "\n<MemberInfo kind=\"method\" type={`(filterFn: (event: Event) =&#62; boolean) => <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>&#60;T, Event&#62;`}   />\n\nDefines a predicate function which is used to determine whether the event will trigger an email.\nMultiple filter functions may be defined.\n"
                    },
                    {
                        "id": "setrecipient",
                        "title": "setRecipient",
                        "content": "\n<MemberInfo kind=\"method\" type={`(setRecipientFn: (event: Event) =&#62; string) => <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>&#60;T, Event&#62;`}   />\n\nA function which defines how the recipient email address should be extracted from the incoming event.\n\nThe recipient can be a plain email address: `'foobar@example.com'`\nOr with a formatted name (includes unicode support): `'Ноде Майлер <foobar@example.com>'`\nOr a comma-separated list of addresses: `'foobar@example.com, \"Ноде Майлер\" <bar@example.com>'`\n"
                    },
                    {
                        "id": "setlanguagecode",
                        "title": "setLanguageCode",
                        "content": "\n<MemberInfo kind=\"method\" type={`(setLanguageCodeFn: (event: Event) =&#62; <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a> | undefined) => <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>&#60;T, Event&#62;`}  since=\"1.8.0\"  />\n\nA function which allows to override the language of the email. If not defined, the language from the context will be used.\n"
                    },
                    {
                        "id": "settemplatevars",
                        "title": "setTemplateVars",
                        "content": "\n<MemberInfo kind=\"method\" type={`(templateVarsFn: <a href='/reference/core-plugins/email-plugin/email-plugin-types#settemplatevarsfn'>SetTemplateVarsFn</a>&#60;Event&#62;) => <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>&#60;T, Event&#62;`}   />\n\nA function which returns an object hash of variables which will be made available to the Handlebars template\nand subject line for interpolation.\n"
                    },
                    {
                        "id": "setsubject",
                        "title": "setSubject",
                        "content": "\n<MemberInfo kind=\"method\" type={`(defaultSubject: string) => <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>&#60;T, Event&#62;`}   />\n\nSets the default subject of the email. The subject string may use Handlebars variables defined by the\nsetTemplateVars() method.\n"
                    },
                    {
                        "id": "setfrom",
                        "title": "setFrom",
                        "content": "\n<MemberInfo kind=\"method\" type={`(from: string) => <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>&#60;T, Event&#62;`}   />\n\nSets the default from field of the email. The from string may use Handlebars variables defined by the\nsetTemplateVars() method.\n"
                    },
                    {
                        "id": "setoptionaladdressfields",
                        "title": "setOptionalAddressFields",
                        "content": "\n<MemberInfo kind=\"method\" type={`(optionalAddressFieldsFn: <a href='/reference/core-plugins/email-plugin/email-plugin-types#setoptionaladdressfieldsfn'>SetOptionalAddressFieldsFn</a>&#60;Event&#62;) => `}  since=\"1.1.0\"  />\n\nA function which allows <a href='/reference/core-plugins/email-plugin/email-plugin-types#optionaladdressfields'>OptionalAddressFields</a> to be specified such as \"cc\" and \"bcc\".\n"
                    },
                    {
                        "id": "setattachments",
                        "title": "setAttachments",
                        "content": "\n<MemberInfo kind=\"method\" type={`(setAttachmentsFn: <a href='/reference/core-plugins/email-plugin/email-plugin-types#setattachmentsfn'>SetAttachmentsFn</a>&#60;Event&#62;) => `}   />\n\nDefines one or more files to be attached to the email. An attachment can be specified\nas either a `path` (to a file or URL) or as `content` which can be a string, Buffer or Stream.\n\n**Note:** When using the `content` to pass a Buffer or Stream, the raw data will get serialized\ninto the job queue. For this reason the total size of all attachments passed as `content` should kept to\n**less than ~50k**. If the attachments are greater than that limit, a warning will be logged and\nerrors may result if using the DefaultJobQueuePlugin with certain DBs such as MySQL/MariaDB.\n\n*Example*\n\n"
                    },
                    {
                        "id": "addtemplate",
                        "title": "addTemplate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: EmailTemplateConfig) => <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>&#60;T, Event&#62;`}   />\n\nAdd configuration for another template other than the default `\"body.hbs\"`. Use this method to define specific\ntemplates for channels or languageCodes other than the default.\n"
                    },
                    {
                        "id": "loaddata",
                        "title": "loadData",
                        "content": "\n<MemberInfo kind=\"method\" type={`(loadDataFn: <a href='/reference/core-plugins/email-plugin/email-plugin-types#loaddatafn'>LoadDataFn</a>&#60;Event, R&#62;) => <a href='/reference/core-plugins/email-plugin/email-event-handler-with-async-data#emaileventhandlerwithasyncdata'>EmailEventHandlerWithAsyncData</a>&#60;R, T, Event, <a href='/reference/core-plugins/email-plugin/email-plugin-types#eventwithasyncdata'>EventWithAsyncData</a>&#60;Event, R&#62;&#62;`}   />\n\nAllows data to be loaded asynchronously which can then be used as template variables.\nThe `loadDataFn` has access to the event, the TypeORM `Connection` object, and an\n`inject()` function which can be used to inject any of the providers exported\nby the <a href='/reference/typescript-api/plugin/plugin-common-module#plugincommonmodule'>PluginCommonModule</a>. The return value of the `loadDataFn` will be\nadded to the `event` as the `data` property.\n\n*Example*\n\n"
                    },
                    {
                        "id": "setmockevent",
                        "title": "setMockEvent",
                        "content": "\n<MemberInfo kind=\"method\" type={`(event: Omit&#60;Event, 'ctx' | 'data'&#62;) => <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>&#60;T, Event&#62;`}   />\n\nOptionally define a mock Event which is used by the dev mode mailbox app for generating mock emails\nfrom this handler, which is useful when developing the email templates.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { EmailEventListener } from `@vendure/email-plugin`;",
                    "import { QuoteRequestedEvent } from `./events`;",
                    "",
                    "const quoteRequestedHandler = new EmailEventListener('quote-requested')",
                    "  .on(QuoteRequestedEvent)",
                    "  .setRecipient(event => event.customer.emailAddress)",
                    "  .setSubject(`Here's the quote you requested`)",
                    "  .setTemplateVars(event => ({ details: event.details }));",
                    "{{> header title=\"Here's the quote you requested\" }}",
                    "",
                    "<mj-section background-color=\"#fafafa\">",
                    "    <mj-column>",
                    "        <mj-text color=\"#525252\">",
                    "            Thank you for your interest in our products! Here's the details",
                    "            of the quote you recently requested:",
                    "        </mj-text>",
                    "",
                    "        <--! your custom email layout goes here -->",
                    "    </mj-column>",
                    "</mj-section>",
                    "",
                    "",
                    "{{> footer }}",
                    "import { defaultEmailHandlers, EmailPlugin } from '@vendure/email-plugin';",
                    "import { quoteRequestedHandler } from './plugins/quote-plugin';",
                    "",
                    "const config: VendureConfig = {",
                    "  // Add an instance of the plugin to the plugins array",
                    "  plugins: [",
                    "    EmailPlugin.init({",
                    "      handlers: [...defaultEmailHandlers, quoteRequestedHandler],",
                    "      templatePath: path.join(__dirname, 'vendure/email/templates'),",
                    "      // ... etc",
                    "    }),",
                    "  ],",
                    "};",
                    "class EmailEventHandler<T extends string = string, Event extends EventWithContext = EventWithContext> {",
                    "    constructor(listener: EmailEventListener<T>, event: Type<Event>)",
                    "    filter(filterFn: (event: Event) => boolean) => EmailEventHandler<T, Event>;",
                    "    setRecipient(setRecipientFn: (event: Event) => string) => EmailEventHandler<T, Event>;",
                    "    setLanguageCode(setLanguageCodeFn: (event: Event) => LanguageCode | undefined) => EmailEventHandler<T, Event>;",
                    "    setTemplateVars(templateVarsFn: SetTemplateVarsFn<Event>) => EmailEventHandler<T, Event>;",
                    "    setSubject(defaultSubject: string) => EmailEventHandler<T, Event>;",
                    "    setFrom(from: string) => EmailEventHandler<T, Event>;",
                    "    setOptionalAddressFields(optionalAddressFieldsFn: SetOptionalAddressFieldsFn<Event>) => ;",
                    "    setAttachments(setAttachmentsFn: SetAttachmentsFn<Event>) => ;",
                    "    addTemplate(config: EmailTemplateConfig) => EmailEventHandler<T, Event>;",
                    "    loadData(loadDataFn: LoadDataFn<Event, R>) => EmailEventHandlerWithAsyncData<R, T, Event, EventWithAsyncData<Event, R>>;",
                    "    setMockEvent(event: Omit<Event, 'ctx' | 'data'>) => EmailEventHandler<T, Event>;",
                    "}",
                    "const testAttachmentHandler = new EmailEventListener('activate-voucher')",
                    "  .on(ActivateVoucherEvent)",
                    "  // ... omitted some steps for brevity",
                    "  .setAttachments(async (event) => {",
                    "    const { imageUrl, voucherCode } = await getVoucherDataForUser(event.user.id);",
                    "    return [",
                    "      {",
                    "        filename: `voucher-${voucherCode}.jpg`,",
                    "        path: imageUrl,",
                    "      },",
                    "    ];",
                    "  });",
                    "new EmailEventListener('order-confirmation')",
                    "  .on(OrderStateTransitionEvent)",
                    "  .filter(event => event.toState === 'PaymentSettled' && !!event.order.customer)",
                    "  .loadData(({ event, injector }) => {",
                    "    const orderService = injector.get(OrderService);",
                    "    return orderService.getOrderPayments(event.order.id);",
                    "  })",
                    "  .setTemplateVars(event => ({",
                    "    order: event.order,",
                    "    payments: event.data,",
                    "  }));"
                ]
            }
        ]
    },
    {
        "id": "emaileventhandlerwithasyncdata",
        "metadata": {
            "title": "EmailEventHandlerWithAsyncData",
            "keywords": [
                "emaileventhandlerwithasyncdata",
                "constructor"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/email-plugin/src/event-handler.ts\" sourceLine=\"438\" packageName=\"@vendure/email-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "emaileventhandlerwithasyncdata",
                "title": "EmailEventHandlerWithAsyncData",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/event-handler.ts\" sourceLine=\"438\" packageName=\"@vendure/email-plugin\" />\n\nIdentical to the <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a> but with a `data` property added to the `event` based on the result\nof the `.loadData()` function.\n\n* Extends: <code><a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>&#60;T, Event&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(_loadDataFn: <a href='/reference/core-plugins/email-plugin/email-plugin-types#loaddatafn'>LoadDataFn</a>&#60;InputEvent, Data&#62;, listener: <a href='/reference/core-plugins/email-plugin/email-event-listener#emaileventlistener'>EmailEventListener</a>&#60;T&#62;, event: Type&#60;InputEvent&#62;) => EmailEventHandlerWithAsyncData`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class EmailEventHandlerWithAsyncData<Data, T extends string = string, InputEvent extends EventWithContext = EventWithContext, Event extends EventWithAsyncData<InputEvent, Data> = EventWithAsyncData<InputEvent, Data>> extends EmailEventHandler<T, Event> {",
                    "    constructor(_loadDataFn: LoadDataFn<InputEvent, Data>, listener: EmailEventListener<T>, event: Type<InputEvent>)",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "emaileventlistener",
        "metadata": {
            "title": "EmailEventListener",
            "keywords": [
                "emaileventlistener",
                "type",
                "constructor",
                "on"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/email-plugin/src/event-listener.ts\" sourceLine=\"13\" packageName=\"@vendure/email-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "emaileventlistener",
                "title": "EmailEventListener",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/event-listener.ts\" sourceLine=\"13\" packageName=\"@vendure/email-plugin\" />\n\nAn EmailEventListener is used to listen for events and set up a <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a> which\ndefines how an email will be generated from this event.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`T`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(type: T) => EmailEventListener`}   />\n\n\n"
                    },
                    {
                        "id": "on",
                        "title": "on",
                        "content": "\n<MemberInfo kind=\"method\" type={`(event: Type&#60;Event&#62;) => <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>&#60;T, Event&#62;`}   />\n\nDefines the event to listen for.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class EmailEventListener<T extends string> {",
                    "    public type: T;",
                    "    constructor(type: T)",
                    "    on(event: Type<Event>) => EmailEventHandler<T, Event>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "emailgenerator",
        "metadata": {
            "title": "EmailGenerator",
            "keywords": [
                "emailgenerator",
                "oninit",
                "generate",
                "handlebarsmjmlgenerator"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/email-plugin/src/email-generator.ts\" sourceLine=\"13\" packageName=\"@vendure/email-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "emailgenerator",
                "title": "EmailGenerator",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/email-generator.ts\" sourceLine=\"13\" packageName=\"@vendure/email-plugin\" />\n\nAn EmailGenerator generates the subject and body details of an email.\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "oninit",
                        "title": "onInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/email-plugin/email-plugin-options#emailpluginoptions'>EmailPluginOptions</a>) => void | Promise&#60;void&#62;`}   />\n\nAny necessary setup can be performed here.\n"
                    },
                    {
                        "id": "generate",
                        "title": "generate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(from: string, subject: string, body: string, templateVars: { [key: string]: any }) => Pick&#60;<a href='/reference/core-plugins/email-plugin/email-plugin-types#emaildetails'>EmailDetails</a>, 'from' | 'subject' | 'body'&#62;`}   />\n\nGiven a subject and body from an email template, this method generates the final\ninterpolated email text.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface EmailGenerator<T extends string = any, E extends VendureEvent = any> extends InjectableStrategy {",
                    "    onInit?(options: EmailPluginOptions): void | Promise<void>;",
                    "    generate(",
                    "        from: string,",
                    "        subject: string,",
                    "        body: string,",
                    "        templateVars: { [key: string]: any },",
                    "    ): Pick<EmailDetails, 'from' | 'subject' | 'body'>;",
                    "}"
                ]
            },
            {
                "id": "handlebarsmjmlgenerator",
                "title": "HandlebarsMjmlGenerator",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/handlebars-mjml-generator.ts\" sourceLine=\"23\" packageName=\"@vendure/email-plugin\" />\n\nUses Handlebars (https://handlebarsjs.com/) to output MJML (https://mjml.io) which is then\ncompiled down to responsive email HTML.\n\n* Implements: <code><a href='/reference/core-plugins/email-plugin/email-generator#emailgenerator'>EmailGenerator</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "oninit",
                        "title": "onInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: InitializedEmailPluginOptions) => `}   />\n\n\n"
                    },
                    {
                        "id": "generate",
                        "title": "generate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(from: string, subject: string, template: string, templateVars: any) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class HandlebarsMjmlGenerator implements EmailGenerator {",
                    "    onInit(options: InitializedEmailPluginOptions) => ;",
                    "    generate(from: string, subject: string, template: string, templateVars: any) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "emailplugin",
        "metadata": {
            "title": "EmailPlugin",
            "keywords": [
                "emailplugin",
                "high-level description",
                "installation",
                "email templates",
                "customizing templates",
                "handlebars helpers",
                "extending the default email handlers",
                "dynamic smtp settings",
                "dev mode",
                "dev mailbox",
                "troubleshooting smtp connections",
                "init",
                "onapplicationshutdown",
                "configure"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/email-plugin/src/plugin.ts\" sourceLine=\"276\" packageName=\"@vendure/email-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "emailplugin",
                "title": "EmailPlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/plugin.ts\" sourceLine=\"276\" packageName=\"@vendure/email-plugin\" />\n\nThe EmailPlugin creates and sends transactional emails based on Vendure events. By default, it uses an [MJML](https://mjml.io/)-based\nemail generator to generate the email body and [Nodemailer](https://nodemailer.com/about/) to send the emails.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "high-level-description",
                "title": "High-level description",
                "content": "Vendure has an internal events system (see <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>) that allows plugins to subscribe to events. The EmailPlugin is configured with <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>s\nthat listen for a specific event and when it is published, the handler defines which template to use to generate the resulting email.\n\nThe plugin comes with a set of default handlers for the following events:\n- Order confirmation\n- New customer email address verification\n- Password reset request\n- Email address change request\n\nYou can also create your own handlers and register them with the plugin - see the <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a> docs for more details.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "installation",
                "title": "Installation",
                "content": "\n`yarn add @vendure/email-plugin`\n\nor\n\n`npm install @vendure/email-plugin`\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "import { defaultEmailHandlers, EmailPlugin } from '@vendure/email-plugin';",
                    "",
                    "const config: VendureConfig = {",
                    "  // Add an instance of the plugin to the plugins array",
                    "  plugins: [",
                    "    EmailPlugin.init({",
                    "      handlers: defaultEmailHandlers,",
                    "      templatePath: path.join(__dirname, 'static/email/templates'),",
                    "      transport: {",
                    "        type: 'smtp',",
                    "        host: 'smtp.example.com',",
                    "        port: 587,",
                    "        auth: {",
                    "          user: 'username',",
                    "          pass: 'password',",
                    "        }",
                    "      },",
                    "    }),",
                    "  ],",
                    "};"
                ]
            },
            {
                "id": "email-templates",
                "title": "Email templates",
                "content": "\nIn the example above, the plugin has been configured to look in `<app-root>/static/email/templates`\nfor the email template files. If you used `@vendure/create` to create your application, the templates will have\nbeen copied to that location during setup.\n\nIf you are installing the EmailPlugin separately, then you'll need to copy the templates manually from\n`node_modules/@vendure/email-plugin/templates` to a location of your choice, and then point the `templatePath` config\nproperty at that directory.\n\n* ### Dynamic Email Templates\nInstead of passing a static value to `templatePath`, use `templateLoader` to define a template path.\n",
                "subsections": [],
                "code": [
                    "  EmailPlugin.init({",
                    "   ...,",
                    "   templateLoader: new FileBasedTemplateLoader(my/order-confirmation/templates)",
                    "  })"
                ]
            },
            {
                "id": "customizing-templates",
                "title": "Customizing templates",
                "content": "\nEmails are generated from templates which use [MJML](https://mjml.io/) syntax. MJML is an open-source HTML-like markup\nlanguage which makes the task of creating responsive email markup simple. By default, the templates are installed to\n`<project root>/vendure/email/templates` and can be freely edited.\n\nDynamic data such as the recipient's name or order items are specified using [Handlebars syntax](https://handlebarsjs.com/):\n\n\n",
                "subsections": [
                    {
                        "id": "handlebars-helpers",
                        "title": "Handlebars helpers",
                        "content": "\nThe following helper functions are available for use in email templates:\n\n* `formatMoney`: Formats an amount of money (which are always stored as integers in Vendure) as a decimal, e.g. `123` => `1.23`\n* `formatDate`: Formats a Date value with the [dateformat](https://www.npmjs.com/package/dateformat) package.\n\n"
                    }
                ],
                "code": [
                    "<p>Dear {{ order.customer.firstName }} {{ order.customer.lastName }},</p>",
                    "",
                    "<p>Thank you for your order!</p>",
                    "",
                    "<mj-table cellpadding=\"6px\">",
                    "  {{#each order.lines }}",
                    "    <tr class=\"order-row\">",
                    "      <td>{{ quantity }} x {{ productVariant.name }}</td>",
                    "      <td>{{ productVariant.quantity }}</td>",
                    "      <td>{{ formatMoney totalPrice }}</td>",
                    "    </tr>",
                    "  {{/each}}",
                    "</mj-table>"
                ]
            },
            {
                "id": "extending-the-default-email-handlers",
                "title": "Extending the default email handlers",
                "content": "\nThe `defaultEmailHandlers` array defines the default handlers such as for handling new account registration, order confirmation, password reset\netc. These defaults can be extended by adding custom templates for languages other than the default, or even completely new types of emails\nwhich respond to any of the available [VendureEvents](/reference/typescript-api/events/).\n\nA good way to learn how to create your own email handlers is to take a look at the\n[source code of the default handlers](https://github.com/vendure-ecommerce/vendure/blob/master/packages/email-plugin/src/default-email-handlers.ts).\nNew handlers are defined in exactly the same way.\n\nIt is also possible to modify the default handlers:\n\n\nFor all available methods of extending a handler, see the <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a> documentation.\n\n",
                "subsections": [],
                "code": [
                    "// Rather than importing `defaultEmailHandlers`, you can",
                    "// import the handlers individually",
                    "import {",
                    "  orderConfirmationHandler,",
                    "  emailVerificationHandler,",
                    "  passwordResetHandler,",
                    "  emailAddressChangeHandler,",
                    "} from '@vendure/email-plugin';",
                    "import { CustomerService } from '@vendure/core';",
                    "",
                    "// This allows you to then customize each handler to your needs.",
                    "// For example, let's set a new subject line to the order confirmation:",
                    "const myOrderConfirmationHandler = orderConfirmationHandler",
                    "  .setSubject(`We received your order!`);",
                    "",
                    "// Another example: loading additional data and setting new",
                    "// template variables.",
                    "const myPasswordResetHandler = passwordResetHandler",
                    "  .loadData(async ({ event, injector }) => {",
                    "    const customerService = injector.get(CustomerService);",
                    "    const customer = await customerService.findOneByUserId(event.ctx, event.user.id);",
                    "    return { customer };",
                    "  })",
                    "  .setTemplateVars(event => ({",
                    "    passwordResetToken: event.user.getNativeAuthenticationMethod().passwordResetToken,",
                    "    customer: event.data.customer,",
                    "  }));",
                    "",
                    "// Then you pass the handlers to the EmailPlugin init method",
                    "// individually",
                    "EmailPlugin.init({",
                    "  handlers: [",
                    "    myOrderConfirmationHandler,",
                    "    myPasswordResetHandler,",
                    "    emailVerificationHandler,",
                    "    emailAddressChangeHandler,",
                    "  ],",
                    "  // ...",
                    "}),"
                ]
            },
            {
                "id": "dynamic-smtp-settings",
                "title": "Dynamic SMTP settings",
                "content": "\nInstead of defining static transport settings, you can also provide a function that dynamically resolves\nchannel aware transport settings.\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "import { defaultEmailHandlers, EmailPlugin } from '@vendure/email-plugin';",
                    "import { MyTransportService } from './transport.services.ts';",
                    "const config: VendureConfig = {",
                    "  plugins: [",
                    "    EmailPlugin.init({",
                    "      handlers: defaultEmailHandlers,",
                    "      templatePath: path.join(__dirname, 'static/email/templates'),",
                    "      transport: (injector, ctx) => {",
                    "        if (ctx) {",
                    "          return injector.get(MyTransportService).getSettings(ctx);",
                    "        } else {",
                    "          return {",
                    "            type: 'smtp',",
                    "            host: 'smtp.example.com',",
                    "            // ... etc.",
                    "          }",
                    "        }",
                    "      }",
                    "    }),",
                    "  ],",
                    "};"
                ]
            },
            {
                "id": "dev-mode",
                "title": "Dev mode",
                "content": "\nFor development, the `transport` option can be replaced by `devMode: true`. Doing so configures Vendure to use the\nfile transport (See <a href='/reference/core-plugins/email-plugin/transport-options#filetransportoptions'>FileTransportOptions</a>) and outputs emails as rendered HTML files in the directory specified by the\n`outputPath` property.\n\n\n",
                "subsections": [
                    {
                        "id": "dev-mailbox",
                        "title": "Dev mailbox",
                        "content": "\nIn dev mode, a webmail-like interface available at the `/mailbox` path, e.g.\nhttp://localhost:3000/mailbox. This is a simple way to view the output of all emails generated by the EmailPlugin while in dev mode.\n\n"
                    }
                ],
                "code": [
                    "EmailPlugin.init({",
                    "  devMode: true,",
                    "  route: 'mailbox',",
                    "  handlers: defaultEmailHandlers,",
                    "  templatePath: path.join(__dirname, 'vendure/email/templates'),",
                    "  outputPath: path.join(__dirname, 'test-emails'),",
                    "})"
                ]
            },
            {
                "id": "troubleshooting-smtp-connections",
                "title": "Troubleshooting SMTP Connections",
                "content": "\nIf you are having trouble sending email over and SMTP connection, set the `logging` and `debug` options to `true`. This will\nsend detailed information from the SMTP transporter to the configured logger (defaults to console). For maximum detail combine\nthis with a detail log level in the configured VendureLogger:\n\n\n* Implements: <code>OnApplicationBootstrap</code>, <code>OnApplicationShutdown</code>, <code>NestModule</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/email-plugin/email-plugin-options#emailpluginoptions'>EmailPluginOptions</a> | <a href='/reference/core-plugins/email-plugin/email-plugin-options#emailplugindevmodeoptions'>EmailPluginDevModeOptions</a>) => Type&#60;<a href='/reference/core-plugins/email-plugin/#emailplugin'>EmailPlugin</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "onapplicationshutdown",
                        "title": "onApplicationShutdown",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "configure",
                        "title": "configure",
                        "content": "\n<MemberInfo kind=\"method\" type={`(consumer: MiddlewareConsumer) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "const config: VendureConfig = {",
                    "  logger: new DefaultLogger({ level: LogLevel.Debug })",
                    "  // ...",
                    "  plugins: [",
                    "    EmailPlugin.init({",
                    "      // ...",
                    "      transport: {",
                    "        type: 'smtp',",
                    "        host: 'smtp.example.com',",
                    "        port: 587,",
                    "        auth: {",
                    "          user: 'username',",
                    "          pass: 'password',",
                    "        },",
                    "        logging: true,",
                    "        debug: true,",
                    "      },",
                    "    }),",
                    "  ],",
                    "};",
                    "class EmailPlugin implements OnApplicationBootstrap, OnApplicationShutdown, NestModule {",
                    "    init(options: EmailPluginOptions | EmailPluginDevModeOptions) => Type<EmailPlugin>;",
                    "    onApplicationShutdown() => ;",
                    "    configure(consumer: MiddlewareConsumer) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "emailpluginoptions",
        "metadata": {
            "title": "EmailPluginOptions",
            "keywords": [
                "emailpluginoptions",
                "templatepath",
                "templateloader",
                "transport",
                "handlers",
                "globaltemplatevars",
                "emailsender",
                "emailgenerator",
                "emailplugindevmodeoptions",
                "devmode",
                "outputpath",
                "route"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"40\" packageName=\"@vendure/email-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "emailpluginoptions",
                "title": "EmailPluginOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"40\" packageName=\"@vendure/email-plugin\" />\n\nConfiguration for the EmailPlugin.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "templatepath",
                        "title": "templatePath",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe path to the location of the email templates. In a default Vendure installation,\nthe templates are installed to `<project root>/vendure/email/templates`.\n"
                    },
                    {
                        "id": "templateloader",
                        "title": "templateLoader",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/email-plugin/template-loader#templateloader'>TemplateLoader</a>`}  since=\"2.0.0\"  />\n\nAn optional TemplateLoader which can be used to load templates from a custom location or async service.\nThe default uses the FileBasedTemplateLoader which loads templates from `<project root>/vendure/email/templates`\n"
                    },
                    {
                        "id": "transport",
                        "title": "transport",
                        "content": "\n<MemberInfo kind=\"property\" type={`| <a href='/reference/core-plugins/email-plugin/transport-options#emailtransportoptions'>EmailTransportOptions</a>         | ((               injector?: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>,               ctx?: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>,           ) =&#62; <a href='/reference/core-plugins/email-plugin/transport-options#emailtransportoptions'>EmailTransportOptions</a> | Promise&#60;<a href='/reference/core-plugins/email-plugin/transport-options#emailtransportoptions'>EmailTransportOptions</a>&#62;)`}   />\n\nConfigures how the emails are sent.\n"
                    },
                    {
                        "id": "handlers",
                        "title": "handlers",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>&#60;string, any&#62;&#62;`}   />\n\nAn array of <a href='/reference/core-plugins/email-plugin/email-event-handler#emaileventhandler'>EmailEventHandler</a>s which define which Vendure events will trigger\nemails, and how those emails are generated.\n"
                    },
                    {
                        "id": "globaltemplatevars",
                        "title": "globalTemplateVars",
                        "content": "\n<MemberInfo kind=\"property\" type={`{ [key: string]: any }`}   />\n\nAn object containing variables which are made available to all templates. For example,\nthe storefront URL could be defined here and then used in the \"email address verification\"\nemail.\n"
                    },
                    {
                        "id": "emailsender",
                        "title": "emailSender",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/email-plugin/email-sender#emailsender'>EmailSender</a>`} default=\"<a href='/reference/core-plugins/email-plugin/email-sender#nodemaileremailsender'>NodemailerEmailSender</a>\"   />\n\nAn optional allowed EmailSender, used to allow custom implementations of the send functionality\nwhile still utilizing the existing emailPlugin functionality.\n"
                    },
                    {
                        "id": "emailgenerator",
                        "title": "emailGenerator",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/email-plugin/email-generator#emailgenerator'>EmailGenerator</a>`} default=\"<a href='/reference/core-plugins/email-plugin/email-generator#handlebarsmjmlgenerator'>HandlebarsMjmlGenerator</a>\"   />\n\nAn optional allowed EmailGenerator, used to allow custom email generation functionality to\nbetter match with custom email sending functionality.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface EmailPluginOptions {",
                    "    templatePath?: string;",
                    "    templateLoader?: TemplateLoader;",
                    "    transport:",
                    "        | EmailTransportOptions",
                    "        | ((",
                    "              injector?: Injector,",
                    "              ctx?: RequestContext,",
                    "          ) => EmailTransportOptions | Promise<EmailTransportOptions>);",
                    "    handlers: Array<EmailEventHandler<string, any>>;",
                    "    globalTemplateVars?: { [key: string]: any };",
                    "    emailSender?: EmailSender;",
                    "    emailGenerator?: EmailGenerator;",
                    "}"
                ]
            },
            {
                "id": "emailplugindevmodeoptions",
                "title": "EmailPluginDevModeOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"110\" packageName=\"@vendure/email-plugin\" />\n\nConfiguration for running the EmailPlugin in development mode.\n\n* Extends: <code>Omit&#60;<a href='/reference/core-plugins/email-plugin/email-plugin-options#emailpluginoptions'>EmailPluginOptions</a>, 'transport'&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "devmode",
                        "title": "devMode",
                        "content": "\n<MemberInfo kind=\"property\" type={`true`}   />\n\n\n"
                    },
                    {
                        "id": "outputpath",
                        "title": "outputPath",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe path to which html email files will be saved rather than being sent.\n"
                    },
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe route to the dev mailbox server.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface EmailPluginDevModeOptions extends Omit<EmailPluginOptions, 'transport'> {",
                    "    devMode: true;",
                    "    outputPath: string;",
                    "    route: string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "emailsender",
        "metadata": {
            "title": "EmailSender",
            "keywords": [
                "emailsender",
                "send",
                "nodemaileremailsender"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/email-plugin/src/email-sender.ts\" sourceLine=\"45\" packageName=\"@vendure/email-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "emailsender",
                "title": "EmailSender",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/email-sender.ts\" sourceLine=\"45\" packageName=\"@vendure/email-plugin\" />\n\nAn EmailSender is responsible for sending the email, e.g. via an SMTP connection\nor using some other mail-sending API. By default, the EmailPlugin uses the\n<a href='/reference/core-plugins/email-plugin/email-sender#nodemaileremailsender'>NodemailerEmailSender</a>, but it is also possible to supply a custom implementation:\n\n*Example*\n\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "send",
                        "title": "send",
                        "content": "\n<MemberInfo kind=\"property\" type={`(email: <a href='/reference/core-plugins/email-plugin/email-plugin-types#emaildetails'>EmailDetails</a>, options: <a href='/reference/core-plugins/email-plugin/transport-options#emailtransportoptions'>EmailTransportOptions</a>) =&#62; void | Promise&#60;void&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "const sgMail = require('@sendgrid/mail');",
                    "",
                    "sgMail.setApiKey(process.env.SENDGRID_API_KEY);",
                    "",
                    "class SendgridEmailSender implements EmailSender {",
                    "  async send(email: EmailDetails) {",
                    "    await sgMail.send({",
                    "      to: email.recipient,",
                    "      from: email.from,",
                    "      subject: email.subject,",
                    "      html: email.body,",
                    "    });",
                    "  }",
                    "}",
                    "",
                    "const config: VendureConfig = {",
                    "  logger: new DefaultLogger({ level: LogLevel.Debug })",
                    "  // ...",
                    "  plugins: [",
                    "    EmailPlugin.init({",
                    "       // ... template, handlers config omitted",
                    "      transport: { type: 'none' },",
                    "       emailSender: new SendgridEmailSender(),",
                    "    }),",
                    "  ],",
                    "};",
                    "interface EmailSender extends InjectableStrategy {",
                    "    send: (email: EmailDetails, options: EmailTransportOptions) => void | Promise<void>;",
                    "}"
                ]
            },
            {
                "id": "nodemaileremailsender",
                "title": "NodemailerEmailSender",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/nodemailer-email-sender.ts\" sourceLine=\"38\" packageName=\"@vendure/email-plugin\" />\n\nUses the configured transport to send the generated email.\n\n* Implements: <code><a href='/reference/core-plugins/email-plugin/email-sender#emailsender'>EmailSender</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "send",
                        "title": "send",
                        "content": "\n<MemberInfo kind=\"method\" type={`(email: <a href='/reference/core-plugins/email-plugin/email-plugin-types#emaildetails'>EmailDetails</a>, options: <a href='/reference/core-plugins/email-plugin/transport-options#emailtransportoptions'>EmailTransportOptions</a>) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class NodemailerEmailSender implements EmailSender {",
                    "    send(email: EmailDetails, options: EmailTransportOptions) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "entities",
        "metadata": {
            "title": "Entities",
            "keywords": [
                "entities"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "entityhydrator",
        "metadata": {
            "title": "EntityHydrator",
            "keywords": [
                "entityhydrator",
                "constructor",
                "hydrate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/entity-hydrator/entity-hydrator.service.ts\" sourceLine=\"75\" packageName=\"@vendure/core\" since=\"1.3.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "entityhydrator",
                "title": "EntityHydrator",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/entity-hydrator/entity-hydrator.service.ts\" sourceLine=\"75\" packageName=\"@vendure/core\" since=\"1.3.0\" />\n\nThis is a helper class which is used to \"hydrate\" entity instances, which means to populate them\nwith the specified relations. This is useful when writing plugin code which receives an entity,\nand you need to ensure that one or more relations are present.\n\n*Example*\n\n\nIn this above example, the `product` instance will now have the `facetValues` relation\navailable, and those FacetValues will have their `facet` relations joined too.\n\nThis `hydrate` method will _also_ automatically take care or translating any\ntranslatable entities (e.g. Product, Collection, Facet), and if the `applyProductVariantPrices`\noptions is used (see <a href='/reference/typescript-api/data-access/hydrate-options#hydrateoptions'>HydrateOptions</a>), any related ProductVariant will have the correct\nChannel-specific prices applied to them.\n\nCustom field relations may also be hydrated:\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, productPriceApplicator: <a href='/reference/typescript-api/service-helpers/product-price-applicator#productpriceapplicator'>ProductPriceApplicator</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>) => EntityHydrator`}   />\n\n\n"
                    },
                    {
                        "id": "hydrate",
                        "title": "hydrate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, target: Entity, options: <a href='/reference/typescript-api/data-access/hydrate-options#hydrateoptions'>HydrateOptions</a>&#60;Entity&#62;) => Promise&#60;Entity&#62;`}  since=\"1.3.0\"  />\n\nHydrates (joins) the specified relations to the target entity instance. This method\nmutates the `target` entity.\n\n*Example*\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { Injectable } from '@nestjs/common';",
                    "import { ID, RequestContext, EntityHydrator, ProductVariantService } from '@vendure/core';",
                    "",
                    "@Injectable()",
                    "export class MyService {",
                    "",
                    "  constructor(",
                    "     // highlight-next-line",
                    "     private entityHydrator: EntityHydrator,",
                    "     private productVariantService: ProductVariantService,",
                    "  ) {}",
                    "",
                    "  myMethod(ctx: RequestContext, variantId: ID) {",
                    "    const product = await this.productVariantService",
                    "      .getProductForVariant(ctx, variantId);",
                    "",
                    "    // at this stage, we don't know which of the Product relations",
                    "    // will be joined at runtime.",
                    "",
                    "    // highlight-start",
                    "    await this.entityHydrator",
                    "      .hydrate(ctx, product, { relations: ['facetValues.facet' ]});",
                    "",
                    "    // You can be sure now that the `facetValues` & `facetValues.facet` relations are populated",
                    "    // highlight-end",
                    "  }",
                    "}",
                    "const customer = await this.customerService",
                    "  .findOne(ctx, id);",
                    "",
                    "await this.entityHydrator",
                    "  .hydrate(ctx, customer, { relations: ['customFields.avatar' ]});",
                    "class EntityHydrator {",
                    "    constructor(connection: TransactionalConnection, productPriceApplicator: ProductPriceApplicator, translator: TranslatorService)",
                    "    hydrate(ctx: RequestContext, target: Entity, options: HydrateOptions<Entity>) => Promise<Entity>;",
                    "}",
                    "await this.entityHydrator.hydrate(ctx, product, {",
                    "  relations: [",
                    "    'variants.stockMovements'",
                    "    'optionGroups.options',",
                    "    'featuredAsset',",
                    "  ],",
                    "  applyProductVariantPrices: true,",
                    "});"
                ]
            }
        ]
    },
    {
        "id": "entityid-decorator",
        "metadata": {
            "title": "EntityId Decorator",
            "keywords": [
                "entityid",
                "options"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/entity-id.decorator.ts\" sourceLine=\"41\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "entityid",
                "title": "EntityId",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/entity-id.decorator.ts\" sourceLine=\"41\" packageName=\"@vendure/core\" />\n\nDecorates a property which points to another entity by ID. This custom decorator is needed\nbecause we do not know the data type of the ID column until runtime, when we have access\nto the configured EntityIdStrategy.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`IdColumnOptions`} />\n\n\n"
                    }
                ],
                "code": [
                    "function EntityId(options?: IdColumnOptions): void"
                ]
            }
        ]
    },
    {
        "id": "entityidstrategy",
        "metadata": {
            "title": "EntityIdStrategy",
            "keywords": [
                "autoincrementidstrategy",
                "primarykeytype",
                "decodeid",
                "encodeid",
                "entityidstrategy",
                "uuididstrategy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/entity/auto-increment-id-strategy.ts\" sourceLine=\"11\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "autoincrementidstrategy",
                "title": "AutoIncrementIdStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/entity/auto-increment-id-strategy.ts\" sourceLine=\"11\" packageName=\"@vendure/core\" />\n\nAn id strategy which uses auto-increment integers as primary keys\nfor all entities. This is the default strategy used by Vendure.\n\n* Implements: <code><a href='/reference/typescript-api/configuration/entity-id-strategy#entityidstrategy'>EntityIdStrategy</a>&#60;'increment'&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "primarykeytype",
                        "title": "primaryKeyType",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "decodeid",
                        "title": "decodeId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(id: string) => number`}   />\n\n\n"
                    },
                    {
                        "id": "encodeid",
                        "title": "encodeId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(primaryKey: number) => string`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class AutoIncrementIdStrategy implements EntityIdStrategy<'increment'> {",
                    "    readonly primaryKeyType = 'increment';",
                    "    decodeId(id: string) => number;",
                    "    encodeId(primaryKey: number) => string;",
                    "}"
                ]
            },
            {
                "id": "entityidstrategy",
                "title": "EntityIdStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/entity/entity-id-strategy.ts\" sourceLine=\"32\" packageName=\"@vendure/core\" />\n\nThe EntityIdStrategy determines how entity IDs are generated and stored in the\ndatabase, as well as how they are transformed when being passed from the API to the\nservice layer and vice versa.\n\nVendure ships with two strategies: <a href='/reference/typescript-api/configuration/entity-id-strategy#autoincrementidstrategy'>AutoIncrementIdStrategy</a> and <a href='/reference/typescript-api/configuration/entity-id-strategy#uuididstrategy'>UuidIdStrategy</a>,\nbut custom strategies can be used, e.g. to apply some custom encoding to the ID before exposing\nit in the GraphQL API.\n\n:::info\n\nThis is configured via the `entityOptions.entityIdStrategy` property of\nyour VendureConfig.\n\n:::\n\n:::caution\nNote: changing from an integer-based strategy to a uuid-based strategy\non an existing Vendure database will lead to problems with broken foreign-key\nreferences. To change primary key types like this, you'll need to start with\na fresh database.\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "primarykeytype",
                        "title": "primaryKeyType",
                        "content": "\n<MemberInfo kind=\"property\" type={`T`}   />\n\nDefines how the primary key will be stored in the database - either\n`'increment'` for auto-increment integer IDs, or `'uuid'` for a unique\nstring ID.\n"
                    },
                    {
                        "id": "encodeid",
                        "title": "encodeId",
                        "content": "\n<MemberInfo kind=\"property\" type={`(primaryKey: PrimaryKeyType&#60;T&#62;) =&#62; string`}   />\n\nAllows the raw ID from the database to be transformed in some way before exposing\nit in the GraphQL API.\n\nFor example, you may need to use auto-increment integer IDs due to some business\nconstraint, but you may not want to expose this data publicly in your API. In this\ncase, you can use the encode/decode methods to obfuscate the ID with some kind of\nencoding scheme, such as base64 (or something more sophisticated).\n"
                    },
                    {
                        "id": "decodeid",
                        "title": "decodeId",
                        "content": "\n<MemberInfo kind=\"property\" type={`(id: string) =&#62; PrimaryKeyType&#60;T&#62;`}   />\n\nReverses the transformation performed by the `encodeId` method in order to get\nback to the raw ID value.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface EntityIdStrategy<T extends 'increment' | 'uuid'> extends InjectableStrategy {",
                    "    readonly primaryKeyType: T;",
                    "    encodeId: (primaryKey: PrimaryKeyType<T>) => string;",
                    "    decodeId: (id: string) => PrimaryKeyType<T>;",
                    "}"
                ]
            },
            {
                "id": "uuididstrategy",
                "title": "UuidIdStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/entity/uuid-id-strategy.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />\n\nAn id strategy which uses string uuids as primary keys\nfor all entities. This strategy can be configured with the\n`entityIdStrategy` property of the `entityOptions` property\nof <a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a>.\n\n*Example*\n\n\n* Implements: <code><a href='/reference/typescript-api/configuration/entity-id-strategy#entityidstrategy'>EntityIdStrategy</a>&#60;'uuid'&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "primarykeytype",
                        "title": "primaryKeyType",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "decodeid",
                        "title": "decodeId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(id: string) => string`}   />\n\n\n"
                    },
                    {
                        "id": "encodeid",
                        "title": "encodeId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(primaryKey: string) => string`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { UuidIdStrategy, VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "  entityOptions: {",
                    "    entityIdStrategy: new UuidIdStrategy(),",
                    "    // ...",
                    "  }",
                    "}",
                    "class UuidIdStrategy implements EntityIdStrategy<'uuid'> {",
                    "    readonly primaryKeyType = 'uuid';",
                    "    decodeId(id: string) => string;",
                    "    encodeId(primaryKey: string) => string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "entityoptions",
        "metadata": {
            "title": "EntityOptions",
            "keywords": [
                "entityoptions",
                "entityidstrategy",
                "moneystrategy",
                "channelcachettl",
                "zonecachettl",
                "taxratecachettl",
                "metadatamodifiers",
                "entitymetadatamodifier"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"914\" packageName=\"@vendure/core\" since=\"1.3.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "entityoptions",
                "title": "EntityOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"914\" packageName=\"@vendure/core\" since=\"1.3.0\" />\n\nOptions relating to the internal handling of entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "entityidstrategy",
                        "title": "entityIdStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configuration/entity-id-strategy#entityidstrategy'>EntityIdStrategy</a>&#60;any&#62;`} default=\"<a href='/reference/typescript-api/configuration/entity-id-strategy#autoincrementidstrategy'>AutoIncrementIdStrategy</a>\"  since=\"1.3.0\"  />\n\nDefines the strategy used for both storing the primary keys of entities\nin the database, and the encoding & decoding of those ids when exposing\nentities via the API. The default uses a simple auto-increment integer\nstrategy.\n\n:::caution\nNote: changing from an integer-based strategy to a uuid-based strategy\non an existing Vendure database will lead to problems with broken foreign-key\nreferences. To change primary key types like this, you'll need to start with\na fresh database.\n:::\n"
                    },
                    {
                        "id": "moneystrategy",
                        "title": "moneyStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/money/money-strategy#moneystrategy'>MoneyStrategy</a>`} default=\"<a href='/reference/typescript-api/money/default-money-strategy#defaultmoneystrategy'>DefaultMoneyStrategy</a>\"  since=\"2.0.0\"  />\n\nDefines the strategy used to store and round monetary values.\n"
                    },
                    {
                        "id": "channelcachettl",
                        "title": "channelCacheTtl",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"30000\"  since=\"1.3.0\"  />\n\nChannels get cached in-memory as they are accessed very frequently. This\nsetting determines how long the cache lives (in ms) until it is considered stale and\nrefreshed. For multi-instance deployments (e.g. serverless, load-balanced), a\nsmaller value here will prevent data inconsistencies between instances.\n"
                    },
                    {
                        "id": "zonecachettl",
                        "title": "zoneCacheTtl",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"30000\"  since=\"1.3.0\"  />\n\nZones get cached in-memory as they are accessed very frequently. This\nsetting determines how long the cache lives (in ms) until it is considered stale and\nrefreshed. For multi-instance deployments (e.g. serverless, load-balanced), a\nsmaller value here will prevent data inconsistencies between instances.\n"
                    },
                    {
                        "id": "taxratecachettl",
                        "title": "taxRateCacheTtl",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"30000\"  since=\"1.9.0\"  />\n\nTaxRates get cached in-memory as they are accessed very frequently. This\nsetting determines how long the cache lives (in ms) until it is considered stale and\nrefreshed. For multi-instance deployments (e.g. serverless, load-balanced), a\nsmaller value here will prevent data inconsistencies between instances.\n"
                    },
                    {
                        "id": "metadatamodifiers",
                        "title": "metadataModifiers",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configuration/entity-options#entitymetadatamodifier'>EntityMetadataModifier</a>[]`} default=\"[]\"  since=\"1.6.0\"  />\n\nAllows the metadata of the built-in TypeORM entities to be manipulated. This allows you\nto do things like altering data types, adding indices etc. This is an advanced feature\nwhich should be used with some caution as it will result in DB schema changes. For examples\nsee <a href='/reference/typescript-api/configuration/entity-options#entitymetadatamodifier'>EntityMetadataModifier</a>.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface EntityOptions {",
                    "    entityIdStrategy?: EntityIdStrategy<any>;",
                    "    moneyStrategy?: MoneyStrategy;",
                    "    channelCacheTtl?: number;",
                    "    zoneCacheTtl?: number;",
                    "    taxRateCacheTtl?: number;",
                    "    metadataModifiers?: EntityMetadataModifier[];",
                    "}"
                ]
            },
            {
                "id": "entitymetadatamodifier",
                "title": "EntityMetadataModifier",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/entity-metadata/entity-metadata-modifier.ts\" sourceLine=\"56\" packageName=\"@vendure/core\" since=\"1.6.0\" />\n\nA function which allows TypeORM entity metadata to be manipulated prior to the DB schema being generated\nduring bootstrap.\n\n:::caution\nCertain DB schema modifications will result in auto-generated migrations which will lead to data loss. For instance,\nchanging the data type of a column will drop the column & data and then re-create it. To avoid loss of important data,\nalways check and modify your migration scripts as needed.\n:::\n\n*Example*\n\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    "import { Index } from 'typeorm';",
                    "import { EntityMetadataModifier, ProductVariant } from '@vendure/core';",
                    "",
                    "// Adds a unique index to the ProductVariant.sku column",
                    "export const addSkuUniqueIndex: EntityMetadataModifier = metadata => {",
                    "  const instance = new ProductVariant();",
                    "  Index({ unique: true })(instance, 'sku');",
                    "};",
                    "import { Column } from 'typeorm';",
                    "import { EntityMetadataModifier, ProductTranslation } from '@vendure/core';",
                    "",
                    "// Use the \"mediumtext\" datatype for the Product's description rather than",
                    "// the default \"text\" type.",
                    "export const makeProductDescriptionMediumText: EntityMetadataModifier = metadata => {",
                    "    const descriptionColumnIndex = metadata.columns.findIndex(",
                    "        col => col.propertyName === 'description' && col.target === ProductTranslation,",
                    "    );",
                    "    if (-1 < descriptionColumnIndex) {",
                    "        // First we need to remove the existing column definition",
                    "        // from the metadata.",
                    "        metadata.columns.splice(descriptionColumnIndex, 1);",
                    "        // Then we add a new column definition with our custom",
                    "        // data type \"mediumtext\"",
                    "        // DANGER: this particular modification will generate a DB migration",
                    "        // which will result in data loss of existing descriptions. Make sure",
                    "        // to manually check & modify your migration scripts.",
                    "        const instance = new ProductTranslation();",
                    "        Column({ type: 'mediumtext' })(instance, 'description');",
                    "    }",
                    "};",
                    "type EntityMetadataModifier = (metadata: MetadataArgsStorage) => void | Promise<void>"
                ]
            }
        ]
    },
    {
        "id": "entityrelationpaths",
        "metadata": {
            "title": "EntityRelationPaths",
            "keywords": [
                "entityrelationpaths"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/types/entity-relation-paths.ts\" sourceLine=\"23\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "entityrelationpaths",
                "title": "EntityRelationPaths",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/types/entity-relation-paths.ts\" sourceLine=\"23\" packageName=\"@vendure/core\" />\n\nThis type allows type-safe access to entity relations using strings with dot notation.\nIt works to 2 levels deep.\n\n*Example*\n\nIn the above example, the type `T1` will be a string union of all relations of the\n`Product` entity:\n\n * `'featuredAsset'`\n * `'variants'`\n * `'variants.options'`\n * `'variants.featuredAsset'`\n * etc.\n\n\n",
                "subsections": [],
                "code": [
                    "type T1 = EntityRelationPaths<Product>;",
                    "type EntityRelationPaths<T extends VendureEntity> = | `customFields.${string}`",
                    "    | PathsToStringProps1<T>",
                    "    | Join<PathsToStringProps2<T>, '.'>",
                    "    | TripleDotPath"
                ]
            }
        ]
    },
    {
        "id": "enums",
        "metadata": {
            "title": "Enums",
            "keywords": [
                "adjustmenttype",
                "assettype",
                "currencycode",
                "deletionresult",
                "errorcode",
                "globalflag",
                "historyentrytype",
                "languagecode",
                "logicaloperator",
                "ordertype",
                "permission",
                "sortorder"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <div class=\"graphql-code-block\">"
        },
        "content": "",
        "sections": [
            {
                "id": "adjustmenttype",
                "title": "AdjustmentType",
                "content": "\n<div class=\"graphql-code-block\">\n\n<div class=\"graphql-code-line top-level\">enum <span class=\"graphql-code-identifier\">AdjustmentType</span>\n &#123;</div>\n<div class=\"graphql-code-line \">PROMOTION</div>\n<div class=\"graphql-code-line \">DISTRIBUTED_ORDER_PROMOTION</div>\n<div class=\"graphql-code-line \">OTHER</div>\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "assettype",
                "title": "AssetType",
                "content": "\n<div class=\"graphql-code-block\">\n\n<div class=\"graphql-code-line top-level\">enum <span class=\"graphql-code-identifier\">AssetType</span>\n &#123;</div>\n<div class=\"graphql-code-line \">IMAGE</div>\n<div class=\"graphql-code-line \">VIDEO</div>\n<div class=\"graphql-code-line \">BINARY</div>\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "currencycode",
                "title": "CurrencyCode",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">ISO 4217 currency code</div>\n\n<div class=\"graphql-code-line comment\"></div>\n\n<div class=\"graphql-code-line comment\"></div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n\n<div class=\"graphql-code-line top-level\">enum <span class=\"graphql-code-identifier\">CurrencyCode</span>\n &#123;</div>\n<div class=\"graphql-code-line comment\">\"\"\"United Arab Emirates dirham\"\"\"</div>\n<div class=\"graphql-code-line \">AED</div>\n<div class=\"graphql-code-line comment\">\"\"\"Afghan afghani\"\"\"</div>\n<div class=\"graphql-code-line \">AFN</div>\n<div class=\"graphql-code-line comment\">\"\"\"Albanian lek\"\"\"</div>\n<div class=\"graphql-code-line \">ALL</div>\n<div class=\"graphql-code-line comment\">\"\"\"Armenian dram\"\"\"</div>\n<div class=\"graphql-code-line \">AMD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Netherlands Antillean guilder\"\"\"</div>\n<div class=\"graphql-code-line \">ANG</div>\n<div class=\"graphql-code-line comment\">\"\"\"Angolan kwanza\"\"\"</div>\n<div class=\"graphql-code-line \">AOA</div>\n<div class=\"graphql-code-line comment\">\"\"\"Argentine peso\"\"\"</div>\n<div class=\"graphql-code-line \">ARS</div>\n<div class=\"graphql-code-line comment\">\"\"\"Australian dollar\"\"\"</div>\n<div class=\"graphql-code-line \">AUD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Aruban florin\"\"\"</div>\n<div class=\"graphql-code-line \">AWG</div>\n<div class=\"graphql-code-line comment\">\"\"\"Azerbaijani manat\"\"\"</div>\n<div class=\"graphql-code-line \">AZN</div>\n<div class=\"graphql-code-line comment\">\"\"\"Bosnia and Herzegovina convertible mark\"\"\"</div>\n<div class=\"graphql-code-line \">BAM</div>\n<div class=\"graphql-code-line comment\">\"\"\"Barbados dollar\"\"\"</div>\n<div class=\"graphql-code-line \">BBD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Bangladeshi taka\"\"\"</div>\n<div class=\"graphql-code-line \">BDT</div>\n<div class=\"graphql-code-line comment\">\"\"\"Bulgarian lev\"\"\"</div>\n<div class=\"graphql-code-line \">BGN</div>\n<div class=\"graphql-code-line comment\">\"\"\"Bahraini dinar\"\"\"</div>\n<div class=\"graphql-code-line \">BHD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Burundian franc\"\"\"</div>\n<div class=\"graphql-code-line \">BIF</div>\n<div class=\"graphql-code-line comment\">\"\"\"Bermudian dollar\"\"\"</div>\n<div class=\"graphql-code-line \">BMD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Brunei dollar\"\"\"</div>\n<div class=\"graphql-code-line \">BND</div>\n<div class=\"graphql-code-line comment\">\"\"\"Boliviano\"\"\"</div>\n<div class=\"graphql-code-line \">BOB</div>\n<div class=\"graphql-code-line comment\">\"\"\"Brazilian real\"\"\"</div>\n<div class=\"graphql-code-line \">BRL</div>\n<div class=\"graphql-code-line comment\">\"\"\"Bahamian dollar\"\"\"</div>\n<div class=\"graphql-code-line \">BSD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Bhutanese ngultrum\"\"\"</div>\n<div class=\"graphql-code-line \">BTN</div>\n<div class=\"graphql-code-line comment\">\"\"\"Botswana pula\"\"\"</div>\n<div class=\"graphql-code-line \">BWP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Belarusian ruble\"\"\"</div>\n<div class=\"graphql-code-line \">BYN</div>\n<div class=\"graphql-code-line comment\">\"\"\"Belize dollar\"\"\"</div>\n<div class=\"graphql-code-line \">BZD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Canadian dollar\"\"\"</div>\n<div class=\"graphql-code-line \">CAD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Congolese franc\"\"\"</div>\n<div class=\"graphql-code-line \">CDF</div>\n<div class=\"graphql-code-line comment\">\"\"\"Swiss franc\"\"\"</div>\n<div class=\"graphql-code-line \">CHF</div>\n<div class=\"graphql-code-line comment\">\"\"\"Chilean peso\"\"\"</div>\n<div class=\"graphql-code-line \">CLP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Renminbi (Chinese) yuan\"\"\"</div>\n<div class=\"graphql-code-line \">CNY</div>\n<div class=\"graphql-code-line comment\">\"\"\"Colombian peso\"\"\"</div>\n<div class=\"graphql-code-line \">COP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Costa Rican colon\"\"\"</div>\n<div class=\"graphql-code-line \">CRC</div>\n<div class=\"graphql-code-line comment\">\"\"\"Cuban convertible peso\"\"\"</div>\n<div class=\"graphql-code-line \">CUC</div>\n<div class=\"graphql-code-line comment\">\"\"\"Cuban peso\"\"\"</div>\n<div class=\"graphql-code-line \">CUP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Cape Verde escudo\"\"\"</div>\n<div class=\"graphql-code-line \">CVE</div>\n<div class=\"graphql-code-line comment\">\"\"\"Czech koruna\"\"\"</div>\n<div class=\"graphql-code-line \">CZK</div>\n<div class=\"graphql-code-line comment\">\"\"\"Djiboutian franc\"\"\"</div>\n<div class=\"graphql-code-line \">DJF</div>\n<div class=\"graphql-code-line comment\">\"\"\"Danish krone\"\"\"</div>\n<div class=\"graphql-code-line \">DKK</div>\n<div class=\"graphql-code-line comment\">\"\"\"Dominican peso\"\"\"</div>\n<div class=\"graphql-code-line \">DOP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Algerian dinar\"\"\"</div>\n<div class=\"graphql-code-line \">DZD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Egyptian pound\"\"\"</div>\n<div class=\"graphql-code-line \">EGP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Eritrean nakfa\"\"\"</div>\n<div class=\"graphql-code-line \">ERN</div>\n<div class=\"graphql-code-line comment\">\"\"\"Ethiopian birr\"\"\"</div>\n<div class=\"graphql-code-line \">ETB</div>\n<div class=\"graphql-code-line comment\">\"\"\"Euro\"\"\"</div>\n<div class=\"graphql-code-line \">EUR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Fiji dollar\"\"\"</div>\n<div class=\"graphql-code-line \">FJD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Falkland Islands pound\"\"\"</div>\n<div class=\"graphql-code-line \">FKP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Pound sterling\"\"\"</div>\n<div class=\"graphql-code-line \">GBP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Georgian lari\"\"\"</div>\n<div class=\"graphql-code-line \">GEL</div>\n<div class=\"graphql-code-line comment\">\"\"\"Ghanaian cedi\"\"\"</div>\n<div class=\"graphql-code-line \">GHS</div>\n<div class=\"graphql-code-line comment\">\"\"\"Gibraltar pound\"\"\"</div>\n<div class=\"graphql-code-line \">GIP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Gambian dalasi\"\"\"</div>\n<div class=\"graphql-code-line \">GMD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Guinean franc\"\"\"</div>\n<div class=\"graphql-code-line \">GNF</div>\n<div class=\"graphql-code-line comment\">\"\"\"Guatemalan quetzal\"\"\"</div>\n<div class=\"graphql-code-line \">GTQ</div>\n<div class=\"graphql-code-line comment\">\"\"\"Guyanese dollar\"\"\"</div>\n<div class=\"graphql-code-line \">GYD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Hong Kong dollar\"\"\"</div>\n<div class=\"graphql-code-line \">HKD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Honduran lempira\"\"\"</div>\n<div class=\"graphql-code-line \">HNL</div>\n<div class=\"graphql-code-line comment\">\"\"\"Croatian kuna\"\"\"</div>\n<div class=\"graphql-code-line \">HRK</div>\n<div class=\"graphql-code-line comment\">\"\"\"Haitian gourde\"\"\"</div>\n<div class=\"graphql-code-line \">HTG</div>\n<div class=\"graphql-code-line comment\">\"\"\"Hungarian forint\"\"\"</div>\n<div class=\"graphql-code-line \">HUF</div>\n<div class=\"graphql-code-line comment\">\"\"\"Indonesian rupiah\"\"\"</div>\n<div class=\"graphql-code-line \">IDR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Israeli new shekel\"\"\"</div>\n<div class=\"graphql-code-line \">ILS</div>\n<div class=\"graphql-code-line comment\">\"\"\"Indian rupee\"\"\"</div>\n<div class=\"graphql-code-line \">INR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Iraqi dinar\"\"\"</div>\n<div class=\"graphql-code-line \">IQD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Iranian rial\"\"\"</div>\n<div class=\"graphql-code-line \">IRR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Icelandic króna\"\"\"</div>\n<div class=\"graphql-code-line \">ISK</div>\n<div class=\"graphql-code-line comment\">\"\"\"Jamaican dollar\"\"\"</div>\n<div class=\"graphql-code-line \">JMD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Jordanian dinar\"\"\"</div>\n<div class=\"graphql-code-line \">JOD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Japanese yen\"\"\"</div>\n<div class=\"graphql-code-line \">JPY</div>\n<div class=\"graphql-code-line comment\">\"\"\"Kenyan shilling\"\"\"</div>\n<div class=\"graphql-code-line \">KES</div>\n<div class=\"graphql-code-line comment\">\"\"\"Kyrgyzstani som\"\"\"</div>\n<div class=\"graphql-code-line \">KGS</div>\n<div class=\"graphql-code-line comment\">\"\"\"Cambodian riel\"\"\"</div>\n<div class=\"graphql-code-line \">KHR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Comoro franc\"\"\"</div>\n<div class=\"graphql-code-line \">KMF</div>\n<div class=\"graphql-code-line comment\">\"\"\"North Korean won\"\"\"</div>\n<div class=\"graphql-code-line \">KPW</div>\n<div class=\"graphql-code-line comment\">\"\"\"South Korean won\"\"\"</div>\n<div class=\"graphql-code-line \">KRW</div>\n<div class=\"graphql-code-line comment\">\"\"\"Kuwaiti dinar\"\"\"</div>\n<div class=\"graphql-code-line \">KWD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Cayman Islands dollar\"\"\"</div>\n<div class=\"graphql-code-line \">KYD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Kazakhstani tenge\"\"\"</div>\n<div class=\"graphql-code-line \">KZT</div>\n<div class=\"graphql-code-line comment\">\"\"\"Lao kip\"\"\"</div>\n<div class=\"graphql-code-line \">LAK</div>\n<div class=\"graphql-code-line comment\">\"\"\"Lebanese pound\"\"\"</div>\n<div class=\"graphql-code-line \">LBP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Sri Lankan rupee\"\"\"</div>\n<div class=\"graphql-code-line \">LKR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Liberian dollar\"\"\"</div>\n<div class=\"graphql-code-line \">LRD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Lesotho loti\"\"\"</div>\n<div class=\"graphql-code-line \">LSL</div>\n<div class=\"graphql-code-line comment\">\"\"\"Libyan dinar\"\"\"</div>\n<div class=\"graphql-code-line \">LYD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Moroccan dirham\"\"\"</div>\n<div class=\"graphql-code-line \">MAD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Moldovan leu\"\"\"</div>\n<div class=\"graphql-code-line \">MDL</div>\n<div class=\"graphql-code-line comment\">\"\"\"Malagasy ariary\"\"\"</div>\n<div class=\"graphql-code-line \">MGA</div>\n<div class=\"graphql-code-line comment\">\"\"\"Macedonian denar\"\"\"</div>\n<div class=\"graphql-code-line \">MKD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Myanmar kyat\"\"\"</div>\n<div class=\"graphql-code-line \">MMK</div>\n<div class=\"graphql-code-line comment\">\"\"\"Mongolian tögrög\"\"\"</div>\n<div class=\"graphql-code-line \">MNT</div>\n<div class=\"graphql-code-line comment\">\"\"\"Macanese pataca\"\"\"</div>\n<div class=\"graphql-code-line \">MOP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Mauritanian ouguiya\"\"\"</div>\n<div class=\"graphql-code-line \">MRU</div>\n<div class=\"graphql-code-line comment\">\"\"\"Mauritian rupee\"\"\"</div>\n<div class=\"graphql-code-line \">MUR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Maldivian rufiyaa\"\"\"</div>\n<div class=\"graphql-code-line \">MVR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Malawian kwacha\"\"\"</div>\n<div class=\"graphql-code-line \">MWK</div>\n<div class=\"graphql-code-line comment\">\"\"\"Mexican peso\"\"\"</div>\n<div class=\"graphql-code-line \">MXN</div>\n<div class=\"graphql-code-line comment\">\"\"\"Malaysian ringgit\"\"\"</div>\n<div class=\"graphql-code-line \">MYR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Mozambican metical\"\"\"</div>\n<div class=\"graphql-code-line \">MZN</div>\n<div class=\"graphql-code-line comment\">\"\"\"Namibian dollar\"\"\"</div>\n<div class=\"graphql-code-line \">NAD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Nigerian naira\"\"\"</div>\n<div class=\"graphql-code-line \">NGN</div>\n<div class=\"graphql-code-line comment\">\"\"\"Nicaraguan córdoba\"\"\"</div>\n<div class=\"graphql-code-line \">NIO</div>\n<div class=\"graphql-code-line comment\">\"\"\"Norwegian krone\"\"\"</div>\n<div class=\"graphql-code-line \">NOK</div>\n<div class=\"graphql-code-line comment\">\"\"\"Nepalese rupee\"\"\"</div>\n<div class=\"graphql-code-line \">NPR</div>\n<div class=\"graphql-code-line comment\">\"\"\"New Zealand dollar\"\"\"</div>\n<div class=\"graphql-code-line \">NZD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Omani rial\"\"\"</div>\n<div class=\"graphql-code-line \">OMR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Panamanian balboa\"\"\"</div>\n<div class=\"graphql-code-line \">PAB</div>\n<div class=\"graphql-code-line comment\">\"\"\"Peruvian sol\"\"\"</div>\n<div class=\"graphql-code-line \">PEN</div>\n<div class=\"graphql-code-line comment\">\"\"\"Papua New Guinean kina\"\"\"</div>\n<div class=\"graphql-code-line \">PGK</div>\n<div class=\"graphql-code-line comment\">\"\"\"Philippine peso\"\"\"</div>\n<div class=\"graphql-code-line \">PHP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Pakistani rupee\"\"\"</div>\n<div class=\"graphql-code-line \">PKR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Polish złoty\"\"\"</div>\n<div class=\"graphql-code-line \">PLN</div>\n<div class=\"graphql-code-line comment\">\"\"\"Paraguayan guaraní\"\"\"</div>\n<div class=\"graphql-code-line \">PYG</div>\n<div class=\"graphql-code-line comment\">\"\"\"Qatari riyal\"\"\"</div>\n<div class=\"graphql-code-line \">QAR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Romanian leu\"\"\"</div>\n<div class=\"graphql-code-line \">RON</div>\n<div class=\"graphql-code-line comment\">\"\"\"Serbian dinar\"\"\"</div>\n<div class=\"graphql-code-line \">RSD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Russian ruble\"\"\"</div>\n<div class=\"graphql-code-line \">RUB</div>\n<div class=\"graphql-code-line comment\">\"\"\"Rwandan franc\"\"\"</div>\n<div class=\"graphql-code-line \">RWF</div>\n<div class=\"graphql-code-line comment\">\"\"\"Saudi riyal\"\"\"</div>\n<div class=\"graphql-code-line \">SAR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Solomon Islands dollar\"\"\"</div>\n<div class=\"graphql-code-line \">SBD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Seychelles rupee\"\"\"</div>\n<div class=\"graphql-code-line \">SCR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Sudanese pound\"\"\"</div>\n<div class=\"graphql-code-line \">SDG</div>\n<div class=\"graphql-code-line comment\">\"\"\"Swedish krona/kronor\"\"\"</div>\n<div class=\"graphql-code-line \">SEK</div>\n<div class=\"graphql-code-line comment\">\"\"\"Singapore dollar\"\"\"</div>\n<div class=\"graphql-code-line \">SGD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Saint Helena pound\"\"\"</div>\n<div class=\"graphql-code-line \">SHP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Sierra Leonean leone\"\"\"</div>\n<div class=\"graphql-code-line \">SLL</div>\n<div class=\"graphql-code-line comment\">\"\"\"Somali shilling\"\"\"</div>\n<div class=\"graphql-code-line \">SOS</div>\n<div class=\"graphql-code-line comment\">\"\"\"Surinamese dollar\"\"\"</div>\n<div class=\"graphql-code-line \">SRD</div>\n<div class=\"graphql-code-line comment\">\"\"\"South Sudanese pound\"\"\"</div>\n<div class=\"graphql-code-line \">SSP</div>\n<div class=\"graphql-code-line comment\">\"\"\"São Tomé and Príncipe dobra\"\"\"</div>\n<div class=\"graphql-code-line \">STN</div>\n<div class=\"graphql-code-line comment\">\"\"\"Salvadoran colón\"\"\"</div>\n<div class=\"graphql-code-line \">SVC</div>\n<div class=\"graphql-code-line comment\">\"\"\"Syrian pound\"\"\"</div>\n<div class=\"graphql-code-line \">SYP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Swazi lilangeni\"\"\"</div>\n<div class=\"graphql-code-line \">SZL</div>\n<div class=\"graphql-code-line comment\">\"\"\"Thai baht\"\"\"</div>\n<div class=\"graphql-code-line \">THB</div>\n<div class=\"graphql-code-line comment\">\"\"\"Tajikistani somoni\"\"\"</div>\n<div class=\"graphql-code-line \">TJS</div>\n<div class=\"graphql-code-line comment\">\"\"\"Turkmenistan manat\"\"\"</div>\n<div class=\"graphql-code-line \">TMT</div>\n<div class=\"graphql-code-line comment\">\"\"\"Tunisian dinar\"\"\"</div>\n<div class=\"graphql-code-line \">TND</div>\n<div class=\"graphql-code-line comment\">\"\"\"Tongan paʻanga\"\"\"</div>\n<div class=\"graphql-code-line \">TOP</div>\n<div class=\"graphql-code-line comment\">\"\"\"Turkish lira\"\"\"</div>\n<div class=\"graphql-code-line \">TRY</div>\n<div class=\"graphql-code-line comment\">\"\"\"Trinidad and Tobago dollar\"\"\"</div>\n<div class=\"graphql-code-line \">TTD</div>\n<div class=\"graphql-code-line comment\">\"\"\"New Taiwan dollar\"\"\"</div>\n<div class=\"graphql-code-line \">TWD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Tanzanian shilling\"\"\"</div>\n<div class=\"graphql-code-line \">TZS</div>\n<div class=\"graphql-code-line comment\">\"\"\"Ukrainian hryvnia\"\"\"</div>\n<div class=\"graphql-code-line \">UAH</div>\n<div class=\"graphql-code-line comment\">\"\"\"Ugandan shilling\"\"\"</div>\n<div class=\"graphql-code-line \">UGX</div>\n<div class=\"graphql-code-line comment\">\"\"\"United States dollar\"\"\"</div>\n<div class=\"graphql-code-line \">USD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Uruguayan peso\"\"\"</div>\n<div class=\"graphql-code-line \">UYU</div>\n<div class=\"graphql-code-line comment\">\"\"\"Uzbekistan som\"\"\"</div>\n<div class=\"graphql-code-line \">UZS</div>\n<div class=\"graphql-code-line comment\">\"\"\"Venezuelan bolívar soberano\"\"\"</div>\n<div class=\"graphql-code-line \">VES</div>\n<div class=\"graphql-code-line comment\">\"\"\"Vietnamese đồng\"\"\"</div>\n<div class=\"graphql-code-line \">VND</div>\n<div class=\"graphql-code-line comment\">\"\"\"Vanuatu vatu\"\"\"</div>\n<div class=\"graphql-code-line \">VUV</div>\n<div class=\"graphql-code-line comment\">\"\"\"Samoan tala\"\"\"</div>\n<div class=\"graphql-code-line \">WST</div>\n<div class=\"graphql-code-line comment\">\"\"\"CFA franc BEAC\"\"\"</div>\n<div class=\"graphql-code-line \">XAF</div>\n<div class=\"graphql-code-line comment\">\"\"\"East Caribbean dollar\"\"\"</div>\n<div class=\"graphql-code-line \">XCD</div>\n<div class=\"graphql-code-line comment\">\"\"\"CFA franc BCEAO\"\"\"</div>\n<div class=\"graphql-code-line \">XOF</div>\n<div class=\"graphql-code-line comment\">\"\"\"CFP franc (franc Pacifique)\"\"\"</div>\n<div class=\"graphql-code-line \">XPF</div>\n<div class=\"graphql-code-line comment\">\"\"\"Yemeni rial\"\"\"</div>\n<div class=\"graphql-code-line \">YER</div>\n<div class=\"graphql-code-line comment\">\"\"\"South African rand\"\"\"</div>\n<div class=\"graphql-code-line \">ZAR</div>\n<div class=\"graphql-code-line comment\">\"\"\"Zambian kwacha\"\"\"</div>\n<div class=\"graphql-code-line \">ZMW</div>\n<div class=\"graphql-code-line comment\">\"\"\"Zimbabwean dollar\"\"\"</div>\n<div class=\"graphql-code-line \">ZWL</div>\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "deletionresult",
                "title": "DeletionResult",
                "content": "\n<div class=\"graphql-code-block\">\n\n<div class=\"graphql-code-line top-level\">enum <span class=\"graphql-code-identifier\">DeletionResult</span>\n &#123;</div>\n<div class=\"graphql-code-line comment\">\"\"\"The entity was successfully deleted\"\"\"</div>\n<div class=\"graphql-code-line \">DELETED</div>\n<div class=\"graphql-code-line comment\">\"\"\"Deletion did not take place, reason given in message\"\"\"</div>\n<div class=\"graphql-code-line \">NOT_DELETED</div>\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "errorcode",
                "title": "ErrorCode",
                "content": "\n<div class=\"graphql-code-block\">\n\n<div class=\"graphql-code-line top-level\">enum <span class=\"graphql-code-identifier\">ErrorCode</span>\n &#123;</div>\n<div class=\"graphql-code-line \">UNKNOWN_ERROR</div>\n<div class=\"graphql-code-line \">NATIVE_AUTH_STRATEGY_ERROR</div>\n<div class=\"graphql-code-line \">INVALID_CREDENTIALS_ERROR</div>\n<div class=\"graphql-code-line \">ORDER_STATE_TRANSITION_ERROR</div>\n<div class=\"graphql-code-line \">EMAIL_ADDRESS_CONFLICT_ERROR</div>\n<div class=\"graphql-code-line \">GUEST_CHECKOUT_ERROR</div>\n<div class=\"graphql-code-line \">ORDER_LIMIT_ERROR</div>\n<div class=\"graphql-code-line \">NEGATIVE_QUANTITY_ERROR</div>\n<div class=\"graphql-code-line \">INSUFFICIENT_STOCK_ERROR</div>\n<div class=\"graphql-code-line \">COUPON_CODE_INVALID_ERROR</div>\n<div class=\"graphql-code-line \">COUPON_CODE_EXPIRED_ERROR</div>\n<div class=\"graphql-code-line \">COUPON_CODE_LIMIT_ERROR</div>\n<div class=\"graphql-code-line \">ORDER_MODIFICATION_ERROR</div>\n<div class=\"graphql-code-line \">INELIGIBLE_SHIPPING_METHOD_ERROR</div>\n<div class=\"graphql-code-line \">NO_ACTIVE_ORDER_ERROR</div>\n<div class=\"graphql-code-line \">ORDER_PAYMENT_STATE_ERROR</div>\n<div class=\"graphql-code-line \">INELIGIBLE_PAYMENT_METHOD_ERROR</div>\n<div class=\"graphql-code-line \">PAYMENT_FAILED_ERROR</div>\n<div class=\"graphql-code-line \">PAYMENT_DECLINED_ERROR</div>\n<div class=\"graphql-code-line \">ALREADY_LOGGED_IN_ERROR</div>\n<div class=\"graphql-code-line \">MISSING_PASSWORD_ERROR</div>\n<div class=\"graphql-code-line \">PASSWORD_VALIDATION_ERROR</div>\n<div class=\"graphql-code-line \">PASSWORD_ALREADY_SET_ERROR</div>\n<div class=\"graphql-code-line \">VERIFICATION_TOKEN_INVALID_ERROR</div>\n<div class=\"graphql-code-line \">VERIFICATION_TOKEN_EXPIRED_ERROR</div>\n<div class=\"graphql-code-line \">IDENTIFIER_CHANGE_TOKEN_INVALID_ERROR</div>\n<div class=\"graphql-code-line \">IDENTIFIER_CHANGE_TOKEN_EXPIRED_ERROR</div>\n<div class=\"graphql-code-line \">PASSWORD_RESET_TOKEN_INVALID_ERROR</div>\n<div class=\"graphql-code-line \">PASSWORD_RESET_TOKEN_EXPIRED_ERROR</div>\n<div class=\"graphql-code-line \">NOT_VERIFIED_ERROR</div>\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "globalflag",
                "title": "GlobalFlag",
                "content": "\n<div class=\"graphql-code-block\">\n\n<div class=\"graphql-code-line top-level\">enum <span class=\"graphql-code-identifier\">GlobalFlag</span>\n &#123;</div>\n<div class=\"graphql-code-line \">TRUE</div>\n<div class=\"graphql-code-line \">FALSE</div>\n<div class=\"graphql-code-line \">INHERIT</div>\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "historyentrytype",
                "title": "HistoryEntryType",
                "content": "\n<div class=\"graphql-code-block\">\n\n<div class=\"graphql-code-line top-level\">enum <span class=\"graphql-code-identifier\">HistoryEntryType</span>\n &#123;</div>\n<div class=\"graphql-code-line \">CUSTOMER_REGISTERED</div>\n<div class=\"graphql-code-line \">CUSTOMER_VERIFIED</div>\n<div class=\"graphql-code-line \">CUSTOMER_DETAIL_UPDATED</div>\n<div class=\"graphql-code-line \">CUSTOMER_ADDED_TO_GROUP</div>\n<div class=\"graphql-code-line \">CUSTOMER_REMOVED_FROM_GROUP</div>\n<div class=\"graphql-code-line \">CUSTOMER_ADDRESS_CREATED</div>\n<div class=\"graphql-code-line \">CUSTOMER_ADDRESS_UPDATED</div>\n<div class=\"graphql-code-line \">CUSTOMER_ADDRESS_DELETED</div>\n<div class=\"graphql-code-line \">CUSTOMER_PASSWORD_UPDATED</div>\n<div class=\"graphql-code-line \">CUSTOMER_PASSWORD_RESET_REQUESTED</div>\n<div class=\"graphql-code-line \">CUSTOMER_PASSWORD_RESET_VERIFIED</div>\n<div class=\"graphql-code-line \">CUSTOMER_EMAIL_UPDATE_REQUESTED</div>\n<div class=\"graphql-code-line \">CUSTOMER_EMAIL_UPDATE_VERIFIED</div>\n<div class=\"graphql-code-line \">CUSTOMER_NOTE</div>\n<div class=\"graphql-code-line \">ORDER_STATE_TRANSITION</div>\n<div class=\"graphql-code-line \">ORDER_PAYMENT_TRANSITION</div>\n<div class=\"graphql-code-line \">ORDER_FULFILLMENT</div>\n<div class=\"graphql-code-line \">ORDER_CANCELLATION</div>\n<div class=\"graphql-code-line \">ORDER_REFUND_TRANSITION</div>\n<div class=\"graphql-code-line \">ORDER_FULFILLMENT_TRANSITION</div>\n<div class=\"graphql-code-line \">ORDER_NOTE</div>\n<div class=\"graphql-code-line \">ORDER_COUPON_APPLIED</div>\n<div class=\"graphql-code-line \">ORDER_COUPON_REMOVED</div>\n<div class=\"graphql-code-line \">ORDER_MODIFIED</div>\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "languagecode",
                "title": "LanguageCode",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Languages in the form of a ISO 639-1 language code with optional</div>\n\n<div class=\"graphql-code-line comment\">region or script modifier (e.g. de_AT). The selection available is based</div>\n\n<div class=\"graphql-code-line comment\">on the [Unicode CLDR summary list](https://unicode-org.github.io/cldr-staging/charts/37/summary/root.html)</div>\n\n<div class=\"graphql-code-line comment\">and includes the major spoken languages of the world and any widely-used variants.</div>\n\n<div class=\"graphql-code-line comment\"></div>\n\n<div class=\"graphql-code-line comment\"></div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n\n<div class=\"graphql-code-line top-level\">enum <span class=\"graphql-code-identifier\">LanguageCode</span>\n &#123;</div>\n<div class=\"graphql-code-line comment\">\"\"\"Afrikaans\"\"\"</div>\n<div class=\"graphql-code-line \">af</div>\n<div class=\"graphql-code-line comment\">\"\"\"Akan\"\"\"</div>\n<div class=\"graphql-code-line \">ak</div>\n<div class=\"graphql-code-line comment\">\"\"\"Albanian\"\"\"</div>\n<div class=\"graphql-code-line \">sq</div>\n<div class=\"graphql-code-line comment\">\"\"\"Amharic\"\"\"</div>\n<div class=\"graphql-code-line \">am</div>\n<div class=\"graphql-code-line comment\">\"\"\"Arabic\"\"\"</div>\n<div class=\"graphql-code-line \">ar</div>\n<div class=\"graphql-code-line comment\">\"\"\"Armenian\"\"\"</div>\n<div class=\"graphql-code-line \">hy</div>\n<div class=\"graphql-code-line comment\">\"\"\"Assamese\"\"\"</div>\n<div class=\"graphql-code-line \">as</div>\n<div class=\"graphql-code-line comment\">\"\"\"Azerbaijani\"\"\"</div>\n<div class=\"graphql-code-line \">az</div>\n<div class=\"graphql-code-line comment\">\"\"\"Bambara\"\"\"</div>\n<div class=\"graphql-code-line \">bm</div>\n<div class=\"graphql-code-line comment\">\"\"\"Bangla\"\"\"</div>\n<div class=\"graphql-code-line \">bn</div>\n<div class=\"graphql-code-line comment\">\"\"\"Basque\"\"\"</div>\n<div class=\"graphql-code-line \">eu</div>\n<div class=\"graphql-code-line comment\">\"\"\"Belarusian\"\"\"</div>\n<div class=\"graphql-code-line \">be</div>\n<div class=\"graphql-code-line comment\">\"\"\"Bosnian\"\"\"</div>\n<div class=\"graphql-code-line \">bs</div>\n<div class=\"graphql-code-line comment\">\"\"\"Breton\"\"\"</div>\n<div class=\"graphql-code-line \">br</div>\n<div class=\"graphql-code-line comment\">\"\"\"Bulgarian\"\"\"</div>\n<div class=\"graphql-code-line \">bg</div>\n<div class=\"graphql-code-line comment\">\"\"\"Burmese\"\"\"</div>\n<div class=\"graphql-code-line \">my</div>\n<div class=\"graphql-code-line comment\">\"\"\"Catalan\"\"\"</div>\n<div class=\"graphql-code-line \">ca</div>\n<div class=\"graphql-code-line comment\">\"\"\"Chechen\"\"\"</div>\n<div class=\"graphql-code-line \">ce</div>\n<div class=\"graphql-code-line comment\">\"\"\"Chinese\"\"\"</div>\n<div class=\"graphql-code-line \">zh</div>\n<div class=\"graphql-code-line comment\">\"\"\"Simplified Chinese\"\"\"</div>\n<div class=\"graphql-code-line \">zh_Hans</div>\n<div class=\"graphql-code-line comment\">\"\"\"Traditional Chinese\"\"\"</div>\n<div class=\"graphql-code-line \">zh_Hant</div>\n<div class=\"graphql-code-line comment\">\"\"\"Church Slavic\"\"\"</div>\n<div class=\"graphql-code-line \">cu</div>\n<div class=\"graphql-code-line comment\">\"\"\"Cornish\"\"\"</div>\n<div class=\"graphql-code-line \">kw</div>\n<div class=\"graphql-code-line comment\">\"\"\"Corsican\"\"\"</div>\n<div class=\"graphql-code-line \">co</div>\n<div class=\"graphql-code-line comment\">\"\"\"Croatian\"\"\"</div>\n<div class=\"graphql-code-line \">hr</div>\n<div class=\"graphql-code-line comment\">\"\"\"Czech\"\"\"</div>\n<div class=\"graphql-code-line \">cs</div>\n<div class=\"graphql-code-line comment\">\"\"\"Danish\"\"\"</div>\n<div class=\"graphql-code-line \">da</div>\n<div class=\"graphql-code-line comment\">\"\"\"Dutch\"\"\"</div>\n<div class=\"graphql-code-line \">nl</div>\n<div class=\"graphql-code-line comment\">\"\"\"Flemish\"\"\"</div>\n<div class=\"graphql-code-line \">nl_BE</div>\n<div class=\"graphql-code-line comment\">\"\"\"Dzongkha\"\"\"</div>\n<div class=\"graphql-code-line \">dz</div>\n<div class=\"graphql-code-line comment\">\"\"\"English\"\"\"</div>\n<div class=\"graphql-code-line \">en</div>\n<div class=\"graphql-code-line comment\">\"\"\"Australian English\"\"\"</div>\n<div class=\"graphql-code-line \">en_AU</div>\n<div class=\"graphql-code-line comment\">\"\"\"Canadian English\"\"\"</div>\n<div class=\"graphql-code-line \">en_CA</div>\n<div class=\"graphql-code-line comment\">\"\"\"British English\"\"\"</div>\n<div class=\"graphql-code-line \">en_GB</div>\n<div class=\"graphql-code-line comment\">\"\"\"American English\"\"\"</div>\n<div class=\"graphql-code-line \">en_US</div>\n<div class=\"graphql-code-line comment\">\"\"\"Esperanto\"\"\"</div>\n<div class=\"graphql-code-line \">eo</div>\n<div class=\"graphql-code-line comment\">\"\"\"Estonian\"\"\"</div>\n<div class=\"graphql-code-line \">et</div>\n<div class=\"graphql-code-line comment\">\"\"\"Ewe\"\"\"</div>\n<div class=\"graphql-code-line \">ee</div>\n<div class=\"graphql-code-line comment\">\"\"\"Faroese\"\"\"</div>\n<div class=\"graphql-code-line \">fo</div>\n<div class=\"graphql-code-line comment\">\"\"\"Finnish\"\"\"</div>\n<div class=\"graphql-code-line \">fi</div>\n<div class=\"graphql-code-line comment\">\"\"\"French\"\"\"</div>\n<div class=\"graphql-code-line \">fr</div>\n<div class=\"graphql-code-line comment\">\"\"\"Canadian French\"\"\"</div>\n<div class=\"graphql-code-line \">fr_CA</div>\n<div class=\"graphql-code-line comment\">\"\"\"Swiss French\"\"\"</div>\n<div class=\"graphql-code-line \">fr_CH</div>\n<div class=\"graphql-code-line comment\">\"\"\"Fulah\"\"\"</div>\n<div class=\"graphql-code-line \">ff</div>\n<div class=\"graphql-code-line comment\">\"\"\"Galician\"\"\"</div>\n<div class=\"graphql-code-line \">gl</div>\n<div class=\"graphql-code-line comment\">\"\"\"Ganda\"\"\"</div>\n<div class=\"graphql-code-line \">lg</div>\n<div class=\"graphql-code-line comment\">\"\"\"Georgian\"\"\"</div>\n<div class=\"graphql-code-line \">ka</div>\n<div class=\"graphql-code-line comment\">\"\"\"German\"\"\"</div>\n<div class=\"graphql-code-line \">de</div>\n<div class=\"graphql-code-line comment\">\"\"\"Austrian German\"\"\"</div>\n<div class=\"graphql-code-line \">de_AT</div>\n<div class=\"graphql-code-line comment\">\"\"\"Swiss High German\"\"\"</div>\n<div class=\"graphql-code-line \">de_CH</div>\n<div class=\"graphql-code-line comment\">\"\"\"Greek\"\"\"</div>\n<div class=\"graphql-code-line \">el</div>\n<div class=\"graphql-code-line comment\">\"\"\"Gujarati\"\"\"</div>\n<div class=\"graphql-code-line \">gu</div>\n<div class=\"graphql-code-line comment\">\"\"\"Haitian Creole\"\"\"</div>\n<div class=\"graphql-code-line \">ht</div>\n<div class=\"graphql-code-line comment\">\"\"\"Hausa\"\"\"</div>\n<div class=\"graphql-code-line \">ha</div>\n<div class=\"graphql-code-line comment\">\"\"\"Hebrew\"\"\"</div>\n<div class=\"graphql-code-line \">he</div>\n<div class=\"graphql-code-line comment\">\"\"\"Hindi\"\"\"</div>\n<div class=\"graphql-code-line \">hi</div>\n<div class=\"graphql-code-line comment\">\"\"\"Hungarian\"\"\"</div>\n<div class=\"graphql-code-line \">hu</div>\n<div class=\"graphql-code-line comment\">\"\"\"Icelandic\"\"\"</div>\n<div class=\"graphql-code-line \">is</div>\n<div class=\"graphql-code-line comment\">\"\"\"Igbo\"\"\"</div>\n<div class=\"graphql-code-line \">ig</div>\n<div class=\"graphql-code-line comment\">\"\"\"Indonesian\"\"\"</div>\n<div class=\"graphql-code-line \">id</div>\n<div class=\"graphql-code-line comment\">\"\"\"Interlingua\"\"\"</div>\n<div class=\"graphql-code-line \">ia</div>\n<div class=\"graphql-code-line comment\">\"\"\"Irish\"\"\"</div>\n<div class=\"graphql-code-line \">ga</div>\n<div class=\"graphql-code-line comment\">\"\"\"Italian\"\"\"</div>\n<div class=\"graphql-code-line \">it</div>\n<div class=\"graphql-code-line comment\">\"\"\"Japanese\"\"\"</div>\n<div class=\"graphql-code-line \">ja</div>\n<div class=\"graphql-code-line comment\">\"\"\"Javanese\"\"\"</div>\n<div class=\"graphql-code-line \">jv</div>\n<div class=\"graphql-code-line comment\">\"\"\"Kalaallisut\"\"\"</div>\n<div class=\"graphql-code-line \">kl</div>\n<div class=\"graphql-code-line comment\">\"\"\"Kannada\"\"\"</div>\n<div class=\"graphql-code-line \">kn</div>\n<div class=\"graphql-code-line comment\">\"\"\"Kashmiri\"\"\"</div>\n<div class=\"graphql-code-line \">ks</div>\n<div class=\"graphql-code-line comment\">\"\"\"Kazakh\"\"\"</div>\n<div class=\"graphql-code-line \">kk</div>\n<div class=\"graphql-code-line comment\">\"\"\"Khmer\"\"\"</div>\n<div class=\"graphql-code-line \">km</div>\n<div class=\"graphql-code-line comment\">\"\"\"Kikuyu\"\"\"</div>\n<div class=\"graphql-code-line \">ki</div>\n<div class=\"graphql-code-line comment\">\"\"\"Kinyarwanda\"\"\"</div>\n<div class=\"graphql-code-line \">rw</div>\n<div class=\"graphql-code-line comment\">\"\"\"Korean\"\"\"</div>\n<div class=\"graphql-code-line \">ko</div>\n<div class=\"graphql-code-line comment\">\"\"\"Kurdish\"\"\"</div>\n<div class=\"graphql-code-line \">ku</div>\n<div class=\"graphql-code-line comment\">\"\"\"Kyrgyz\"\"\"</div>\n<div class=\"graphql-code-line \">ky</div>\n<div class=\"graphql-code-line comment\">\"\"\"Lao\"\"\"</div>\n<div class=\"graphql-code-line \">lo</div>\n<div class=\"graphql-code-line comment\">\"\"\"Latin\"\"\"</div>\n<div class=\"graphql-code-line \">la</div>\n<div class=\"graphql-code-line comment\">\"\"\"Latvian\"\"\"</div>\n<div class=\"graphql-code-line \">lv</div>\n<div class=\"graphql-code-line comment\">\"\"\"Lingala\"\"\"</div>\n<div class=\"graphql-code-line \">ln</div>\n<div class=\"graphql-code-line comment\">\"\"\"Lithuanian\"\"\"</div>\n<div class=\"graphql-code-line \">lt</div>\n<div class=\"graphql-code-line comment\">\"\"\"Luba-Katanga\"\"\"</div>\n<div class=\"graphql-code-line \">lu</div>\n<div class=\"graphql-code-line comment\">\"\"\"Luxembourgish\"\"\"</div>\n<div class=\"graphql-code-line \">lb</div>\n<div class=\"graphql-code-line comment\">\"\"\"Macedonian\"\"\"</div>\n<div class=\"graphql-code-line \">mk</div>\n<div class=\"graphql-code-line comment\">\"\"\"Malagasy\"\"\"</div>\n<div class=\"graphql-code-line \">mg</div>\n<div class=\"graphql-code-line comment\">\"\"\"Malay\"\"\"</div>\n<div class=\"graphql-code-line \">ms</div>\n<div class=\"graphql-code-line comment\">\"\"\"Malayalam\"\"\"</div>\n<div class=\"graphql-code-line \">ml</div>\n<div class=\"graphql-code-line comment\">\"\"\"Maltese\"\"\"</div>\n<div class=\"graphql-code-line \">mt</div>\n<div class=\"graphql-code-line comment\">\"\"\"Manx\"\"\"</div>\n<div class=\"graphql-code-line \">gv</div>\n<div class=\"graphql-code-line comment\">\"\"\"Maori\"\"\"</div>\n<div class=\"graphql-code-line \">mi</div>\n<div class=\"graphql-code-line comment\">\"\"\"Marathi\"\"\"</div>\n<div class=\"graphql-code-line \">mr</div>\n<div class=\"graphql-code-line comment\">\"\"\"Mongolian\"\"\"</div>\n<div class=\"graphql-code-line \">mn</div>\n<div class=\"graphql-code-line comment\">\"\"\"Nepali\"\"\"</div>\n<div class=\"graphql-code-line \">ne</div>\n<div class=\"graphql-code-line comment\">\"\"\"North Ndebele\"\"\"</div>\n<div class=\"graphql-code-line \">nd</div>\n<div class=\"graphql-code-line comment\">\"\"\"Northern Sami\"\"\"</div>\n<div class=\"graphql-code-line \">se</div>\n<div class=\"graphql-code-line comment\">\"\"\"Norwegian Bokmål\"\"\"</div>\n<div class=\"graphql-code-line \">nb</div>\n<div class=\"graphql-code-line comment\">\"\"\"Norwegian Nynorsk\"\"\"</div>\n<div class=\"graphql-code-line \">nn</div>\n<div class=\"graphql-code-line comment\">\"\"\"Nyanja\"\"\"</div>\n<div class=\"graphql-code-line \">ny</div>\n<div class=\"graphql-code-line comment\">\"\"\"Odia\"\"\"</div>\n<div class=\"graphql-code-line \">or</div>\n<div class=\"graphql-code-line comment\">\"\"\"Oromo\"\"\"</div>\n<div class=\"graphql-code-line \">om</div>\n<div class=\"graphql-code-line comment\">\"\"\"Ossetic\"\"\"</div>\n<div class=\"graphql-code-line \">os</div>\n<div class=\"graphql-code-line comment\">\"\"\"Pashto\"\"\"</div>\n<div class=\"graphql-code-line \">ps</div>\n<div class=\"graphql-code-line comment\">\"\"\"Persian\"\"\"</div>\n<div class=\"graphql-code-line \">fa</div>\n<div class=\"graphql-code-line comment\">\"\"\"Dari\"\"\"</div>\n<div class=\"graphql-code-line \">fa_AF</div>\n<div class=\"graphql-code-line comment\">\"\"\"Polish\"\"\"</div>\n<div class=\"graphql-code-line \">pl</div>\n<div class=\"graphql-code-line comment\">\"\"\"Portuguese\"\"\"</div>\n<div class=\"graphql-code-line \">pt</div>\n<div class=\"graphql-code-line comment\">\"\"\"Brazilian Portuguese\"\"\"</div>\n<div class=\"graphql-code-line \">pt_BR</div>\n<div class=\"graphql-code-line comment\">\"\"\"European Portuguese\"\"\"</div>\n<div class=\"graphql-code-line \">pt_PT</div>\n<div class=\"graphql-code-line comment\">\"\"\"Punjabi\"\"\"</div>\n<div class=\"graphql-code-line \">pa</div>\n<div class=\"graphql-code-line comment\">\"\"\"Quechua\"\"\"</div>\n<div class=\"graphql-code-line \">qu</div>\n<div class=\"graphql-code-line comment\">\"\"\"Romanian\"\"\"</div>\n<div class=\"graphql-code-line \">ro</div>\n<div class=\"graphql-code-line comment\">\"\"\"Moldavian\"\"\"</div>\n<div class=\"graphql-code-line \">ro_MD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Romansh\"\"\"</div>\n<div class=\"graphql-code-line \">rm</div>\n<div class=\"graphql-code-line comment\">\"\"\"Rundi\"\"\"</div>\n<div class=\"graphql-code-line \">rn</div>\n<div class=\"graphql-code-line comment\">\"\"\"Russian\"\"\"</div>\n<div class=\"graphql-code-line \">ru</div>\n<div class=\"graphql-code-line comment\">\"\"\"Samoan\"\"\"</div>\n<div class=\"graphql-code-line \">sm</div>\n<div class=\"graphql-code-line comment\">\"\"\"Sango\"\"\"</div>\n<div class=\"graphql-code-line \">sg</div>\n<div class=\"graphql-code-line comment\">\"\"\"Sanskrit\"\"\"</div>\n<div class=\"graphql-code-line \">sa</div>\n<div class=\"graphql-code-line comment\">\"\"\"Scottish Gaelic\"\"\"</div>\n<div class=\"graphql-code-line \">gd</div>\n<div class=\"graphql-code-line comment\">\"\"\"Serbian\"\"\"</div>\n<div class=\"graphql-code-line \">sr</div>\n<div class=\"graphql-code-line comment\">\"\"\"Shona\"\"\"</div>\n<div class=\"graphql-code-line \">sn</div>\n<div class=\"graphql-code-line comment\">\"\"\"Sichuan Yi\"\"\"</div>\n<div class=\"graphql-code-line \">ii</div>\n<div class=\"graphql-code-line comment\">\"\"\"Sindhi\"\"\"</div>\n<div class=\"graphql-code-line \">sd</div>\n<div class=\"graphql-code-line comment\">\"\"\"Sinhala\"\"\"</div>\n<div class=\"graphql-code-line \">si</div>\n<div class=\"graphql-code-line comment\">\"\"\"Slovak\"\"\"</div>\n<div class=\"graphql-code-line \">sk</div>\n<div class=\"graphql-code-line comment\">\"\"\"Slovenian\"\"\"</div>\n<div class=\"graphql-code-line \">sl</div>\n<div class=\"graphql-code-line comment\">\"\"\"Somali\"\"\"</div>\n<div class=\"graphql-code-line \">so</div>\n<div class=\"graphql-code-line comment\">\"\"\"Southern Sotho\"\"\"</div>\n<div class=\"graphql-code-line \">st</div>\n<div class=\"graphql-code-line comment\">\"\"\"Spanish\"\"\"</div>\n<div class=\"graphql-code-line \">es</div>\n<div class=\"graphql-code-line comment\">\"\"\"European Spanish\"\"\"</div>\n<div class=\"graphql-code-line \">es_ES</div>\n<div class=\"graphql-code-line comment\">\"\"\"Mexican Spanish\"\"\"</div>\n<div class=\"graphql-code-line \">es_MX</div>\n<div class=\"graphql-code-line comment\">\"\"\"Sundanese\"\"\"</div>\n<div class=\"graphql-code-line \">su</div>\n<div class=\"graphql-code-line comment\">\"\"\"Swahili\"\"\"</div>\n<div class=\"graphql-code-line \">sw</div>\n<div class=\"graphql-code-line comment\">\"\"\"Congo Swahili\"\"\"</div>\n<div class=\"graphql-code-line \">sw_CD</div>\n<div class=\"graphql-code-line comment\">\"\"\"Swedish\"\"\"</div>\n<div class=\"graphql-code-line \">sv</div>\n<div class=\"graphql-code-line comment\">\"\"\"Tajik\"\"\"</div>\n<div class=\"graphql-code-line \">tg</div>\n<div class=\"graphql-code-line comment\">\"\"\"Tamil\"\"\"</div>\n<div class=\"graphql-code-line \">ta</div>\n<div class=\"graphql-code-line comment\">\"\"\"Tatar\"\"\"</div>\n<div class=\"graphql-code-line \">tt</div>\n<div class=\"graphql-code-line comment\">\"\"\"Telugu\"\"\"</div>\n<div class=\"graphql-code-line \">te</div>\n<div class=\"graphql-code-line comment\">\"\"\"Thai\"\"\"</div>\n<div class=\"graphql-code-line \">th</div>\n<div class=\"graphql-code-line comment\">\"\"\"Tibetan\"\"\"</div>\n<div class=\"graphql-code-line \">bo</div>\n<div class=\"graphql-code-line comment\">\"\"\"Tigrinya\"\"\"</div>\n<div class=\"graphql-code-line \">ti</div>\n<div class=\"graphql-code-line comment\">\"\"\"Tongan\"\"\"</div>\n<div class=\"graphql-code-line \">to</div>\n<div class=\"graphql-code-line comment\">\"\"\"Turkish\"\"\"</div>\n<div class=\"graphql-code-line \">tr</div>\n<div class=\"graphql-code-line comment\">\"\"\"Turkmen\"\"\"</div>\n<div class=\"graphql-code-line \">tk</div>\n<div class=\"graphql-code-line comment\">\"\"\"Ukrainian\"\"\"</div>\n<div class=\"graphql-code-line \">uk</div>\n<div class=\"graphql-code-line comment\">\"\"\"Urdu\"\"\"</div>\n<div class=\"graphql-code-line \">ur</div>\n<div class=\"graphql-code-line comment\">\"\"\"Uyghur\"\"\"</div>\n<div class=\"graphql-code-line \">ug</div>\n<div class=\"graphql-code-line comment\">\"\"\"Uzbek\"\"\"</div>\n<div class=\"graphql-code-line \">uz</div>\n<div class=\"graphql-code-line comment\">\"\"\"Vietnamese\"\"\"</div>\n<div class=\"graphql-code-line \">vi</div>\n<div class=\"graphql-code-line comment\">\"\"\"Volapük\"\"\"</div>\n<div class=\"graphql-code-line \">vo</div>\n<div class=\"graphql-code-line comment\">\"\"\"Welsh\"\"\"</div>\n<div class=\"graphql-code-line \">cy</div>\n<div class=\"graphql-code-line comment\">\"\"\"Western Frisian\"\"\"</div>\n<div class=\"graphql-code-line \">fy</div>\n<div class=\"graphql-code-line comment\">\"\"\"Wolof\"\"\"</div>\n<div class=\"graphql-code-line \">wo</div>\n<div class=\"graphql-code-line comment\">\"\"\"Xhosa\"\"\"</div>\n<div class=\"graphql-code-line \">xh</div>\n<div class=\"graphql-code-line comment\">\"\"\"Yiddish\"\"\"</div>\n<div class=\"graphql-code-line \">yi</div>\n<div class=\"graphql-code-line comment\">\"\"\"Yoruba\"\"\"</div>\n<div class=\"graphql-code-line \">yo</div>\n<div class=\"graphql-code-line comment\">\"\"\"Zulu\"\"\"</div>\n<div class=\"graphql-code-line \">zu</div>\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "logicaloperator",
                "title": "LogicalOperator",
                "content": "\n<div class=\"graphql-code-block\">\n\n<div class=\"graphql-code-line top-level\">enum <span class=\"graphql-code-identifier\">LogicalOperator</span>\n &#123;</div>\n<div class=\"graphql-code-line \">AND</div>\n<div class=\"graphql-code-line \">OR</div>\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "ordertype",
                "title": "OrderType",
                "content": "\n<div class=\"graphql-code-block\">\n\n<div class=\"graphql-code-line top-level\">enum <span class=\"graphql-code-identifier\">OrderType</span>\n &#123;</div>\n<div class=\"graphql-code-line \">Regular</div>\n<div class=\"graphql-code-line \">Seller</div>\n<div class=\"graphql-code-line \">Aggregate</div>\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "permission",
                "title": "Permission",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Permissions for administrators and customers. Used to control access to</div>\n\n<div class=\"graphql-code-line comment\">GraphQL resolvers via the &#123;@link Allow&#125; decorator.</div>\n\n<div class=\"graphql-code-line comment\"></div>\n\n<div class=\"graphql-code-line comment\">## Understanding Permission.Owner</div>\n\n<div class=\"graphql-code-line comment\"></div>\n\n<div class=\"graphql-code-line comment\">`Permission.Owner` is a special permission which is used in some Vendure resolvers to indicate that that resolver should only</div>\n\n<div class=\"graphql-code-line comment\">be accessible to the \"owner\" of that resource.</div>\n\n<div class=\"graphql-code-line comment\"></div>\n\n<div class=\"graphql-code-line comment\">For example, the Shop API <code>activeCustomer</code> query resolver should only return the Customer object for the \"owner\" of that Customer, i.e.</div>\n\n<div class=\"graphql-code-line comment\">based on the activeUserId of the current session. As a result, the resolver code looks like this:</div>\n\n<div class=\"graphql-code-line comment\"></div>\n\n<div class=\"graphql-code-line comment\">@example</div>\n\n<div class=\"graphql-code-line comment\">```TypeScript</div>\n\n<div class=\"graphql-code-line comment\">\\@Query()</div>\n\n<div class=\"graphql-code-line comment\">\\@Allow(Permission.Owner)</div>\n\n<div class=\"graphql-code-line comment\">async activeCustomer(\\@Ctx() ctx: RequestContext): Promise&lt;Customer | undefined&gt; &#123;</div>\n\n<div class=\"graphql-code-line comment\">  const userId = ctx.activeUserId;</div>\n\n<div class=\"graphql-code-line comment\">  if (userId) &#123;</div>\n\n<div class=\"graphql-code-line comment\">    return this.customerService.findOneByUserId(ctx, userId);</div>\n\n<div class=\"graphql-code-line comment\">  &#125;</div>\n\n<div class=\"graphql-code-line comment\">&#125;</div>\n\n<div class=\"graphql-code-line comment\">```</div>\n\n<div class=\"graphql-code-line comment\"></div>\n\n<div class=\"graphql-code-line comment\">Here we can see that the \"ownership\" must be enforced by custom logic inside the resolver. Since \"ownership\" cannot be defined generally</div>\n\n<div class=\"graphql-code-line comment\">nor statically encoded at build-time, any resolvers using <code>Permission.Owner</code> **must** include logic to enforce that only the owner</div>\n\n<div class=\"graphql-code-line comment\">of the resource has access. If not, then it is the equivalent of using `Permission.Public`.</div>\n\n<div class=\"graphql-code-line comment\"></div>\n\n<div class=\"graphql-code-line comment\"></div>\n\n<div class=\"graphql-code-line comment\"></div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n\n<div class=\"graphql-code-line top-level\">enum <span class=\"graphql-code-identifier\">Permission</span>\n &#123;</div>\n<div class=\"graphql-code-line comment\">\"\"\"Authenticated means simply that the user is logged in\"\"\"</div>\n<div class=\"graphql-code-line \">Authenticated</div>\n<div class=\"graphql-code-line comment\">\"\"\"SuperAdmin has unrestricted access to all operations\"\"\"</div>\n<div class=\"graphql-code-line \">SuperAdmin</div>\n<div class=\"graphql-code-line comment\">\"\"\"Owner means the user owns this entity, e.g. a Customer's own Order\"\"\"</div>\n<div class=\"graphql-code-line \">Owner</div>\n<div class=\"graphql-code-line comment\">\"\"\"Public means any unauthenticated user may perform the operation\"\"\"</div>\n<div class=\"graphql-code-line \">Public</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update GlobalSettings\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateGlobalSettings</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Products, Facets, Assets, Collections\"\"\"</div>\n<div class=\"graphql-code-line \">CreateCatalog</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Products, Facets, Assets, Collections\"\"\"</div>\n<div class=\"graphql-code-line \">ReadCatalog</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Products, Facets, Assets, Collections\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateCatalog</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Products, Facets, Assets, Collections\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteCatalog</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings\"\"\"</div>\n<div class=\"graphql-code-line \">CreateSettings</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings\"\"\"</div>\n<div class=\"graphql-code-line \">ReadSettings</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateSettings</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete PaymentMethods, ShippingMethods, TaxCategories, TaxRates, Zones, Countries, System & GlobalSettings\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteSettings</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Administrator\"\"\"</div>\n<div class=\"graphql-code-line \">CreateAdministrator</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Administrator\"\"\"</div>\n<div class=\"graphql-code-line \">ReadAdministrator</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Administrator\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateAdministrator</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Administrator\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteAdministrator</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Asset\"\"\"</div>\n<div class=\"graphql-code-line \">CreateAsset</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Asset\"\"\"</div>\n<div class=\"graphql-code-line \">ReadAsset</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Asset\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateAsset</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Asset\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteAsset</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Channel\"\"\"</div>\n<div class=\"graphql-code-line \">CreateChannel</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Channel\"\"\"</div>\n<div class=\"graphql-code-line \">ReadChannel</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Channel\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateChannel</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Channel\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteChannel</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Collection\"\"\"</div>\n<div class=\"graphql-code-line \">CreateCollection</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Collection\"\"\"</div>\n<div class=\"graphql-code-line \">ReadCollection</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Collection\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateCollection</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Collection\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteCollection</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Country\"\"\"</div>\n<div class=\"graphql-code-line \">CreateCountry</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Country\"\"\"</div>\n<div class=\"graphql-code-line \">ReadCountry</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Country\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateCountry</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Country\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteCountry</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Customer\"\"\"</div>\n<div class=\"graphql-code-line \">CreateCustomer</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Customer\"\"\"</div>\n<div class=\"graphql-code-line \">ReadCustomer</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Customer\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateCustomer</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Customer\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteCustomer</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create CustomerGroup\"\"\"</div>\n<div class=\"graphql-code-line \">CreateCustomerGroup</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read CustomerGroup\"\"\"</div>\n<div class=\"graphql-code-line \">ReadCustomerGroup</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update CustomerGroup\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateCustomerGroup</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete CustomerGroup\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteCustomerGroup</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Facet\"\"\"</div>\n<div class=\"graphql-code-line \">CreateFacet</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Facet\"\"\"</div>\n<div class=\"graphql-code-line \">ReadFacet</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Facet\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateFacet</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Facet\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteFacet</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Order\"\"\"</div>\n<div class=\"graphql-code-line \">CreateOrder</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Order\"\"\"</div>\n<div class=\"graphql-code-line \">ReadOrder</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Order\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateOrder</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Order\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteOrder</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create PaymentMethod\"\"\"</div>\n<div class=\"graphql-code-line \">CreatePaymentMethod</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read PaymentMethod\"\"\"</div>\n<div class=\"graphql-code-line \">ReadPaymentMethod</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update PaymentMethod\"\"\"</div>\n<div class=\"graphql-code-line \">UpdatePaymentMethod</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete PaymentMethod\"\"\"</div>\n<div class=\"graphql-code-line \">DeletePaymentMethod</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Product\"\"\"</div>\n<div class=\"graphql-code-line \">CreateProduct</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Product\"\"\"</div>\n<div class=\"graphql-code-line \">ReadProduct</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Product\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateProduct</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Product\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteProduct</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Promotion\"\"\"</div>\n<div class=\"graphql-code-line \">CreatePromotion</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Promotion\"\"\"</div>\n<div class=\"graphql-code-line \">ReadPromotion</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Promotion\"\"\"</div>\n<div class=\"graphql-code-line \">UpdatePromotion</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Promotion\"\"\"</div>\n<div class=\"graphql-code-line \">DeletePromotion</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create ShippingMethod\"\"\"</div>\n<div class=\"graphql-code-line \">CreateShippingMethod</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read ShippingMethod\"\"\"</div>\n<div class=\"graphql-code-line \">ReadShippingMethod</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update ShippingMethod\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateShippingMethod</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete ShippingMethod\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteShippingMethod</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Tag\"\"\"</div>\n<div class=\"graphql-code-line \">CreateTag</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Tag\"\"\"</div>\n<div class=\"graphql-code-line \">ReadTag</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Tag\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateTag</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Tag\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteTag</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create TaxCategory\"\"\"</div>\n<div class=\"graphql-code-line \">CreateTaxCategory</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read TaxCategory\"\"\"</div>\n<div class=\"graphql-code-line \">ReadTaxCategory</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update TaxCategory\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateTaxCategory</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete TaxCategory\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteTaxCategory</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create TaxRate\"\"\"</div>\n<div class=\"graphql-code-line \">CreateTaxRate</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read TaxRate\"\"\"</div>\n<div class=\"graphql-code-line \">ReadTaxRate</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update TaxRate\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateTaxRate</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete TaxRate\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteTaxRate</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Seller\"\"\"</div>\n<div class=\"graphql-code-line \">CreateSeller</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Seller\"\"\"</div>\n<div class=\"graphql-code-line \">ReadSeller</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Seller\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateSeller</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Seller\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteSeller</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create StockLocation\"\"\"</div>\n<div class=\"graphql-code-line \">CreateStockLocation</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read StockLocation\"\"\"</div>\n<div class=\"graphql-code-line \">ReadStockLocation</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update StockLocation\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateStockLocation</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete StockLocation\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteStockLocation</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create System\"\"\"</div>\n<div class=\"graphql-code-line \">CreateSystem</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read System\"\"\"</div>\n<div class=\"graphql-code-line \">ReadSystem</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update System\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateSystem</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete System\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteSystem</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to create Zone\"\"\"</div>\n<div class=\"graphql-code-line \">CreateZone</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to read Zone\"\"\"</div>\n<div class=\"graphql-code-line \">ReadZone</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to update Zone\"\"\"</div>\n<div class=\"graphql-code-line \">UpdateZone</div>\n<div class=\"graphql-code-line comment\">\"\"\"Grants permission to delete Zone\"\"\"</div>\n<div class=\"graphql-code-line \">DeleteZone</div>\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "sortorder",
                "title": "SortOrder",
                "content": "\n<div class=\"graphql-code-block\">\n\n<div class=\"graphql-code-line top-level\">enum <span class=\"graphql-code-identifier\">SortOrder</span>\n &#123;</div>\n<div class=\"graphql-code-line \">ASC</div>\n<div class=\"graphql-code-line \">DESC</div>\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "error-types",
        "metadata": {
            "title": "Error Types",
            "keywords": [
                "internalservererror",
                "constructor",
                "userinputerror",
                "illegaloperationerror",
                "unauthorizederror",
                "forbiddenerror",
                "channelnotfounderror",
                "entitynotfounderror"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/error/errors.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "internalservererror",
                "title": "InternalServerError",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/error/errors.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nThis error should be thrown when some unexpected and exceptional case is encountered.\n\n* Extends: <code><a href='/reference/typescript-api/errors/i18n-error#i18nerror'>I18nError</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, variables: { [key: string]: string | number } = {}) => InternalServerError`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class InternalServerError extends I18nError {",
                    "    constructor(message: string, variables: { [key: string]: string | number } = {})",
                    "}"
                ]
            },
            {
                "id": "userinputerror",
                "title": "UserInputError",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/error/errors.ts\" sourceLine=\"27\" packageName=\"@vendure/core\" />\n\nThis error should be thrown when user input is not as expected.\n\n* Extends: <code><a href='/reference/typescript-api/errors/i18n-error#i18nerror'>I18nError</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, variables: { [key: string]: string | number } = {}) => UserInputError`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class UserInputError extends I18nError {",
                    "    constructor(message: string, variables: { [key: string]: string | number } = {})",
                    "}"
                ]
            },
            {
                "id": "illegaloperationerror",
                "title": "IllegalOperationError",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/error/errors.ts\" sourceLine=\"40\" packageName=\"@vendure/core\" />\n\nThis error should be thrown when an operation is attempted which is not allowed.\n\n* Extends: <code><a href='/reference/typescript-api/errors/i18n-error#i18nerror'>I18nError</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, variables: { [key: string]: string | number } = {}) => IllegalOperationError`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class IllegalOperationError extends I18nError {",
                    "    constructor(message: string, variables: { [key: string]: string | number } = {})",
                    "}"
                ]
            },
            {
                "id": "unauthorizederror",
                "title": "UnauthorizedError",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/error/errors.ts\" sourceLine=\"53\" packageName=\"@vendure/core\" />\n\nThis error should be thrown when the user's authentication credentials do not match.\n\n* Extends: <code><a href='/reference/typescript-api/errors/i18n-error#i18nerror'>I18nError</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => UnauthorizedError`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class UnauthorizedError extends I18nError {",
                    "    constructor()",
                    "}"
                ]
            },
            {
                "id": "forbiddenerror",
                "title": "ForbiddenError",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/error/errors.ts\" sourceLine=\"67\" packageName=\"@vendure/core\" />\n\nThis error should be thrown when a user attempts to access a resource which is outside of\nhis or her privileges.\n\n* Extends: <code><a href='/reference/typescript-api/errors/i18n-error#i18nerror'>I18nError</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(logLevel: <a href='/reference/typescript-api/logger/log-level#loglevel'>LogLevel</a> = LogLevel.Warn) => ForbiddenError`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ForbiddenError extends I18nError {",
                    "    constructor(logLevel: LogLevel = LogLevel.Warn)",
                    "}"
                ]
            },
            {
                "id": "channelnotfounderror",
                "title": "ChannelNotFoundError",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/error/errors.ts\" sourceLine=\"81\" packageName=\"@vendure/core\" />\n\nThis error should be thrown when a <a href='/reference/typescript-api/entities/channel#channel'>Channel</a> cannot be found based on the provided\nchannel token.\n\n* Extends: <code><a href='/reference/typescript-api/errors/i18n-error#i18nerror'>I18nError</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(token: string) => ChannelNotFoundError`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ChannelNotFoundError extends I18nError {",
                    "    constructor(token: string)",
                    "}"
                ]
            },
            {
                "id": "entitynotfounderror",
                "title": "EntityNotFoundError",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/error/errors.ts\" sourceLine=\"95\" packageName=\"@vendure/core\" />\n\nThis error should be thrown when an entity cannot be found in the database, i.e. no entity of\nthe given entityName (Product, User etc.) exists with the provided id.\n\n* Extends: <code><a href='/reference/typescript-api/errors/i18n-error#i18nerror'>I18nError</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(entityName: keyof typeof coreEntitiesMap | string, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => EntityNotFoundError`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class EntityNotFoundError extends I18nError {",
                    "    constructor(entityName: keyof typeof coreEntitiesMap | string, id: ID)",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "errorresultguard",
        "metadata": {
            "title": "ErrorResultGuard",
            "keywords": [
                "errorresultguard",
                "constructor",
                "issuccess",
                "assertsuccess",
                "asserterrorresult"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/testing/src/error-result-guard.ts\" sourceLine=\"50\" packageName=\"@vendure/testing\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "errorresultguard",
                "title": "ErrorResultGuard",
                "content": "\n<GenerationInfo sourceFile=\"packages/testing/src/error-result-guard.ts\" sourceLine=\"50\" packageName=\"@vendure/testing\" />\n\nA utility class which is used to assert the success of an operation\nwhich returns a union type of `SuccessType | ErrorResponse [ | ErrorResponse ]`.\nThe methods of this class are used to:\n1. assert that the result is a success or error case\n2. narrow the type so that TypeScript can correctly infer the properties of the result.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(testFn: (input: T) =&#62; boolean) => ErrorResultGuard`}   />\n\n\n"
                    },
                    {
                        "id": "issuccess",
                        "title": "isSuccess",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: T | any) => input is T`}   />\n\nA type guard which returns `true` if the input passes the `testFn` predicate.\n"
                    },
                    {
                        "id": "assertsuccess",
                        "title": "assertSuccess",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: T | R) => asserts input is T`}   />\n\nAsserts (using the testing library's `fail()` function) that the input is\nsuccessful, i.e. it passes the `testFn`.\n"
                    },
                    {
                        "id": "asserterrorresult",
                        "title": "assertErrorResult",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: T | R) => asserts input is R`}   />\n\nAsserts (using the testing library's `fail()` function) that the input is\nnot successful, i.e. it does not pass the `testFn`.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "const orderResultGuard: ErrorResultGuard<AddItemToOrderResult>",
                    "  = createErrorResultGuard(order => !!order.lines);",
                    "",
                    "it('errors when quantity is negative', async () => {",
                    "   const { addItemToOrder } = await shopClient.query<AddItemToOrder.Query, AddItemToOrder.Mutation>(ADD_ITEM_TO_ORDER, {",
                    "     productVariantId: 42, quantity: -1,",
                    "   });",
                    "",
                    "   // The test will fail",
                    "   orderResultGuard.assertErrorResult(addItemToOrder);",
                    "",
                    "   // the type of `addItemToOrder` has now been",
                    "   // narrowed to only include the ErrorResult types.",
                    "   expect(addItemToOrder.errorCode).toBe(ErrorCode.NegativeQuantityError);",
                    "}",
                    "class ErrorResultGuard<T> {",
                    "    constructor(testFn: (input: T) => boolean)",
                    "    isSuccess(input: T | any) => input is T;",
                    "    assertSuccess(input: T | R) => asserts input is T;",
                    "    assertErrorResult(input: T | R) => asserts input is R;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "errorresultunion",
        "metadata": {
            "title": "ErrorResultUnion",
            "keywords": [
                "errorresultunion"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/error/error-result.ts\" sourceLine=\"44\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "errorresultunion",
                "title": "ErrorResultUnion",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/error/error-result.ts\" sourceLine=\"44\" packageName=\"@vendure/core\" />\n\nUsed to construct a TypeScript return type for a query or mutation which, in the GraphQL schema,\nreturns a union type composed of a success result (e.g. Order) plus one or more ErrorResult\ntypes.\n\nSince the TypeScript entities do not correspond 1-to-1 with their GraphQL type counterparts,\nwe use this type to substitute them.\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    "type UpdateOrderItemsResult = Order | OrderModificationError | OrderLimitError | NegativeQuantityError;",
                    "type T1 = ErrorResultUnion<UpdateOrderItemsResult, VendureEntityOrder>;",
                    "// T1 = VendureEntityOrder | OrderModificationError | OrderLimitError | NegativeQuantityError;",
                    "type ErrorResultUnion<T extends GraphQLErrorResult | U, E extends VendureEntity, U = any> = | JustErrorResults<T>",
                    "    | E"
                ]
            }
        ]
    },
    {
        "id": "errors",
        "metadata": {
            "title": "Errors",
            "keywords": [
                "errors"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "event-types",
        "metadata": {
            "title": "Event Types",
            "keywords": [
                "accountregistrationevent",
                "constructor",
                "accountverifiedevent",
                "administratorevent",
                "assetchannelevent",
                "assetevent",
                "asset",
                "attemptedloginevent",
                "changechannelevent",
                "channelevent",
                "collectionevent",
                "collectionmodificationevent",
                "countryevent",
                "couponcodeevent",
                "customeraddressevent",
                "address",
                "customerevent",
                "customer",
                "customergroupchangeevent",
                "customergroupevent",
                "facetevent",
                "facetvalueevent",
                "fulfillmentevent",
                "fulfillmentstatetransitionevent",
                "globalsettingsevent",
                "historyentryevent",
                "historytype",
                "identifierchangeevent",
                "identifierchangerequestevent",
                "initializerevent",
                "loginevent",
                "logoutevent",
                "orderevent",
                "orderlineevent",
                "orderplacedevent",
                "orderstatetransitionevent",
                "passwordresetevent",
                "passwordresetverifiedevent",
                "paymentmethodevent",
                "paymentstatetransitionevent",
                "productchannelevent",
                "productevent",
                "product",
                "productoptionevent",
                "productoptiongroupchangeevent",
                "productoptiongroupevent",
                "productvariantchannelevent",
                "productvariantevent",
                "variants",
                "promotionevent",
                "provinceevent",
                "refundstatetransitionevent",
                "rolechangeevent",
                "roleevent",
                "searchevent",
                "sellerevent",
                "shippingmethodevent",
                "stockmovementevent",
                "type",
                "taxcategoryevent",
                "taxrateevent",
                "taxratemodificationevent",
                "zoneevent",
                "zonemembersevent"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/event-bus/events/account-registration-event.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "accountregistrationevent",
                "title": "AccountRegistrationEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/account-registration-event.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nThis event is fired when a new user registers an account, either as a stand-alone signup or after\nplacing an order.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>) => AccountRegistrationEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class AccountRegistrationEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, user: User)",
                    "}"
                ]
            },
            {
                "id": "accountverifiedevent",
                "title": "AccountVerifiedEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/account-verified-event.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nThis event is fired when a users email address successfully gets verified after\nthe `verifyCustomerAccount` mutation was executed.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, customer: <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>) => AccountVerifiedEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class AccountVerifiedEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, customer: Customer)",
                    "}"
                ]
            },
            {
                "id": "administratorevent",
                "title": "AdministratorEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/administrator-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a> is added, updated or deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>, AdministratorInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>, type: 'created' | 'updated' | 'deleted', input?: AdministratorInputTypes) => AdministratorEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class AdministratorEvent extends VendureEntityEvent<Administrator, AdministratorInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Administrator, type: 'created' | 'updated' | 'deleted', input?: AdministratorInputTypes)",
                    "}"
                ]
            },
            {
                "id": "assetchannelevent",
                "title": "AssetChannelEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/asset-channel-event.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever an <a href='/reference/typescript-api/entities/asset#asset'>Asset</a> is assigned or removed\nFrom a channel.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, asset: <a href='/reference/typescript-api/entities/asset#asset'>Asset</a>, channelId: <a href='/reference/typescript-api/common/id#id'>ID</a>, type: 'assigned' | 'removed') => AssetChannelEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class AssetChannelEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, asset: Asset, channelId: ID, type: 'assigned' | 'removed')",
                    "}"
                ]
            },
            {
                "id": "assetevent",
                "title": "AssetEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/asset-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/asset#asset'>Asset</a> is added, updated or deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>, AssetInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/asset#asset'>Asset</a>, type: 'created' | 'updated' | 'deleted', input?: AssetInputTypes) => AssetEvent`}   />\n\n\n"
                    },
                    {
                        "id": "asset",
                        "title": "asset",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>`}  since=\"1.4\"  />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class AssetEvent extends VendureEntityEvent<Asset, AssetInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Asset, type: 'created' | 'updated' | 'deleted', input?: AssetInputTypes)",
                    "    asset: Asset",
                    "}"
                ]
            },
            {
                "id": "attemptedloginevent",
                "title": "AttemptedLoginEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/attempted-login-event.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nThis event is fired when an attempt is made to log in via the shop or admin API `login` mutation.\nThe `strategy` represents the name of the AuthenticationStrategy used in the login attempt.\nIf the \"native\" strategy is used, the additional `identifier` property will be available.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, strategy: string, identifier?: string) => AttemptedLoginEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class AttemptedLoginEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, strategy: string, identifier?: string)",
                    "}"
                ]
            },
            {
                "id": "changechannelevent",
                "title": "ChangeChannelEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/change-channel-event.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever an <a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a> entity is assigned or removed\nfrom a channel. The entity property contains the value before updating the channels.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: T, channelIds: <a href='/reference/typescript-api/common/id#id'>ID</a>[], type: 'assigned' | 'removed', entityType?: Type&#60;T&#62;) => ChangeChannelEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ChangeChannelEvent<T extends ChannelAware & VendureEntity> extends VendureEvent {",
                    "    constructor(ctx: RequestContext, entity: T, channelIds: ID[], type: 'assigned' | 'removed', entityType?: Type<T>)",
                    "}"
                ]
            },
            {
                "id": "channelevent",
                "title": "ChannelEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/channel-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/channel#channel'>Channel</a> is added, updated or deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>, ChannelInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/channel#channel'>Channel</a>, type: 'created' | 'updated' | 'deleted', input?: ChannelInputTypes) => ChannelEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ChannelEvent extends VendureEntityEvent<Channel, ChannelInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Channel, type: 'created' | 'updated' | 'deleted', input?: ChannelInputTypes)",
                    "}"
                ]
            },
            {
                "id": "collectionevent",
                "title": "CollectionEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/collection-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/collection#collection'>Collection</a> is added, updated or deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>, CollectionInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/collection#collection'>Collection</a>, type: 'created' | 'updated' | 'deleted', input?: CollectionInputTypes) => CollectionEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class CollectionEvent extends VendureEntityEvent<Collection, CollectionInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Collection, type: 'created' | 'updated' | 'deleted', input?: CollectionInputTypes)",
                    "}"
                ]
            },
            {
                "id": "collectionmodificationevent",
                "title": "CollectionModificationEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/collection-modification-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a Collection is modified in some way. The `productVariantIds`\nargument is an array of ids of all ProductVariants which:\n\n1. were part of this collection prior to modification and are no longer\n2. are now part of this collection after modification but were not before\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, collection: <a href='/reference/typescript-api/entities/collection#collection'>Collection</a>, productVariantIds: <a href='/reference/typescript-api/common/id#id'>ID</a>[]) => CollectionModificationEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class CollectionModificationEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, collection: Collection, productVariantIds: ID[])",
                    "}"
                ]
            },
            {
                "id": "countryevent",
                "title": "CountryEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/country-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/country#country'>Country</a> is added, updated or deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/country#country'>Country</a>, CountryInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/country#country'>Country</a>, type: 'created' | 'updated' | 'deleted', input?: CountryInputTypes) => CountryEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class CountryEvent extends VendureEntityEvent<Country, CountryInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Country, type: 'created' | 'updated' | 'deleted', input?: CountryInputTypes)",
                    "}"
                ]
            },
            {
                "id": "couponcodeevent",
                "title": "CouponCodeEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/coupon-code-event.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever an coupon code of an active <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>\nis assigned or removed to an <a href='/reference/typescript-api/entities/order#order'>Order</a>.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, couponCode: string, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, type: 'assigned' | 'removed') => CouponCodeEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class CouponCodeEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, couponCode: string, orderId: ID, type: 'assigned' | 'removed')",
                    "}"
                ]
            },
            {
                "id": "customeraddressevent",
                "title": "CustomerAddressEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/customer-address-event.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/address#address'>Address</a> is added, updated\nor deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/address#address'>Address</a>, CustomerAddressInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/address#address'>Address</a>, type: 'created' | 'updated' | 'deleted', input?: CustomerAddressInputTypes) => CustomerAddressEvent`}   />\n\n\n"
                    },
                    {
                        "id": "address",
                        "title": "address",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/address#address'>Address</a>`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class CustomerAddressEvent extends VendureEntityEvent<Address, CustomerAddressInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Address, type: 'created' | 'updated' | 'deleted', input?: CustomerAddressInputTypes)",
                    "    address: Address",
                    "}"
                ]
            },
            {
                "id": "customerevent",
                "title": "CustomerEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/customer-event.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/customer#customer'>Customer</a> is added, updated\nor deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>, CustomerInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>, type: 'created' | 'updated' | 'deleted', input?: CustomerInputTypes) => CustomerEvent`}   />\n\n\n"
                    },
                    {
                        "id": "customer",
                        "title": "customer",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>`}  since=\"1.4\"  />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class CustomerEvent extends VendureEntityEvent<Customer, CustomerInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Customer, type: 'created' | 'updated' | 'deleted', input?: CustomerInputTypes)",
                    "    customer: Customer",
                    "}"
                ]
            },
            {
                "id": "customergroupchangeevent",
                "title": "CustomerGroupChangeEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/customer-group-change-event.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever one or more <a href='/reference/typescript-api/entities/customer#customer'>Customer</a> is assigned to or removed from a\n<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, customers: <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>[], customGroup: <a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>, type: 'assigned' | 'removed') => CustomerGroupChangeEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class CustomerGroupChangeEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, customers: Customer[], customGroup: CustomerGroup, type: 'assigned' | 'removed')",
                    "}"
                ]
            },
            {
                "id": "customergroupevent",
                "title": "CustomerGroupEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/customer-group-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a> is added, updated or deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>, CustomerGroupInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>, type: 'created' | 'updated' | 'deleted', input?: CustomerGroupInputTypes) => CustomerGroupEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class CustomerGroupEvent extends VendureEntityEvent<CustomerGroup, CustomerGroupInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: CustomerGroup, type: 'created' | 'updated' | 'deleted', input?: CustomerGroupInputTypes)",
                    "}"
                ]
            },
            {
                "id": "facetevent",
                "title": "FacetEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/facet-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/facet#facet'>Facet</a> is added, updated or deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>, FacetInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/facet#facet'>Facet</a>, type: 'created' | 'updated' | 'deleted', input?: FacetInputTypes) => FacetEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class FacetEvent extends VendureEntityEvent<Facet, FacetInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Facet, type: 'created' | 'updated' | 'deleted', input?: FacetInputTypes)",
                    "}"
                ]
            },
            {
                "id": "facetvalueevent",
                "title": "FacetValueEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/facet-value-event.ts\" sourceLine=\"26\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a> is added, updated or deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>, FacetValueInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>, type: 'created' | 'updated' | 'deleted', input?: FacetValueInputTypes) => FacetValueEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class FacetValueEvent extends VendureEntityEvent<FacetValue, FacetValueInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: FacetValue, type: 'created' | 'updated' | 'deleted', input?: FacetValueInputTypes)",
                    "}"
                ]
            },
            {
                "id": "fulfillmentevent",
                "title": "FulfillmentEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/fulfillment-event.ts\" sourceLine=\"27\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a> is added. The type is always `created`.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a>, CreateFulfillmentInput&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a>, input?: CreateFulfillmentInput) => FulfillmentEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class FulfillmentEvent extends VendureEntityEvent<Fulfillment, CreateFulfillmentInput> {",
                    "    constructor(ctx: RequestContext, entity: Fulfillment, input?: CreateFulfillmentInput)",
                    "}"
                ]
            },
            {
                "id": "fulfillmentstatetransitionevent",
                "title": "FulfillmentStateTransitionEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/fulfillment-state-transition-event.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever an <a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a> transitions from one <a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a> to another.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fromState: <a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a>, toState: <a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a>, ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, fulfillment: <a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a>) => FulfillmentStateTransitionEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class FulfillmentStateTransitionEvent extends VendureEvent {",
                    "    constructor(fromState: FulfillmentState, toState: FulfillmentState, ctx: RequestContext, fulfillment: Fulfillment)",
                    "}"
                ]
            },
            {
                "id": "globalsettingsevent",
                "title": "GlobalSettingsEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/global-settings-event.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a {@link GlobalSettings} is added. The type is always `updated`, because it's\nonly created once and never deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;GlobalSettings, UpdateGlobalSettingsInput&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: GlobalSettings, input?: UpdateGlobalSettingsInput) => GlobalSettingsEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class GlobalSettingsEvent extends VendureEntityEvent<GlobalSettings, UpdateGlobalSettingsInput> {",
                    "    constructor(ctx: RequestContext, entity: GlobalSettings, input?: UpdateGlobalSettingsInput)",
                    "}"
                ]
            },
            {
                "id": "historyentryevent",
                "title": "HistoryEntryEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/history-entry-event.ts\" sourceLine=\"23\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever one <a href='/reference/typescript-api/entities/history-entry#historyentry'>HistoryEntry</a> is added, updated or deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/history-entry#historyentry'>HistoryEntry</a>, HistoryInput&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "historytype",
                        "title": "historyType",
                        "content": "\n<MemberInfo kind=\"property\" type={`'order' | 'customer' | string`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/history-entry#historyentry'>HistoryEntry</a>, type: 'created' | 'updated' | 'deleted', historyType: 'order' | 'customer' | string, input?: HistoryInput) => HistoryEntryEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class HistoryEntryEvent extends VendureEntityEvent<HistoryEntry, HistoryInput> {",
                    "    public readonly historyType: 'order' | 'customer' | string;",
                    "    constructor(ctx: RequestContext, entity: HistoryEntry, type: 'created' | 'updated' | 'deleted', historyType: 'order' | 'customer' | string, input?: HistoryInput)",
                    "}"
                ]
            },
            {
                "id": "identifierchangeevent",
                "title": "IdentifierChangeEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/identifier-change-event.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nThis event is fired when a registered user successfully changes the identifier (ie email address)\nassociated with their account.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>, oldIdentifier: string) => IdentifierChangeEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class IdentifierChangeEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, user: User, oldIdentifier: string)",
                    "}"
                ]
            },
            {
                "id": "identifierchangerequestevent",
                "title": "IdentifierChangeRequestEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/identifier-change-request-event.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nThis event is fired when a registered user requests to update the identifier (ie email address)\nassociated with the account.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>) => IdentifierChangeRequestEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class IdentifierChangeRequestEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, user: User)",
                    "}"
                ]
            },
            {
                "id": "initializerevent",
                "title": "InitializerEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/initializer-event.ts\" sourceLine=\"11\" packageName=\"@vendure/core\" since=\"1.7.0\" />\n\nThis event is fired when vendure finished initializing its services inside the {@code InitializerService}\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => InitializerEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class InitializerEvent extends VendureEvent {",
                    "    constructor()",
                    "}"
                ]
            },
            {
                "id": "loginevent",
                "title": "LoginEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/login-event.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" />\n\nThis event is fired when a user successfully logs in via the shop or admin API `login` mutation.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>) => LoginEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class LoginEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, user: User)",
                    "}"
                ]
            },
            {
                "id": "logoutevent",
                "title": "LogoutEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/logout-event.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" />\n\nThis event is fired when a user logs out via the shop or admin API `logout` mutation.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => LogoutEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class LogoutEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext)",
                    "}"
                ]
            },
            {
                "id": "orderevent",
                "title": "OrderEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/order-event.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever an <a href='/reference/typescript-api/entities/order#order'>Order</a> is added, updated\nor deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, type: 'created' | 'updated' | 'deleted') => OrderEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class OrderEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, order: Order, type: 'created' | 'updated' | 'deleted')",
                    "}"
                ]
            },
            {
                "id": "orderlineevent",
                "title": "OrderLineEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/order-line-event.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever an <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a> is added, updated\nor deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, orderLine: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>, type: 'created' | 'updated' | 'deleted') => OrderLineEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class OrderLineEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, order: Order, orderLine: OrderLine, type: 'created' | 'updated' | 'deleted')",
                    "}"
                ]
            },
            {
                "id": "orderplacedevent",
                "title": "OrderPlacedEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/order-placed-event.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever an <a href='/reference/typescript-api/entities/order#order'>Order</a> is set as \"placed\", which by default is\nwhen it transitions from 'ArrangingPayment' to either 'PaymentAuthorized' or 'PaymentSettled'.\n\nNote that the exact point that it is set as \"placed\" can be configured according to the\n<a href='/reference/typescript-api/orders/order-placed-strategy#orderplacedstrategy'>OrderPlacedStrategy</a>.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fromState: <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, toState: <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => OrderPlacedEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class OrderPlacedEvent extends VendureEvent {",
                    "    constructor(fromState: OrderState, toState: OrderState, ctx: RequestContext, order: Order)",
                    "}"
                ]
            },
            {
                "id": "orderstatetransitionevent",
                "title": "OrderStateTransitionEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/order-state-transition-event.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever an <a href='/reference/typescript-api/entities/order#order'>Order</a> transitions from one <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a> to another.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fromState: <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, toState: <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => OrderStateTransitionEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class OrderStateTransitionEvent extends VendureEvent {",
                    "    constructor(fromState: OrderState, toState: OrderState, ctx: RequestContext, order: Order)",
                    "}"
                ]
            },
            {
                "id": "passwordresetevent",
                "title": "PasswordResetEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/password-reset-event.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" />\n\nThis event is fired when a Customer requests a password reset email.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>) => PasswordResetEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class PasswordResetEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, user: User)",
                    "}"
                ]
            },
            {
                "id": "passwordresetverifiedevent",
                "title": "PasswordResetVerifiedEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/password-reset-verified-event.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired when a password reset is executed with a verified token.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>) => PasswordResetVerifiedEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class PasswordResetVerifiedEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, user: User)",
                    "}"
                ]
            },
            {
                "id": "paymentmethodevent",
                "title": "PaymentMethodEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/payment-method-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a> is added, updated\nor deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>, PaymentMethodInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>, type: 'created' | 'updated' | 'deleted', input?: PaymentMethodInputTypes) => PaymentMethodEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class PaymentMethodEvent extends VendureEntityEvent<PaymentMethod, PaymentMethodInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: PaymentMethod, type: 'created' | 'updated' | 'deleted', input?: PaymentMethodInputTypes)",
                    "}"
                ]
            },
            {
                "id": "paymentstatetransitionevent",
                "title": "PaymentStateTransitionEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/payment-state-transition-event.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/payment#payment'>Payment</a> transitions from one <a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a> to another, e.g.\na Payment is authorized by the payment provider.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fromState: <a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>, toState: <a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>, ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, payment: <a href='/reference/typescript-api/entities/payment#payment'>Payment</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => PaymentStateTransitionEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class PaymentStateTransitionEvent extends VendureEvent {",
                    "    constructor(fromState: PaymentState, toState: PaymentState, ctx: RequestContext, payment: Payment, order: Order)",
                    "}"
                ]
            },
            {
                "id": "productchannelevent",
                "title": "ProductChannelEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/product-channel-event.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/product#product'>Product</a> is added, updated\nor deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, product: <a href='/reference/typescript-api/entities/product#product'>Product</a>, channelId: <a href='/reference/typescript-api/common/id#id'>ID</a>, type: 'assigned' | 'removed') => ProductChannelEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ProductChannelEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, product: Product, channelId: ID, type: 'assigned' | 'removed')",
                    "}"
                ]
            },
            {
                "id": "productevent",
                "title": "ProductEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/product-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/product#product'>Product</a> is added, updated\nor deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>, ProductInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/product#product'>Product</a>, type: 'created' | 'updated' | 'deleted', input?: ProductInputTypes) => ProductEvent`}   />\n\n\n"
                    },
                    {
                        "id": "product",
                        "title": "product",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product#product'>Product</a>`}  since=\"1.4\"  />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ProductEvent extends VendureEntityEvent<Product, ProductInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Product, type: 'created' | 'updated' | 'deleted', input?: ProductInputTypes)",
                    "    product: Product",
                    "}"
                ]
            },
            {
                "id": "productoptionevent",
                "title": "ProductOptionEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/product-option-event.ts\" sourceLine=\"26\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a> is added or updated.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a>, ProductOptionInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a>, type: 'created' | 'updated' | 'deleted', input?: ProductOptionInputTypes) => ProductOptionEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ProductOptionEvent extends VendureEntityEvent<ProductOption, ProductOptionInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: ProductOption, type: 'created' | 'updated' | 'deleted', input?: ProductOptionInputTypes)",
                    "}"
                ]
            },
            {
                "id": "productoptiongroupchangeevent",
                "title": "ProductOptionGroupChangeEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/product-option-group-change-event.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a> is assigned or removed from a <a href='/reference/typescript-api/entities/product#product'>Product</a>.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, product: <a href='/reference/typescript-api/entities/product#product'>Product</a>, optionGroupId: <a href='/reference/typescript-api/common/id#id'>ID</a>, type: 'assigned' | 'removed') => ProductOptionGroupChangeEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ProductOptionGroupChangeEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, product: Product, optionGroupId: ID, type: 'assigned' | 'removed')",
                    "}"
                ]
            },
            {
                "id": "productoptiongroupevent",
                "title": "ProductOptionGroupEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/product-option-group-event.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a> is added or updated.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;\n     <a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a>,\n     ProductOptionGroupInputTypes\n &#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a>, type: 'created' | 'updated' | 'deleted', input?: ProductOptionGroupInputTypes) => ProductOptionGroupEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ProductOptionGroupEvent extends VendureEntityEvent<",
                    "    ProductOptionGroup,",
                    "    ProductOptionGroupInputTypes",
                    "> {",
                    "    constructor(ctx: RequestContext, entity: ProductOptionGroup, type: 'created' | 'updated' | 'deleted', input?: ProductOptionGroupInputTypes)",
                    "}"
                ]
            },
            {
                "id": "productvariantchannelevent",
                "title": "ProductVariantChannelEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/product-variant-channel-event.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a> is assigned or removed from a <a href='/reference/typescript-api/entities/channel#channel'>Channel</a>.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariant: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>, channelId: <a href='/reference/typescript-api/common/id#id'>ID</a>, type: 'assigned' | 'removed') => ProductVariantChannelEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ProductVariantChannelEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, productVariant: ProductVariant, channelId: ID, type: 'assigned' | 'removed')",
                    "}"
                ]
            },
            {
                "id": "productvariantevent",
                "title": "ProductVariantEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/product-variant-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a> is added, updated\nor deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>[], ProductVariantInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>[], type: 'created' | 'updated' | 'deleted', input?: ProductVariantInputTypes) => ProductVariantEvent`}   />\n\n\n"
                    },
                    {
                        "id": "variants",
                        "title": "variants",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>[]`}  since=\"1.4\"  />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ProductVariantEvent extends VendureEntityEvent<ProductVariant[], ProductVariantInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: ProductVariant[], type: 'created' | 'updated' | 'deleted', input?: ProductVariantInputTypes)",
                    "    variants: ProductVariant[]",
                    "}"
                ]
            },
            {
                "id": "promotionevent",
                "title": "PromotionEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/promotion-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a> is added, updated\nor deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>, PromotionInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>, type: 'created' | 'updated' | 'deleted', input?: PromotionInputTypes) => PromotionEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class PromotionEvent extends VendureEntityEvent<Promotion, PromotionInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Promotion, type: 'created' | 'updated' | 'deleted', input?: PromotionInputTypes)",
                    "}"
                ]
            },
            {
                "id": "provinceevent",
                "title": "ProvinceEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/province-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"2.0\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/province#province'>Province</a> is added, updated or deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/province#province'>Province</a>, ProvinceInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/province#province'>Province</a>, type: 'created' | 'updated' | 'deleted', input?: ProvinceInputTypes) => ProvinceEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ProvinceEvent extends VendureEntityEvent<Province, ProvinceInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Province, type: 'created' | 'updated' | 'deleted', input?: ProvinceInputTypes)",
                    "}"
                ]
            },
            {
                "id": "refundstatetransitionevent",
                "title": "RefundStateTransitionEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/refund-state-transition-event.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a {@link Refund} transitions from one <a href='/reference/typescript-api/payment/refund-state#refundstate'>RefundState</a> to another.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fromState: <a href='/reference/typescript-api/payment/refund-state#refundstate'>RefundState</a>, toState: <a href='/reference/typescript-api/payment/refund-state#refundstate'>RefundState</a>, ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, refund: Refund, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => RefundStateTransitionEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class RefundStateTransitionEvent extends VendureEvent {",
                    "    constructor(fromState: RefundState, toState: RefundState, ctx: RequestContext, refund: Refund, order: Order)",
                    "}"
                ]
            },
            {
                "id": "rolechangeevent",
                "title": "RoleChangeEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/role-change-event.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever one <a href='/reference/typescript-api/entities/role#role'>Role</a> is assigned or removed from a user.\nThe property `roleIds` only contains the removed or assigned role ids.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, admin: <a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>, roleIds: <a href='/reference/typescript-api/common/id#id'>ID</a>[], type: 'assigned' | 'removed') => RoleChangeEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class RoleChangeEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, admin: Administrator, roleIds: ID[], type: 'assigned' | 'removed')",
                    "}"
                ]
            },
            {
                "id": "roleevent",
                "title": "RoleEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/role-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"1.4\" />\n\nThis event is fired whenever one <a href='/reference/typescript-api/entities/role#role'>Role</a> is added, updated or deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/role#role'>Role</a>, RoleInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/role#role'>Role</a>, type: 'created' | 'updated' | 'deleted', input?: RoleInputTypes) => RoleEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class RoleEvent extends VendureEntityEvent<Role, RoleInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Role, type: 'created' | 'updated' | 'deleted', input?: RoleInputTypes)",
                    "}"
                ]
            },
            {
                "id": "searchevent",
                "title": "SearchEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/search-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"1.6.0\" />\n\nThis event is fired whenever a search query is executed.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: ExtendedSearchInput) => SearchEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class SearchEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, input: ExtendedSearchInput)",
                    "}"
                ]
            },
            {
                "id": "sellerevent",
                "title": "SellerEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/seller-event.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" since=\"2.0.1\" />\n\nThis event is fired whenever one <a href='/reference/typescript-api/entities/seller#seller'>Seller</a> is added, updated or deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/seller#seller'>Seller</a>, SellerInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/seller#seller'>Seller</a>, type: 'created' | 'updated' | 'deleted', input?: SellerInputTypes) => SellerEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class SellerEvent extends VendureEntityEvent<Seller, SellerInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Seller, type: 'created' | 'updated' | 'deleted', input?: SellerInputTypes)",
                    "}"
                ]
            },
            {
                "id": "shippingmethodevent",
                "title": "ShippingMethodEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/shipping-method-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a> is added, updated\nor deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>, ShippingMethodInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>, type: 'created' | 'updated' | 'deleted', input?: ShippingMethodInputTypes) => ShippingMethodEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ShippingMethodEvent extends VendureEntityEvent<ShippingMethod, ShippingMethodInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: ShippingMethod, type: 'created' | 'updated' | 'deleted', input?: ShippingMethodInputTypes)",
                    "}"
                ]
            },
            {
                "id": "stockmovementevent",
                "title": "StockMovementEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/stock-movement-event.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" since=\"1.1.0\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/stock-movement#stockmovement'>StockMovement</a> entity is created, which occurs when the saleable\nstock level of a ProductVariant is altered due to things like sales, manual adjustments, and cancellations.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`StockMovementType`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, stockMovements: <a href='/reference/typescript-api/entities/stock-movement#stockmovement'>StockMovement</a>[]) => StockMovementEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class StockMovementEvent extends VendureEvent {",
                    "    public readonly type: StockMovementType;",
                    "    constructor(ctx: RequestContext, stockMovements: StockMovement[])",
                    "}"
                ]
            },
            {
                "id": "taxcategoryevent",
                "title": "TaxCategoryEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/tax-category-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a> is added, updated\nor deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>, TaxCategoryInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>, type: 'created' | 'updated' | 'deleted', input?: TaxCategoryInputTypes) => TaxCategoryEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class TaxCategoryEvent extends VendureEntityEvent<TaxCategory, TaxCategoryInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: TaxCategory, type: 'created' | 'updated' | 'deleted', input?: TaxCategoryInputTypes)",
                    "}"
                ]
            },
            {
                "id": "taxrateevent",
                "title": "TaxRateEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/tax-rate-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a> is added, updated\nor deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>, TaxRateInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>, type: 'created' | 'updated' | 'deleted', input?: TaxRateInputTypes) => TaxRateEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class TaxRateEvent extends VendureEntityEvent<TaxRate, TaxRateInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: TaxRate, type: 'created' | 'updated' | 'deleted', input?: TaxRateInputTypes)",
                    "}"
                ]
            },
            {
                "id": "taxratemodificationevent",
                "title": "TaxRateModificationEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/tax-rate-modification-event.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a TaxRate is changed\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, taxRate: <a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>) => TaxRateModificationEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class TaxRateModificationEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, taxRate: TaxRate)",
                    "}"
                ]
            },
            {
                "id": "zoneevent",
                "title": "ZoneEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/zone-event.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/zone#zone'>Zone</a> is added, updated\nor deleted.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-entity-event#vendureentityevent'>VendureEntityEvent</a>&#60;<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>, ZoneInputTypes&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/zone#zone'>Zone</a>, type: 'created' | 'updated' | 'deleted', input?: ZoneInputTypes) => ZoneEvent`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ZoneEvent extends VendureEntityEvent<Zone, ZoneInputTypes> {",
                    "    constructor(ctx: RequestContext, entity: Zone, type: 'created' | 'updated' | 'deleted', input?: ZoneInputTypes)",
                    "}"
                ]
            },
            {
                "id": "zonemembersevent",
                "title": "ZoneMembersEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/events/zone-members-event.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />\n\nThis event is fired whenever a <a href='/reference/typescript-api/entities/zone#zone'>Zone</a> gets <a href='/reference/typescript-api/entities/country#country'>Country</a> members assigned or removed\nThe `entity` property contains the zone with the already updated member field.\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: <a href='/reference/typescript-api/entities/zone#zone'>Zone</a>, type: 'assigned' | 'removed', memberIds: <a href='/reference/typescript-api/common/id#id'>ID</a>[]) => ZoneMembersEvent`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ZoneMembersEvent extends VendureEvent {",
                    "    constructor(ctx: RequestContext, entity: Zone, type: 'assigned' | 'removed', memberIds: ID[])",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "eventbus",
        "metadata": {
            "title": "EventBus",
            "keywords": [
                "eventbus",
                "constructor",
                "publish",
                "oftype",
                "filter"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/event-bus/event-bus.ts\" sourceLine=\"57\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "eventbus",
                "title": "EventBus",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/event-bus.ts\" sourceLine=\"57\" packageName=\"@vendure/core\" />\n\nThe EventBus is used to globally publish events which can then be subscribed to.\n\nEvents are published whenever certain actions take place within the Vendure server, for example:\n\n* when a Product is updated (<a href='/reference/typescript-api/events/event-types#productevent'>ProductEvent</a>)\n* when an Order transitions state (<a href='/reference/typescript-api/events/event-types#orderstatetransitionevent'>OrderStateTransitionEvent</a>)\n* when a Customer registers a new account (<a href='/reference/typescript-api/events/event-types#accountregistrationevent'>AccountRegistrationEvent</a>)\n\nUsing the EventBus it is possible to subscribe to an take action when these events occur.\nThis is done with the `.ofType()` method, which takes an event type and returns an rxjs observable\nstream of events:\n\n*Example*\n\n\n* Implements: <code>OnModuleDestroy</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(transactionSubscriber: TransactionSubscriber) => EventBus`}   />\n\n\n"
                    },
                    {
                        "id": "publish",
                        "title": "publish",
                        "content": "\n<MemberInfo kind=\"method\" type={`(event: T) => void`}   />\n\nPublish an event which any subscribers can react to.\n"
                    },
                    {
                        "id": "oftype",
                        "title": "ofType",
                        "content": "\n<MemberInfo kind=\"method\" type={`(type: Type&#60;T&#62;) => Observable&#60;T&#62;`}   />\n\nReturns an RxJS Observable stream of events of the given type.\nIf the event contains a <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> object, the subscriber\nwill only get called after any active database transactions are complete.\n\nThis means that the subscriber function can safely access all updated\ndata related to the event.\n"
                    },
                    {
                        "id": "filter",
                        "title": "filter",
                        "content": "\n<MemberInfo kind=\"method\" type={`(predicate: (event: <a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a>) =&#62; boolean) => Observable&#60;T&#62;`}   />\n\nReturns an RxJS Observable stream of events filtered by a custom predicate.\nIf the event contains a <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> object, the subscriber\nwill only get called after any active database transactions are complete.\n\nThis means that the subscriber function can safely access all updated\ndata related to the event.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { OnApplicationBootstrap } from '@nestjs/common';",
                    "import { EventBus, PluginCommonModule, VendurePlugin } from '@vendure/core';",
                    "import { filter } from 'rxjs/operators';",
                    "",
                    "@VendurePlugin({",
                    "    imports: [PluginCommonModule]",
                    "})",
                    "export class MyPlugin implements OnApplicationBootstrap {",
                    "",
                    "  constructor(private eventBus: EventBus) {}",
                    "",
                    "  async onApplicationBootstrap() {",
                    "",
                    "    this.eventBus",
                    "      .ofType(OrderStateTransitionEvent)",
                    "      .pipe(",
                    "        filter(event => event.toState === 'PaymentSettled'),",
                    "      )",
                    "      .subscribe((event) => {",
                    "        // do some action when this event fires",
                    "      });",
                    "  }",
                    "}",
                    "class EventBus implements OnModuleDestroy {",
                    "    constructor(transactionSubscriber: TransactionSubscriber)",
                    "    publish(event: T) => void;",
                    "    ofType(type: Type<T>) => Observable<T>;",
                    "    filter(predicate: (event: VendureEvent) => boolean) => Observable<T>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "events",
        "metadata": {
            "title": "Events",
            "keywords": [
                "events"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "extend-the-graphql-api",
        "metadata": {
            "title": "Extend the GraphQL API",
            "keywords": [
                "adding a new query",
                "adding a new mutation",
                "defining a new type",
                "add fields to existing types",
                "override built-in resolvers",
                "resolving union results",
                "defining custom scalars"
            ],
            "description": "Extension to the GraphQL API consists of two parts: 1. **Schema extensions**. These define new types, fields, queries and mutations. 2. **Resolvers**. These provide the logic that backs up the schema extensions. The Shop API and Admin APIs can be extended independently: ```ts title=\"src/plugins/top-products/top-products.plugin.ts\""
        },
        "content": "",
        "sections": [
            {
                "id": "adding-a-new-query",
                "title": "Adding a new Query",
                "content": "\nLet's take a simple example where we want to be able to display a banner in our storefront.\n\nFirst let's define a new query in the schema:\n\n\nThis defines a new query called `activeBanner` which takes a `locationId` string argument and returns a string. \n\n:::tip\n`!` = non-nullable\n\nIn GraphQL, the `!` in `locationId: String!` indicates that the argument is required, and the lack of a `!` on the return type indicates that the return value can be `null`.\n:::\n\nWe can now define the resolver for this query:\n\n\nThe `BannerService` would implement the actual logic for fetching the banner text from the database.\n\nFinally, we need to add the resolver to the plugin metadata:\n\n\n",
                "subsections": [],
                "code": [
                    "import gql from 'graphql-tag';",
                    "",
                    "export const shopApiExtensions = gql`",
                    "  extend type Query {",
                    "    // highlight-next-line",
                    "    activeBanner(locationId: String!): String",
                    "  }",
                    "`;",
                    "import { Args, Query, Resolver } from '@nestjs/graphql';",
                    "import { Ctx, RequestContext } from '@vendure/core';",
                    "import { BannerService } from '../services/banner.service.ts';",
                    "",
                    "@Resolver()",
                    "class BannerShopResolver {",
                    "    constructor(private bannerService: BannerService) {}",
                    "",
                    "    // highlight-start",
                    "    @Query()",
                    "    activeBanner(@Ctx() ctx: RequestContext, @Args() args: { locationId: string; }) {",
                    "        return this.bannerService.getBanner(ctx, args.locationId);",
                    "    }",
                    "    // highlight-end",
                    "}",
                    "import { PluginCommonModule, VendurePlugin } from '@vendure/core';",
                    "import { BannerService } from './services/banner.service';",
                    "import { BannerShopResolver } from './api/banner-shop.resolver';",
                    "import { shopApiExtensions } from './api/api-extensions';",
                    "",
                    "@VendurePlugin({",
                    "    imports: [PluginCommonModule],",
                    "    // highlight-start",
                    "    shopApiExtensions: {",
                    "        schema: shopApiExtensions,",
                    "        resolvers: [BannerShopResolver],",
                    "    },",
                    "    // highlight-end",
                    "    providers: [BannerService],",
                    "})",
                    "export class BannerPlugin {}"
                ]
            },
            {
                "id": "adding-a-new-mutation",
                "title": "Adding a new Mutation",
                "content": "\nLet's continue the `BannerPlugin` example and now add a mutation which allows the administrator to set the banner text.\n\nFirst we define the mutation in the schema:\n\n\nHere we are defining a new mutation called `setBannerText` which takes two arguments, `locationId` and `text`, both of which are required strings. The return type is a non-nullable string.\n\nNow let's define a resolver to handle that mutation:\n\n\nNote that we have used the `@Allow()` decorator to ensure that only users with the `UpdateSettings` permission can call this mutation. We have also wrapped the resolver in a transaction using `@Transaction()`, which is a good idea for any mutation which modifies the database.\n\n:::info\nFor more information on the available decorators, see the [API Layer \"decorators\" guide](/guides/developer-guide/the-api-layer/#api-decorators).\n:::\n\nFinally, we add the resolver to the plugin metadata:\n\n\n\n",
                "subsections": [],
                "code": [
                    "import gql from 'graphql-tag';",
                    "",
                    "export const adminApiExtensions = gql`",
                    "  extend type Mutation {",
                    "    // highlight-next-line",
                    "    setBannerText(locationId: String!, text: String!): String!",
                    "  }",
                    "`;",
                    "import { Args, Mutation, Resolver } from '@nestjs/graphql';",
                    "import { Allow, Ctx, RequestContext, Permission, Transaction } from '@vendure/core';",
                    "import { BannerService } from '../services/banner.service.ts';",
                    "",
                    "@Resolver()",
                    "class BannerAdminResolver {",
                    "    constructor(private bannerService: BannerService) {}",
                    "",
                    "    // highlight-start",
                    "    @Allow(Permission.UpdateSettings)",
                    "    @Transaction()",
                    "    @Mutation()",
                    "    setBannerText(@Ctx() ctx: RequestContext, @Args() args: { locationId: string; text: string; }) {",
                    "        return this.bannerService.setBannerText(ctx, args.locationId, args.text);",
                    "    }",
                    "    // highlight-end",
                    "}",
                    "import { PluginCommonModule, VendurePlugin } from '@vendure/core';",
                    "import { BannerService } from './services/banner.service';",
                    "import { BannerShopResolver } from './api/banner-shop.resolver';",
                    "import { BannerAdminResolver } from './api/banner-admin.resolver';",
                    "import { shopApiExtensions, adminApiExtensions } from './api/api-extensions';",
                    "",
                    "@VendurePlugin({",
                    "    imports: [PluginCommonModule],",
                    "    shopApiExtensions: {",
                    "        schema: shopApiExtensions,",
                    "        resolvers: [BannerShopResolver],",
                    "    },",
                    "    // highlight-start",
                    "    adminApiExtensions: {",
                    "        schema: adminApiExtensions,",
                    "        resolvers: [BannerAdminResolver],",
                    "    },",
                    "    // highlight-end",
                    "    providers: [BannerService],",
                    "})",
                    "export class BannerPlugin {}"
                ]
            },
            {
                "id": "defining-a-new-type",
                "title": "Defining a new type",
                "content": "\nIf you have defined a new database entity, it is likely that you'll want to expose this entity in your GraphQL API. To do so, you'll need to define a corresponding GraphQL type.\n\nUsing the `ProductReview` entity from the [Define a database entity guide](/guides/developer-guide/database-entity//), let's see how we can expose it as a new type in the API.\n\nAs a reminder, here is the `ProductReview` entity:\n\nLet's define a new GraphQL type which corresponds to this entity:\n\n\n:::info\nAssuming the entity is a standard `VendureEntity`, it is good practice to always include the `id`, `createdAt` and `updatedAt` fields in the GraphQL type.\n\nAdditionally, we implement `Node` which is a built-in GraphQL interface.\n:::\n\nNow we can add this type to both the Admin and Shop APIs:\n\n\n",
                "subsections": [],
                "code": [
                    "import { DeepPartial } from '@vendure/common/lib/shared-types';",
                    "import { VendureEntity, Product, EntityId, ID } from '@vendure/core';",
                    "import { Column, Entity, ManyToOne } from 'typeorm';",
                    "",
                    "@Entity()",
                    "class ProductReview extends VendureEntity {",
                    "    constructor(input?: DeepPartial<ProductReview>) {",
                    "        super(input);",
                    "    }",
                    "",
                    "    @ManyToOne(type => Product)",
                    "    product: Product;",
                    "    ",
                    "    @EntityId()",
                    "    productId: ID;",
                    "",
                    "    @Column()",
                    "    text: string;",
                    "",
                    "    @Column()",
                    "    rating: number;",
                    "}",
                    "import gql from 'graphql-tag';",
                    "",
                    "export const apiExtensions = gql`",
                    "  // highlight-start",
                    "  type ProductReview implements Node {",
                    "    id: ID!",
                    "    createdAt: DateTime!",
                    "    updatedAt: DateTime!",
                    "    product: Product!",
                    "    productId: ID!",
                    "    text: String!",
                    "    rating: Float!",
                    "  }",
                    "  // highlight-end",
                    "`;",
                    "import gql from 'graphql-tag';",
                    "import { PluginCommonModule, VendurePlugin } from '@vendure/core';",
                    "import { ReviewsResolver } from './api/reviews.resolver';",
                    "import { apiExtensions } from './api/api-extensions';",
                    "import { ProductReview } from './entities/product-review.entity';",
                    "",
                    "@VendurePlugin({",
                    "    imports: [PluginCommonModule],",
                    "    shopApiExtensions: {",
                    "        // highlight-next-line",
                    "        schema: apiExtensions,",
                    "    },",
                    "    entities: [ProductReview],",
                    "})",
                    "export class ReviewsPlugin {}"
                ]
            },
            {
                "id": "add-fields-to-existing-types",
                "title": "Add fields to existing types",
                "content": "\nLet's say you want to add a new field to the `ProductVariant` type to allow the storefront to display some indication of how long a particular product variant would take to deliver, based on data from some external service. \n\nFirst we extend the `Product` GraphQL type:\n\n\nThis schema extension says that the `delivery` field will be added to the `ProductVariant` type, and that it will be of type `DeliveryEstimate!`, i.e. a non-nullable\ninstance of the `DeliveryEstimate` type.\n\nNext we need to define an \"entity resolver\" for this field. Unlike the resolvers we have seen above, this resolver will be handling fields on the `ProductVariant` type _only_. This is done by scoping the resolver class that type by passing the type name to the `@Resolver()` decorator:\n\n\nFinally we need to pass these schema extensions and the resolver to our plugin metadata:\n\n\n",
                "subsections": [],
                "code": [
                    "import gql from 'graphql-tag';",
                    "",
                    "export const shopApiExtensions = gql`",
                    "  type DeliveryEstimate {",
                    "    from: Int!",
                    "    to: Int!",
                    "  }",
                    "",
                    "  // highlight-start",
                    "  extend type ProductVariant {",
                    "    delivery: DeliveryEstimate!",
                    "  }",
                    "  // highlight-end",
                    "}`;",
                    "import { Parent, ResolveField, Resolver } from '@nestjs/graphql';",
                    "import { Ctx, RequestContext, ProductVariant } from '@vendure/core';",
                    "import { DeliveryEstimateService } from '../services/delivery-estimate.service';",
                    "",
                    "// highlight-next-line",
                    "@Resolver('ProductVariant')",
                    "export class ProductVariantEntityResolver {",
                    "    constructor(private deliveryEstimateService: DeliveryEstimateService) { }",
                    "",
                    "    // highlight-start",
                    "    @ResolveField()",
                    "    delivery(@Ctx() ctx: RequestContext, @Parent() variant: ProductVariant) {",
                    "        return this.deliveryEstimateService.getEstimate(ctx, variant.id);",
                    "    }",
                    "    // highlight-end",
                    "}",
                    "import gql from 'graphql-tag';",
                    "import { PluginCommonModule, VendurePlugin } from '@vendure/core';",
                    "import { ProductVariantEntityResolver } from './api/product-variant-entity.resolver';",
                    "import { shopApiExtensions } from './api/api-extensions';",
                    "",
                    "@VendurePlugin({",
                    "    imports: [PluginCommonModule],",
                    "    shopApiExtensions: {",
                    "        // highlight-start",
                    "        schema: shopApiExtensions,",
                    "        resolvers: [ProductVariantEntityResolver]",
                    "        // highlight-end",
                    "    }",
                    "})",
                    "export class DeliveryTimePlugin {}"
                ]
            },
            {
                "id": "override-built-in-resolvers",
                "title": "Override built-in resolvers",
                "content": "\nIt is also possible to override an existing built-in resolver function with one of your own. To do so, you need to define a resolver with the same name as the query or mutation you wish to override. When that query or mutation is then executed, your code, rather than the default Vendure resolver, will handle it.\n\n\nThe same can be done for resolving fields:\n\n\n",
                "subsections": [],
                "code": [
                    "import { Args, Query, Mutation, Resolver } from '@nestjs/graphql';",
                    "import { Ctx, RequestContext } from '@vendure/core'",
                    "",
                    "@Resolver()",
                    "class OverrideExampleResolver {",
                    "",
                    "    @Query()",
                    "    products(@Ctx() ctx: RequestContext, @Args() args: any) {",
                    "        // when the `products` query is executed, this resolver function will",
                    "        // now handle it.",
                    "    }",
                    "",
                    "    @Transaction()",
                    "    @Mutation()",
                    "    addItemToOrder(@Ctx() ctx: RequestContext, @Args() args: any) {",
                    "        // when the `addItemToOrder` mutation is executed, this resolver function will",
                    "        // now handle it.",
                    "    }",
                    "",
                    "}",
                    "import { Parent, ResolveField, Resolver } from '@nestjs/graphql';",
                    "import { Ctx, RequestContext, Product } from '@vendure/core';",
                    "",
                    "@Resolver('Product')",
                    "export class FieldOverrideExampleResolver {",
                    "",
                    "    @ResolveField()",
                    "    description(@Ctx() ctx: RequestContext, @Parent() product: Product) {",
                    "        return this.wrapInFormatting(ctx, product.id);",
                    "    }",
                    "",
                    "    private wrapInFormatting(ctx: RequestContext, id: ID): string {",
                    "        // implementation omitted, but wraps the description",
                    "        // text in some special formatting required by the storefront",
                    "    }",
                    "}"
                ]
            },
            {
                "id": "resolving-union-results",
                "title": "Resolving union results",
                "content": "\nWhen dealing with operations that return a GraphQL union type, there is an extra step needed.\n\nUnion types are commonly returned from mutations in the Vendure APIs. For more detail on this see the section on [ErrorResults](/guides/developer-guide/error-handling#expected-errors-errorresults). For example: \n\n\nIn this example, the resolver which handles the `myCustomMutation` operation will be returning either an `Order` object or a `MyCustomErrorResult` object. The problem here is that the GraphQL server has no way of knowing which one it is at run-time. Luckily Apollo Server (on which Vendure is built) has a means to solve this:\n\n> To fully resolve a union, Apollo Server needs to specify which of the union's types is being returned. To achieve this, you define a `__resolveType` function for the union in your resolver map.\n> \n> The `__resolveType` function is responsible for determining an object's corresponding GraphQL type and returning the name of that type as a string.\n> \n-- <cite>Source: [Apollo Server docs](https://www.apollographql.com/docs/apollo-server/schema/unions-interfaces/#resolving-a-union)</cite>\n\nIn order to implement a `__resolveType` function as part of your plugin, you need to create a dedicated Resolver class with a single field resolver method which will look like this:\n\n\nThis resolver is then passed in to your plugin metadata like any other resolver:\n\n\n",
                "subsections": [],
                "code": [
                    "type MyCustomErrorResult implements ErrorResult {",
                    "  errorCode: ErrorCode!",
                    "  message: String!",
                    "}",
                    "",
                    "union MyCustomMutationResult = Order | MyCustomErrorResult",
                    "",
                    "extend type Mutation {",
                    "  myCustomMutation(orderId: ID!): MyCustomMutationResult!",
                    "}",
                    "import { Parent, ResolveField, Resolver } from '@nestjs/graphql';",
                    "import { Ctx, RequestContext, ProductVariant } from '@vendure/core';",
                    "",
                    "@Resolver('MyCustomMutationResult')",
                    "export class MyCustomMutationResultResolver {",
                    "  ",
                    "  @ResolveField()",
                    "  __resolveType(value: any): string {",
                    "    // If it has an \"id\" property we can assume it is an Order.  ",
                    "    return value.hasOwnProperty('id') ? 'Order' : 'MyCustomErrorResult';",
                    "  }",
                    "}",
                    "@VendurePlugin({",
                    "  imports: [PluginCommonModule],",
                    "  shopApiExtensions: {",
                    "    schema: apiExtensions,",
                    "    resolvers: [/* ... */, MyCustomMutationResultResolver]",
                    "  }",
                    "})",
                    "export class MyPlugin {}"
                ]
            },
            {
                "id": "defining-custom-scalars",
                "title": "Defining custom scalars",
                "content": "\nBy default, Vendure bundles `DateTime` and a `JSON` custom scalars (from the [graphql-scalars library](https://github.com/Urigo/graphql-scalars)). From v1.7.0, you can also define your own custom scalars for use in your schema extensions:\n\n\n",
                "subsections": [],
                "code": [
                    "import { GraphQLScalarType} from 'graphql';",
                    "import { GraphQLEmailAddress } from 'graphql-scalars';",
                    "",
                    "// Scalars can be custom-built as like this one,",
                    "// or imported from a pre-made scalar library like",
                    "// the GraphQLEmailAddress example.",
                    "const FooScalar = new GraphQLScalarType({",
                    "  name: 'Foo',",
                    "  description: 'A test scalar',",
                    "  serialize(value) {",
                    "    // ...",
                    "  },",
                    "  parseValue(value) {",
                    "    // ...",
                    "  },",
                    "});",
                    "",
                    "@VendurePlugin({",
                    "  imports: [PluginCommonModule],",
                    "  shopApiExtensions: {",
                    "    schema: gql`",
                    "      scalar Foo",
                    "      scalar EmailAddress",
                    "    `,",
                    "    scalars: { ",
                    "      // The key must match the scalar name",
                    "      // given in the schema  ",
                    "      Foo: FooScalar,",
                    "      EmailAddress: GraphQLEmailAddress,",
                    "    },",
                    "  },",
                    "})",
                    "export class CustomScalarsPlugin {}"
                ]
            }
        ]
    },
    {
        "id": "externalauthenticationservice",
        "metadata": {
            "title": "ExternalAuthenticationService",
            "keywords": [
                "externalauthenticationservice",
                "constructor",
                "findcustomeruser",
                "findadministratoruser",
                "createcustomeranduser",
                "createadministratoranduser",
                "finduser"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/external-authentication/external-authentication.service.ts\" sourceLine=\"24\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "externalauthenticationservice",
                "title": "ExternalAuthenticationService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/external-authentication/external-authentication.service.ts\" sourceLine=\"24\" packageName=\"@vendure/core\" />\n\nThis is a helper service which exposes methods related to looking up and creating Users based on an\nexternal <a href='/reference/typescript-api/auth/authentication-strategy#authenticationstrategy'>AuthenticationStrategy</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, roleService: <a href='/reference/typescript-api/services/role-service#roleservice'>RoleService</a>, historyService: <a href='/reference/typescript-api/services/history-service#historyservice'>HistoryService</a>, customerService: <a href='/reference/typescript-api/services/customer-service#customerservice'>CustomerService</a>, administratorService: <a href='/reference/typescript-api/services/administrator-service#administratorservice'>AdministratorService</a>, channelService: <a href='/reference/typescript-api/services/channel-service#channelservice'>ChannelService</a>) => ExternalAuthenticationService`}   />\n\n\n"
                    },
                    {
                        "id": "findcustomeruser",
                        "title": "findCustomerUser",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, strategy: string, externalIdentifier: string, checkCurrentChannelOnly:  = true) => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a> | undefined&#62;`}   />\n\nLooks up a User based on their identifier from an external authentication\nprovider, ensuring this User is associated with a Customer account.\n\nBy default, only customers in the currently-active Channel will be checked.\nBy passing `false` as the `checkCurrentChannelOnly` argument, _all_ channels\nwill be checked.\n"
                    },
                    {
                        "id": "findadministratoruser",
                        "title": "findAdministratorUser",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, strategy: string, externalIdentifier: string) => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a> | undefined&#62;`}   />\n\nLooks up a User based on their identifier from an external authentication\nprovider, ensuring this User is associated with an Administrator account.\n"
                    },
                    {
                        "id": "createcustomeranduser",
                        "title": "createCustomerAndUser",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, config: {\n             strategy: string;\n             externalIdentifier: string;\n             verified: boolean;\n             emailAddress: string;\n             firstName?: string;\n             lastName?: string;\n         }) => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a>&#62;`}   />\n\nIf a customer has been successfully authenticated by an external authentication provider, yet cannot\nbe found using `findCustomerUser`, then we need to create a new User and\nCustomer record in Vendure for that user. This method encapsulates that logic as well as additional\nhousekeeping such as adding a record to the Customer's history.\n"
                    },
                    {
                        "id": "createadministratoranduser",
                        "title": "createAdministratorAndUser",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, config: {\n             strategy: string;\n             externalIdentifier: string;\n             identifier: string;\n             emailAddress?: string;\n             firstName?: string;\n             lastName?: string;\n             roles: <a href='/reference/typescript-api/entities/role#role'>Role</a>[];\n         }) => `}   />\n\nIf an administrator has been successfully authenticated by an external authentication provider, yet cannot\nbe found using `findAdministratorUser`, then we need to create a new User and\nAdministrator record in Vendure for that user.\n"
                    },
                    {
                        "id": "finduser",
                        "title": "findUser",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, strategy: string, externalIdentifier: string) => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a> | undefined&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ExternalAuthenticationService {",
                    "    constructor(connection: TransactionalConnection, roleService: RoleService, historyService: HistoryService, customerService: CustomerService, administratorService: AdministratorService, channelService: ChannelService)",
                    "    findCustomerUser(ctx: RequestContext, strategy: string, externalIdentifier: string, checkCurrentChannelOnly:  = true) => Promise<User | undefined>;",
                    "    findAdministratorUser(ctx: RequestContext, strategy: string, externalIdentifier: string) => Promise<User | undefined>;",
                    "    createCustomerAndUser(ctx: RequestContext, config: {",
                    "            strategy: string;",
                    "            externalIdentifier: string;",
                    "            verified: boolean;",
                    "            emailAddress: string;",
                    "            firstName?: string;",
                    "            lastName?: string;",
                    "        }) => Promise<User>;",
                    "    createAdministratorAndUser(ctx: RequestContext, config: {",
                    "            strategy: string;",
                    "            externalIdentifier: string;",
                    "            identifier: string;",
                    "            emailAddress?: string;",
                    "            firstName?: string;",
                    "            lastName?: string;",
                    "            roles: Role[];",
                    "        }) => ;",
                    "    findUser(ctx: RequestContext, strategy: string, externalIdentifier: string) => Promise<User | undefined>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "facet",
        "metadata": {
            "title": "Facet",
            "keywords": [
                "facet",
                "constructor",
                "name",
                "isprivate",
                "code",
                "translations",
                "values",
                "customfields",
                "channels"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/facet/facet.entity.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "facet",
                "title": "Facet",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/facet/facet.entity.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />\n\nA Facet is a class of properties which can be applied to a <a href='/reference/typescript-api/entities/product#product'>Product</a> or <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>.\nThey are used to enable [faceted search](https://en.wikipedia.org/wiki/Faceted_search) whereby products\ncan be filtered along a number of dimensions (facets).\n\nFor example, there could be a Facet named \"Brand\" which has a number of <a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>s representing\nthe various brands of product, e.g. \"Apple\", \"Samsung\", \"Dell\", \"HP\" etc.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#translatable'>Translatable</a></code>, <code>HasCustomFields</code>, <code><a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62;) => Facet`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "isprivate",
                        "title": "isPrivate",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Translation&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "values",
                        "title": "values",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomFacetFields`}   />\n\n\n"
                    },
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Facet extends VendureEntity implements Translatable, HasCustomFields, ChannelAware {",
                    "    constructor(input?: DeepPartial<Facet>)",
                    "    name: LocaleString;",
                    "    @Column({ default: false })",
                    "    isPrivate: boolean;",
                    "    @Column({ unique: true })",
                    "    code: string;",
                    "    @OneToMany(type => FacetTranslation, translation => translation.base, { eager: true })",
                    "    translations: Array<Translation<Facet>>;",
                    "    @OneToMany(type => FacetValue, value => value.facet)",
                    "    values: FacetValue[];",
                    "    @Column(type => CustomFacetFields)",
                    "    customFields: CustomFacetFields;",
                    "    @ManyToMany(type => Channel)",
                    "    @JoinTable()",
                    "    channels: Channel[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "facets",
        "metadata": {
            "title": "Facets",
            "keywords": [
                "facets",
                "assigning to products & variants",
                "public vs private facets"
            ],
            "description": "Facets are the primary means to attach structured data to your Products & ProductVariants. Typical uses of Facets include: * Enabling faceted search & filtering in the storefront * Organizing Products into Collections * Labelling Products for inclusion in Promotions ![./screen-facet-list.webp](./screen-facet-list.webp)"
        },
        "content": "",
        "sections": [
            {
                "id": "assigning-to-products-&-variants",
                "title": "Assigning to Products & Variants",
                "content": "\nIn the Product detail page, you can assign FacetValues by clicking the _ADD FACETS_ button toward the bottom of the Product or ProductVariant views.\n\n![./screen-facet-add.webp](./screen-facet-add.webp)\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "public-vs-private-facets",
                "title": "Public vs Private Facets",
                "content": "\nThe visibility of a Facet can be set to either _public_ or _private_.\n\n* **Public** facets are visible via the Shop API, meaning they can be listed in the storefront and used for faceted searches.\n* **Private** facets are only visible to Administrators, and cannot be used in storefront faceted searches. \n\nPrivate facets can be useful for labelling Products for internal use. For example, you could create a \"profit margin\" Facet with \"high\" and \"low\" values. You wouldn't want to display these in the storefront, but you may want to use them e.g. in Promotion logic.\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "facetservice",
        "metadata": {
            "title": "FacetService",
            "keywords": [
                "facetservice",
                "constructor",
                "findall",
                "findone",
                "findbycode",
                "findbyfacetvalueid",
                "create",
                "update",
                "delete",
                "assignfacetstochannel",
                "removefacetsfromchannel"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/facet.service.ts\" sourceLine=\"45\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "facetservice",
                "title": "FacetService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/facet.service.ts\" sourceLine=\"45\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/facet#facet'>Facet</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, facetValueService: <a href='/reference/typescript-api/services/facet-value-service#facetvalueservice'>FacetValueService</a>, translatableSaver: <a href='/reference/typescript-api/service-helpers/translatable-saver#translatablesaver'>TranslatableSaver</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, configService: ConfigService, channelService: <a href='/reference/typescript-api/services/channel-service#channelservice'>ChannelService</a>, customFieldRelationService: CustomFieldRelationService, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>, roleService: <a href='/reference/typescript-api/services/role-service#roleservice'>RoleService</a>) => FacetService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62;, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, facetId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62;) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findbycode",
                        "title": "findByCode",
                        "content": "\n<MemberInfo kind=\"method\" type={`(facetCode: string, lang: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findbycode",
                        "title": "findByCode",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, facetCode: string, lang: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findbycode",
                        "title": "findByCode",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctxOrFacetCode: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> | string, facetCodeOrLang: string | <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>, lang?: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findbyfacetvalueid",
                        "title": "findByFacetValueId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62; | undefined&#62;`}   />\n\nReturns the Facet which contains the given FacetValue id.\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateFacetInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateFacetInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>, force: boolean = false) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "assignfacetstochannel",
                        "title": "assignFacetsToChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: AssignFacetsToChannelInput) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62;&#62;&#62;`}   />\n\nAssigns Facets to the specified Channel\n"
                    },
                    {
                        "id": "removefacetsfromchannel",
                        "title": "removeFacetsFromChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: RemoveFacetsFromChannelInput) => Promise&#60;Array&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;RemoveFacetFromChannelResult, <a href='/reference/typescript-api/entities/facet#facet'>Facet</a>&#62;&#62;&#62;`}   />\n\nRemove Facets from the specified Channel\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class FacetService {",
                    "    constructor(connection: TransactionalConnection, facetValueService: FacetValueService, translatableSaver: TranslatableSaver, listQueryBuilder: ListQueryBuilder, configService: ConfigService, channelService: ChannelService, customFieldRelationService: CustomFieldRelationService, eventBus: EventBus, translator: TranslatorService, roleService: RoleService)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<Facet>, relations?: RelationPaths<Facet>) => Promise<PaginatedList<Translated<Facet>>>;",
                    "    findOne(ctx: RequestContext, facetId: ID, relations?: RelationPaths<Facet>) => Promise<Translated<Facet> | undefined>;",
                    "    findByCode(facetCode: string, lang: LanguageCode) => Promise<Translated<Facet> | undefined>;",
                    "    findByCode(ctx: RequestContext, facetCode: string, lang: LanguageCode) => Promise<Translated<Facet> | undefined>;",
                    "    findByCode(ctxOrFacetCode: RequestContext | string, facetCodeOrLang: string | LanguageCode, lang?: LanguageCode) => Promise<Translated<Facet> | undefined>;",
                    "    findByFacetValueId(ctx: RequestContext, id: ID) => Promise<Translated<Facet> | undefined>;",
                    "    create(ctx: RequestContext, input: CreateFacetInput) => Promise<Translated<Facet>>;",
                    "    update(ctx: RequestContext, input: UpdateFacetInput) => Promise<Translated<Facet>>;",
                    "    delete(ctx: RequestContext, id: ID, force: boolean = false) => Promise<DeletionResponse>;",
                    "    assignFacetsToChannel(ctx: RequestContext, input: AssignFacetsToChannelInput) => Promise<Array<Translated<Facet>>>;",
                    "    removeFacetsFromChannel(ctx: RequestContext, input: RemoveFacetsFromChannelInput) => Promise<Array<ErrorResultUnion<RemoveFacetFromChannelResult, Facet>>>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "facetvalue",
        "metadata": {
            "title": "FacetValue",
            "keywords": [
                "facetvalue",
                "constructor",
                "name",
                "code",
                "translations",
                "facet",
                "facetid",
                "customfields",
                "channels"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/facet-value/facet-value.entity.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "facetvalue",
                "title": "FacetValue",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/facet-value/facet-value.entity.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />\n\nA particular value of a <a href='/reference/typescript-api/entities/facet#facet'>Facet</a>.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#translatable'>Translatable</a></code>, <code>HasCustomFields</code>, <code><a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;) => FacetValue`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Translation&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "facet",
                        "title": "facet",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/facet#facet'>Facet</a>`}   />\n\n\n"
                    },
                    {
                        "id": "facetid",
                        "title": "facetId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomFacetValueFields`}   />\n\n\n"
                    },
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class FacetValue extends VendureEntity implements Translatable, HasCustomFields, ChannelAware {",
                    "    constructor(input?: DeepPartial<FacetValue>)",
                    "    name: LocaleString;",
                    "    @Column() code: string;",
                    "    @OneToMany(type => FacetValueTranslation, translation => translation.base, { eager: true })",
                    "    translations: Array<Translation<FacetValue>>;",
                    "    @Index()",
                    "    @ManyToOne(type => Facet, group => group.values, { onDelete: 'CASCADE' })",
                    "    facet: Facet;",
                    "    @EntityId()",
                    "    facetId: ID;",
                    "    @Column(type => CustomFacetValueFields)",
                    "    customFields: CustomFacetValueFields;",
                    "    @ManyToMany(type => Channel)",
                    "    @JoinTable()",
                    "    channels: Channel[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "facetvaluechecker",
        "metadata": {
            "title": "FacetValueChecker",
            "keywords": [
                "facetvaluechecker",
                "constructor",
                "hasfacetvalues"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/promotion/utils/facet-value-checker.ts\" sourceLine=\"48\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "facetvaluechecker",
                "title": "FacetValueChecker",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/utils/facet-value-checker.ts\" sourceLine=\"48\" packageName=\"@vendure/core\" />\n\nThe FacetValueChecker is a helper class used to determine whether a given OrderLine consists\nof ProductVariants containing the given FacetValues.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>) => FacetValueChecker`}   />\n\n\n"
                    },
                    {
                        "id": "hasfacetvalues",
                        "title": "hasFacetValues",
                        "content": "\n<MemberInfo kind=\"method\" type={`(orderLine: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>, facetValueIds: <a href='/reference/typescript-api/common/id#id'>ID</a>[], ctx?: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;boolean&#62;`}   />\n\nChecks a given <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a> against the facetValueIds and returns\n`true` if the associated <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a> & <a href='/reference/typescript-api/entities/product#product'>Product</a> together\nhave *all* the specified <a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>s.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { FacetValueChecker, LanguageCode, PromotionCondition, TransactionalConnection } from '@vendure/core';",
                    "",
                    "let facetValueChecker: FacetValueChecker;",
                    "",
                    "export const hasFacetValues = new PromotionCondition({",
                    "  code: 'at_least_n_with_facets',",
                    "  description: [",
                    "    { languageCode: LanguageCode.en, value: 'Buy at least { minimum } products with the given facets' },",
                    "  ],",
                    "  args: {",
                    "    minimum: { type: 'int' },",
                    "    facets: { type: 'ID', list: true, ui: { component: 'facet-value-form-input' } },",
                    "  },",
                    "  init(injector) {",
                    "    facetValueChecker = new FacetValueChecker(injector.get(TransactionalConnection));",
                    "  },",
                    "  async check(ctx, order, args) {",
                    "    let matches = 0;",
                    "    for (const line of order.lines) {",
                    "      if (await facetValueChecker.hasFacetValues(line, args.facets)) {",
                    "          matches += line.quantity;",
                    "      }",
                    "    }",
                    "    return args.minimum <= matches;",
                    "  },",
                    "});",
                    "class FacetValueChecker {",
                    "    constructor(connection: TransactionalConnection)",
                    "    hasFacetValues(orderLine: OrderLine, facetValueIds: ID[], ctx?: RequestContext) => Promise<boolean>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "facetvalueselectorcomponent",
        "metadata": {
            "title": "FacetValueSelectorComponent",
            "keywords": [
                "facetvalueselectorcomponent",
                "selectedvalueschange",
                "readonly",
                "transformcontrolvalueaccessorvalue",
                "searchinput$",
                "searchloading",
                "searchresults$",
                "selectedids$",
                "onchangefn",
                "ontouchfn",
                "disabled",
                "value",
                "constructor",
                "ngoninit",
                "ngondestroy",
                "onchange",
                "registeronchange",
                "registerontouched",
                "setdisabledstate",
                "focus",
                "writevalue"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/facet-value-selector/facet-value-selector.component.ts\" sourceLine=\"42\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "facetvalueselectorcomponent",
                "title": "FacetValueSelectorComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/facet-value-selector/facet-value-selector.component.ts\" sourceLine=\"42\" packageName=\"@vendure/admin-ui\" />\n\nA form control for selecting facet values.\n\n*Example*\n\nThe `facets` input should be provided from the parent component\nlike this:\n\n*Example*\n\n\n* Implements: <code>OnInit</code>, <code>OnDestroy</code>, <code>ControlValueAccessor</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "selectedvalueschange",
                        "title": "selectedValuesChange",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "transformcontrolvalueaccessorvalue",
                        "title": "transformControlValueAccessorValue",
                        "content": "\n<MemberInfo kind=\"property\" type={`(value: FacetValueFragment[]) =&#62; any[]`}   />\n\n\n"
                    },
                    {
                        "id": "searchinput$",
                        "title": "searchInput$",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "searchloading",
                        "title": "searchLoading",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "searchresults$",
                        "title": "searchResults$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;FacetValueFragment[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "selectedids$",
                        "title": "selectedIds$",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "onchangefn",
                        "title": "onChangeFn",
                        "content": "\n<MemberInfo kind=\"property\" type={`(val: any) =&#62; void`}   />\n\n\n"
                    },
                    {
                        "id": "ontouchfn",
                        "title": "onTouchFn",
                        "content": "\n<MemberInfo kind=\"property\" type={`() =&#62; void`}   />\n\n\n"
                    },
                    {
                        "id": "disabled",
                        "title": "disabled",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "value",
                        "title": "value",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;string | FacetValueFragment&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>, changeDetectorRef: ChangeDetectorRef) => FacetValueSelectorComponent`}   />\n\n\n"
                    },
                    {
                        "id": "ngoninit",
                        "title": "ngOnInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => void`}   />\n\n\n"
                    },
                    {
                        "id": "ngondestroy",
                        "title": "ngOnDestroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "onchange",
                        "title": "onChange",
                        "content": "\n<MemberInfo kind=\"method\" type={`(selected: FacetValueFragment[]) => `}   />\n\n\n"
                    },
                    {
                        "id": "registeronchange",
                        "title": "registerOnChange",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fn: any) => `}   />\n\n\n"
                    },
                    {
                        "id": "registerontouched",
                        "title": "registerOnTouched",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fn: any) => `}   />\n\n\n"
                    },
                    {
                        "id": "setdisabledstate",
                        "title": "setDisabledState",
                        "content": "\n<MemberInfo kind=\"method\" type={`(isDisabled: boolean) => void`}   />\n\n\n"
                    },
                    {
                        "id": "focus",
                        "title": "focus",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "writevalue",
                        "title": "writeValue",
                        "content": "\n<MemberInfo kind=\"method\" type={`(obj: string | FacetValueFragment[] | Array&#60;string | number&#62; | null) => void`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<vdr-facet-value-selector",
                    "  [facets]=\"facets\"",
                    "  (selectedValuesChange)=\"selectedValues = $event\"",
                    "></vdr-facet-value-selector>",
                    "this.facets = this.dataService",
                    "  .facet.getAllFacets()",
                    "  .mapSingle(data => data.facets.items);",
                    "class FacetValueSelectorComponent implements OnInit, OnDestroy, ControlValueAccessor {",
                    "    @Output() selectedValuesChange = new EventEmitter<FacetValueFragment[]>();",
                    "    @Input() readonly = false;",
                    "    @Input() transformControlValueAccessorValue: (value: FacetValueFragment[]) => any[] = value => value;",
                    "    searchInput$ = new Subject<string>();",
                    "    searchLoading = false;",
                    "    searchResults$: Observable<FacetValueFragment[]>;",
                    "    selectedIds$ = new Subject<string[]>();",
                    "    onChangeFn: (val: any) => void;",
                    "    onTouchFn: () => void;",
                    "    disabled = false;",
                    "    value: Array<string | FacetValueFragment>;",
                    "    constructor(dataService: DataService, changeDetectorRef: ChangeDetectorRef)",
                    "    ngOnInit() => void;",
                    "    ngOnDestroy() => ;",
                    "    onChange(selected: FacetValueFragment[]) => ;",
                    "    registerOnChange(fn: any) => ;",
                    "    registerOnTouched(fn: any) => ;",
                    "    setDisabledState(isDisabled: boolean) => void;",
                    "    focus() => ;",
                    "    writeValue(obj: string | FacetValueFragment[] | Array<string | number> | null) => void;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "facetvalueservice",
        "metadata": {
            "title": "FacetValueService",
            "keywords": [
                "facetvalueservice",
                "constructor",
                "findall",
                "findalllist",
                "findone",
                "findbyids",
                "findbyfacetid",
                "findbyfacetidlist",
                "create",
                "update",
                "delete",
                "checkfacetvalueusage"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/facet-value.service.ts\" sourceLine=\"39\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "facetvalueservice",
                "title": "FacetValueService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/facet-value.service.ts\" sourceLine=\"39\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, translatableSaver: <a href='/reference/typescript-api/service-helpers/translatable-saver#translatablesaver'>TranslatableSaver</a>, configService: ConfigService, customFieldRelationService: CustomFieldRelationService, channelService: <a href='/reference/typescript-api/services/channel-service#channelservice'>ChannelService</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>) => FacetValueService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(lang: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, lang: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctxOrLang: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> | <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>, lang?: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findalllist",
                        "title": "findAllList",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;&#62;&#62;`}   />\n\nReturns a PaginatedList of FacetValues.\n\nTODO: in v2 this should replace the `findAll()` method.\nA separate method was created just to avoid a breaking change in v1.9.\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findbyids",
                        "title": "findByIds",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, ids: <a href='/reference/typescript-api/common/id#id'>ID</a>[]) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findbyfacetid",
                        "title": "findByFacetId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;&#62;&#62;`}   />\n\nReturns all FacetValues belonging to the Facet with the given id.\n"
                    },
                    {
                        "id": "findbyfacetidlist",
                        "title": "findByFacetIdList",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;&#62;&#62;`}   />\n\nReturns all FacetValues belonging to the Facet with the given id.\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, facet: <a href='/reference/typescript-api/entities/facet#facet'>Facet</a>, input: CreateFacetValueInput | CreateFacetValueWithFacetInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateFacetValueInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>, force: boolean = false) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "checkfacetvalueusage",
                        "title": "checkFacetValueUsage",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, facetValueIds: <a href='/reference/typescript-api/common/id#id'>ID</a>[], channelId?: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;{ productCount: number; variantCount: number }&#62;`}   />\n\nChecks for usage of the given FacetValues in any Products or Variants, and returns the counts.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class FacetValueService {",
                    "    constructor(connection: TransactionalConnection, translatableSaver: TranslatableSaver, configService: ConfigService, customFieldRelationService: CustomFieldRelationService, channelService: ChannelService, eventBus: EventBus, translator: TranslatorService, listQueryBuilder: ListQueryBuilder)",
                    "    findAll(lang: LanguageCode) => Promise<Array<Translated<FacetValue>>>;",
                    "    findAll(ctx: RequestContext, lang: LanguageCode) => Promise<Array<Translated<FacetValue>>>;",
                    "    findAll(ctxOrLang: RequestContext | LanguageCode, lang?: LanguageCode) => Promise<Array<Translated<FacetValue>>>;",
                    "    findAllList(ctx: RequestContext, options?: ListQueryOptions<FacetValue>, relations?: RelationPaths<FacetValue>) => Promise<PaginatedList<Translated<FacetValue>>>;",
                    "    findOne(ctx: RequestContext, id: ID) => Promise<Translated<FacetValue> | undefined>;",
                    "    findByIds(ctx: RequestContext, ids: ID[]) => Promise<Array<Translated<FacetValue>>>;",
                    "    findByFacetId(ctx: RequestContext, id: ID) => Promise<Array<Translated<FacetValue>>>;",
                    "    findByFacetIdList(ctx: RequestContext, id: ID, options?: ListQueryOptions<FacetValue>, relations?: RelationPaths<FacetValue>) => Promise<PaginatedList<Translated<FacetValue>>>;",
                    "    create(ctx: RequestContext, facet: Facet, input: CreateFacetValueInput | CreateFacetValueWithFacetInput) => Promise<Translated<FacetValue>>;",
                    "    update(ctx: RequestContext, input: UpdateFacetValueInput) => Promise<Translated<FacetValue>>;",
                    "    delete(ctx: RequestContext, id: ID, force: boolean = false) => Promise<DeletionResponse>;",
                    "    checkFacetValueUsage(ctx: RequestContext, facetValueIds: ID[], channelId?: ID) => Promise<{ productCount: number; variantCount: number }>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "fastimporterservice",
        "metadata": {
            "title": "FastImporterService",
            "keywords": [
                "fastimporterservice",
                "initialize",
                "createproduct",
                "createproductoptiongroup",
                "createproductoption",
                "addoptiongrouptoproduct",
                "createproductvariant"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/data-import/providers/importer/fast-importer.service.ts\" sourceLine=\"40\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "fastimporterservice",
                "title": "FastImporterService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/data-import/providers/importer/fast-importer.service.ts\" sourceLine=\"40\" packageName=\"@vendure/core\" />\n\nA service to import entities into the database. This replaces the regular `create` methods of the service layer with faster\nversions which skip much of the defensive checks and other DB calls which are not needed when running an import. It also\ndoes not publish any events, so e.g. will not trigger search index jobs.\n\nIn testing, the use of the FastImporterService approximately doubled the speed of bulk imports.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "initialize",
                        "title": "initialize",
                        "content": "\n<MemberInfo kind=\"method\" type={`(channel?: <a href='/reference/typescript-api/entities/channel#channel'>Channel</a>) => `}   />\n\nThis should be called prior to any of the import methods, as it establishes the\ndefault Channel as well as the context in which the new entities will be created.\n\nPassing a `channel` argument means that Products and ProductVariants will be assigned\nto that Channel.\n"
                    },
                    {
                        "id": "createproduct",
                        "title": "createProduct",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: CreateProductInput) => Promise&#60;<a href='/reference/typescript-api/common/id#id'>ID</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "createproductoptiongroup",
                        "title": "createProductOptionGroup",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: CreateProductOptionGroupInput) => Promise&#60;<a href='/reference/typescript-api/common/id#id'>ID</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "createproductoption",
                        "title": "createProductOption",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: CreateProductOptionInput) => Promise&#60;<a href='/reference/typescript-api/common/id#id'>ID</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "addoptiongrouptoproduct",
                        "title": "addOptionGroupToProduct",
                        "content": "\n<MemberInfo kind=\"method\" type={`(productId: <a href='/reference/typescript-api/common/id#id'>ID</a>, optionGroupId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "createproductvariant",
                        "title": "createProductVariant",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: CreateProductVariantInput) => Promise&#60;<a href='/reference/typescript-api/common/id#id'>ID</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class FastImporterService {",
                    "    initialize(channel?: Channel) => ;",
                    "    createProduct(input: CreateProductInput) => Promise<ID>;",
                    "    createProductOptionGroup(input: CreateProductOptionGroupInput) => Promise<ID>;",
                    "    createProductOption(input: CreateProductOptionInput) => Promise<ID>;",
                    "    addOptionGroupToProduct(productId: ID, optionGroupId: ID) => ;",
                    "    createProductVariant(input: CreateProductVariantInput) => Promise<ID>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "filesizepipe",
        "metadata": {
            "title": "FileSizePipe",
            "keywords": [
                "filesizepipe",
                "transform"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/file-size.pipe.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "filesizepipe",
                "title": "FileSizePipe",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/file-size.pipe.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />\n\nFormats a number into a human-readable file size string.\n\n*Example*\n\n\n* Implements: <code>PipeTransform</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "transform",
                        "title": "transform",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: number, useSiUnits:  = true) => any`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "{{ fileSizeInBytes | filesize }}",
                    "class FileSizePipe implements PipeTransform {",
                    "    transform(value: number, useSiUnits:  = true) => any;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "formfield",
        "metadata": {
            "title": "FormField",
            "keywords": [
                "formfield",
                "props"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/FormField.tsx\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "formfield",
                "title": "FormField",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/FormField.tsx\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />\n\nA wrapper around form fields which provides a label, tooltip and error message.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "props",
                        "title": "props",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`PropsWithChildren&#60;{\n         for?: string;\n         label?: string;\n         tooltip?: string;\n         invalid?: boolean;\n         errorMessage?: string;\n     }&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { FormField } from '@vendure/admin-ui/react';",
                    "",
                    "export function MyReactComponent() {",
                    "    return (",
                    "       <FormField label=\"My field\" tooltip=\"This is a tooltip\" invalid errorMessage=\"This field is invalid\">",
                    "           <input type=\"text\" />",
                    "       </FormField>",
                    "    );",
                    "}",
                    "function FormField(props: PropsWithChildren<{",
                    "        for?: string;",
                    "        label?: string;",
                    "        tooltip?: string;",
                    "        invalid?: boolean;",
                    "        errorMessage?: string;",
                    "    }>): void"
                ]
            }
        ]
    },
    {
        "id": "forminputcomponent",
        "metadata": {
            "title": "FormInputComponent",
            "keywords": [
                "forminputcomponent",
                "islistinput",
                "readonly",
                "formcontrol",
                "config"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/component-registry-types.ts\" sourceLine=\"11\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "forminputcomponent",
                "title": "FormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/component-registry-types.ts\" sourceLine=\"11\" packageName=\"@vendure/admin-ui\" />\n\nThis interface should be implemented by any component being used as a custom input. For example,\ninputs for custom fields, or for configurable arguments.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "islistinput",
                        "title": "isListInput",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\nShould be set to `true` if this component is designed to handle lists.\nIf `true` then the formControl value will be an array of all the\nvalues in the list.\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\nThis is set by the Admin UI when consuming this component, indicating that the\ncomponent should be rendered in a read-only state.\n"
                    },
                    {
                        "id": "formcontrol",
                        "title": "formControl",
                        "content": "\n<MemberInfo kind=\"property\" type={`FormControl`}   />\n\nThis controls the actual value of the form item. The current value is available\nas `this.formControl.value`, and an Observable stream of value changes is available\nas `this.formControl.valueChanges`. To update the value, use `.setValue(val)` and then\n`.markAsDirty()`.\n\nFull documentation can be found in the [Angular docs](https://angular.io/api/forms/FormControl).\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"property\" type={`C`}   />\n\nThe `config` property contains the full configuration object of the custom field or configurable argument.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface FormInputComponent<C = InputComponentConfig> {",
                    "    isListInput?: boolean;",
                    "    readonly: boolean;",
                    "    formControl: FormControl;",
                    "    config: C;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "fsm",
        "metadata": {
            "title": "FSM",
            "keywords": [
                "fsm",
                "constructor",
                "initialstate",
                "currentstate",
                "transitionto",
                "jumpto",
                "getnextstates",
                "cantransitionto"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/finite-state-machine/finite-state-machine.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "fsm",
                "title": "FSM",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/finite-state-machine/finite-state-machine.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" />\n\nA simple type-safe finite state machine. This is used internally to control the Order process, ensuring that\nthe state of Orders, Payments, Fulfillments and Refunds follows a well-defined behaviour.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/typescript-api/state-machine/state-machine-config#statemachineconfig'>StateMachineConfig</a>&#60;T, Data&#62;, initialState: T) => FSM`}   />\n\n\n"
                    },
                    {
                        "id": "initialstate",
                        "title": "initialState",
                        "content": "\n<MemberInfo kind=\"property\" type={`T`}   />\n\n\n"
                    },
                    {
                        "id": "currentstate",
                        "title": "currentState",
                        "content": "\n<MemberInfo kind=\"property\" type={`T`}   />\n\n\n"
                    },
                    {
                        "id": "transitionto",
                        "title": "transitionTo",
                        "content": "\n<MemberInfo kind=\"method\" type={`(state: T, data: Data) => Promise&#60;{ finalize: () =&#62; Promise&#60;any&#62; }&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "jumpto",
                        "title": "jumpTo",
                        "content": "\n<MemberInfo kind=\"method\" type={`(state: T) => `}   />\n\n\n"
                    },
                    {
                        "id": "getnextstates",
                        "title": "getNextStates",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => readonly T[]`}   />\n\n\n"
                    },
                    {
                        "id": "cantransitionto",
                        "title": "canTransitionTo",
                        "content": "\n<MemberInfo kind=\"method\" type={`(state: T) => boolean`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class FSM<T extends string, Data = any> {",
                    "    constructor(config: StateMachineConfig<T, Data>, initialState: T)",
                    "    initialState: T",
                    "    currentState: T",
                    "    transitionTo(state: T, data: Data) => Promise<{ finalize: () => Promise<any> }>;",
                    "    jumpTo(state: T) => ;",
                    "    getNextStates() => readonly T[];",
                    "    canTransitionTo(state: T) => boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "fulfillment",
        "metadata": {
            "title": "Fulfillment",
            "keywords": [
                "fulfillment"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "fulfillmenthandler",
        "metadata": {
            "title": "FulfillmentHandler",
            "keywords": [
                "fulfillmenthandler",
                "constructor",
                "fulfillmenthandlerconfig",
                "createfulfillment",
                "onfulfillmenttransition",
                "createfulfillmentfn",
                "createfulfillmentresult"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/fulfillment/fulfillment-handler.ts\" sourceLine=\"150\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "fulfillmenthandler",
                "title": "FulfillmentHandler",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/fulfillment/fulfillment-handler.ts\" sourceLine=\"150\" packageName=\"@vendure/core\" />\n\nA FulfillmentHandler is used when creating a new <a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a>. When the `addFulfillmentToOrder` mutation\nis executed, the specified handler will be used and it's `createFulfillment` method is called. This method\nmay perform async tasks such as calling a 3rd-party shipping API to register a new shipment and receive\na tracking code. This data can then be returned and will be incorporated into the created Fulfillment.\n\nIf the `args` property is defined, this means that arguments passed to the `addFulfillmentToOrder` mutation\nwill be passed through to the `createFulfillment` method as the last argument.\n\n*Example*\n\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/#configurableoperationdef'>ConfigurableOperationDef</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/typescript-api/fulfillment/fulfillment-handler#fulfillmenthandlerconfig'>FulfillmentHandlerConfig</a>&#60;T&#62;) => FulfillmentHandler`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "let shipomatic;",
                    "",
                    "export const shipomaticFulfillmentHandler = new FulfillmentHandler({",
                    "  code: 'ship-o-matic',",
                    "  description: [{",
                    "    languageCode: LanguageCode.en,",
                    "    value: 'Generate tracking codes via the Ship-o-matic API'",
                    "  }],",
                    "",
                    "  args: {",
                    "    preferredService: {",
                    "      type: 'string',",
                    "      ui: {",
                    "        component: 'select-form-input',",
                    "        options: [",
                    "          { value: 'first_class' },",
                    "          { value: 'priority'},",
                    "          { value: 'standard' },",
                    "        ],",
                    "      },",
                    "    }",
                    "  },",
                    "",
                    "  init: () => {",
                    "    // some imaginary shipping service",
                    "    shipomatic = new ShipomaticClient(API_KEY);",
                    "  },",
                    "",
                    "  createFulfillment: async (ctx, orders, lines, args) => {",
                    "",
                    "     const shipment = getShipmentFromOrders(orders, lines);",
                    "",
                    "     try {",
                    "       const transaction = await shipomatic.transaction.create({",
                    "         shipment,",
                    "         service_level: args.preferredService,",
                    "         label_file_type: 'png',",
                    "       })",
                    "",
                    "       return {",
                    "         method: `Ship-o-matic ${args.preferredService}`,",
                    "         trackingCode: transaction.tracking_code,",
                    "         customFields: {",
                    "           shippingTransactionId: transaction.id,",
                    "         }",
                    "       };",
                    "     } catch (e: any) {",
                    "       // Errors thrown from within this function will",
                    "       // result in a CreateFulfillmentError being returned",
                    "       throw e;",
                    "     }",
                    "  },",
                    "",
                    "  onFulfillmentTransition: async (fromState, toState, { fulfillment }) => {",
                    "    if (toState === 'Cancelled') {",
                    "      await shipomatic.transaction.cancel({",
                    "        transaction_id: fulfillment.customFields.shippingTransactionId,",
                    "      });",
                    "    }",
                    "  }",
                    "});",
                    "class FulfillmentHandler<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {",
                    "    constructor(config: FulfillmentHandlerConfig<T>)",
                    "}"
                ]
            },
            {
                "id": "fulfillmenthandlerconfig",
                "title": "FulfillmentHandlerConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/fulfillment/fulfillment-handler.ts\" sourceLine=\"49\" packageName=\"@vendure/core\" />\n\nThe configuration object used to instantiate a <a href='/reference/typescript-api/fulfillment/fulfillment-handler#fulfillmenthandler'>FulfillmentHandler</a>.\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/configurable-operation-def-options#configurableoperationdefoptions'>ConfigurableOperationDefOptions</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "createfulfillment",
                        "title": "createFulfillment",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/fulfillment/fulfillment-handler#createfulfillmentfn'>CreateFulfillmentFn</a>&#60;T&#62;`}   />\n\nInvoked when the `addFulfillmentToOrder` mutation is executed with this handler selected.\n\nIf an Error is thrown from within this function, no Fulfillment is created and the `CreateFulfillmentError`\nresult will be returned.\n"
                    },
                    {
                        "id": "onfulfillmenttransition",
                        "title": "onFulfillmentTransition",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionstartfn'>OnTransitionStartFn</a>&#60;<a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a>, <a href='/reference/typescript-api/fulfillment/fulfillment-transition-data#fulfillmenttransitiondata'>FulfillmentTransitionData</a>&#62;`}   />\n\nThis allows the handler to intercept state transitions of the created Fulfillment. This works much in the\nsame way as the {@link CustomFulfillmentProcess} `onTransitionStart` method (i.e. returning `false` or\n`string` will be interpreted as an error and prevent the state transition), except that it is only invoked\non Fulfillments which were created with this particular FulfillmentHandler.\n\nIt can be useful e.g. to intercept Fulfillment cancellations and relay that information to a 3rd-party\nshipping API.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface FulfillmentHandlerConfig<T extends ConfigArgs> extends ConfigurableOperationDefOptions<T> {",
                    "    createFulfillment: CreateFulfillmentFn<T>;",
                    "    onFulfillmentTransition?: OnTransitionStartFn<FulfillmentState, FulfillmentTransitionData>;",
                    "}"
                ]
            },
            {
                "id": "createfulfillmentfn",
                "title": "CreateFulfillmentFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/fulfillment/fulfillment-handler.ts\" sourceLine=\"34\" packageName=\"@vendure/core\" />\n\nThe function called when creating a new Fulfillment\n\n\n\n",
                "subsections": [],
                "code": [
                    "type CreateFulfillmentFn<T extends ConfigArgs> = (",
                    "    ctx: RequestContext,",
                    "    orders: Order[],",
                    "    lines: OrderLineInput[],",
                    "    args: ConfigArgValues<T>,",
                    ") => CreateFulfillmentResult | Promise<CreateFulfillmentResult>"
                ]
            },
            {
                "id": "createfulfillmentresult",
                "title": "CreateFulfillmentResult",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/fulfillment/fulfillment-handler.ts\" sourceLine=\"24\" packageName=\"@vendure/core\" />\n\n\n\n\n",
                "subsections": [],
                "code": [
                    "type CreateFulfillmentResult = Partial<Pick<Fulfillment, 'trackingCode' | 'method' | 'customFields'>>"
                ]
            }
        ]
    },
    {
        "id": "fulfillmentprocess",
        "metadata": {
            "title": "FulfillmentProcess",
            "keywords": [
                "defaultfulfillmentprocess",
                "fulfillmentprocess",
                "transitions",
                "ontransitionstart",
                "ontransitionend",
                "ontransitionerror"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/fulfillment/default-fulfillment-process.ts\" sourceLine=\"42\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "defaultfulfillmentprocess",
                "title": "defaultFulfillmentProcess",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/fulfillment/default-fulfillment-process.ts\" sourceLine=\"42\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThe default <a href='/reference/typescript-api/fulfillment/fulfillment-process#fulfillmentprocess'>FulfillmentProcess</a>. This process includes the following actions:\n\n- Executes the configured `FulfillmentHandler.onFulfillmentTransition()` before any state\n  transition.\n- On cancellation of a Fulfillment, creates the necessary <a href='/reference/typescript-api/entities/stock-movement#cancellation'>Cancellation</a> & <a href='/reference/typescript-api/entities/stock-movement#allocation'>Allocation</a>\n  stock movement records.\n- When a Fulfillment transitions from the `Created` to `Pending` state, the necessary\n  <a href='/reference/typescript-api/entities/stock-movement#sale'>Sale</a> stock movements are created.\n\n\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "fulfillmentprocess",
                "title": "FulfillmentProcess",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/fulfillment/fulfillment-process.ts\" sourceLine=\"26\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nA FulfillmentProcess is used to define the way the fulfillment process works as in: what states a Fulfillment can be\nin, and how it may transition from one state to another. Using the `onTransitionStart()` hook, a\nFulfillmentProcess can perform checks before allowing a state transition to occur, and the `onTransitionEnd()`\nhook allows logic to be executed after a state change.\n\nFor detailed description of the interface members, see the <a href='/reference/typescript-api/state-machine/state-machine-config#statemachineconfig'>StateMachineConfig</a> docs.\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "transitions",
                        "title": "transitions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/transitions#transitions'>Transitions</a>&#60;State, State | <a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a>&#62; &#38;\n         Partial&#60;<a href='/reference/typescript-api/state-machine/transitions#transitions'>Transitions</a>&#60;<a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a> | State&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "ontransitionstart",
                        "title": "onTransitionStart",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionstartfn'>OnTransitionStartFn</a>&#60;State | <a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a>, <a href='/reference/typescript-api/fulfillment/fulfillment-transition-data#fulfillmenttransitiondata'>FulfillmentTransitionData</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "ontransitionend",
                        "title": "onTransitionEnd",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionendfn'>OnTransitionEndFn</a>&#60;State | <a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a>, <a href='/reference/typescript-api/fulfillment/fulfillment-transition-data#fulfillmenttransitiondata'>FulfillmentTransitionData</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "ontransitionerror",
                        "title": "onTransitionError",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionerrorfn'>OnTransitionErrorFn</a>&#60;State | <a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface FulfillmentProcess<State extends keyof CustomFulfillmentStates | string> extends InjectableStrategy {",
                    "    transitions?: Transitions<State, State | FulfillmentState> &",
                    "        Partial<Transitions<FulfillmentState | State>>;",
                    "    onTransitionStart?: OnTransitionStartFn<State | FulfillmentState, FulfillmentTransitionData>;",
                    "    onTransitionEnd?: OnTransitionEndFn<State | FulfillmentState, FulfillmentTransitionData>;",
                    "    onTransitionError?: OnTransitionErrorFn<State | FulfillmentState>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "fulfillmentservice",
        "metadata": {
            "title": "FulfillmentService",
            "keywords": [
                "fulfillmentservice",
                "constructor",
                "create",
                "getfulfillmentlines",
                "getfulfillmentslinesfororderline",
                "transitiontostate",
                "getnextstates"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/fulfillment.service.ts\" sourceLine=\"34\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "fulfillmentservice",
                "title": "FulfillmentService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/fulfillment.service.ts\" sourceLine=\"34\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, fulfillmentStateMachine: FulfillmentStateMachine, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, configService: ConfigService, customFieldRelationService: CustomFieldRelationService) => FulfillmentService`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orders: <a href='/reference/typescript-api/entities/order#order'>Order</a>[], lines: OrderLineInput[], handler: ConfigurableOperationInput) => Promise&#60;<a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a> | InvalidFulfillmentHandlerError | CreateFulfillmentError&#62;`}   />\n\nCreates a new Fulfillment for the given Orders and OrderItems, using the specified\n<a href='/reference/typescript-api/fulfillment/fulfillment-handler#fulfillmenthandler'>FulfillmentHandler</a>.\n"
                    },
                    {
                        "id": "getfulfillmentlines",
                        "title": "getFulfillmentLines",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/order-line-reference#fulfillmentline'>FulfillmentLine</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getfulfillmentslinesfororderline",
                        "title": "getFulfillmentsLinesForOrderLine",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderLineId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/order-line-reference#fulfillmentline'>FulfillmentLine</a>&#62; = []) => Promise&#60;<a href='/reference/typescript-api/entities/order-line-reference#fulfillmentline'>FulfillmentLine</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "transitiontostate",
                        "title": "transitionToState",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, fulfillmentId: <a href='/reference/typescript-api/common/id#id'>ID</a>, state: <a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a>) => Promise&#60;\n         | {\n               fulfillment: <a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a>;\n               orders: <a href='/reference/typescript-api/entities/order#order'>Order</a>[];\n               fromState: <a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a>;\n               toState: <a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a>;\n           }\n         | FulfillmentStateTransitionError\n     &#62;`}   />\n\nTransitions the specified Fulfillment to a new state and upon successful transition\npublishes a <a href='/reference/typescript-api/events/event-types#fulfillmentstatetransitionevent'>FulfillmentStateTransitionEvent</a>.\n"
                    },
                    {
                        "id": "getnextstates",
                        "title": "getNextStates",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fulfillment: <a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a>) => readonly <a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a>[]`}   />\n\nReturns an array of the next valid states for the Fulfillment.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class FulfillmentService {",
                    "    constructor(connection: TransactionalConnection, fulfillmentStateMachine: FulfillmentStateMachine, eventBus: EventBus, configService: ConfigService, customFieldRelationService: CustomFieldRelationService)",
                    "    create(ctx: RequestContext, orders: Order[], lines: OrderLineInput[], handler: ConfigurableOperationInput) => Promise<Fulfillment | InvalidFulfillmentHandlerError | CreateFulfillmentError>;",
                    "    getFulfillmentLines(ctx: RequestContext, id: ID) => Promise<FulfillmentLine[]>;",
                    "    getFulfillmentsLinesForOrderLine(ctx: RequestContext, orderLineId: ID, relations: RelationPaths<FulfillmentLine> = []) => Promise<FulfillmentLine[]>;",
                    "    transitionToState(ctx: RequestContext, fulfillmentId: ID, state: FulfillmentState) => Promise<",
                    "        | {",
                    "              fulfillment: Fulfillment;",
                    "              orders: Order[];",
                    "              fromState: FulfillmentState;",
                    "              toState: FulfillmentState;",
                    "          }",
                    "        | FulfillmentStateTransitionError",
                    "    >;",
                    "    getNextStates(fulfillment: Fulfillment) => readonly FulfillmentState[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "fulfillmentstate",
        "metadata": {
            "title": "FulfillmentState",
            "keywords": [
                "fulfillmentstate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/fulfillment-state-machine/fulfillment-state.ts\" sourceLine=\"29\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "fulfillmentstate",
                "title": "FulfillmentState",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/fulfillment-state-machine/fulfillment-state.ts\" sourceLine=\"29\" packageName=\"@vendure/core\" />\n\nThese are the default states of the fulfillment process. By default, they will be extended\nby the <a href='/reference/typescript-api/fulfillment/fulfillment-process#defaultfulfillmentprocess'>defaultFulfillmentProcess</a> to also include `Shipped` and `Delivered`.\n\n\n",
                "subsections": [],
                "code": [
                    "type FulfillmentState = | 'Created'",
                    "    | 'Pending'",
                    "    | 'Cancelled'",
                    "    | keyof CustomFulfillmentStates",
                    "    | keyof FulfillmentStates"
                ]
            }
        ]
    },
    {
        "id": "fulfillmentstates",
        "metadata": {
            "title": "FulfillmentStates",
            "keywords": [
                "fulfillmentstates"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/fulfillment-state-machine/fulfillment-state.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "fulfillmentstates",
                "title": "FulfillmentStates",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/fulfillment-state-machine/fulfillment-state.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" />\n\nAn interface to extend standard <a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a>.\n\n\n",
                "subsections": [],
                "code": [
                    "interface FulfillmentStates {",
                    "",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "fulfillmenttransitiondata",
        "metadata": {
            "title": "FulfillmentTransitionData",
            "keywords": [
                "fulfillmenttransitiondata",
                "ctx",
                "orders",
                "fulfillment"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/fulfillment-state-machine/fulfillment-state.ts\" sourceLine=\"42\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "fulfillmenttransitiondata",
                "title": "FulfillmentTransitionData",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/fulfillment-state-machine/fulfillment-state.ts\" sourceLine=\"42\" packageName=\"@vendure/core\" />\n\nThe data which is passed to the state transition handlers of the FulfillmentStateMachine.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "ctx",
                        "title": "ctx",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>`}   />\n\n\n"
                    },
                    {
                        "id": "orders",
                        "title": "orders",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "fulfillment",
                        "title": "fulfillment",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface FulfillmentTransitionData {",
                    "    ctx: RequestContext;",
                    "    orders: Order[];",
                    "    fulfillment: Fulfillment;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "generatemigration",
        "metadata": {
            "title": "GenerateMigration",
            "keywords": [
                "generatemigration",
                "userconfig",
                "options"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/migrate.ts\" sourceLine=\"107\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "generatemigration",
                "title": "generateMigration",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/migrate.ts\" sourceLine=\"107\" packageName=\"@vendure/core\" />\n\nGenerates a new migration file based on any schema changes (e.g. adding or removing CustomFields).\nSee [TypeORM migration docs](https://typeorm.io/#/migrations) for more information about the\nunderlying migration mechanism.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "userconfig",
                        "title": "userConfig",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`Partial&#60;<a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a>&#62;`} />\n\n"
                    },
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/typescript-api/migration/migration-options#migrationoptions'>MigrationOptions</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "function generateMigration(userConfig: Partial<VendureConfig>, options: MigrationOptions): void"
                ]
            }
        ]
    },
    {
        "id": "getentityorthrowoptions",
        "metadata": {
            "title": "GetEntityOrThrowOptions",
            "keywords": [
                "getentityorthrowoptions",
                "channelid",
                "retries",
                "retrydelay",
                "includesoftdeleted"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/connection/types.ts\" sourceLine=\"10\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "getentityorthrowoptions",
                "title": "GetEntityOrThrowOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/connection/types.ts\" sourceLine=\"10\" packageName=\"@vendure/core\" />\n\nOptions used by the <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a> `getEntityOrThrow` method.\n\n* Extends: <code>FindOneOptions&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "channelid",
                        "title": "channelId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\nAn optional channelId to limit results to entities assigned to the given Channel. Should\nonly be used when getting entities that implement the <a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a> interface.\n"
                    },
                    {
                        "id": "retries",
                        "title": "retries",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"0\"  since=\"1.1.0\"  />\n\nIf set to a positive integer, it will retry getting the entity in case it is initially not\nfound.\n"
                    },
                    {
                        "id": "retrydelay",
                        "title": "retryDelay",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"25\"  since=\"1.1.0\"  />\n\nSpecifies the delay in ms to wait between retries.\n"
                    },
                    {
                        "id": "includesoftdeleted",
                        "title": "includeSoftDeleted",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"  since=\"1.3.0\"  />\n\nIf set to `true`, soft-deleted entities will be returned. Otherwise they will\nthrow as if they did not exist.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface GetEntityOrThrowOptions<T = any> extends FindOneOptions<T> {",
                    "    channelId?: ID;",
                    "    retries?: number;",
                    "    retryDelay?: number;",
                    "    includeSoftDeleted?: boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "getsuperadmincontext",
        "metadata": {
            "title": "GetSuperadminContext",
            "keywords": [
                "getsuperadmincontext",
                "app"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/testing/src/utils/get-superadmin-context.ts\" sourceLine=\"11\" packageName=\"@vendure/testing\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "getsuperadmincontext",
                "title": "getSuperadminContext",
                "content": "\n<GenerationInfo sourceFile=\"packages/testing/src/utils/get-superadmin-context.ts\" sourceLine=\"11\" packageName=\"@vendure/testing\" />\n\nCreates a <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> configured for the default Channel with the activeUser set\nas the superadmin user. Useful for populating data.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "app",
                        "title": "app",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`INestApplicationContext`} />\n\n\n"
                    }
                ],
                "code": [
                    "function getSuperadminContext(app: INestApplicationContext): Promise<RequestContext>"
                ]
            }
        ]
    },
    {
        "id": "getting-data-into-production",
        "metadata": {
            "title": "Getting data into production",
            "keywords": [
                "getting data into production",
                "creating the database schema",
                "importing initial & catalog data",
                "importing other data"
            ],
            "description": "Once you have set up your production deployment, you'll need some way to get your products and other data into the system. The main tasks will be: 1. Creation of the database schema 2. Importing initial data like roles, tax rates, countries etc. 3. Importing catalog data like products, variants, options, facets"
        },
        "content": "",
        "sections": [
            {
                "id": "creating-the-database-schema",
                "title": "Creating the database schema",
                "content": "\nThe first item - creation of the schema - can be automatically handled by TypeORM's `synchronize` feature. Switching it on for the initial\nrun will automatically create the schema. This can be done by using an environment variable:\n\n\nSet the `DB_SYNCHRONIZE` variable to `true` on first start, and then after the schema is created, set it to `false`.\n\n",
                "subsections": [],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    dbConnectionOptions: {",
                    "        type: 'postgres',",
                    "        // highlight-next-line",
                    "        synchronize: process.env.DB_SYNCHRONIZE,",
                    "        host: process.env.DB_HOST,",
                    "        port: process.env.DB_PORT,",
                    "        username: process.env.DB_USER,",
                    "        password: process.env.DB_PASSWORD,",
                    "        database: process.env.DB_DATABASE,",
                    "    },",
                    "    // ...",
                    "};"
                ]
            },
            {
                "id": "importing-initial-&-catalog-data",
                "title": "Importing initial & catalog data",
                "content": "\nImporting initial and catalog data can be handled by Vendure `populate()` helper function - see the [Importing Product Data guide](/guides/developer-guide/importing-data/).\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "importing-other-data",
                "title": "Importing other data",
                "content": "\nAny kinds of data not covered by the `populate()` function can be imported using a custom script, which can use any Vendure service or service defined by your custom plugins to populate data in any way you like. See the [Stand-alone scripts guide](/guides/developer-guide/stand-alone-scripts/).\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "getting-started",
        "metadata": {
            "title": "Getting Started",
            "keywords": [
                "install `@vendure/ui-devkit`",
                "providers",
                "providers format",
                "specifying providers",
                "routes",
                "dev vs prod mode",
                "compiling as a deployment step",
                "using other frameworks",
                "legacy api < v2.1.0",
                "lazy vs shared modules",
                "example lazy module",
                "example shared module",
                "migrating to the new api"
            ],
            "description": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; When creating a plugin, you may wish to extend the Admin UI in order to expose a graphical interface to the plugin's functionality, or to add new functionality to the Admin UI itself. The UI can be extended with custom components written in [Angular](https://angular.io/) or [React](https://react.dev/). :::note The APIs described in this section were introduced in Vendure v2.1.0. For the legacy APIs, see the [Legacy API section](#legacy-api--v210)."
        },
        "content": "",
        "sections": [
            {
                "id": "install-`@vendure/ui-devkit`",
                "title": "Install `@vendure/ui-devkit`",
                "content": "\nTo extend the Admin UI, install the [`@vendure/ui-devkit` package](https://www.npmjs.com/package/@vendure/ui-devkit) as a dev dependency:\n\n<Tabs>\n<TabItem value=\"npm\" label=\"npm\" default>\n\n\n</TabItem>\n<TabItem value=\"yarn\" label=\"yarn\">\n\n\n</TabItem>\n</Tabs>\n\nYou can then create the following folder structure to hold your UI extensions:\n\n\nLet's add a simple UI extension that adds a new button to the \"order list\" page. We'll leave the routes file empty for now.\n\n\nYou can then use the [`compileUiExtensions` function](/reference/admin-ui-api/ui-devkit/compile-ui-extensions/) to compile your UI extensions and add them to the Admin UI app bundle.\n\n\nNow when you start the server, the following will happen:\n\n1. A new folder called `admin-ui` will be created in the root of your project (as specified by the `outputPath` option). This is a temporary directory (it should not be added to version control) which will contain the source files of your custom Admin UI app.\n2. During bootstrap, the `compileUiExtensions` function will be called, which will compile the Admin UI app and serve it in development mode. The dev server will be listening on port `4200` but this port will also be proxied to port `3000` (as specified by `apiOptions.port`). This step can take up to a minute or two, depending on the speed of your machine.\n\n:::caution\n**Note:** the TypeScript source files of your UI extensions **must not** be compiled by your regular TypeScript build task. This is because they will instead be compiled by the Angular compiler when you run `compileUiExtensions()`.\n\nYou can exclude them in your main `tsconfig.json` by adding a line to the \"exclude\" array:\n\n\n:::\n\n:::info\n**How It Works:** The Admin UI is an Angular application, and to generate a custom UI including your extensions, it is internally using the powerful [Angular CLI](https://angular.io/cli) to compile the app into an optimized bundle, including code-splitting and lazy-loading any routes which you define.\n:::\n\n",
                "subsections": [],
                "code": [
                    "npm install --save-dev @vendure/ui-devkit",
                    "yarn add --dev @vendure/ui-devkit",
                    "src",
                    "├── vendure-config.ts",
                    "└── plugins",
                    "    └── my-plugin",
                    "        └── ui",
                    "            ├── routes.ts",
                    "            └── providers.ts",
                    "import { addActionBarItem } from '@vendure/admin-ui/core';",
                    "",
                    "export default [",
                    "    addActionBarItem({",
                    "        id: 'test-button',",
                    "        label: 'Test Button',",
                    "        locationId: 'order-list',",
                    "    }),",
                    "];",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "// highlight-next-line",
                    "import { compileUiExtensions } from '@vendure/ui-devkit/compiler';",
                    "import * as path from 'path';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AdminUiPlugin.init({",
                    "            port: 3002,",
                    "            // highlight-start",
                    "            app: compileUiExtensions({",
                    "                outputPath: path.join(__dirname, '../admin-ui'),",
                    "                extensions: [",
                    "                    {",
                    "                        id: 'test-extension',",
                    "                        extensionPath: path.join(__dirname, 'plugins/my-plugin/ui'),",
                    "                        providers: ['providers.ts'],",
                    "                    },",
                    "                ],",
                    "                devMode: true,",
                    "            }),",
                    "            // highlight-end",
                    "            adminUiConfig: {",
                    "                apiPort: 3000,",
                    "            },",
                    "        }),",
                    "    ],",
                    "};",
                    "{",
                    "    \"exclude\": [",
                    "        \"node_modules\",",
                    "        \"migration.ts\",",
                    "        // highlight-start",
                    "        \"src/plugins/**/ui/*\",",
                    "        \"admin-ui\"",
                    "        // highlight-end",
                    "    ]",
                    "}"
                ]
            },
            {
                "id": "providers",
                "title": "Providers",
                "content": "\nYour `providers.ts` file exports an array of objects known as \"providers\" in Angular terminology. These providers are passed to the application on startup to configure new functionality.\n\nWith providers you can:\n\n-   Add new buttons to the action bar of existing pages (the top bar containing the primary actions for a page) using [`addActionBarItem`](/reference/admin-ui-api/action-bar/add-action-bar-item).\n-   Add new menu items to the left-hand navigation menu using [`addNavMenuItem`](/reference/admin-ui-api/nav-menu/add-nav-menu-item) and [`addNavMenuSection`](/reference/admin-ui-api/nav-menu/add-nav-menu-section).\n-   Define bulk actions for list views using [`registerBulkAction`](/reference/admin-ui-api/bulk-actions/register-bulk-action).\n-   Define arbitrary components to be rendered in a detail view page using [`registerCustomDetailComponent`](/reference/admin-ui-api/custom-detail-components/register-custom-detail-component) or [`registerReactCustomDetailComponent`](/reference/admin-ui-api/react-extensions/register-react-custom-detail-component)\n-   Add custom widgets to the dashboard using [`registerDashboardWidget`](/reference/admin-ui-api/dashboard-widgets/register-dashboard-widget)\n-   Define custom components for rendering data table cells using [`registerDataTableComponent`](/reference/admin-ui-api/custom-table-components/register-data-table-component) or [`registerReactDataTableComponent`](/reference/admin-ui-api/react-extensions/register-react-data-table-component)\n-   Define custom form input components for custom fields and configurable operation arguments using [`registerFormInputComponent`](/reference/admin-ui-api/custom-input-components/register-form-input-component) or [`registerReactFormInputComponent`](/reference/admin-ui-api/react-extensions/register-react-form-input-component)\n-   Define custom components to render customer/order history timeline entries using [`registerHistoryEntryComponent`](/reference/admin-ui-api/custom-history-entry-components/register-history-entry-component)\n\n",
                "subsections": [
                    {
                        "id": "providers-format-",
                        "title": "Providers format ",
                        "content": "\nA providers file should have a **default export** which is an array of providers:\n\n\n"
                    },
                    {
                        "id": "specifying-providers",
                        "title": "Specifying providers",
                        "content": "\nWhen defining UI extensions in the `compileUiExtensions()` function, you must specify at least one providers file. This is done by passing an array of file paths, where each file path is relative to the directory specified by the `extensionPath` option.\n\n\n:::info\nWhen running the Admin UI in dev mode, you can use the `ctrl + u` keyboard shortcut to see the location of all UI extension points.\n\nClicking on an extension point will display a code snippet which you can copy and paste into your `providers.ts` file.\n\n![Provider extension points](./provider-extension-points.webp)\n:::\n\nIn addition to the specialized UI extension providers listed above, the providers array can also contain any kind of Angular providers which you want to use inside your custom logic. For example, we can define a custom service, add it to the providers array and then consume it from within another provider:\n\n\n\n"
                    }
                ],
                "code": [
                    "import { addActionBarItem } from '@vendure/admin-ui/core';",
                    "",
                    "export default [",
                    "    addActionBarItem({",
                    "        id: 'test-button',",
                    "        label: 'Test Button',",
                    "        locationId: 'order-list',",
                    "    }),",
                    "];",
                    "import { compileUiExtensions } from '@vendure/ui-devkit/compiler';",
                    "import * as path from 'path';",
                    "",
                    "// ... omitted for brevity",
                    "",
                    "compileUiExtensions({",
                    "    outputPath: path.join(__dirname, '../admin-ui'),",
                    "    extensions: [",
                    "        {",
                    "            id: 'test-extension',",
                    "            extensionPath: path.join(__dirname, 'plugins/my-plugin/ui'),",
                    "            // highlight-next-line",
                    "            providers: ['providers.ts'],",
                    "        },",
                    "    ],",
                    "    devMode: true,",
                    "});",
                    "import { Injectable } from '@angular/core';",
                    "import { addActionBarItem } from '@vendure/admin-ui/core';",
                    "",
                    "// highlight-start",
                    "@Injectable()",
                    "class MyService {",
                    "    greet() { return 'Hello!'; }",
                    "}",
                    "// highlight-end ",
                    "",
                    "export default [",
                    "    MyService,",
                    "    addActionBarItem({",
                    "        id: 'print-invoice',",
                    "        label: 'Print invoice',",
                    "        locationId: 'order-detail',",
                    "        onClick: (event, context) => {",
                    "            // highlight-start",
                    "            const myService = context.injector.get(MyService);",
                    "            console.log(myService.greet());",
                    "            // logs \"Hello!\"",
                    "            // highlight-end",
                    "        },",
                    "    }),",
                    "];"
                ]
            },
            {
                "id": "routes",
                "title": "Routes",
                "content": "\nRoutes allow you to define completely custom views in the Admin UI.\n\n![Custom route](../defining-routes/route-area.webp)\n\nYour `routes.ts` file exports an array of objects which define new routes in the Admin UI. For example, imagine you have created a plugin which implements a simple content management system. You can define a route for the list of articles, and another for the detail view of an article.\n\nFor a detailed instructions, see the [Defining Routes guide](/guides/extending-the-admin-ui/defining-routes/).\n\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "dev-vs-prod-mode",
                "title": "Dev vs Prod mode",
                "content": "\nWhen you are developing your Admin UI extension, you can set the `devMode` option to `true` which will compile the Admin UI app in development mode, and recompile and auto-refresh the browser on any changes to your extension source files.\n\n\n",
                "subsections": [],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "import { compileUiExtensions } from '@vendure/ui-devkit/compiler';",
                    "import * as path from 'path';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AdminUiPlugin.init({",
                    "            port: 3002,",
                    "            app: compileUiExtensions({",
                    "                outputPath: path.join(__dirname, '../admin-ui'),",
                    "                extensions: [",
                    "                    {",
                    "                        // ...",
                    "                    },",
                    "                ],",
                    "                devMode: true,",
                    "            }),",
                    "        }),",
                    "    ],",
                    "};"
                ]
            },
            {
                "id": "compiling-as-a-deployment-step",
                "title": "Compiling as a deployment step",
                "content": "\nAlthough the examples so far all use the `compileUiExtensions` function in conjunction with the AdminUiPlugin, it is also possible to use it on its own:\n\n\nThis can then be run from the command line:\n\n<Tabs>\n<TabItem value=\"npm\" label=\"npm\" default>\n\n\n</TabItem>\n<TabItem value=\"yarn\" label=\"yarn\">\n\n\n</TabItem>\n</Tabs>\n\nOnce complete, the production-ready app bundle will be output to `admin-ui/dist`. This method is suitable for a production setup, so that the Admin UI can be compiled ahead-of-time as part of your deployment process. This ensures that your Vendure server starts up as quickly as possible. In this case, you can pass the path of the compiled app to the AdminUiPlugin:\n\n\n:::info\nTo compile the angular app ahead of time (for production) and copy the dist folder to Vendure's output dist folder, include the following commands in your packages.json scripts:\n\n\n\"build:admin\" will remove the admin-ui folder and run the compileUiExtensions function to generate the admin-ui Angular app.\nMake sure to install copyfiles before running the \"copy\" command:\n\n<Tabs>\n<TabItem value=\"npm\" label=\"npm\" default>\n\n\n</TabItem>\n<TabItem value=\"yarn\" label=\"yarn\">\n\n\n</TabItem>\n</Tabs>\n\n:::\n\n",
                "subsections": [],
                "code": [
                    "import { compileUiExtensions } from '@vendure/ui-devkit/compiler';",
                    "import * as path from 'path';",
                    "",
                    "compileUiExtensions({",
                    "    outputPath: path.join(__dirname, '../admin-ui'),",
                    "    extensions: [",
                    "        /* ... */",
                    "    ],",
                    "})",
                    "    .compile?.()",
                    "    .then(() => {",
                    "        process.exit(0);",
                    "    });",
                    "npm run ts-node compile-admin-ui.ts",
                    "yarn ts-node compile-admin-ui.ts",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "import * as path from 'path';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AdminUiPlugin.init({",
                    "            port: 3002,",
                    "            app: {",
                    "                path: path.join(__dirname, '../admin-ui/dist'),",
                    "            },",
                    "        }),",
                    "    ],",
                    "};",
                    "{",
                    "    \"scripts\": {",
                    "        \"copy\": \"npx copyfiles -u 1 'src/__admin-ui/dist/**/*' dist\",",
                    "        \"build\": \"tsc && yarn copy\",",
                    "        \"build:admin\": \"rimraf admin-ui && npx ts-node src/compile-admin-ui.ts\"",
                    "    }",
                    "}",
                    "npm install copyfiles",
                    "yarn add copyfiles"
                ]
            },
            {
                "id": "using-other-frameworks",
                "title": "Using other frameworks",
                "content": "\nWhile the Admin UI natively supports extensions written with Angular or React, it is still possible to create extensions using other front-end frameworks such as Vue or Solid. Note that creating extensions in this way is much more limited, with only the ability to define new routes, and limited access to internal services such as data fetching and notifications. See [UI extensions in other frameworks](/guides/extending-the-admin-ui/using-other-frameworks/).\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "legacy-api-<-v2.1.0",
                "title": "Legacy API < v2.1.0",
                "content": "\nPrior to Vendure v2.1.0, the API for extending the Admin UI was more verbose and less flexible (React components were not supported at all, for instance). This API is still supported, but from v2.1 is marked as deprecated and will be removed in a future major version. \n\nThis section describes the legacy API.\n\n",
                "subsections": [
                    {
                        "id": "lazy-vs-shared-modules",
                        "title": "Lazy vs Shared Modules",
                        "content": "\nAngular uses the concept of modules ([NgModules](https://angular.io/guide/ngmodules)) for organizing related code. These modules can be lazily loaded, which means that the code is not loaded when the app starts, but only later once that code is required. This keeps the main bundle small and improves performance.\n\nWhen creating your UI extensions, you can set your module to be either `lazy` or `shared`. Shared modules are loaded _eagerly_, i.e. their code is bundled up with the main app and loaded as soon as the app loads.\n\nAs a rule, modules defining new routes should be lazily loaded (so that the code is only loaded once that route is activated), and modules defining [new navigations items](/guides/extending-the-admin-ui/nav-menu/) and [custom form input](/guides/extending-the-admin-ui/custom-form-inputs/) should be set to `shared`.\n\n:::info\n\"lazy\" modules are equivalent to the new \"routes\" API, and \"shared\" modules are equivalent to the new \"providers\" API. In fact, behind the scenes,\nthe new APIs are automatically creating these modules for you.\n:::\n\n"
                    },
                    {
                        "id": "example-lazy-module",
                        "title": "Example lazy module",
                        "content": "\nHere's a very simple Angular component which displays a greeting:\n\n\nNext we need to declare an Angular module to house the component:\n\n\n:::note\nThe `SharedModule` should, in general, always be imported by your extension modules. It provides the basic Angular\ndirectives and other common functionality that any extension would require.\n:::\n\nNow we need to tell the `compileUiExtensions` function where to find the extension, and which file contains the NgModule itself (since a non-trivial UI extension will likely contain multiple files).\n\n\n"
                    },
                    {
                        "id": "example-shared-module",
                        "title": "Example shared module",
                        "content": "\nHere's an example of the legacy API for defining a shared module:\n\n\n\n"
                    },
                    {
                        "id": "migrating-to-the-new-api",
                        "title": "Migrating to the new API",
                        "content": "\nIf you have existing UI extensions written using the legacy API, you can migrate them to the new API as follows:\n\n1. Convert all components to be [standalone components](https://angular.io/guide/standalone-components). Standalone components were introduced in recent versions of Angular and allow components to be defined without the need for a module. To convert an existing component, you need to set `standalone: true` and add an `imports` array containing any components, directives or pipes you are using in that component. Typically, you can import `SharedModule` to get access to all the common Angular directives and pipes, as well as the shared Admin UI components.\n  ```ts\n  import { Component } from '@angular/core';\n  // highlight-next-line\n  import { SharedModule } from '@vendure/admin-ui/core';\n  \n  @Component({\n      selector: 'greeter',\n      template: `<vdr-page-block><h1>{{ greeting }}</h1></vdr-page-block>`,\n      // highlight-start\n      standalone: true,\n      imports: [SharedModule],\n      // highlight-end\n  })\n  export class GreeterComponent {\n      greeting = 'Hello!';\n  }\n  ```\n2. In templates for page components, remove the `<vdr-page-header>` and `<vdr-page-body>` components, as they are included by default now when using\nthe `registeRouteComponent()` function:\n   ```html\n   // highlight-start\n   <vdr-page-header>\n       <vdr-page-title></vdr-page-title>\n   </vdr-page-header>\n   <vdr-page-body>\n   // highlight-end\n       <vdr-page-block>This content should remain</vdr-page-block>\n   // highlight-next-line\n   </vdr-page-body>\n   ```\n3. Remove any `NgModule` files, and replace lazy modules with `routes.ts`, and shared modules with `providers.ts` (see above).\n\n\n"
                    }
                ],
                "code": [
                    "import { Component } from '@angular/core';",
                    "",
                    "@Component({",
                    "    selector: 'greeter',",
                    "    template: `<vdr-page-block><h1>{{ greeting }}</h1></vdr-page-block>`,",
                    "})",
                    "export class GreeterComponent {",
                    "    greeting = 'Hello!';",
                    "}",
                    "import { NgModule } from '@angular/core';",
                    "import { RouterModule } from '@angular/router';",
                    "import { SharedModule } from '@vendure/admin-ui/core';",
                    "import { GreeterComponent } from './greeter.component';",
                    "",
                    "@NgModule({",
                    "    imports: [",
                    "        SharedModule,",
                    "        RouterModule.forChild([{",
                    "            path: '',",
                    "            pathMatch: 'full',",
                    "            component: GreeterComponent,",
                    "            data: { breadcrumb: 'Greeter' },",
                    "        }]),",
                    "    ],",
                    "    declarations: [GreeterComponent],",
                    "})",
                    "export class GreeterModule {}",
                    "import path from 'path';",
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { compileUiExtensions } from '@vendure/ui-devkit/compiler';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AdminUiPlugin.init({",
                    "            port: 3002,",
                    "            app: compileUiExtensions({",
                    "                outputPath: path.join(__dirname, '../admin-ui'),",
                    "                extensions: [{",
                    "                    extensionPath: path.join(__dirname, 'plugins/greeter/ui'),",
                    "                    // highlight-start",
                    "                    ngModules: [{",
                    "                        type: 'lazy',",
                    "                        route: 'greet',",
                    "                        ngModuleFileName: 'greeter.module.ts',",
                    "                        ngModuleName: 'GreeterModule',",
                    "                    }],",
                    "                    // highlight-end",
                    "                }],",
                    "            }),",
                    "        }),",
                    "    ],",
                    "};",
                    "import { NgModule } from '@angular/core';",
                    "import { SharedModule, addActionBarItem } from '@vendure/admin-ui/core';",
                    "",
                    "@NgModule({",
                    "    imports: [SharedModule],",
                    "    providers: [",
                    "        addActionBarItem({",
                    "            id: 'print-invoice',",
                    "            label: 'Print invoice',",
                    "            locationId: 'order-detail',",
                    "            routerLink: route => {",
                    "                const id = route.snapshot.params.id;",
                    "                return ['./extensions/order-invoices', id];",
                    "            },",
                    "            requiresPermission: 'ReadOrder',",
                    "        }),",
                    "    ],",
                    "})",
                    "export class InvoiceSharedModule {}",
                    "import path from 'path';",
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { compileUiExtensions } from '@vendure/ui-devkit/compiler';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AdminUiPlugin.init({",
                    "            port: 3002,",
                    "            app: compileUiExtensions({",
                    "                outputPath: path.join(__dirname, '../admin-ui'),",
                    "                extensions: [{",
                    "                    extensionPath: path.join(__dirname, 'plugins/invoices/ui'),",
                    "                    // highlight-start",
                    "                    ngModules: [{",
                    "                        type: 'shared',",
                    "                        ngModuleFileName: 'invoice-shared.module.ts',",
                    "                        ngModuleName: 'InvoiceSharedModule',",
                    "                    }],",
                    "                    // highlight-end",
                    "                }],",
                    "            }),",
                    "        }),",
                    "    ],",
                    "};"
                ]
            }
        ]
    },
    {
        "id": "global-settings",
        "metadata": {
            "title": "Global Settings",
            "keywords": [
                "global settings"
            ],
            "description": "The global settings allow you to define certain configurations that affect _all_ channels. * **Available languages** defines which languages you wish to make available for translations. When more than one language has been enabled, you will see the language switcher appear when viewing translatable objects such as products, collections, facets and shipping methods. ![./screen-translations.webp](./screen-translations.webp) * **Global out-of-stock threshold** sets the stock level at which a product variant is considered to be out of stock. Using a negative value enables backorder support. This setting can be overridden by individual product variants (see the [tracking inventory]({{< relref \"/user-guide/catalog/products\" >}}#tracking-inventory) guide). * **Track inventory by default** sets whether stock levels should be tracked. This setting can be overridden by individual product variants (see the [tracking inventory]({{< relref \"/user-guide/catalog/products\" >}}#tracking-inventory) guide)."
        },
        "content": "",
        "sections": []
    },
    {
        "id": "globalsettingsservice",
        "metadata": {
            "title": "GlobalSettingsService",
            "keywords": [
                "globalsettingsservice",
                "constructor",
                "getsettings",
                "updatesettings"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/global-settings.service.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "globalsettingsservice",
                "title": "GlobalSettingsService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/global-settings.service.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />\n\nContains methods relating to the {@link GlobalSettings} entity.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, customFieldRelationService: CustomFieldRelationService, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, requestCache: RequestContextCacheService) => GlobalSettingsService`}   />\n\n\n"
                    },
                    {
                        "id": "getsettings",
                        "title": "getSettings",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;GlobalSettings&#62;`}   />\n\nReturns the GlobalSettings entity.\n"
                    },
                    {
                        "id": "updatesettings",
                        "title": "updateSettings",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateGlobalSettingsInput) => Promise&#60;GlobalSettings&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class GlobalSettingsService {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, customFieldRelationService: CustomFieldRelationService, eventBus: EventBus, requestCache: RequestContextCacheService)",
                    "    getSettings(ctx: RequestContext) => Promise<GlobalSettings>;",
                    "    updateSettings(ctx: RequestContext, input: UpdateGlobalSettingsInput) => Promise<GlobalSettings>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "graphql-api",
        "metadata": {
            "title": "GraphQL API",
            "keywords": [
                "graphql api"
            ],
            "description": "This section contains a description of all queries, mutations and related types available in the Vendure GraphQL API. The API is split into two distinct endpoints: *Shop* and *Admin*. The Shop API is for storefront client applications, whereas the Admin API is used for administrative tasks. {{% alert %}} All documentation in this section is auto-generated from the Vendure GraphQL schema. {{< /alert >}}"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "graphql-code-generation",
        "metadata": {
            "title": "GraphQL Code Generation",
            "keywords": [
                "installation",
                "configuration",
                "running codegen",
                "using generated types in resolvers & services",
                "codegen for admin ui extensions",
                "use the `graphql()` function",
                "codegen watch mode"
            ],
            "description": "Code generation means the automatic generation of TypeScript types based on your GraphQL schema and your GraphQL operations. This is a very powerful feature that allows you to write your code in a type-safe manner, without you needing to manually write any types for your API calls. To do this, we will use [Graphql Code Generator](https://the-guild.dev/graphql/codegen). :::note"
        },
        "content": "",
        "sections": [
            {
                "id": "installation",
                "title": "Installation",
                "content": "\nFirst, install the required dependencies:\n\n\n",
                "subsections": [],
                "code": [
                    "npm install -D @graphql-codegen/cli @graphql-codegen/typescript"
                ]
            },
            {
                "id": "configuration",
                "title": "Configuration",
                "content": "\nAdd a `codegen.ts` file to your project root with the following contents:\n\n\nThis assumes that we have an \"organization\" plugin which adds support for grouping customers into organizations, e.g. for B2B use-cases.\n\n",
                "subsections": [],
                "code": [
                    "import type {CodegenConfig} from '@graphql-codegen/cli';",
                    "",
                    "const config: CodegenConfig = {",
                    "    overwrite: true,",
                    "    // This assumes your server is running on the standard port",
                    "    // and with the default admin API path. Adjust accordingly.",
                    "    schema: 'http://localhost:3000/admin-api',",
                    "    config: {",
                    "        // This tells codegen that the `Money` scalar is a number",
                    "        scalars: { Money: 'number' },",
                    "        // This ensures generated enums do not conflict with the built-in types.",
                    "        namingConvention: { enumValues: 'keep' },",
                    "    },",
                    "    generates: {",
                    "        // The path to the generated type file in your",
                    "        // plugin directory. Adjust accordingly.",
                    "        'src/plugins/organization/gql/generated.ts': {",
                    "            plugins: ['typescript'],",
                    "        },",
                    "    },",
                    "};",
                    "",
                    "export default config;"
                ]
            },
            {
                "id": "running-codegen",
                "title": "Running codegen",
                "content": "\nYou can now add a script to your package.json to run codegen:\n\n\n**Ensure your server is running**, then run the codegen script:\n\n\nThis will generate a file at `src/plugins/organization/gql/generated.ts` which contains all the GraphQL types corresponding to your schema.\n\n",
                "subsections": [],
                "code": [
                    "{",
                    "  \"scripts\": {",
                    "    \"codegen\": \"graphql-codegen --config codegen.ts\"",
                    "  }",
                    "}",
                    "npm run codegen"
                ]
            },
            {
                "id": "using-generated-types-in-resolvers-&-services",
                "title": "Using generated types in resolvers & services",
                "content": "\nYou would then use these types in your resolvers and service methods, for example:\n\n\nIn your service methods you can directly use any input types defined in your schema:\n\n\n",
                "subsections": [],
                "code": [
                    "import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';",
                    "import { Allow, Ctx, PaginatedList, RequestContext, Transaction } from '@vendure/core';",
                    "",
                    "import { organizationPermission } from '../constants';",
                    "import { Organization } from '../entities/organization.entity';",
                    "import { OrganizationService } from '../services/organization.service';",
                    "// highlight-next-line",
                    "import { QueryOrganizationArgs, MutationCreateOrganizationArgs } from '../gql/generated';",
                    "",
                    "@Resolver()",
                    "export class AdminResolver {",
                    "    constructor(private organizationService: OrganizationService) {}",
                    "",
                    "    @Query()",
                    "    @Allow(organizationPermission.Read)",
                    "    // highlight-next-line",
                    "    organization(@Ctx() ctx: RequestContext, @Args() args: QueryOrganizationArgs): Promise<Organization> {",
                    "        return this.organizationService.findOne(ctx, args.id);",
                    "    }",
                    "    ",
                    "    @Transaction()",
                    "    @Mutation()",
                    "    @Allow(organizationPermission.Create)",
                    "    createOrganization(",
                    "        @Ctx() ctx: RequestContext,",
                    "        // highlight-next-line",
                    "        @Args() args: MutationCreateOrganizationArgs,",
                    "    ): Promise<Organization> {",
                    "        return this.organizationService.create(ctx, args.input);",
                    "    }",
                    "",
                    "    // ... etc",
                    "}",
                    "import { Injectable } from '@nestjs/common';",
                    "import { RequestContext, TransactionalConnection } from '@vendure/core';",
                    "",
                    "import { Organization } from '../entities/organization.entity';",
                    "// highlight-next-line",
                    "import { CreateOrganizationInput, UpdateOrganizationInput } from \"../gql/generated\";",
                    "",
                    "@Injectable()",
                    "export class OrganizationService {",
                    "    constructor(private connection: TransactionalConnection) {}",
                    "",
                    "    // highlight-next-line",
                    "    async create(ctx: RequestContext, input: CreateOrganizationInput): Promise<Organization> {",
                    "        return this.connection.getRepository(ctx, Organization).save(new Organization(input));",
                    "    }",
                    "",
                    "    // highlight-next-line",
                    "    async update(ctx: RequestContext, input: UpdateOrganizationInput): Promise<Organization> {",
                    "        const example = await this.connection.getEntityOrThrow(ctx, Organization, input.id);",
                    "        const updated = {...example, ...input};",
                    "        return this.connection.getRepository(ctx, Organization).save(updated);",
                    "    }",
                    "}"
                ]
            },
            {
                "id": "codegen-for-admin-ui-extensions",
                "title": "Codegen for Admin UI extensions",
                "content": "\nWhen you create Admin UI extensions, very often those UI components will be making API calls to the Admin API. In this case, you can use codegen to generate the types for those API calls.\n\nTo do this, we will use the [\"client preset\" plugin](https://the-guild.dev/graphql/codegen/plugins/presets/preset-client). Assuming you have already completed the setup above, you'll need to install the following additional dependency:\n\n\nThen add the following to your `codegen.ts` file:\n\n\nFor the client preset plugin, we need to specify a _directory_ (`.../ui/gql/`) because a number of files will get generated.\n\n",
                "subsections": [
                    {
                        "id": "use-the-`graphql()`-function",
                        "title": "Use the `graphql()` function",
                        "content": "\nIn your Admin UI components, you can now use the `graphql()` function exported from the generated file to define your\nGraphQL operations. For example:\n\n\nWhenever you write a new GraphQL operation, or change an existing one, you will need to re-run the codegen script to generate the types for that operation.\n\n"
                    }
                ],
                "code": [
                    "npm install -D @graphql-codegen/client-preset",
                    "import type { CodegenConfig } from '@graphql-codegen/cli';",
                    "",
                    "const config: CodegenConfig = {",
                    "    overwrite: true,",
                    "    schema: 'http://localhost:3000/admin-api',",
                    "    config: {",
                    "        scalars: { Money: 'number' },",
                    "        namingConvention: { enumValues: 'keep' },",
                    "    },",
                    "    generates: {",
                    "        // highlight-start",
                    "        'apps/marketplace/src/plugins/marketplace/ui/gql/': {",
                    "            preset: 'client',",
                    "            documents: 'apps/marketplace/src/plugins/marketplace/ui/**/*.ts',",
                    "            // This disables the \"fragment masking\" feature. Fragment masking",
                    "            // can improve component isolation but introduces some additional",
                    "            // complexity that we will avoid for now.",
                    "            presetConfig: {",
                    "                fragmentMasking: false,",
                    "            },",
                    "        },",
                    "        // highlight-end",
                    "        'apps/marketplace/src/plugins/marketplace/gql/generated.ts': {",
                    "            plugins: ['typescript'],",
                    "        },",
                    "    },",
                    "};",
                    "",
                    "export default config;",
                    "import { ChangeDetectionStrategy, Component } from '@angular/core';",
                    "import { SharedModule, TypedBaseListComponent } from '@vendure/admin-ui/core';",
                    "import { graphql } from '../../gql';",
                    "",
                    "// highlight-start",
                    "const getOrganizationListDocument = graphql(`",
                    "    query GetOrganizationList($options: OrganizationListOptions) {",
                    "        organizations(options: $options) {",
                    "            items {",
                    "                id",
                    "                createdAt",
                    "                updatedAt",
                    "                name",
                    "                invoiceEmailAddresses",
                    "            }",
                    "            totalItems",
                    "        }",
                    "    }",
                    "`);",
                    "// highlight-end",
                    "",
                    "@Component({",
                    "    selector: 'organization-list',",
                    "    templateUrl: './organization-list.component.html',",
                    "    styleUrls: ['./organization-list.component.scss'],",
                    "    changeDetection: ChangeDetectionStrategy.OnPush,",
                    "    standalone: true,",
                    "    imports: [SharedModule],",
                    "})",
                    "export class OrganizationListComponent extends TypedBaseListComponent<",
                    "    // highlight-start",
                    "    typeof getOrganizationListDocument,",
                    "    'organizations'",
                    "    // highlight-end",
                    "> {",
                    "    ",
                    "    // Sort & filter definitions omitted for brevity.",
                    "    // For a complete ListComponent example, see the ",
                    "    // \"Creating List Views\" guide.",
                    "",
                    "    constructor() {",
                    "        super();",
                    "        super.configure({",
                    "            // highlight-next-line",
                    "            document: getOrganizationListDocument,",
                    "            getItems: (data) => data.organizations,",
                    "            setVariables: (skip, take) => ({",
                    "                options: {",
                    "                    skip,",
                    "                    take,",
                    "                    filter: {",
                    "                        name: {",
                    "                            contains: this.searchTermControl.value,",
                    "                        },",
                    "                        ...this.filters.createFilterInput(),",
                    "                    },",
                    "                    sort: this.sorts.createSortInput(),",
                    "                },",
                    "            }),",
                    "            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],",
                    "        });",
                    "    }",
                    "}"
                ]
            },
            {
                "id": "codegen-watch-mode",
                "title": "Codegen watch mode",
                "content": "\nYou can also set up file watching as described in the [Graphql Code Generator watch mode docs](https://the-guild.dev/graphql/codegen/docs/getting-started/development-workflow#watch-mode).\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "guestcheckoutstrategy",
        "metadata": {
            "title": "GuestCheckoutStrategy",
            "keywords": [
                "guestcheckoutstrategy",
                "setcustomerfororder"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/guest-checkout-strategy.ts\" sourceLine=\"32\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "guestcheckoutstrategy",
                "title": "GuestCheckoutStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/guest-checkout-strategy.ts\" sourceLine=\"32\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nA strategy that determines how to deal with guest checkouts - i.e. when a customer\nchecks out without being logged in. For example, a strategy could be used to implement\nbusiness rules such as:\n\n- No guest checkouts allowed\n- No guest checkouts allowed for customers who already have an account\n- No guest checkouts allowed for customers who have previously placed an order\n- Allow guest checkouts, but create a new Customer entity if the email address\n  is already in use\n- Allow guest checkouts, but update the existing Customer entity if the email address\n  is already in use\n\n:::info\n\nThis is configured via the `orderOptions.guestCheckoutStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "setcustomerfororder",
                        "title": "setCustomerForOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, input: CreateCustomerInput) => | <a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;SetCustomerForOrderResult, <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62;\n         | Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;SetCustomerForOrderResult, <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>&#62;&#62;`}   />\n\nThis method is called when the `setCustomerForOrder` mutation is executed.\nIt should return either a Customer object or an ErrorResult.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface GuestCheckoutStrategy extends InjectableStrategy {",
                    "    setCustomerForOrder(",
                    "        ctx: RequestContext,",
                    "        order: Order,",
                    "        input: CreateCustomerInput,",
                    "    ):",
                    "        | ErrorResultUnion<SetCustomerForOrderResult, Customer>",
                    "        | Promise<ErrorResultUnion<SetCustomerForOrderResult, Customer>>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "hardenplugin",
        "metadata": {
            "title": "HardenPlugin",
            "keywords": [
                "hardenplugin",
                "installation",
                "setting the max query complexity",
                "options",
                "init"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/harden-plugin/src/harden.plugin.ts\" sourceLine=\"146\" packageName=\"@vendure/harden-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "hardenplugin",
                "title": "HardenPlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/harden-plugin/src/harden.plugin.ts\" sourceLine=\"146\" packageName=\"@vendure/harden-plugin\" />\n\nThe HardenPlugin hardens the Shop and Admin GraphQL APIs against attacks and abuse.\n\n- It analyzes the complexity on incoming graphql queries and rejects queries that are too complex and\n  could be used to overload the resources of the server.\n- It disables dev-mode API features such as introspection and the GraphQL playground app.\n- It removes field name suggestions to prevent trial-and-error schema sniffing.\n\nIt is a recommended plugin for all production configurations.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "installation",
                "title": "Installation",
                "content": "\n`yarn add @vendure/harden-plugin`\n\nor\n\n`npm install @vendure/harden-plugin`\n\nThen add the `HardenPlugin`, calling the `.init()` method with <a href='/reference/core-plugins/harden-plugin/harden-plugin-options#hardenpluginoptions'>HardenPluginOptions</a>:\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "import { HardenPlugin } from '@vendure/harden-plugin';",
                    "",
                    "const config: VendureConfig = {",
                    "  // Add an instance of the plugin to the plugins array",
                    "  plugins: [",
                    "     HardenPlugin.init({",
                    "       maxQueryComplexity: 650,",
                    "       apiMode: process.env.APP_ENV === 'dev' ? 'dev' : 'prod',",
                    "     }),",
                    "  ],",
                    "};"
                ]
            },
            {
                "id": "setting-the-max-query-complexity",
                "title": "Setting the max query complexity",
                "content": "\nThe `maxQueryComplexity` option determines how complex a query can be. The complexity of a query relates to how many, and how\ndeeply-nested are the fields being selected, and is intended to roughly correspond to the amount of server resources that would\nbe required to resolve that query.\n\nThe goal of this setting is to prevent attacks in which a malicious actor crafts a very complex query in order to overwhelm your\nserver resources. Here's an example of a request which would likely overwhelm a Vendure server:\n\n\nThis evil query has a complexity score of 2,443,203 - much greater than the default of 1,000!\n\nThe complexity score is calculated by the [graphql-query-complexity library](https://www.npmjs.com/package/graphql-query-complexity),\nand by default uses the <a href='/reference/core-plugins/harden-plugin/default-vendure-complexity-estimator#defaultvendurecomplexityestimator'>defaultVendureComplexityEstimator</a>, which is tuned specifically to the Vendure Shop API.\n\n:::caution\nNote: By default, if the \"take\" argument is omitted from a list query (e.g. the `products` or `collections` query), a default factor of 1000 is applied.\n:::\n\nThe optimal max complexity score will vary depending on:\n\n- The requirements of your storefront and other clients using the Shop API\n- The resources available to your server\n\nYou should aim to set the maximum as low as possible while still being able to service all the requests required.\nThis will take some manual tuning.\nWhile tuning the max, you can turn on the `logComplexityScore` to get a detailed breakdown of the complexity of each query, as well as how\nthat total score is derived from its child fields:\n\n*Example*\n\n\nWith logging configured as above, the following query:\n\nwill log the following breakdown:\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/harden-plugin/harden-plugin-options#hardenpluginoptions'>HardenPluginOptions</a>`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/harden-plugin/harden-plugin-options#hardenpluginoptions'>HardenPluginOptions</a>) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "query EvilQuery {",
                    "  products {",
                    "    items {",
                    "      collections {",
                    "        productVariants {",
                    "          items {",
                    "            product {",
                    "              collections {",
                    "                productVariants {",
                    "                  items {",
                    "                    product {",
                    "                      variants {",
                    "                        name",
                    "                      }",
                    "                    }",
                    "                  }",
                    "                }",
                    "              }",
                    "            }",
                    "          }",
                    "        }",
                    "      }",
                    "    }",
                    "  }",
                    "}",
                    "import { HardenPlugin } from '@vendure/harden-plugin';",
                    "",
                    "const config: VendureConfig = {",
                    "  // A detailed summary is logged at the \"debug\" level",
                    "  logger: new DefaultLogger({ level: LogLevel.Debug }),",
                    "  plugins: [",
                    "     HardenPlugin.init({",
                    "       maxQueryComplexity: 650,",
                    "       logComplexityScore: true,",
                    "     }),",
                    "  ],",
                    "};",
                    "query ProductList {",
                    "  products(options: { take: 5 }) {",
                    "    items {",
                    "      id",
                    "      name",
                    "      featuredAsset {",
                    "        preview",
                    "      }",
                    "    }",
                    "  }",
                    "}",
                    "debug 16/12/22, 14:12 - [HardenPlugin] Calculating complexity of [ProductList]",
                    "debug 16/12/22, 14:12 - [HardenPlugin] Product.id: ID!     childComplexity: 0, score: 1",
                    "debug 16/12/22, 14:12 - [HardenPlugin] Product.name: String!       childComplexity: 0, score: 1",
                    "debug 16/12/22, 14:12 - [HardenPlugin] Asset.preview: String!      childComplexity: 0, score: 1",
                    "debug 16/12/22, 14:12 - [HardenPlugin] Product.featuredAsset: Asset        childComplexity: 1, score: 2",
                    "debug 16/12/22, 14:12 - [HardenPlugin] ProductList.items: [Product!]!      childComplexity: 4, score: 20",
                    "debug 16/12/22, 14:12 - [HardenPlugin] Query.products: ProductList!        childComplexity: 20, score: 35",
                    "verbose 16/12/22, 14:12 - [HardenPlugin] Query complexity [ProductList]: 35",
                    "class HardenPlugin {",
                    "    static options: HardenPluginOptions;",
                    "    init(options: HardenPluginOptions) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "hardenpluginoptions",
        "metadata": {
            "title": "HardenPluginOptions",
            "keywords": [
                "hardenpluginoptions",
                "maxquerycomplexity",
                "querycomplexityestimators",
                "logcomplexityscore",
                "customcomplexityfactors",
                "hidefieldsuggestions",
                "apimode"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/harden-plugin/src/types.ts\" sourceLine=\"9\" packageName=\"@vendure/harden-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "hardenpluginoptions",
                "title": "HardenPluginOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/harden-plugin/src/types.ts\" sourceLine=\"9\" packageName=\"@vendure/harden-plugin\" />\n\nOptions that can be passed to the `.init()` static method of the HardenPlugin.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "maxquerycomplexity",
                        "title": "maxQueryComplexity",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"1000\"   />\n\nDefines the maximum permitted complexity score of a query. The complexity score is based\non the number of fields being selected as well as other factors like whether there are nested\nlists.\n\nA query which exceeds the maximum score will result in an error.\n"
                    },
                    {
                        "id": "querycomplexityestimators",
                        "title": "queryComplexityEstimators",
                        "content": "\n<MemberInfo kind=\"property\" type={`ComplexityEstimator[]`}   />\n\nAn array of custom estimator functions for calculating the complexity of a query. By default,\nthe plugin will use the <a href='/reference/core-plugins/harden-plugin/default-vendure-complexity-estimator#defaultvendurecomplexityestimator'>defaultVendureComplexityEstimator</a> which is specifically\ntuned to accurately estimate Vendure queries.\n"
                    },
                    {
                        "id": "logcomplexityscore",
                        "title": "logComplexityScore",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nWhen set to `true`, the complexity score of each query will be logged at the Verbose\nlog level, and a breakdown of the calculation for each field will be logged at the Debug level.\n\nThis is very useful for tuning your complexity scores.\n"
                    },
                    {
                        "id": "customcomplexityfactors",
                        "title": "customComplexityFactors",
                        "content": "\n<MemberInfo kind=\"property\" type={`{\n         [path: string]: number;\n     }`}   />\n\nThis object allows you to tune the complexity weight of specific fields. For example,\nif you have a custom `stockLocations` field defined on the `ProductVariant` type, and\nyou know that it is a particularly expensive operation to execute, you can increase\nits complexity like this:\n\n*Example*\n\n"
                    },
                    {
                        "id": "hidefieldsuggestions",
                        "title": "hideFieldSuggestions",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nGraphql-js will make suggestions about the names of fields if an invalid field name is provided.\nThis would allow an attacker to find out the available fields by brute force even if introspection\nis disabled.\n\nSetting this option to `true` will prevent these suggestion error messages from being returned,\ninstead replacing the message with a generic \"Invalid request\" message.\n"
                    },
                    {
                        "id": "apimode",
                        "title": "apiMode",
                        "content": "\n<MemberInfo kind=\"property\" type={`'dev' | 'prod'`} default=\"'prod'\"   />\n\nWhen set to `'prod'`, the plugin will disable dev-mode features of the GraphQL APIs:\n\n- introspection\n- GraphQL playground\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface HardenPluginOptions {",
                    "    maxQueryComplexity?: number;",
                    "    queryComplexityEstimators?: ComplexityEstimator[];",
                    "    logComplexityScore?: boolean;",
                    "    customComplexityFactors?: {",
                    "        [path: string]: number;",
                    "    };",
                    "    hideFieldSuggestions?: boolean;",
                    "    apiMode?: 'dev' | 'prod';",
                    "}",
                    "HardenPlugin.init({",
                    "  maxQueryComplexity: 650,",
                    "  customComplexityFactors: {",
                    "    'ProductVariant.stockLocations': 10",
                    "  }",
                    "}),"
                ]
            }
        ]
    },
    {
        "id": "hashedassetnamingstrategy",
        "metadata": {
            "title": "HashedAssetNamingStrategy",
            "keywords": [
                "hashedassetnamingstrategy",
                "generatesourcefilename",
                "generatepreviewfilename"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/asset-server-plugin/src/hashed-asset-naming-strategy.ts\" sourceLine=\"20\" packageName=\"@vendure/asset-server-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "hashedassetnamingstrategy",
                "title": "HashedAssetNamingStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/asset-server-plugin/src/hashed-asset-naming-strategy.ts\" sourceLine=\"20\" packageName=\"@vendure/asset-server-plugin\" />\n\nAn extension of the <a href='/reference/typescript-api/assets/default-asset-naming-strategy#defaultassetnamingstrategy'>DefaultAssetNamingStrategy</a> which prefixes file names with\nthe type (`'source'` or `'preview'`) as well as a 2-character sub-directory based on\nthe md5 hash of the original file name.\n\nThis is an implementation of the technique knows as \"hashed directory\" file storage,\nand the purpose is to reduce the number of files in a single directory, since a very large\nnumber of files can lead to performance issues when reading and writing to that directory.\n\nWith this strategy, even with 200,000 total assets stored, each directory would\nonly contain less than 800 files.\n\n* Extends: <code><a href='/reference/typescript-api/assets/default-asset-naming-strategy#defaultassetnamingstrategy'>DefaultAssetNamingStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "generatesourcefilename",
                        "title": "generateSourceFileName",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, originalFileName: string, conflictFileName?: string) => string`}   />\n\n\n"
                    },
                    {
                        "id": "generatepreviewfilename",
                        "title": "generatePreviewFileName",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, originalFileName: string, conflictFileName?: string) => string`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class HashedAssetNamingStrategy extends DefaultAssetNamingStrategy {",
                    "    generateSourceFileName(ctx: RequestContext, originalFileName: string, conflictFileName?: string) => string;",
                    "    generatePreviewFileName(ctx: RequestContext, originalFileName: string, conflictFileName?: string) => string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "haspermissionpipe",
        "metadata": {
            "title": "HasPermissionPipe",
            "keywords": [
                "haspermissionpipe",
                "constructor",
                "transform",
                "ngondestroy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/has-permission.pipe.ts\" sourceLine=\"17\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "haspermissionpipe",
                "title": "HasPermissionPipe",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/has-permission.pipe.ts\" sourceLine=\"17\" packageName=\"@vendure/admin-ui\" />\n\nA pipe which checks the provided permission against all the permissions of the current user.\nReturns `true` if the current user has that permission.\n\n*Example*\n\n\n* Implements: <code>PipeTransform</code>, <code>OnDestroy</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>, changeDetectorRef: ChangeDetectorRef) => HasPermissionPipe`}   />\n\n\n"
                    },
                    {
                        "id": "transform",
                        "title": "transform",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: string | string[]) => any`}   />\n\n\n"
                    },
                    {
                        "id": "ngondestroy",
                        "title": "ngOnDestroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<button [disabled]=\"!('UpdateCatalog' | hasPermission)\">Save Changes</button>",
                    "class HasPermissionPipe implements PipeTransform, OnDestroy {",
                    "    constructor(dataService: DataService, changeDetectorRef: ChangeDetectorRef)",
                    "    transform(input: string | string[]) => any;",
                    "    ngOnDestroy() => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "health-check",
        "metadata": {
            "title": "Health Check",
            "keywords": [
                "health-check"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "healthcheckregistryservice",
        "metadata": {
            "title": "HealthCheckRegistryService",
            "keywords": [
                "healthcheckregistryservice",
                "registerindicatorfunction"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/health-check/health-check-registry.service.ts\" sourceLine=\"47\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "healthcheckregistryservice",
                "title": "HealthCheckRegistryService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/health-check/health-check-registry.service.ts\" sourceLine=\"47\" packageName=\"@vendure/core\" />\n\nThis service is used to register health indicator functions to be included in the\nhealth check. Health checks can be used by automated services such as Kubernetes\nto determine the state of applications it is running. They are also useful for\nadministrators to get an overview of the health of all the parts of the\nVendure stack.\n\nIt wraps the [Nestjs Terminus module](https://docs.nestjs.com/recipes/terminus),\nso see those docs for information on creating custom health checks.\n\nPlugins which rely on external services (web services, databases etc.) can make use of this\nservice to add a check for that dependency to the Vendure health check.\n\n\nSince v1.6.0, the preferred way to implement a custom health check is by creating a new\n<a href='/reference/typescript-api/health-check/health-check-strategy#healthcheckstrategy'>HealthCheckStrategy</a> and then passing it to the `systemOptions.healthChecks` array.\nSee the <a href='/reference/typescript-api/health-check/health-check-strategy#healthcheckstrategy'>HealthCheckStrategy</a> docs for an example configuration.\n\nThe alternative way to register a health check is by injecting this service directly into your\nplugin module. To use it in your plugin, you'll need to import the <a href='/reference/typescript-api/plugin/plugin-common-module#plugincommonmodule'>PluginCommonModule</a>:\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "registerindicatorfunction",
                        "title": "registerIndicatorFunction",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fn: HealthIndicatorFunction | HealthIndicatorFunction[]) => `}   />\n\nRegisters one or more `HealthIndicatorFunctions` (see [Nestjs docs](https://docs.nestjs.com/recipes/terminus#setting-up-a-healthcheck))\nto be added to the health check endpoint.\nThe indicator will also appear in the Admin UI's \"system status\" view.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { HealthCheckRegistryService, PluginCommonModule, VendurePlugin } from '@vendure/core';",
                    "import { TerminusModule } from '@nestjs/terminus';",
                    "",
                    "@VendurePlugin({",
                    "  imports: [PluginCommonModule, TerminusModule],",
                    "})",
                    "export class MyPlugin {",
                    "  constructor(",
                    "    private registry: HealthCheckRegistryService",
                    "    private httpIndicator: HttpHealthIndicator",
                    "  ) {",
                    "    registry.registerIndicatorFunction(",
                    "      () => this.httpIndicator.pingCheck('vendure-docs', 'https://www.vendure.io/docs/'),",
                    "    )",
                    "  }",
                    "}",
                    "class HealthCheckRegistryService {",
                    "    registerIndicatorFunction(fn: HealthIndicatorFunction | HealthIndicatorFunction[]) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "healthcheckstrategy",
        "metadata": {
            "title": "HealthCheckStrategy",
            "keywords": [
                "healthcheckstrategy",
                "gethealthindicator"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/system/health-check-strategy.ts\" sourceLine=\"48\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "healthcheckstrategy",
                "title": "HealthCheckStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/system/health-check-strategy.ts\" sourceLine=\"48\" packageName=\"@vendure/core\" />\n\nThis strategy defines health checks which are included as part of the\n`/health` endpoint. They should only be used to monitor _critical_ systems\non which proper functioning of the Vendure server depends.\n\nFor more information on the underlying mechanism, see the\n[NestJS Terminus module docs](https://docs.nestjs.com/recipes/terminus).\n\nCustom strategies should be added to the `systemOptions.healthChecks` array.\nBy default, Vendure includes the `TypeORMHealthCheckStrategy`, so if you set the value of the `healthChecks`\narray, be sure to include it manually.\n\nVendure also ships with the <a href='/reference/typescript-api/health-check/http-health-check-strategy#httphealthcheckstrategy'>HttpHealthCheckStrategy</a>, which is convenient\nfor adding a health check dependent on an HTTP ping.\n\n:::info\n\nThis is configured via the `systemOptions.healthChecks` property of\nyour VendureConfig.\n\n:::\n\n*Example*\n\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "gethealthindicator",
                        "title": "getHealthIndicator",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => HealthIndicatorFunction`}   />\n\nShould return a `HealthIndicatorFunction`, as defined by the\n[NestJS Terminus module](https://docs.nestjs.com/recipes/terminus).\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { HttpHealthCheckStrategy, TypeORMHealthCheckStrategy } from '@vendure/core';",
                    "import { MyCustomHealthCheckStrategy } from './config/custom-health-check-strategy';",
                    "",
                    "export const config = {",
                    "  // ...",
                    "  systemOptions: {",
                    "    healthChecks: [",
                    "      new TypeORMHealthCheckStrategy(),",
                    "      new HttpHealthCheckStrategy({ key: 'my-service', url: 'https://my-service.com' }),",
                    "      new MyCustomHealthCheckStrategy(),",
                    "    ],",
                    "  },",
                    "};",
                    "interface HealthCheckStrategy extends InjectableStrategy {",
                    "    getHealthIndicator(): HealthIndicatorFunction;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "helpers",
        "metadata": {
            "title": "Helpers",
            "keywords": [
                "setbranding",
                "options"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/helpers.ts\" sourceLine=\"26\" packageName=\"@vendure/ui-devkit\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "setbranding",
                "title": "setBranding",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/helpers.ts\" sourceLine=\"26\" packageName=\"@vendure/ui-devkit\" />\n\nA helper function to simplify the process of setting custom branding images.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`BrandingOptions`} />\n\n\n"
                    }
                ],
                "code": [
                    "compileUiExtensions({",
                    "  outputPath: path.join(__dirname, '../admin-ui'),",
                    "  extensions: [",
                    "    setBranding({",
                    "      // This is used as the branding in the top-left above the navigation",
                    "      smallLogoPath: path.join(__dirname, 'images/my-logo-sm.png'),",
                    "      // This is used on the login page",
                    "      largeLogoPath: path.join(__dirname, 'images/my-logo-lg.png'),",
                    "      faviconPath: path.join(__dirname, 'images/my-favicon.ico'),",
                    "    }),",
                    "  ],",
                    "});",
                    "function setBranding(options: BrandingOptions): StaticAssetExtension"
                ]
            }
        ]
    },
    {
        "id": "historyentry",
        "metadata": {
            "title": "HistoryEntry",
            "keywords": [
                "historyentry",
                "administrator",
                "type",
                "ispublic",
                "data"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/history-entry/history-entry.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "historyentry",
                "title": "HistoryEntry",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/history-entry/history-entry.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nAn abstract entity representing an entry in the history of an Order (<a href='/reference/typescript-api/entities/order-history-entry#orderhistoryentry'>OrderHistoryEntry</a>)\nor a Customer (<a href='/reference/typescript-api/entities/customer-history-entry#customerhistoryentry'>CustomerHistoryEntry</a>).\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "administrator",
                        "title": "administrator",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>`}   />\n\n\n"
                    },
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`HistoryEntryType`}   />\n\n\n"
                    },
                    {
                        "id": "ispublic",
                        "title": "isPublic",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "data",
                        "title": "data",
                        "content": "\n<MemberInfo kind=\"property\" type={`any`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class HistoryEntry extends VendureEntity {",
                    "    @Index()",
                    "    @ManyToOne(type => Administrator)",
                    "    administrator?: Administrator;",
                    "    @Column({ nullable: false, type: 'varchar' })",
                    "    readonly type: HistoryEntryType;",
                    "    @Column()",
                    "    isPublic: boolean;",
                    "    @Column('simple-json')",
                    "    data: any;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "historyentrycomponent",
        "metadata": {
            "title": "HistoryEntryComponent",
            "keywords": [
                "historyentrycomponent",
                "entry",
                "getdisplaytype",
                "isfeatured",
                "getname",
                "geticonshape"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/custom-history-entry-component/history-entry-component-types.ts\" sourceLine=\"16\" packageName=\"@vendure/admin-ui\" since=\"1.9.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "historyentrycomponent",
                "title": "HistoryEntryComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/custom-history-entry-component/history-entry-component-types.ts\" sourceLine=\"16\" packageName=\"@vendure/admin-ui\" since=\"1.9.0\" />\n\nThis interface should be implemented by components intended to display a history entry in the\nOrder or Customer history timeline. If the component needs access to the Order or Customer object itself,\nyou should implement <a href='/reference/admin-ui-api/custom-history-entry-components/order-history-entry-component#orderhistoryentrycomponent'>OrderHistoryEntryComponent</a> or <a href='/reference/admin-ui-api/custom-history-entry-components/customer-history-entry-component#customerhistoryentrycomponent'>CustomerHistoryEntryComponent</a> respectively.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "entry",
                        "title": "entry",
                        "content": "\n<MemberInfo kind=\"property\" type={`TimelineHistoryEntry`}   />\n\nThe HistoryEntry data.\n"
                    },
                    {
                        "id": "getdisplaytype",
                        "title": "getDisplayType",
                        "content": "\n<MemberInfo kind=\"property\" type={`(entry: TimelineHistoryEntry) =&#62; TimelineDisplayType`}   />\n\nDefines whether this entry is highlighted with a \"success\", \"error\" etc. color.\n"
                    },
                    {
                        "id": "isfeatured",
                        "title": "isFeatured",
                        "content": "\n<MemberInfo kind=\"property\" type={`(entry: TimelineHistoryEntry) =&#62; boolean`}   />\n\nFeatured entries are always expanded. Non-featured entries start of collapsed and can be clicked\nto expand.\n"
                    },
                    {
                        "id": "getname",
                        "title": "getName",
                        "content": "\n<MemberInfo kind=\"property\" type={`(entry: TimelineHistoryEntry) =&#62; string | undefined`}   />\n\nReturns the name of the person who did this action. For example, it could be the Customer's name\nor \"Administrator\".\n"
                    },
                    {
                        "id": "geticonshape",
                        "title": "getIconShape",
                        "content": "\n<MemberInfo kind=\"property\" type={`(entry: TimelineHistoryEntry) =&#62; string | string[] | undefined`}   />\n\nOptional Clarity icon shape to display with the entry. Examples: `'note'`, `['success-standard', 'is-solid']`\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface HistoryEntryComponent {",
                    "    entry: TimelineHistoryEntry;",
                    "    getDisplayType: (entry: TimelineHistoryEntry) => TimelineDisplayType;",
                    "    isFeatured: (entry: TimelineHistoryEntry) => boolean;",
                    "    getName?: (entry: TimelineHistoryEntry) => string | undefined;",
                    "    getIconShape?: (entry: TimelineHistoryEntry) => string | string[] | undefined;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "historyentryconfig",
        "metadata": {
            "title": "HistoryEntryConfig",
            "keywords": [
                "historyentryconfig",
                "type",
                "component"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/custom-history-entry-component/history-entry-component-types.ts\" sourceLine=\"75\" packageName=\"@vendure/admin-ui\" since=\"1.9.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "historyentryconfig",
                "title": "HistoryEntryConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/custom-history-entry-component/history-entry-component-types.ts\" sourceLine=\"75\" packageName=\"@vendure/admin-ui\" since=\"1.9.0\" />\n\nConfiguration for registering a custom <a href='/reference/admin-ui-api/custom-history-entry-components/history-entry-component#historyentrycomponent'>HistoryEntryComponent</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe type should correspond to the custom HistoryEntryType string.\n"
                    },
                    {
                        "id": "component",
                        "title": "component",
                        "content": "\n<MemberInfo kind=\"property\" type={`Type&#60;<a href='/reference/admin-ui-api/custom-history-entry-components/history-entry-component#historyentrycomponent'>HistoryEntryComponent</a>&#62;`}   />\n\nThe component to be rendered for this history entry type.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface HistoryEntryConfig {",
                    "    type: string;",
                    "    component: Type<HistoryEntryComponent>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "historyservice",
        "metadata": {
            "title": "HistoryService",
            "keywords": [
                "historyservice",
                "custom history entry types",
                "constructor",
                "gethistoryfororder",
                "createhistoryentryfororder",
                "gethistoryforcustomer",
                "createhistoryentryforcustomer",
                "updateorderhistoryentry",
                "deleteorderhistoryentry",
                "updatecustomerhistoryentry",
                "deletecustomerhistoryentry"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/history.service.ts\" sourceLine=\"241\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "historyservice",
                "title": "HistoryService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/history.service.ts\" sourceLine=\"241\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/history-entry#historyentry'>HistoryEntry</a> entities. Histories are timelines of actions\nrelated to a particular Customer or Order, recording significant events such as creation, state changes,\nnotes, etc.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "custom-history-entry-types",
                "title": "Custom History Entry Types",
                "content": "\nSince Vendure v1.9.0, it is possible to define custom HistoryEntry types.\n\nLet's take an example where we have some Customers who are businesses. We want to verify their\ntax ID in order to allow them wholesale rates. As part of this verification, we'd like to add\nan entry into the Customer's history with data about the tax ID verification.\n\nFirst of all we'd extend the GraphQL `HistoryEntryType` enum for our new type as part of a plugin\n\n*Example*\n\n\nNext we need to create a TypeScript type definition file where we extend the `CustomerHistoryEntryData` interface. This is done\nvia TypeScript's [declaration merging](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#merging-interfaces)\nand [ambient modules](https://www.typescriptlang.org/docs/handbook/modules.html#ambient-modules) features.\n\n*Example*\n\n\nNote: it works exactly the same way if we wanted to add a custom type for Order history, except in that case we'd extend the\n`OrderHistoryEntryData` interface instead.\n\nNow that we have our types set up, we can use the HistoryService to add a new HistoryEntry in a type-safe manner:\n\n*Example*\n\n:::info\nIt is also possible to define a UI component to display custom history entry types. See the\n[Custom History Timeline Components guide](/guides/extending-the-admin-ui/custom-timeline-components/).\n:::\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, administratorService: <a href='/reference/typescript-api/services/administrator-service#administratorservice'>AdministratorService</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>) => HistoryService`}   />\n\n\n"
                    },
                    {
                        "id": "gethistoryfororder",
                        "title": "getHistoryForOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, publicOnly: boolean, options?: HistoryEntryListOptions) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/order-history-entry#orderhistoryentry'>OrderHistoryEntry</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "createhistoryentryfororder",
                        "title": "createHistoryEntryForOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(args: CreateOrderHistoryEntryArgs&#60;T&#62;, isPublic:  = true) => Promise&#60;<a href='/reference/typescript-api/entities/order-history-entry#orderhistoryentry'>OrderHistoryEntry</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "gethistoryforcustomer",
                        "title": "getHistoryForCustomer",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, customerId: <a href='/reference/typescript-api/common/id#id'>ID</a>, publicOnly: boolean, options?: HistoryEntryListOptions) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/customer-history-entry#customerhistoryentry'>CustomerHistoryEntry</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "createhistoryentryforcustomer",
                        "title": "createHistoryEntryForCustomer",
                        "content": "\n<MemberInfo kind=\"method\" type={`(args: CreateCustomerHistoryEntryArgs&#60;T&#62;, isPublic:  = false) => Promise&#60;<a href='/reference/typescript-api/entities/customer-history-entry#customerhistoryentry'>CustomerHistoryEntry</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "updateorderhistoryentry",
                        "title": "updateOrderHistoryEntry",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, args: UpdateOrderHistoryEntryArgs&#60;T&#62;) => `}   />\n\n\n"
                    },
                    {
                        "id": "deleteorderhistoryentry",
                        "title": "deleteOrderHistoryEntry",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;void&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "updatecustomerhistoryentry",
                        "title": "updateCustomerHistoryEntry",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, args: UpdateCustomerHistoryEntryArgs&#60;T&#62;) => `}   />\n\n\n"
                    },
                    {
                        "id": "deletecustomerhistoryentry",
                        "title": "deleteCustomerHistoryEntry",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;void&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { PluginCommonModule, VendurePlugin } from '@vendure/core';",
                    "import { VerificationService } from './verification.service';",
                    "",
                    "@VendurePlugin({",
                    "  imports: [PluginCommonModule],",
                    "  adminApiExtensions: {",
                    "    schema: gql`",
                    "      extend enum HistoryEntryType {",
                    "        CUSTOMER_TAX_ID_VERIFICATION",
                    "      }",
                    "    `,",
                    "  },",
                    "  providers: [VerificationService],",
                    "})",
                    "export class TaxIDVerificationPlugin {}",
                    "// types.ts",
                    "import { CustomerHistoryEntryData } from '@vendure/core';",
                    "",
                    "export const CUSTOMER_TAX_ID_VERIFICATION = 'CUSTOMER_TAX_ID_VERIFICATION';",
                    "",
                    "declare module '@vendure/core' {",
                    "  interface CustomerHistoryEntryData {",
                    "    [CUSTOMER_TAX_ID_VERIFICATION]: {",
                    "      taxId: string;",
                    "      valid: boolean;",
                    "      name?: string;",
                    "      address?: string;",
                    "    };",
                    "  }",
                    "}",
                    "// verification.service.ts",
                    "import { Injectable } from '@nestjs/common';",
                    "import { RequestContext } from '@vendure/core';",
                    "import { CUSTOMER_TAX_ID_VERIFICATION } from './types';",
                    "",
                    "@Injectable()",
                    "export class VerificationService {",
                    "  constructor(private historyService: HistoryService) {}",
                    "",
                    "  async verifyTaxId(ctx: RequestContext, customerId: ID, taxId: string) {",
                    "    const result = await someTaxIdCheckingService(taxId);",
                    "",
                    "    await this.historyService.createHistoryEntryForCustomer({",
                    "      customerId,",
                    "      ctx,",
                    "      type: CUSTOMER_TAX_ID_VERIFICATION,",
                    "      data: {",
                    "        taxId,",
                    "        valid: result.isValid,",
                    "        name: result.companyName,",
                    "        address: result.registeredAddress,",
                    "      },",
                    "    });",
                    "  }",
                    "}",
                    "class HistoryService {",
                    "    constructor(connection: TransactionalConnection, administratorService: AdministratorService, listQueryBuilder: ListQueryBuilder, eventBus: EventBus)",
                    "    getHistoryForOrder(ctx: RequestContext, orderId: ID, publicOnly: boolean, options?: HistoryEntryListOptions) => Promise<PaginatedList<OrderHistoryEntry>>;",
                    "    createHistoryEntryForOrder(args: CreateOrderHistoryEntryArgs<T>, isPublic:  = true) => Promise<OrderHistoryEntry>;",
                    "    getHistoryForCustomer(ctx: RequestContext, customerId: ID, publicOnly: boolean, options?: HistoryEntryListOptions) => Promise<PaginatedList<CustomerHistoryEntry>>;",
                    "    createHistoryEntryForCustomer(args: CreateCustomerHistoryEntryArgs<T>, isPublic:  = false) => Promise<CustomerHistoryEntry>;",
                    "    updateOrderHistoryEntry(ctx: RequestContext, args: UpdateOrderHistoryEntryArgs<T>) => ;",
                    "    deleteOrderHistoryEntry(ctx: RequestContext, id: ID) => Promise<void>;",
                    "    updateCustomerHistoryEntry(ctx: RequestContext, args: UpdateCustomerHistoryEntryArgs<T>) => ;",
                    "    deleteCustomerHistoryEntry(ctx: RequestContext, id: ID) => Promise<void>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "horizontal-scaling",
        "metadata": {
            "title": "Horizontal scaling",
            "keywords": [
                "horizontal scaling",
                "multi-instance configuration",
                "using docker or kubernetes",
                "using pm2",
                "... your existing dockerfile config"
            ],
            "description": "\"Horizontal scaling\" refers to increasing the performance capacity of your application by running multiple instances. This type of scaling has two main advantages: 1. It can enable increased throughput (requests/second) by distributing the incoming requests between multiple instances. 2. It can increase resilience because if a single instance fails, the other instances will still be able to service requests. As discussed in the [Server resource requirements guide](/guides/deployment/server-resource-requirements), horizontal scaling can be the most cost-effective way of deploying your Vendure server due to the single-threaded nature of Node.js."
        },
        "content": "",
        "sections": [
            {
                "id": "multi-instance-configuration",
                "title": "Multi-instance configuration",
                "content": "\nIn order to run Vendure in a multi-instance configuration, there are some important configuration changes you'll need to make. The key consideration in configuring Vendure for this scenario is to ensure that any persistent state is managed externally from the Node process, and is shared by all instances. Namely:\n\n* The JobQueue should be stored externally using the [DefaultJobQueuePlugin](/reference/typescript-api/job-queue/default-job-queue-plugin/) (which stores jobs in the database) or the [BullMQJobQueuePlugin](/reference/core-plugins/job-queue-plugin/bull-mqjob-queue-plugin) (which stores jobs in Redis), or some other custom JobQueueStrategy. **Note:** the BullMQJobQueuePlugin is much more efficient than the DefaultJobQueuePlugin, and is recommended for production applications.\n* A custom [SessionCacheStrategy](/reference/typescript-api/auth/session-cache-strategy/) must be used which stores the session cache externally (such as in the database or Redis), since the default strategy stores the cache in-memory and will cause inconsistencies in multi-instance setups. [Example Redis-based SessionCacheStrategy](/reference/typescript-api/auth/session-cache-strategy/)\n* When using cookies to manage sessions, make sure all instances are using the _same_ cookie secret:\n    ```ts title=\"src/vendure-config.ts\"\n    const config: VendureConfig = {\n      authOptions: {\n        cookieOptions: {\n          secret: 'some-secret'\n        }\n      }\n    }\n    ```\n* Channel and Zone data gets cached in-memory as this data is used in virtually every request. The cache time-to-live defaults to 30 seconds, which is probably fine for most cases, but it can be configured in the [EntityOptions](/reference/typescript-api/configuration/entity-options/#channelcachettl).\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "using-docker-or-kubernetes",
                "title": "Using Docker or Kubernetes",
                "content": "\nOne way of implementing horizontal scaling is to use Docker to wrap your Vendure server & worker in a container, which can then be run as multiple instances.\n\nSome hosting providers allow you to provide a Docker image and will then run multiple instances of that image. Kubernetes can also be used to manage multiple instances\nof a Docker image.\n\nFor a more complete guide, see the [Using Docker guide](/guides/deployment/using-docker).\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "using-pm2",
                "title": "Using PM2",
                "content": "\n[PM2](https://pm2.keymetrics.io/) is a process manager which will spawn multiple instances of your server or worker, as well as re-starting any instances that crash. PM2 can be used on VPS hosts to manage multiple instances of Vendure without needing Docker or Kubernetes.\n\nPM2 must be installed on your server:\n\n\nYour processes can then be run in [cluster mode](https://pm2.keymetrics.io/docs/usage/cluster-mode/) with the following command:\n\n\nThe above command will start a cluster of 4 instances. You can also instruct PM2 to use the maximum number of available CPUs with `-i max`.\n\nNote that if you are using pm2 inside a Docker container, you should use the `pm2-runtime` command:\n\n\n",
                "subsections": [],
                "code": [
                    "npm install pm2@latest -g",
                    "pm2 start ./dist/index.js -i 4",
                    "# ... your existing Dockerfile config",
                    "RUN npm install pm2 -g",
                    "",
                    "CMD [\"pm2-runtime\", \"app.js\", \"-i\", \"max\"]"
                ]
            }
        ]
    },
    {
        "id": "httphealthcheckstrategy",
        "metadata": {
            "title": "HttpHealthCheckStrategy",
            "keywords": [
                "httphealthcheckstrategy",
                "constructor",
                "init",
                "gethealthindicator"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/health-check/http-health-check-strategy.ts\" sourceLine=\"36\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "httphealthcheckstrategy",
                "title": "HttpHealthCheckStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/health-check/http-health-check-strategy.ts\" sourceLine=\"36\" packageName=\"@vendure/core\" />\n\nA <a href='/reference/typescript-api/health-check/health-check-strategy#healthcheckstrategy'>HealthCheckStrategy</a> used to check health by pinging a url. Internally it uses\nthe [NestJS HttpHealthIndicator](https://docs.nestjs.com/recipes/terminus#http-healthcheck).\n\n*Example*\n\n\n* Implements: <code><a href='/reference/typescript-api/health-check/health-check-strategy#healthcheckstrategy'>HealthCheckStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: HttpHealthCheckOptions) => HttpHealthCheckStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "gethealthindicator",
                        "title": "getHealthIndicator",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => HealthIndicatorFunction`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { HttpHealthCheckStrategy, TypeORMHealthCheckStrategy } from '@vendure/core';",
                    "",
                    "export const config = {",
                    "  // ...",
                    "  systemOptions: {",
                    "    healthChecks: [",
                    "      new TypeORMHealthCheckStrategy(),",
                    "      new HttpHealthCheckStrategy({ key: 'my-service', url: 'https://my-service.com' }),",
                    "    ]",
                    "  },",
                    "};",
                    "class HttpHealthCheckStrategy implements HealthCheckStrategy {",
                    "    constructor(options: HttpHealthCheckOptions)",
                    "    init(injector: Injector) => ;",
                    "    getHealthIndicator() => HealthIndicatorFunction;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "hydrateoptions",
        "metadata": {
            "title": "HydrateOptions",
            "keywords": [
                "hydrateoptions",
                "relations",
                "applyproductvariantprices"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/entity-hydrator/entity-hydrator-types.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" since=\"1.3.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "hydrateoptions",
                "title": "HydrateOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/entity-hydrator/entity-hydrator-types.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" since=\"1.3.0\" />\n\nOptions used to control which relations of the entity get hydrated\nwhen using the <a href='/reference/typescript-api/data-access/entity-hydrator#entityhydrator'>EntityHydrator</a> helper.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "relations",
                        "title": "relations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/common/entity-relation-paths#entityrelationpaths'>EntityRelationPaths</a>&#60;Entity&#62;&#62;`}   />\n\nDefines the relations to hydrate, using strings with dot notation to indicate\nnested joins. If the entity already has a particular relation available, that relation\nwill be skipped (no extra DB join will be added).\n"
                    },
                    {
                        "id": "applyproductvariantprices",
                        "title": "applyProductVariantPrices",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nIf set to `true`, any ProductVariants will also have their `price` and `priceWithTax` fields\napplied based on the current context. If prices are not required, this can be left `false` which\nwill be slightly more efficient.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface HydrateOptions<Entity extends VendureEntity> {",
                    "    relations: Array<EntityRelationPaths<Entity>>;",
                    "    applyProductVariantPrices?: boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "i18nerror",
        "metadata": {
            "title": "I18nError",
            "keywords": [
                "i18nerror",
                "constructor"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/i18n/i18n-error.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "i18nerror",
                "title": "I18nError",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/i18n/i18n-error.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nAll errors thrown in the Vendure server must use or extend this error class. This allows the\nerror message to be translated before being served to the client.\n\nThe error messages should be provided in the form of a string key which corresponds to\na key defined in the `i18n/messages/<languageCode>.json` files.\n\nNote that this class should not be directly used in code, but should be extended by\na more specific Error class.\n\n* Extends: <code>GraphQLError</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, variables: { [key: string]: string | number } = {}, code?: string, logLevel: <a href='/reference/typescript-api/logger/log-level#loglevel'>LogLevel</a> = LogLevel.Warn) => I18nError`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class I18nError extends GraphQLError {",
                    "    constructor(message: string, variables: { [key: string]: string | number } = {}, code?: string, logLevel: LogLevel = LogLevel.Warn)",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "i18nservice",
        "metadata": {
            "title": "I18nService",
            "keywords": [
                "i18nservice",
                "addtranslationfile",
                "addtranslation",
                "venduretranslationresources",
                "error",
                "errorresult",
                "message"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/i18n/i18n.service.ts\" sourceLine=\"44\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "i18nservice",
                "title": "I18nService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/i18n/i18n.service.ts\" sourceLine=\"44\" packageName=\"@vendure/core\" />\n\n\n\n* Implements: <code>OnModuleInit</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "addtranslationfile",
                        "title": "addTranslationFile",
                        "content": "\n<MemberInfo kind=\"method\" type={`(langKey: string, filePath: string) => void`}   />\n\nAdd a I18n translation by json file\n"
                    },
                    {
                        "id": "addtranslation",
                        "title": "addTranslation",
                        "content": "\n<MemberInfo kind=\"method\" type={`(langKey: string, resources: <a href='/reference/typescript-api/common/i18n-service#venduretranslationresources'>VendureTranslationResources</a> | any) => void`}   />\n\nAdd a I18n translation (key-value) resource\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class I18nService implements OnModuleInit {",
                    "    addTranslationFile(langKey: string, filePath: string) => void;",
                    "    addTranslation(langKey: string, resources: VendureTranslationResources | any) => void;",
                    "}"
                ]
            },
            {
                "id": "venduretranslationresources",
                "title": "VendureTranslationResources",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/i18n/i18n.service.ts\" sourceLine=\"24\" packageName=\"@vendure/core\" />\n\nI18n resources used for translations\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "error",
                        "title": "error",
                        "content": "\n<MemberInfo kind=\"property\" type={`any`}   />\n\n\n"
                    },
                    {
                        "id": "errorresult",
                        "title": "errorResult",
                        "content": "\n<MemberInfo kind=\"property\" type={`any`}   />\n\n\n"
                    },
                    {
                        "id": "message",
                        "title": "message",
                        "content": "\n<MemberInfo kind=\"property\" type={`any`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface VendureTranslationResources {",
                    "    error: any;",
                    "    errorResult: any;",
                    "    message: any;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "id",
        "metadata": {
            "title": "ID",
            "keywords": [
                "id"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"78\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "id",
                "title": "ID",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"78\" packageName=\"@vendure/common\" />\n\nAn entity ID. Depending on the configured <a href='/reference/typescript-api/configuration/entity-id-strategy#entityidstrategy'>EntityIdStrategy</a>, it will be either\na `string` or a `number`;\n\n\n",
                "subsections": [],
                "code": [
                    "type ID = string | number"
                ]
            }
        ]
    },
    {
        "id": "ifmultichanneldirective",
        "metadata": {
            "title": "IfMultichannelDirective",
            "keywords": [
                "ifmultichanneldirective",
                "constructor"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/directives/if-multichannel.directive.ts\" sourceLine=\"21\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "ifmultichanneldirective",
                "title": "IfMultichannelDirective",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/directives/if-multichannel.directive.ts\" sourceLine=\"21\" packageName=\"@vendure/admin-ui\" />\n\nStructural directive that displays the given element if the Vendure instance has multiple channels\nconfigured.\n\n*Example*\n\n\n* Extends: <code>IfDirectiveBase&#60;[]&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(_viewContainer: ViewContainerRef, templateRef: TemplateRef&#60;any&#62;, dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>) => IfMultichannelDirective`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<div *vdrIfMultichannel class=\"channel-selector\">",
                    "  <!-- ... -->",
                    "</ng-container>",
                    "class IfMultichannelDirective extends IfDirectiveBase<[]> {",
                    "    constructor(_viewContainer: ViewContainerRef, templateRef: TemplateRef<any>, dataService: DataService)",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "ifpermissionsdirective",
        "metadata": {
            "title": "IfPermissionsDirective",
            "keywords": [
                "ifpermissionsdirective",
                "constructor"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/directives/if-permissions.directive.ts\" sourceLine=\"33\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "ifpermissionsdirective",
                "title": "IfPermissionsDirective",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/directives/if-permissions.directive.ts\" sourceLine=\"33\" packageName=\"@vendure/admin-ui\" />\n\nConditionally shows/hides templates based on the current active user having the specified permission.\nBased on the ngIf source. Also support \"else\" templates:\n\n*Example*\n\n\nThe permission can be a single string, or an array. If an array is passed, then _all_ of the permissions\nmust match (logical AND)\n\n* Extends: <code>IfDirectiveBase&#60;Array&#60;<a href='/reference/typescript-api/common/permission#permission'>Permission</a>[] | null&#62;&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(_viewContainer: ViewContainerRef, templateRef: TemplateRef&#60;any&#62;, dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>, changeDetectorRef: ChangeDetectorRef) => IfPermissionsDirective`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<button *vdrIfPermissions=\"'DeleteCatalog'; else unauthorized\">Delete Product</button>",
                    "<ng-template #unauthorized>Not allowed!</ng-template>",
                    "class IfPermissionsDirective extends IfDirectiveBase<Array<Permission[] | null>> {",
                    "    constructor(_viewContainer: ViewContainerRef, templateRef: TemplateRef<any>, dataService: DataService, changeDetectorRef: ChangeDetectorRef)",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "imagetransformmode",
        "metadata": {
            "title": "ImageTransformMode",
            "keywords": [
                "imagetransformmode"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/asset-server-plugin/src/types.ts\" sourceLine=\"21\" packageName=\"@vendure/asset-server-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "imagetransformmode",
                "title": "ImageTransformMode",
                "content": "\n<GenerationInfo sourceFile=\"packages/asset-server-plugin/src/types.ts\" sourceLine=\"21\" packageName=\"@vendure/asset-server-plugin\" />\n\nSpecifies the way in which an asset preview image will be resized to fit in the\nproscribed dimensions:\n\n* crop: crops the image to cover both provided dimensions\n* resize: Preserving aspect ratio, resizes the image to be as large as possible\nwhile ensuring its dimensions are less than or equal to both those specified.\n\n\n",
                "subsections": [],
                "code": [
                    "type ImageTransformMode = 'crop' | 'resize'"
                ]
            }
        ]
    },
    {
        "id": "imagetransformpreset",
        "metadata": {
            "title": "ImageTransformPreset",
            "keywords": [
                "imagetransformpreset",
                "name",
                "width",
                "height",
                "mode"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/asset-server-plugin/src/types.ts\" sourceLine=\"39\" packageName=\"@vendure/asset-server-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "imagetransformpreset",
                "title": "ImageTransformPreset",
                "content": "\n<GenerationInfo sourceFile=\"packages/asset-server-plugin/src/types.ts\" sourceLine=\"39\" packageName=\"@vendure/asset-server-plugin\" />\n\nA configuration option for an image size preset for the AssetServerPlugin.\n\nPresets allow a shorthand way to generate a thumbnail preview of an asset. For example,\nthe built-in \"tiny\" preset generates a 50px x 50px cropped preview, which can be accessed\nby appending the string `preset=tiny` to the asset url:\n\n`http://localhost:3000/assets/some-asset.jpg?preset=tiny`\n\nis equivalent to:\n\n`http://localhost:3000/assets/some-asset.jpg?w=50&h=50&mode=crop`\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "width",
                        "title": "width",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "height",
                        "title": "height",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "mode",
                        "title": "mode",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/asset-server-plugin/image-transform-mode#imagetransformmode'>ImageTransformMode</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ImageTransformPreset {",
                    "    name: string;",
                    "    width: number;",
                    "    height: number;",
                    "    mode: ImageTransformMode;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "import-export",
        "metadata": {
            "title": "Import Export",
            "keywords": [
                "import-export"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "importer",
        "metadata": {
            "title": "Importer",
            "keywords": [
                "importer",
                "parseandimport",
                "importproducts"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/data-import/providers/importer/importer.ts\" sourceLine=\"41\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "importer",
                "title": "Importer",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/data-import/providers/importer/importer.ts\" sourceLine=\"41\" packageName=\"@vendure/core\" />\n\nParses and imports Products using the CSV import format.\n\nInternally it is using the <a href='/reference/typescript-api/import-export/import-parser#importparser'>ImportParser</a> to parse the CSV file, and then the\n<a href='/reference/typescript-api/import-export/fast-importer-service#fastimporterservice'>FastImporterService</a> and the <a href='/reference/typescript-api/import-export/asset-importer#assetimporter'>AssetImporter</a> to actually create the resulting\nentities in the Vendure database.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "parseandimport",
                        "title": "parseAndImport",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: string | Stream, ctxOrLanguageCode: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> | <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>, reportProgress: boolean = false) => Observable&#60;ImportProgress&#62;`}   />\n\nParses the contents of the [product import CSV file](/guides/developer-guide/importing-data/#product-import-format) and imports\nthe resulting Product & ProductVariants, as well as any associated Assets, Facets & FacetValues.\n\nThe `ctxOrLanguageCode` argument is used to specify the languageCode to be used when creating the Products.\n"
                    },
                    {
                        "id": "importproducts",
                        "title": "importProducts",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, rows: <a href='/reference/typescript-api/import-export/import-parser#parsedproductwithvariants'>ParsedProductWithVariants</a>[], onProgress: OnProgressFn) => Promise&#60;string[]&#62;`}   />\n\nImports the products specified in the rows object. Return an array of error messages.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Importer {",
                    "    parseAndImport(input: string | Stream, ctxOrLanguageCode: RequestContext | LanguageCode, reportProgress: boolean = false) => Observable<ImportProgress>;",
                    "    importProducts(ctx: RequestContext, rows: ParsedProductWithVariants[], onProgress: OnProgressFn) => Promise<string[]>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "importexportoptions",
        "metadata": {
            "title": "ImportExportOptions",
            "keywords": [
                "importexportoptions",
                "importassetsdir",
                "assetimportstrategy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"849\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "importexportoptions",
                "title": "ImportExportOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"849\" packageName=\"@vendure/core\" />\n\nOptions related to importing & exporting data.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "importassetsdir",
                        "title": "importAssetsDir",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"__dirname\"   />\n\nThe directory in which assets to be imported are located.\n"
                    },
                    {
                        "id": "assetimportstrategy",
                        "title": "assetImportStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/import-export/asset-import-strategy#assetimportstrategy'>AssetImportStrategy</a>`}  since=\"1.7.0\"  />\n\nThis strategy determines how asset files get imported based on the path given in the\nimport CSV or via the <a href='/reference/typescript-api/import-export/asset-importer#assetimporter'>AssetImporter</a> `getAssets()` method.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ImportExportOptions {",
                    "    importAssetsDir?: string;",
                    "    assetImportStrategy?: AssetImportStrategy;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "importing-data",
        "metadata": {
            "title": "Importing Data",
            "keywords": [
                "product import format",
                "importing custom field data",
                "importing `relation` custom fields",
                "importing `list` custom fields",
                "importing data in multiple languages",
                "initial data",
                "populating the server",
                "the `populate()` function",
                "populating test data",
                "custom populate scripts",
                "importing from other platforms"
            ],
            "description": "If you have hundreds, thousands or more products, inputting all the data by hand via the Admin UI can be too inefficient. To solve this, Vendure supports bulk-importing product and other data. Data import is also useful for setting up test or demo environments, and is also used by the `@vendure/testing` package for end-to-end tests. Vendure uses a flat **.csv** format for importing product data. The format encodes data about: * products * product variants"
        },
        "content": "",
        "sections": [
            {
                "id": "product-import-format",
                "title": "Product Import Format",
                "content": "\nVendure uses a flat **.csv** format for importing product data. The format encodes data about:\n\n* products\n* product variants\n* product & variant assets\n* product & variant facets\n* product & variant custom fields\n\nHere's an example which defines 2 products, \"Laptop\" and \"Clacky Keyboard\". The laptop has 4 variants, and the keyboard only a single variant. \n\n\nHere's an explanation of each column:\n\n* `name`: The name of the product. Rows with an empty \"name\" are interpreted as variants of the preceeding product row.\n* `slug`: The product's slug. Can be omitted, in which case will be generated from the name.\n* `description`: The product description.\n* `assets`: One or more asset file names separated by the pipe (`|`) character. The files can be located on the local file system, in which case the path is interpreted as being relative to the [`importAssetsDir`](/reference/typescript-api/import-export/import-export-options/#importassetsdir) as defined in the VendureConfig. Files can also be urls which will be fetched from a remote http/https url. If you need more control over how assets are imported, you can implement a custom [AssetImportStrategy](/reference/typescript-api/import-export/asset-import-strategy#assetimportstrategy). The first asset will be set as the featuredAsset.\n* `facets`: One or more facets to apply to the product separated by the pipe (`|`) character. A facet has the format `<facet-name>:<facet-value>`.\n* `optionGroups`: OptionGroups define what variants make up the product. Applies only to products with more than one variant. \n* `optionValues`: For each optionGroup defined, a corresponding value must be specified for each variant. Applies only to products with more than one variant.\n* `sku`: The Stock Keeping Unit (unique product code) for this product variant.\n* `price`: The price can be either with or without taxes, depending on your channel settings (can be set later).\n* `taxCategory`: The name of an existing tax category. Tax categories can be also be imported using the InitialData object.\n* `stockOnHand`: The number of units in stock.\n* `trackInventory`: Whether this variant should have its stock level tracked, i.e. the stock level is automatically decreased for each unit ordered.\n* `variantAssets`: Same as `assets` but applied to the product variant.\n* `variantFacets`: Same as `facets` but applied to the product variant.\n\n",
                "subsections": [
                    {
                        "id": "importing-custom-field-data",
                        "title": "Importing Custom Field Data",
                        "content": "\nIf you have [CustomFields]({{< relref \"customizing-models\" >}}) defined on your Product or ProductVariant entities, this data can also be encoded in the import csv:\n\n* `product:<customFieldName>`: The value of this column will populate `Product.customFields[customFieldName]`. \n* `variant:<customFieldName>`: The value of this column will populate `ProductVariant.customFields[customFieldName]`. \n\n:::info \nFor a real example, see the [products.csv file used to populate the Vendure demo data](https://github.com/vendure-ecommerce/vendure/blob/master/packages/core/mock-data/data-sources/products.csv)\n:::\n\n#### Importing `relation` custom fields\n\nTo import custom fields with the type `relation`, the value in the CSV must be a stringified object with an `id` property:\n\n\n#### Importing `list` custom fields\n\nTo import custom fields with `list` set to `true`, the data should be separated with a pipe (`|`) character:\n\n\n#### Importing data in multiple languages\n\nIf a field is translatable (i.e. of `localeString` type), you can use column names with an appended language code (e.g. `name:en`, `name:de`, `product:keywords:en`, `product:keywords:de`) to specify its value in multiple languages.\n\nUse of language codes has to be consistent throughout the file. You don't have to translate every translatable field. If there are no translated columns for a field, the generic column's value will be used for all languages. But when you do translate columns, the set of languages for each of them needs to be the same. As an example, you cannot use `name:en` and `name:de`, but only provide `slug:en` (it's okay to use only a `slug` column though, in which case this slug will be used for both the English and the German version).\n\n"
                    }
                ],
                "code": [
                    "name            , slug            , description               , assets                      , facets                              , optionGroups    , optionValues , sku         , price   , taxCategory , stockOnHand , trackInventory , variantAssets , variantFacets",
                    "Laptop          , laptop          , \"Description of laptop\"   , laptop_01.jpg|laptop_02.jpg , category:electronics|brand:Apple    , screen size|RAM , 13 inch|8GB  , L2201308    , 1299.00 , standard    , 100         , false          ,               , ",
                    "                ,                 ,                           ,                             ,                                     ,                 , 15 inch|8GB  , L2201508    , 1399.00 , standard    , 100         , false          ,               , ",
                    "                ,                 ,                           ,                             ,                                     ,                 , 13 inch|16GB , L2201316    , 2199.00 , standard    , 100         , false          ,               , ",
                    "                ,                 ,                           ,                             ,                                     ,                 , 15 inch|16GB , L2201516    , 2299.00 , standard    , 100         , false          ,               , ",
                    "Clacky Keyboard , clacky-keyboard , \"Description of keyboard\" , keyboard_01.jpg             , category:electronics|brand:Logitech ,                 ,              , A4TKLA45535 , 74.89   , standard    , 100         , false          ,               ,",
                    "... ,product:featuredReview",
                    "... ,\"{ \"\"id\"\": 123 }\"",
                    "... ,product:keywords",
                    "... ,tablet|pad|android"
                ]
            },
            {
                "id": "initial-data",
                "title": "Initial Data",
                "content": "\nAs well as product data, other initialization data can be populated using the [`InitialData` object](/reference/typescript-api/import-export/initial-data/). **This format is intentionally limited**; more advanced requirements (e.g. setting up ShippingMethods that use custom checkers & calculators) should be carried out via [custom populate scripts](#populating-the-server).\n\n\n* `paymentMethods`: Defines which payment methods are available.\n  * `name`: Name of the payment method.\n  * `handler`: Payment plugin handler information.\n* `roles`: Defines which user roles are available.\n  * `code`: Role code name.\n  * `description`: Role description.\n  * `permissions`: List of permissions to apply to the role.\n* `defaultLanguage`: Sets the language that will be used for all translatable entities created by the initial data e.g. Products, ProductVariants, Collections etc. Should correspond to the language used in your product csv file.\n* `countries`: Defines which countries are available.\n  * `name`: The name of the country in the language specified by `defaultLanguage`\n  * `code`: A standardized code for the country, e.g. [ISO 3166-1](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)\n  * `zone`: A [Zone](/reference/typescript-api/entities/zone) to which this country belongs.\n* `defaultZone`: Sets the default shipping & tax zone for the default Channel. The zone must correspond to a value of `zone` set in the `countries` array. \n* `taxRates`: For each item, a new [TaxCategory](/reference/typescript-api/entities/tax-category/) is created, and then a [TaxRate](/reference/typescript-api/entities/tax-rate) is created for each unique zone defined in the `countries` array. \n* `shippingMethods`: Allows simple flat-rate [ShippingMethods](/reference/typescript-api/entities/shipping-method) to be defined.\n* `collections`: Allows Collections to be created. Currently, only collections based on facet values can be created (`code: 'facet-value-filter'`). The `assetPaths` and `facetValueNames` values must correspond to a value specified in the products csv file. The name should match the value specified in the product csv file (or can be a normalized - lower-case & hyphenated - version thereof). If there are FacetValues in multiple Facets with the same name, the facet may be specified with a colon delimiter, e.g. `brand:apple`, `flavour: apple`.\n\n",
                "subsections": [],
                "code": [
                    "import { InitialData, LanguageCode } from '@vendure/core';",
                    "",
                    "export const initialData: InitialData = {",
                    "    paymentMethods: [",
                    "        {",
                    "            name: 'Standard Payment',",
                    "            handler: {",
                    "                code: 'dummy-payment-handler',",
                    "                arguments: [{ name: 'automaticSettle', value: 'false' }],",
                    "            },",
                    "        },",
                    "    ],",
                    "    roles: [",
                    "        {",
                    "            code: 'administrator',",
                    "            description: 'Administrator',",
                    "            permissions: [",
                    "                Permission.CreateCatalog,",
                    "                Permission.ReadCatalog,",
                    "                Permission.UpdateCatalog,",
                    "                Permission.DeleteCatalog,",
                    "                Permission.CreateSettings,",
                    "                Permission.ReadSettings,",
                    "                Permission.UpdateSettings,",
                    "                Permission.DeleteSettings,",
                    "                Permission.CreateCustomer,",
                    "                Permission.ReadCustomer,",
                    "                Permission.UpdateCustomer,",
                    "                Permission.DeleteCustomer,",
                    "                Permission.CreateCustomerGroup,",
                    "                Permission.ReadCustomerGroup,",
                    "                Permission.UpdateCustomerGroup,",
                    "                Permission.DeleteCustomerGroup,",
                    "                Permission.CreateOrder,",
                    "                Permission.ReadOrder,",
                    "                Permission.UpdateOrder,",
                    "                Permission.DeleteOrder,",
                    "                Permission.CreateSystem,",
                    "                Permission.ReadSystem,",
                    "                Permission.UpdateSystem,",
                    "                Permission.DeleteSystem,",
                    "            ],",
                    "        },",
                    "    ],",
                    "    defaultLanguage: LanguageCode.en,",
                    "    countries: [",
                    "        { name: 'Austria', code: 'AT', zone: 'Europe' },",
                    "        { name: 'Malaysia', code: 'MY', zone: 'Asia' },",
                    "        { name: 'United Kingdom', code: 'GB', zone: 'Europe' },",
                    "    ],",
                    "    defaultZone: 'Europe',",
                    "    taxRates: [",
                    "        { name: 'Standard Tax', percentage: 20 },",
                    "        { name: 'Reduced Tax', percentage: 10 },",
                    "        { name: 'Zero Tax', percentage: 0 },",
                    "    ],",
                    "    shippingMethods: [{ name: 'Standard Shipping', price: 500 }, { name: 'Express Shipping', price: 1000 }],",
                    "    collections: [",
                    "        {",
                    "            name: 'Electronics',",
                    "            filters: [",
                    "                {",
                    "                    code: 'facet-value-filter',",
                    "                    args: { facetValueNames: ['Electronics'], containsAny: false },",
                    "                },",
                    "            ],",
                    "            assetPaths: ['jakob-owens-274337-unsplash.jpg'],",
                    "        },",
                    "    ],",
                    "};"
                ]
            },
            {
                "id": "populating-the-server",
                "title": "Populating The Server",
                "content": "\n",
                "subsections": [
                    {
                        "id": "the-`populate()`-function",
                        "title": "The `populate()` function",
                        "content": "The `@vendure/core` package exposes a [`populate()` function](/reference/typescript-api/import-export/populate/) which can be used along with the data formats described above to populate your Vendure server:\n\n\n:::note\nWhen removing the `DefaultJobQueuePlugin` from the plugins list as in the code snippet above, one should manually rebuild the search index in order for the newly added products to appear.\nIn the Admin UI, this can be done by navigating to the product list view and clicking the three icon next to the search input:\n\n![Rebuild search index](./reindex.webp)\n:::\n\n"
                    },
                    {
                        "id": "populating-test-data",
                        "title": "Populating test data",
                        "content": "\nWhen installing with @vendure/create, you have the option of populating test data (products, payment methods, countries, zones, tax rates etc).\n\nThis guide illustrates how to populate that test data again on an existing Vendure installation, without needing to re-install from scratch.\n\n1. `npm install --save-dev @vendure/create`. This installs the \"create\" package, which contains the test data we will need.\n2. drop all tables from your database, but leave the actual database there.\n3. create a script that looks like this:\n\n\nRunning this script will populate the database with the test data like when you first installed Vendure.\n\n"
                    },
                    {
                        "id": "custom-populate-scripts",
                        "title": "Custom populate scripts",
                        "content": "\nIf you require more control over how your data is being imported - for example if you also need to import data into custom entities, or import customer or order information - you can create your own CLI script to do this: see [Stand-Alone CLI Scripts](/guides/developer-guide/stand-alone-scripts/).\n\nIn addition to all the services available in the [Service Layer](/guides/developer-guide/the-service-layer/), the following specialized import services are available:\n\n* [`ImportParser`](/reference/typescript-api/import-export/import-parser): Used to parse the CSV file into an array of objects.\n* [`FastImporterService`](/reference/typescript-api/import-export/fast-importer-service): Used to create new products & variants in bulk, optimized for speed.\n* [`Populator`](/reference/typescript-api/import-export/populator): Used to populate the initial data.\n* [`AssetImporter`](/reference/typescript-api/import-export/asset-importer): Creates new Assets in bulk, using the configured [`AssetImportStrategy`](/reference/typescript-api/import-export/asset-import-strategy).\n* [`Importer`](/reference/typescript-api/import-export/importer/): Uses all of the above services in combination - this is the basis of the `populate()` function described above.\n\nUsing these specialized import services is preferable to using the normal service-layer services (`ProductService`, `ProductVariantService` etc.) for bulk imports. This is because these import services are optimized for bulk imports (they omit unnecessary checks, use optimized SQL queries) and also do not publish events when creating new entities.\n\nHowever, it is still possible to use the normal service-layer services if you prefer. For example, the following code snippet shows how to create a new ProductVariant using the `ProductVariantService`:\n\n"
                    }
                ],
                "code": [
                    "import { bootstrap, DefaultJobQueuePlugin } from '@vendure/core';",
                    "import { populate } from '@vendure/core/cli';",
                    "import path from \"path\";",
                    "",
                    "import { config } from './vendure-config';",
                    "import { initialData } from './my-initial-data';",
                    "",
                    "const productsCsvFile = path.join(__dirname, 'path/to/products.csv')",
                    "",
                    "const populateConfig = {",
                    "    ...config,",
                    "    plugins: (config.plugins || []).filter(",
                    "        // Remove your JobQueuePlugin during populating to avoid",
                    "        // generating lots of unnecessary jobs as the Collections get created.",
                    "        plugin => plugin !== DefaultJobQueuePlugin,",
                    "    ),",
                    "}",
                    "",
                    "populate(",
                    "    () => bootstrap(populateConfig),",
                    "    initialData,",
                    "    productsCsvFile,",
                    "    'my-channel-token' // optional - used to assign imported ",
                    ")                      // entities to the specified Channel",
                    "",
                    "    .then(app => {",
                    "        return app.close();",
                    "    })",
                    "    .then(",
                    "        () => process.exit(0),",
                    "        err => {",
                    "            console.log(err);",
                    "            process.exit(1);",
                    "        },",
                    "    );",
                    "import { populate } from '@vendure/core/cli';",
                    "import { bootstrap, VendureConfig } from '@vendure/core';",
                    "import { config } from './vendure-config';",
                    "",
                    "populate(",
                    "    () => bootstrap({",
                    "        ...config,",
                    "        importExportOptions: {",
                    "            importAssetsDir: path.join(",
                    "                require.resolve('@vendure/create/assets/products.csv'),",
                    "                '../images'",
                    "            ),",
                    "        },",
                    "        dbConnectionOptions: {...config.dbConnectionOptions, synchronize: true}",
                    "    }),",
                    "    require('@vendure/create/assets/initial-data.json'),",
                    "    require.resolve('@vendure/create/assets/products.csv')",
                    ")",
                    "    .then(app => app.close())",
                    "    .catch(err => {",
                    "        console.log(err);",
                    "        process.exit(1);",
                    "    });"
                ]
            },
            {
                "id": "importing-from-other-platforms",
                "title": "Importing from other platforms",
                "content": "\nIf you are migrating from another platform, you can create a custom import script to import your data into Vendure.\n\nYour existing platform may provide an API which you can use to fetch the data, or it may provide a mechanism for exporting\nthe data to a file.\n\nTherefore, you have a couple of options:\n\n1. Export the data to a file, and then transform this into the Vendure CSV format for import as above.\n2. Write a script which import the data via the other platform's API, and then import this data into Vendure using the services described above, or any other of the Vendure core services.\n\nThe first option is the simplest, but may not be possible if the other platform does not provide a suitable export format.\n\nThe second option is more complex, but allows for more flexibility and can be used to import data from any source, as well as allowing the import of other data such as customer and order information.\n\nAs an illustrative example, let's imagine we are migrating away from an imaginary commerce platform, \"OldCommerce\", and we want to import our data into Vendure.\n\nLuckily, OldCommerce provides a client package which allows us to easily interact with their API.\n\n:::note\nThis is a much-simplified example, but it should serve to illustrate the general approach.\n:::\n\n\n",
                "subsections": [],
                "code": [
                    "import { INestApplicationContext } from '@nestjs/common';",
                    "import {",
                    "    bootstrapWorker,",
                    "    ConfigService,",
                    "    Importer,",
                    "    LanguageCode,",
                    "    ParsedProductWithVariants,",
                    "    RequestContext, RequestContextService,",
                    "    TransactionalConnection, User,",
                    "    SearchService,",
                    "} from '@vendure/core';",
                    "import { createClient, OldCommerceProduct } from '@old-commerce/client';",
                    "",
                    "import { config } from './vendure-config';",
                    "",
                    "if (require.main === module) {",
                    "    importData().then(",
                    "        () => process.exit(0),",
                    "        err => {",
                    "            console.log(err);",
                    "            process.exit(1);",
                    "        },",
                    "    );",
                    "}",
                    "",
                    "async function importData() {",
                    "    // We use the bootstrapWorker() function instead of bootstrap() because we don't ",
                    "    // need to start the server, we just need access to the services.",
                    "    const {app} = await bootstrapWorker(config);",
                    "",
                    "    // Create an instace of the client we'll be using to interact with the",
                    "    // OldCommerce API",
                    "    const client = createClient({",
                    "        // OldCommerce client config",
                    "    });",
                    "",
                    "    // Let's grab a reference to each of the Vendure services we'll need.",
                    "    const importer = app.get(Importer);",
                    "",
                    "    // Most service methods require a RequestContext, so we'll create one here.",
                    "    const ctx = await getSuperadminContext(app);",
                    "",
                    "    // To reindex after importing products",
                    "    const searchService = app.get(SearchService);",
                    "",
                    "    // Fetch all the products to import from the OldCommerce API",
                    "    const productsToImport: OldCommerceProduct[] = await client.getAllProducts();",
                    "",
                    "    // Transform the OldCommerce products into the format expected by the Importer",
                    "    const importRows: ParsedProductWithVariants[] = productsToImport.map(product => ({",
                    "        product: {",
                    "            translations: [",
                    "                {",
                    "                    languageCode: LanguageCode.en,",
                    "                    name: product.name,",
                    "                    slug: product.slug,",
                    "                    description: product.description,",
                    "                    customFields: {},",
                    "                },",
                    "            ],",
                    "            assetPaths: product.images.map(image => image.sourceUrl),",
                    "            facets: [],",
                    "            optionGroups: product.options.map(option => ({",
                    "                translations: [",
                    "                    {",
                    "                        languageCode: LanguageCode.en,",
                    "                        name: option.name,",
                    "                        values: option.values.map(value => value.name),",
                    "                    },",
                    "                ],",
                    "            })),",
                    "        },",
                    "        variants: product.variations.map(variation => {",
                    "            const optionValues = variation.options.map(option => option.value);",
                    "            return {",
                    "                sku: variation.productCode,",
                    "                price: variation.price,",
                    "                stockOnHand: variation.stock,",
                    "                translations: [{languageCode: LanguageCode.en, optionValues}],",
                    "            };",
                    "        }),",
                    "    }));",
                    "",
                    "    // Import the products",
                    "    await importer.importProducts(ctx, importRows, progress => {",
                    "        console.log(`Imported ${progress.imported} of ${importRows.length} products`);",
                    "    });",
                    "",
                    "    // Rebuild search index ",
                    "    await searchService.reindex(ctx);",
                    "",
                    "    // Close the app",
                    "    await app.close();",
                    "}",
                    "",
                    "/**",
                    " * Creates a RequestContext configured for the default Channel with the activeUser set",
                    " * as the superadmin user.",
                    " */",
                    "export async function getSuperadminContext(app: INestApplicationContext): Promise<RequestContext> {",
                    "    const {superadminCredentials} = app.get(ConfigService).authOptions;",
                    "    const superAdminUser = await app.get(TransactionalConnection)",
                    "        .getRepository(User)",
                    "        .findOneOrFail({where: {identifier: superadminCredentials.identifier}});",
                    "    return app.get(RequestContextService).create({",
                    "        apiType: 'admin',",
                    "        user: superAdminUser,",
                    "    });",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "importparser",
        "metadata": {
            "title": "ImportParser",
            "keywords": [
                "importparser",
                "parseproducts",
                "parsedoptiongroup",
                "translations",
                "parsedfacet",
                "parsedproductvariant",
                "sku",
                "price",
                "taxcategory",
                "stockonhand",
                "trackinventory",
                "assetpaths",
                "facets",
                "parsedproduct",
                "optiongroups",
                "parsedproductwithvariants",
                "product",
                "variants",
                "parseresult",
                "results",
                "errors",
                "processed"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/data-import/providers/import-parser/import-parser.ts\" sourceLine=\"152\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "importparser",
                "title": "ImportParser",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/data-import/providers/import-parser/import-parser.ts\" sourceLine=\"152\" packageName=\"@vendure/core\" />\n\nValidates and parses CSV files into a data structure which can then be used to created new entities.\nThis is used internally by the <a href='/reference/typescript-api/import-export/importer#importer'>Importer</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "parseproducts",
                        "title": "parseProducts",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: string | Stream, mainLanguage: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a> = this.configService.defaultLanguageCode) => Promise&#60;<a href='/reference/typescript-api/import-export/import-parser#parseresult'>ParseResult</a>&#60;<a href='/reference/typescript-api/import-export/import-parser#parsedproductwithvariants'>ParsedProductWithVariants</a>&#62;&#62;`}   />\n\nParses the contents of the [product import CSV file](/guides/developer-guide/importing-data/#product-import-format) and\nreturns a data structure which can then be used to populate Vendure using the <a href='/reference/typescript-api/import-export/fast-importer-service#fastimporterservice'>FastImporterService</a>.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ImportParser {",
                    "    parseProducts(input: string | Stream, mainLanguage: LanguageCode = this.configService.defaultLanguageCode) => Promise<ParseResult<ParsedProductWithVariants>>;",
                    "}"
                ]
            },
            {
                "id": "parsedoptiongroup",
                "title": "ParsedOptionGroup",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/data-import/providers/import-parser/import-parser.ts\" sourceLine=\"45\" packageName=\"@vendure/core\" />\n\nThe intermediate representation of an OptionGroup after it has been parsed\nby the <a href='/reference/typescript-api/import-export/import-parser#importparser'>ImportParser</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;{\n         languageCode: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>;\n         name: string;\n         values: string[];\n     }&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface ParsedOptionGroup {",
                    "    translations: Array<{",
                    "        languageCode: LanguageCode;",
                    "        name: string;",
                    "        values: string[];",
                    "    }>;",
                    "}"
                ]
            },
            {
                "id": "parsedfacet",
                "title": "ParsedFacet",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/data-import/providers/import-parser/import-parser.ts\" sourceLine=\"61\" packageName=\"@vendure/core\" />\n\nThe intermediate representation of a Facet after it has been parsed\nby the <a href='/reference/typescript-api/import-export/import-parser#importparser'>ImportParser</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;{\n         languageCode: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>;\n         facet: string;\n         value: string;\n     }&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface ParsedFacet {",
                    "    translations: Array<{",
                    "        languageCode: LanguageCode;",
                    "        facet: string;",
                    "        value: string;",
                    "    }>;",
                    "}"
                ]
            },
            {
                "id": "parsedproductvariant",
                "title": "ParsedProductVariant",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/data-import/providers/import-parser/import-parser.ts\" sourceLine=\"77\" packageName=\"@vendure/core\" />\n\nThe intermediate representation of a ProductVariant after it has been parsed\nby the <a href='/reference/typescript-api/import-export/import-parser#importparser'>ImportParser</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "sku",
                        "title": "sku",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "price",
                        "title": "price",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "taxcategory",
                        "title": "taxCategory",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "stockonhand",
                        "title": "stockOnHand",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "trackinventory",
                        "title": "trackInventory",
                        "content": "\n<MemberInfo kind=\"property\" type={`GlobalFlag`}   />\n\n\n"
                    },
                    {
                        "id": "assetpaths",
                        "title": "assetPaths",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`}   />\n\n\n"
                    },
                    {
                        "id": "facets",
                        "title": "facets",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/import-export/import-parser#parsedfacet'>ParsedFacet</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;{\n         languageCode: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>;\n         optionValues: string[];\n         customFields: {\n             [name: string]: string;\n         };\n     }&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface ParsedProductVariant {",
                    "    sku: string;",
                    "    price: number;",
                    "    taxCategory: string;",
                    "    stockOnHand: number;",
                    "    trackInventory: GlobalFlag;",
                    "    assetPaths: string[];",
                    "    facets: ParsedFacet[];",
                    "    translations: Array<{",
                    "        languageCode: LanguageCode;",
                    "        optionValues: string[];",
                    "        customFields: {",
                    "            [name: string]: string;",
                    "        };",
                    "    }>;",
                    "}"
                ]
            },
            {
                "id": "parsedproduct",
                "title": "ParsedProduct",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/data-import/providers/import-parser/import-parser.ts\" sourceLine=\"102\" packageName=\"@vendure/core\" />\n\nThe intermediate representation of a Product after it has been parsed\nby the <a href='/reference/typescript-api/import-export/import-parser#importparser'>ImportParser</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "assetpaths",
                        "title": "assetPaths",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`}   />\n\n\n"
                    },
                    {
                        "id": "optiongroups",
                        "title": "optionGroups",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/import-export/import-parser#parsedoptiongroup'>ParsedOptionGroup</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "facets",
                        "title": "facets",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/import-export/import-parser#parsedfacet'>ParsedFacet</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;{\n         languageCode: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>;\n         name: string;\n         slug: string;\n         description: string;\n         customFields: {\n             [name: string]: string;\n         };\n     }&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface ParsedProduct {",
                    "    assetPaths: string[];",
                    "    optionGroups: ParsedOptionGroup[];",
                    "    facets: ParsedFacet[];",
                    "    translations: Array<{",
                    "        languageCode: LanguageCode;",
                    "        name: string;",
                    "        slug: string;",
                    "        description: string;",
                    "        customFields: {",
                    "            [name: string]: string;",
                    "        };",
                    "    }>;",
                    "}"
                ]
            },
            {
                "id": "parsedproductwithvariants",
                "title": "ParsedProductWithVariants",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/data-import/providers/import-parser/import-parser.ts\" sourceLine=\"125\" packageName=\"@vendure/core\" />\n\nThe data structure into which an import CSV file is parsed by the\n<a href='/reference/typescript-api/import-export/import-parser#importparser'>ImportParser</a> `parseProducts()` method.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "product",
                        "title": "product",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/import-export/import-parser#parsedproduct'>ParsedProduct</a>`}   />\n\n\n"
                    },
                    {
                        "id": "variants",
                        "title": "variants",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/import-export/import-parser#parsedproductvariant'>ParsedProductVariant</a>[]`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface ParsedProductWithVariants {",
                    "    product: ParsedProduct;",
                    "    variants: ParsedProductVariant[];",
                    "}"
                ]
            },
            {
                "id": "parseresult",
                "title": "ParseResult",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/data-import/providers/import-parser/import-parser.ts\" sourceLine=\"137\" packageName=\"@vendure/core\" />\n\nThe result returned by the <a href='/reference/typescript-api/import-export/import-parser#importparser'>ImportParser</a> `parseProducts()` method.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "results",
                        "title": "results",
                        "content": "\n<MemberInfo kind=\"property\" type={`T[]`}   />\n\n\n"
                    },
                    {
                        "id": "errors",
                        "title": "errors",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`}   />\n\n\n"
                    },
                    {
                        "id": "processed",
                        "title": "processed",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ParseResult<T> {",
                    "    results: T[];",
                    "    errors: string[];",
                    "    processed: number;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "initialdata",
        "metadata": {
            "title": "InitialData",
            "keywords": [
                "initialdata",
                "defaultlanguage",
                "defaultzone",
                "roles",
                "countries",
                "taxrates",
                "shippingmethods",
                "paymentmethods",
                "collections"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/data-import/types.ts\" sourceLine=\"46\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "initialdata",
                "title": "InitialData",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/data-import/types.ts\" sourceLine=\"46\" packageName=\"@vendure/core\" />\n\nAn object defining initial settings for a new Vendure installation.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "defaultlanguage",
                        "title": "defaultLanguage",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>`}   />\n\n\n"
                    },
                    {
                        "id": "defaultzone",
                        "title": "defaultZone",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "roles",
                        "title": "roles",
                        "content": "\n<MemberInfo kind=\"property\" type={`RoleDefinition[]`}   />\n\n\n"
                    },
                    {
                        "id": "countries",
                        "title": "countries",
                        "content": "\n<MemberInfo kind=\"property\" type={`CountryDefinition[]`}   />\n\n\n"
                    },
                    {
                        "id": "taxrates",
                        "title": "taxRates",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;{ name: string; percentage: number }&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "shippingmethods",
                        "title": "shippingMethods",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;{ name: string; price: number }&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "paymentmethods",
                        "title": "paymentMethods",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;{ name: string; handler: ConfigurableOperationInput }&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "collections",
                        "title": "collections",
                        "content": "\n<MemberInfo kind=\"property\" type={`CollectionDefinition[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface InitialData {",
                    "    defaultLanguage: LanguageCode;",
                    "    defaultZone: string;",
                    "    roles?: RoleDefinition[];",
                    "    countries: CountryDefinition[];",
                    "    taxRates: Array<{ name: string; percentage: number }>;",
                    "    shippingMethods: Array<{ name: string; price: number }>;",
                    "    paymentMethods: Array<{ name: string; handler: ConfigurableOperationInput }>;",
                    "    collections: CollectionDefinition[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "injectablestrategy",
        "metadata": {
            "title": "InjectableStrategy",
            "keywords": [
                "injectablestrategy",
                "init",
                "destroy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/types/injectable-strategy.ts\" sourceLine=\"10\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "injectablestrategy",
                "title": "InjectableStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/types/injectable-strategy.ts\" sourceLine=\"10\" packageName=\"@vendure/core\" />\n\nThis interface defines the setup and teardown hooks available to the\nvarious strategies used to configure Vendure.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"property\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>) =&#62; void | Promise&#60;void&#62;`}   />\n\nDefines setup logic to be run during application bootstrap. Receives\nthe <a href='/reference/typescript-api/common/injector#injector'>Injector</a> as an argument, which allows application providers\nto be used as part of the setup. This hook will be called on both the\nmain server and the worker processes.\n\n*Example*\n\n"
                    },
                    {
                        "id": "destroy",
                        "title": "destroy",
                        "content": "\n<MemberInfo kind=\"property\" type={`() =&#62; void | Promise&#60;void&#62;`}   />\n\nDefines teardown logic to be run before application shutdown.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface InjectableStrategy {",
                    "    init?: (injector: Injector) => void | Promise<void>;",
                    "    destroy?: () => void | Promise<void>;",
                    "}",
                    "async init(injector: Injector) {",
                    "  const myService = injector.get(MyService);",
                    "  await myService.doSomething();",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "injector",
        "metadata": {
            "title": "Injector",
            "keywords": [
                "injector",
                "constructor",
                "get",
                "resolve"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/injector.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "injector",
                "title": "Injector",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/injector.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />\n\nThe Injector wraps the underlying Nestjs `ModuleRef`, allowing injection of providers\nknown to the application's dependency injection container. This is intended to enable the injection\nof services into objects which exist outside of the Nestjs module system, e.g. the various\nStrategies which can be supplied in the VendureConfig.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(moduleRef: ModuleRef) => Injector`}   />\n\n\n"
                    },
                    {
                        "id": "get",
                        "title": "get",
                        "content": "\n<MemberInfo kind=\"method\" type={`(typeOrToken: Type&#60;T&#62; | string | symbol) => R`}   />\n\nRetrieve an instance of the given type from the app's dependency injection container.\nWraps the Nestjs `ModuleRef.get()` method.\n"
                    },
                    {
                        "id": "resolve",
                        "title": "resolve",
                        "content": "\n<MemberInfo kind=\"method\" type={`(typeOrToken: Type&#60;T&#62; | string | symbol, contextId?: ContextId) => Promise&#60;R&#62;`}   />\n\nRetrieve an instance of the given scoped provider (transient or request-scoped) from the\napp's dependency injection container.\nWraps the Nestjs `ModuleRef.resolve()` method.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Injector {",
                    "    constructor(moduleRef: ModuleRef)",
                    "    get(typeOrToken: Type<T> | string | symbol) => R;",
                    "    resolve(typeOrToken: Type<T> | string | symbol, contextId?: ContextId) => Promise<R>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "inmemoryjobbufferstoragestrategy",
        "metadata": {
            "title": "InMemoryJobBufferStorageStrategy",
            "keywords": [
                "inmemoryjobbufferstoragestrategy",
                "bufferstorage",
                "add",
                "buffersize",
                "flush"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/job-queue/job-buffer/in-memory-job-buffer-storage-strategy.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" since=\"1.3.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "inmemoryjobbufferstoragestrategy",
                "title": "InMemoryJobBufferStorageStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/job-buffer/in-memory-job-buffer-storage-strategy.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" since=\"1.3.0\" />\n\nA <a href='/reference/typescript-api/job-queue/job-buffer-storage-strategy#jobbufferstoragestrategy'>JobBufferStorageStrategy</a> which keeps the buffered jobs in memory. Should\n_not_ be used in production, since it will lose data in the event of the server\nstopping.\n\nInstead, use the <a href='/reference/typescript-api/job-queue/default-job-queue-plugin#defaultjobqueueplugin'>DefaultJobQueuePlugin</a> with the `useDatabaseForBuffer: true` option set,\nor the {@link BullMQJobQueuePlugin} or another custom strategy with persistent storage.\n\n* Implements: <code><a href='/reference/typescript-api/job-queue/job-buffer-storage-strategy#jobbufferstoragestrategy'>JobBufferStorageStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "bufferstorage",
                        "title": "bufferStorage",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "add",
                        "title": "add",
                        "content": "\n<MemberInfo kind=\"method\" type={`(bufferId: string, job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "buffersize",
                        "title": "bufferSize",
                        "content": "\n<MemberInfo kind=\"method\" type={`(bufferIds?: string[]) => Promise&#60;{ [bufferId: string]: number }&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "flush",
                        "title": "flush",
                        "content": "\n<MemberInfo kind=\"method\" type={`(bufferIds?: string[]) => Promise&#60;{ [bufferId: string]: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>[] }&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class InMemoryJobBufferStorageStrategy implements JobBufferStorageStrategy {",
                    "    protected bufferStorage = new Map<string, Set<Job>>();",
                    "    add(bufferId: string, job: Job) => Promise<Job>;",
                    "    bufferSize(bufferIds?: string[]) => Promise<{ [bufferId: string]: number }>;",
                    "    flush(bufferIds?: string[]) => Promise<{ [bufferId: string]: Job[] }>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "inmemoryjobqueuestrategy",
        "metadata": {
            "title": "InMemoryJobQueueStrategy",
            "keywords": [
                "inmemoryjobqueuestrategy",
                "jobs",
                "unsettledjobs",
                "init",
                "destroy",
                "add",
                "findone",
                "findmany",
                "findmanybyid",
                "next",
                "update",
                "removesettledjobs"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/job-queue/in-memory-job-queue-strategy.ts\" sourceLine=\"42\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "inmemoryjobqueuestrategy",
                "title": "InMemoryJobQueueStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/in-memory-job-queue-strategy.ts\" sourceLine=\"42\" packageName=\"@vendure/core\" />\n\nAn in-memory <a href='/reference/typescript-api/job-queue/job-queue-strategy#jobqueuestrategy'>JobQueueStrategy</a>. This is the default strategy if not using a dedicated\nJobQueue plugin (e.g. <a href='/reference/typescript-api/job-queue/default-job-queue-plugin#defaultjobqueueplugin'>DefaultJobQueuePlugin</a>). Not recommended for production, since\nthe queue will be cleared when the server stops, and can only be used when the JobQueueService is\nstarted from the main server process:\n\n*Example*\n\n\nAttempting to use this strategy when running the worker in a separate process (using `bootstrapWorker()`)\nwill result in an error on startup.\n\nCompleted jobs will be evicted from the store every 2 hours to prevent a memory leak.\n\n* Extends: <code><a href='/reference/typescript-api/job-queue/polling-job-queue-strategy#pollingjobqueuestrategy'>PollingJobQueueStrategy</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/job-queue/inspectable-job-queue-strategy#inspectablejobqueuestrategy'>InspectableJobQueueStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "jobs",
                        "title": "jobs",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "unsettledjobs",
                        "title": "unsettledJobs",
                        "content": "\n<MemberInfo kind=\"property\" type={`{ [queueName: string]: Array&#60;{ job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>; updatedAt: Date }&#62; }`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "destroy",
                        "title": "destroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "add",
                        "title": "add",
                        "content": "\n<MemberInfo kind=\"method\" type={`(job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findmany",
                        "title": "findMany",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options?: JobListOptions) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findmanybyid",
                        "title": "findManyById",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ids: <a href='/reference/typescript-api/common/id#id'>ID</a>[]) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "next",
                        "title": "next",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queueName: string, waitingJobs: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>[] = []) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>) => Promise&#60;void&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "removesettledjobs",
                        "title": "removeSettledJobs",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queueNames: string[] = [], olderThan?: Date) => Promise&#60;number&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "bootstrap(config)",
                    "  .then(app => app.get(JobQueueService).start());",
                    "class InMemoryJobQueueStrategy extends PollingJobQueueStrategy implements InspectableJobQueueStrategy {",
                    "    protected jobs = new Map<ID, Job>();",
                    "    protected unsettledJobs: { [queueName: string]: Array<{ job: Job; updatedAt: Date }> } = {};",
                    "    init(injector: Injector) => ;",
                    "    destroy() => ;",
                    "    add(job: Job<Data>) => Promise<Job<Data>>;",
                    "    findOne(id: ID) => Promise<Job | undefined>;",
                    "    findMany(options?: JobListOptions) => Promise<PaginatedList<Job>>;",
                    "    findManyById(ids: ID[]) => Promise<Job[]>;",
                    "    next(queueName: string, waitingJobs: Job[] = []) => Promise<Job | undefined>;",
                    "    update(job: Job) => Promise<void>;",
                    "    removeSettledJobs(queueNames: string[] = [], olderThan?: Date) => Promise<number>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "inmemorysessioncachestrategy",
        "metadata": {
            "title": "InMemorySessionCacheStrategy",
            "keywords": [
                "inmemorysessioncachestrategy",
                "constructor",
                "delete",
                "get",
                "set",
                "clear"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/session-cache/in-memory-session-cache-strategy.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "inmemorysessioncachestrategy",
                "title": "InMemorySessionCacheStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/session-cache/in-memory-session-cache-strategy.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />\n\nCaches session in memory, using a LRU cache implementation. Not suitable for\nmulti-server setups since the cache will be local to each instance, reducing\nits effectiveness. By default the cache has a size of 1000, meaning that after\n1000 sessions have been cached, any new sessions will cause the least-recently-used\nsession to be evicted (removed) from the cache.\n\nThe cache size can be configured by passing a different number to the constructor\nfunction.\n\n* Implements: <code><a href='/reference/typescript-api/auth/session-cache-strategy#sessioncachestrategy'>SessionCacheStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(cacheSize?: number) => InMemorySessionCacheStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(sessionToken: string) => `}   />\n\n\n"
                    },
                    {
                        "id": "get",
                        "title": "get",
                        "content": "\n<MemberInfo kind=\"method\" type={`(sessionToken: string) => `}   />\n\n\n"
                    },
                    {
                        "id": "set",
                        "title": "set",
                        "content": "\n<MemberInfo kind=\"method\" type={`(session: <a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "clear",
                        "title": "clear",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class InMemorySessionCacheStrategy implements SessionCacheStrategy {",
                    "    constructor(cacheSize?: number)",
                    "    delete(sessionToken: string) => ;",
                    "    get(sessionToken: string) => ;",
                    "    set(session: CachedSession) => ;",
                    "    clear() => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "input-objects",
        "metadata": {
            "title": "Input Objects",
            "keywords": [
                "authenticationinput",
                "booleanlistoperators",
                "booleanoperators",
                "collectionfilterparameter",
                "collectionlistoptions",
                "collectionsortparameter",
                "configarginput",
                "configurableoperationinput",
                "createaddressinput",
                "createcustomerinput",
                "customerfilterparameter",
                "customerlistoptions",
                "customersortparameter",
                "datelistoperators",
                "dateoperators",
                "daterange",
                "facetfilterparameter",
                "facetlistoptions",
                "facetsortparameter",
                "facetvaluefilterinput",
                "facetvaluefilterparameter",
                "facetvaluelistoptions",
                "facetvaluesortparameter",
                "historyentryfilterparameter",
                "historyentrylistoptions",
                "historyentrysortparameter",
                "idlistoperators",
                "idoperators",
                "nativeauthinput",
                "numberlistoperators",
                "numberoperators",
                "numberrange",
                "orderfilterparameter",
                "orderlistoptions",
                "ordersortparameter",
                "paymentinput",
                "productfilterparameter",
                "productlistoptions",
                "productsortparameter",
                "productvariantfilterparameter",
                "productvariantlistoptions",
                "productvariantsortparameter",
                "registercustomerinput",
                "searchinput",
                "searchresultsortparameter",
                "stringlistoperators",
                "stringoperators",
                "updateaddressinput",
                "updatecustomerinput",
                "updateorderinput"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <div class=\"graphql-code-block\">"
        },
        "content": "",
        "sections": [
            {
                "id": "authenticationinput",
                "title": "AuthenticationInput",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">AuthenticationInput</span>\n &#123;</div>\n<div class=\"graphql-code-line \">native: <a href=\"/reference/graphql-api/shop/input-types#nativeauthinput\">NativeAuthInput</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "booleanlistoperators",
                "title": "BooleanListOperators",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Operators for filtering on a list of Boolean fields</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">BooleanListOperators</span>\n &#123;</div>\n<div class=\"graphql-code-line \">inList: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "booleanoperators",
                "title": "BooleanOperators",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Operators for filtering on a Boolean field</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">BooleanOperators</span>\n &#123;</div>\n<div class=\"graphql-code-line \">eq: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a></div>\n\n<div class=\"graphql-code-line \">isNull: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "collectionfilterparameter",
                "title": "CollectionFilterParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">CollectionFilterParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/input-types#idoperators\">IDOperators</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">languageCode: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">name: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">slug: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">position: <a href=\"/reference/graphql-api/shop/input-types#numberoperators\">NumberOperators</a></div>\n\n<div class=\"graphql-code-line \">description: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">parentId: <a href=\"/reference/graphql-api/shop/input-types#idoperators\">IDOperators</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "collectionlistoptions",
                "title": "CollectionListOptions",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">CollectionListOptions</span>\n &#123;</div>\n<div class=\"graphql-code-line \">topLevelOnly: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Skips the first n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">skip: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Takes n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">take: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies which properties to sort the results by</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">sort: <a href=\"/reference/graphql-api/shop/input-types#collectionsortparameter\">CollectionSortParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Allows the results to be filtered</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filter: <a href=\"/reference/graphql-api/shop/input-types#collectionfilterparameter\">CollectionFilterParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies whether multiple \"filter\" arguments should be combines with a logical AND or OR operation. Defaults to AND.</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filterOperator: <a href=\"/reference/graphql-api/shop/enums#logicaloperator\">LogicalOperator</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "collectionsortparameter",
                "title": "CollectionSortParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">CollectionSortParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">name: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">slug: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">position: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">description: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">parentId: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "configarginput",
                "title": "ConfigArgInput",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">ConfigArgInput</span>\n &#123;</div>\n<div class=\"graphql-code-line \">name: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!</div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">A JSON stringified representation of the actual value</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">value: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "configurableoperationinput",
                "title": "ConfigurableOperationInput",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">ConfigurableOperationInput</span>\n &#123;</div>\n<div class=\"graphql-code-line \">code: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!</div>\n\n<div class=\"graphql-code-line \">arguments: [<a href=\"/reference/graphql-api/shop/input-types#configarginput\">ConfigArgInput</a>!]!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "createaddressinput",
                "title": "CreateAddressInput",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">CreateAddressInput</span>\n &#123;</div>\n<div class=\"graphql-code-line \">fullName: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">company: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">streetLine1: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!</div>\n\n<div class=\"graphql-code-line \">streetLine2: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">city: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">province: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">postalCode: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">countryCode: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!</div>\n\n<div class=\"graphql-code-line \">phoneNumber: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">defaultShippingAddress: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a></div>\n\n<div class=\"graphql-code-line \">defaultBillingAddress: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a></div>\n\n<div class=\"graphql-code-line \">customFields: <a href=\"/reference/graphql-api/shop/object-types#json\">JSON</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "createcustomerinput",
                "title": "CreateCustomerInput",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">CreateCustomerInput</span>\n &#123;</div>\n<div class=\"graphql-code-line \">title: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">firstName: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!</div>\n\n<div class=\"graphql-code-line \">lastName: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!</div>\n\n<div class=\"graphql-code-line \">phoneNumber: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">emailAddress: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!</div>\n\n<div class=\"graphql-code-line \">customFields: <a href=\"/reference/graphql-api/shop/object-types#json\">JSON</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "customerfilterparameter",
                "title": "CustomerFilterParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">CustomerFilterParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/input-types#idoperators\">IDOperators</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">title: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">firstName: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">lastName: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">phoneNumber: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">emailAddress: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "customerlistoptions",
                "title": "CustomerListOptions",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">CustomerListOptions</span>\n &#123;</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Skips the first n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">skip: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Takes n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">take: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies which properties to sort the results by</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">sort: <a href=\"/reference/graphql-api/shop/input-types#customersortparameter\">CustomerSortParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Allows the results to be filtered</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filter: <a href=\"/reference/graphql-api/shop/input-types#customerfilterparameter\">CustomerFilterParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies whether multiple \"filter\" arguments should be combines with a logical AND or OR operation. Defaults to AND.</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filterOperator: <a href=\"/reference/graphql-api/shop/enums#logicaloperator\">LogicalOperator</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "customersortparameter",
                "title": "CustomerSortParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">CustomerSortParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">title: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">firstName: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">lastName: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">phoneNumber: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">emailAddress: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "datelistoperators",
                "title": "DateListOperators",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Operators for filtering on a list of Date fields</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">DateListOperators</span>\n &#123;</div>\n<div class=\"graphql-code-line \">inList: <a href=\"/reference/graphql-api/shop/object-types#datetime\">DateTime</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "dateoperators",
                "title": "DateOperators",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Operators for filtering on a DateTime field</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">DateOperators</span>\n &#123;</div>\n<div class=\"graphql-code-line \">eq: <a href=\"/reference/graphql-api/shop/object-types#datetime\">DateTime</a></div>\n\n<div class=\"graphql-code-line \">before: <a href=\"/reference/graphql-api/shop/object-types#datetime\">DateTime</a></div>\n\n<div class=\"graphql-code-line \">after: <a href=\"/reference/graphql-api/shop/object-types#datetime\">DateTime</a></div>\n\n<div class=\"graphql-code-line \">between: <a href=\"/reference/graphql-api/shop/input-types#daterange\">DateRange</a></div>\n\n<div class=\"graphql-code-line \">isNull: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "daterange",
                "title": "DateRange",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">DateRange</span>\n &#123;</div>\n<div class=\"graphql-code-line \">start: <a href=\"/reference/graphql-api/shop/object-types#datetime\">DateTime</a>!</div>\n\n<div class=\"graphql-code-line \">end: <a href=\"/reference/graphql-api/shop/object-types#datetime\">DateTime</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "facetfilterparameter",
                "title": "FacetFilterParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">FacetFilterParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/input-types#idoperators\">IDOperators</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">languageCode: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">name: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">code: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "facetlistoptions",
                "title": "FacetListOptions",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">FacetListOptions</span>\n &#123;</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Skips the first n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">skip: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Takes n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">take: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies which properties to sort the results by</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">sort: <a href=\"/reference/graphql-api/shop/input-types#facetsortparameter\">FacetSortParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Allows the results to be filtered</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filter: <a href=\"/reference/graphql-api/shop/input-types#facetfilterparameter\">FacetFilterParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies whether multiple \"filter\" arguments should be combines with a logical AND or OR operation. Defaults to AND.</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filterOperator: <a href=\"/reference/graphql-api/shop/enums#logicaloperator\">LogicalOperator</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "facetsortparameter",
                "title": "FacetSortParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">FacetSortParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">name: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">code: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "facetvaluefilterinput",
                "title": "FacetValueFilterInput",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Used to construct boolean expressions for filtering search results</div>\n\n<div class=\"graphql-code-line top-level comment\">by FacetValue ID. Examples:</div>\n\n<div class=\"graphql-code-line top-level comment\"></div>\n\n<div class=\"graphql-code-line top-level comment\">* ID=1 OR ID=2: `&#123; facetValueFilters: [&#123; or: [1,2] &#125;] &#125;`</div>\n\n<div class=\"graphql-code-line top-level comment\">* ID=1 AND ID=2: `&#123; facetValueFilters: [&#123; and: 1 &#125;, &#123; and: 2 &#125;] &#125;`</div>\n\n<div class=\"graphql-code-line top-level comment\">* ID=1 AND (ID=2 OR ID=3): `&#123; facetValueFilters: [&#123; and: 1 &#125;, &#123; or: [2,3] &#125;] &#125;`</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">FacetValueFilterInput</span>\n &#123;</div>\n<div class=\"graphql-code-line \">and: <a href=\"/reference/graphql-api/shop/object-types#id\">ID</a></div>\n\n<div class=\"graphql-code-line \">or: [<a href=\"/reference/graphql-api/shop/object-types#id\">ID</a>!]</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "facetvaluefilterparameter",
                "title": "FacetValueFilterParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">FacetValueFilterParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/input-types#idoperators\">IDOperators</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">languageCode: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">facetId: <a href=\"/reference/graphql-api/shop/input-types#idoperators\">IDOperators</a></div>\n\n<div class=\"graphql-code-line \">name: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">code: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "facetvaluelistoptions",
                "title": "FacetValueListOptions",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">FacetValueListOptions</span>\n &#123;</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Skips the first n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">skip: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Takes n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">take: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies which properties to sort the results by</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">sort: <a href=\"/reference/graphql-api/shop/input-types#facetvaluesortparameter\">FacetValueSortParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Allows the results to be filtered</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filter: <a href=\"/reference/graphql-api/shop/input-types#facetvaluefilterparameter\">FacetValueFilterParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies whether multiple \"filter\" arguments should be combines with a logical AND or OR operation. Defaults to AND.</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filterOperator: <a href=\"/reference/graphql-api/shop/enums#logicaloperator\">LogicalOperator</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "facetvaluesortparameter",
                "title": "FacetValueSortParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">FacetValueSortParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">facetId: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">name: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">code: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "historyentryfilterparameter",
                "title": "HistoryEntryFilterParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">HistoryEntryFilterParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/input-types#idoperators\">IDOperators</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">type: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "historyentrylistoptions",
                "title": "HistoryEntryListOptions",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">HistoryEntryListOptions</span>\n &#123;</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Skips the first n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">skip: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Takes n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">take: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies which properties to sort the results by</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">sort: <a href=\"/reference/graphql-api/shop/input-types#historyentrysortparameter\">HistoryEntrySortParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Allows the results to be filtered</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filter: <a href=\"/reference/graphql-api/shop/input-types#historyentryfilterparameter\">HistoryEntryFilterParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies whether multiple \"filter\" arguments should be combines with a logical AND or OR operation. Defaults to AND.</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filterOperator: <a href=\"/reference/graphql-api/shop/enums#logicaloperator\">LogicalOperator</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "historyentrysortparameter",
                "title": "HistoryEntrySortParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">HistoryEntrySortParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "idlistoperators",
                "title": "IDListOperators",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Operators for filtering on a list of ID fields</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">IDListOperators</span>\n &#123;</div>\n<div class=\"graphql-code-line \">inList: <a href=\"/reference/graphql-api/shop/object-types#id\">ID</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "idoperators",
                "title": "IDOperators",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Operators for filtering on an ID field</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">IDOperators</span>\n &#123;</div>\n<div class=\"graphql-code-line \">eq: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">notEq: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">in: [<a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!]</div>\n\n<div class=\"graphql-code-line \">notIn: [<a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!]</div>\n\n<div class=\"graphql-code-line \">isNull: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "nativeauthinput",
                "title": "NativeAuthInput",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">NativeAuthInput</span>\n &#123;</div>\n<div class=\"graphql-code-line \">username: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!</div>\n\n<div class=\"graphql-code-line \">password: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "numberlistoperators",
                "title": "NumberListOperators",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Operators for filtering on a list of Number fields</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">NumberListOperators</span>\n &#123;</div>\n<div class=\"graphql-code-line \">inList: <a href=\"/reference/graphql-api/shop/object-types#float\">Float</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "numberoperators",
                "title": "NumberOperators",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Operators for filtering on a Int or Float field</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">NumberOperators</span>\n &#123;</div>\n<div class=\"graphql-code-line \">eq: <a href=\"/reference/graphql-api/shop/object-types#float\">Float</a></div>\n\n<div class=\"graphql-code-line \">lt: <a href=\"/reference/graphql-api/shop/object-types#float\">Float</a></div>\n\n<div class=\"graphql-code-line \">lte: <a href=\"/reference/graphql-api/shop/object-types#float\">Float</a></div>\n\n<div class=\"graphql-code-line \">gt: <a href=\"/reference/graphql-api/shop/object-types#float\">Float</a></div>\n\n<div class=\"graphql-code-line \">gte: <a href=\"/reference/graphql-api/shop/object-types#float\">Float</a></div>\n\n<div class=\"graphql-code-line \">between: <a href=\"/reference/graphql-api/shop/input-types#numberrange\">NumberRange</a></div>\n\n<div class=\"graphql-code-line \">isNull: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "numberrange",
                "title": "NumberRange",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">NumberRange</span>\n &#123;</div>\n<div class=\"graphql-code-line \">start: <a href=\"/reference/graphql-api/shop/object-types#float\">Float</a>!</div>\n\n<div class=\"graphql-code-line \">end: <a href=\"/reference/graphql-api/shop/object-types#float\">Float</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "orderfilterparameter",
                "title": "OrderFilterParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">OrderFilterParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/input-types#idoperators\">IDOperators</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">type: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">orderPlacedAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">code: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">state: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">active: <a href=\"/reference/graphql-api/shop/input-types#booleanoperators\">BooleanOperators</a></div>\n\n<div class=\"graphql-code-line \">totalQuantity: <a href=\"/reference/graphql-api/shop/input-types#numberoperators\">NumberOperators</a></div>\n\n<div class=\"graphql-code-line \">subTotal: <a href=\"/reference/graphql-api/shop/input-types#numberoperators\">NumberOperators</a></div>\n\n<div class=\"graphql-code-line \">subTotalWithTax: <a href=\"/reference/graphql-api/shop/input-types#numberoperators\">NumberOperators</a></div>\n\n<div class=\"graphql-code-line \">currencyCode: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">shipping: <a href=\"/reference/graphql-api/shop/input-types#numberoperators\">NumberOperators</a></div>\n\n<div class=\"graphql-code-line \">shippingWithTax: <a href=\"/reference/graphql-api/shop/input-types#numberoperators\">NumberOperators</a></div>\n\n<div class=\"graphql-code-line \">total: <a href=\"/reference/graphql-api/shop/input-types#numberoperators\">NumberOperators</a></div>\n\n<div class=\"graphql-code-line \">totalWithTax: <a href=\"/reference/graphql-api/shop/input-types#numberoperators\">NumberOperators</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "orderlistoptions",
                "title": "OrderListOptions",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">OrderListOptions</span>\n &#123;</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Skips the first n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">skip: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Takes n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">take: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies which properties to sort the results by</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">sort: <a href=\"/reference/graphql-api/shop/input-types#ordersortparameter\">OrderSortParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Allows the results to be filtered</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filter: <a href=\"/reference/graphql-api/shop/input-types#orderfilterparameter\">OrderFilterParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies whether multiple \"filter\" arguments should be combines with a logical AND or OR operation. Defaults to AND.</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filterOperator: <a href=\"/reference/graphql-api/shop/enums#logicaloperator\">LogicalOperator</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "ordersortparameter",
                "title": "OrderSortParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">OrderSortParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">orderPlacedAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">code: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">state: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">totalQuantity: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">subTotal: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">subTotalWithTax: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">shipping: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">shippingWithTax: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">total: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">totalWithTax: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "paymentinput",
                "title": "PaymentInput",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Passed as input to the <code>addPaymentToOrder</code> mutation.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">PaymentInput</span>\n &#123;</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">This field should correspond to the <code>code</code> property of a PaymentMethod.</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">method: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!</div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">This field should contain arbitrary data passed to the specified PaymentMethodHandler's <code>createPayment()</code> method</div>\n\n<div class=\"graphql-code-line comment\">as the \"metadata\" argument. For example, it could contain an ID for the payment and other</div>\n\n<div class=\"graphql-code-line comment\">data generated by the payment provider.</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">metadata: <a href=\"/reference/graphql-api/shop/object-types#json\">JSON</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "productfilterparameter",
                "title": "ProductFilterParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">ProductFilterParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/input-types#idoperators\">IDOperators</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">languageCode: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">name: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">slug: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">description: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "productlistoptions",
                "title": "ProductListOptions",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">ProductListOptions</span>\n &#123;</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Skips the first n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">skip: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Takes n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">take: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies which properties to sort the results by</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">sort: <a href=\"/reference/graphql-api/shop/input-types#productsortparameter\">ProductSortParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Allows the results to be filtered</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filter: <a href=\"/reference/graphql-api/shop/input-types#productfilterparameter\">ProductFilterParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies whether multiple \"filter\" arguments should be combines with a logical AND or OR operation. Defaults to AND.</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filterOperator: <a href=\"/reference/graphql-api/shop/enums#logicaloperator\">LogicalOperator</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "productsortparameter",
                "title": "ProductSortParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">ProductSortParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">name: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">slug: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">description: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "productvariantfilterparameter",
                "title": "ProductVariantFilterParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">ProductVariantFilterParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/input-types#idoperators\">IDOperators</a></div>\n\n<div class=\"graphql-code-line \">productId: <a href=\"/reference/graphql-api/shop/input-types#idoperators\">IDOperators</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/input-types#dateoperators\">DateOperators</a></div>\n\n<div class=\"graphql-code-line \">languageCode: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">sku: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">name: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">price: <a href=\"/reference/graphql-api/shop/input-types#numberoperators\">NumberOperators</a></div>\n\n<div class=\"graphql-code-line \">currencyCode: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n<div class=\"graphql-code-line \">priceWithTax: <a href=\"/reference/graphql-api/shop/input-types#numberoperators\">NumberOperators</a></div>\n\n<div class=\"graphql-code-line \">stockLevel: <a href=\"/reference/graphql-api/shop/input-types#stringoperators\">StringOperators</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "productvariantlistoptions",
                "title": "ProductVariantListOptions",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">ProductVariantListOptions</span>\n &#123;</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Skips the first n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">skip: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Takes n results, for use in pagination</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">take: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies which properties to sort the results by</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">sort: <a href=\"/reference/graphql-api/shop/input-types#productvariantsortparameter\">ProductVariantSortParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Allows the results to be filtered</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filter: <a href=\"/reference/graphql-api/shop/input-types#productvariantfilterparameter\">ProductVariantFilterParameter</a></div>\n\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line comment\">Specifies whether multiple \"filter\" arguments should be combines with a logical AND or OR operation. Defaults to AND.</div>\n<div class=\"graphql-code-line comment\">\"\"\"</div>\n<div class=\"graphql-code-line \">filterOperator: <a href=\"/reference/graphql-api/shop/enums#logicaloperator\">LogicalOperator</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "productvariantsortparameter",
                "title": "ProductVariantSortParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">ProductVariantSortParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">productId: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">createdAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">updatedAt: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">sku: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">name: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">price: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">priceWithTax: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">stockLevel: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "registercustomerinput",
                "title": "RegisterCustomerInput",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">RegisterCustomerInput</span>\n &#123;</div>\n<div class=\"graphql-code-line \">emailAddress: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!</div>\n\n<div class=\"graphql-code-line \">title: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">firstName: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">lastName: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">phoneNumber: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">password: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "searchinput",
                "title": "SearchInput",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">SearchInput</span>\n &#123;</div>\n<div class=\"graphql-code-line \">term: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">facetValueIds: [<a href=\"/reference/graphql-api/shop/object-types#id\">ID</a>!]</div>\n\n<div class=\"graphql-code-line \">facetValueOperator: <a href=\"/reference/graphql-api/shop/enums#logicaloperator\">LogicalOperator</a></div>\n\n<div class=\"graphql-code-line \">facetValueFilters: [<a href=\"/reference/graphql-api/shop/input-types#facetvaluefilterinput\">FacetValueFilterInput</a>!]</div>\n\n<div class=\"graphql-code-line \">collectionId: <a href=\"/reference/graphql-api/shop/object-types#id\">ID</a></div>\n\n<div class=\"graphql-code-line \">collectionSlug: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">groupByProduct: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a></div>\n\n<div class=\"graphql-code-line \">take: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line \">skip: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a></div>\n\n<div class=\"graphql-code-line \">sort: <a href=\"/reference/graphql-api/shop/input-types#searchresultsortparameter\">SearchResultSortParameter</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "searchresultsortparameter",
                "title": "SearchResultSortParameter",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">SearchResultSortParameter</span>\n &#123;</div>\n<div class=\"graphql-code-line \">name: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n<div class=\"graphql-code-line \">price: <a href=\"/reference/graphql-api/shop/enums#sortorder\">SortOrder</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "stringlistoperators",
                "title": "StringListOperators",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Operators for filtering on a list of String fields</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">StringListOperators</span>\n &#123;</div>\n<div class=\"graphql-code-line \">inList: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "stringoperators",
                "title": "StringOperators",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Operators for filtering on a String field</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">StringOperators</span>\n &#123;</div>\n<div class=\"graphql-code-line \">eq: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">notEq: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">contains: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">notContains: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">in: [<a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!]</div>\n\n<div class=\"graphql-code-line \">notIn: [<a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!]</div>\n\n<div class=\"graphql-code-line \">regex: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">isNull: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "updateaddressinput",
                "title": "UpdateAddressInput",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">UpdateAddressInput</span>\n &#123;</div>\n<div class=\"graphql-code-line \">id: <a href=\"/reference/graphql-api/shop/object-types#id\">ID</a>!</div>\n\n<div class=\"graphql-code-line \">fullName: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">company: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">streetLine1: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">streetLine2: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">city: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">province: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">postalCode: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">countryCode: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">phoneNumber: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">defaultShippingAddress: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a></div>\n\n<div class=\"graphql-code-line \">defaultBillingAddress: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a></div>\n\n<div class=\"graphql-code-line \">customFields: <a href=\"/reference/graphql-api/shop/object-types#json\">JSON</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "updatecustomerinput",
                "title": "UpdateCustomerInput",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">UpdateCustomerInput</span>\n &#123;</div>\n<div class=\"graphql-code-line \">title: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">firstName: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">lastName: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">phoneNumber: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a></div>\n\n<div class=\"graphql-code-line \">customFields: <a href=\"/reference/graphql-api/shop/object-types#json\">JSON</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "updateorderinput",
                "title": "UpdateOrderInput",
                "content": "\n<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level\">input <span class=\"graphql-code-identifier\">UpdateOrderInput</span>\n &#123;</div>\n<div class=\"graphql-code-line \">customFields: <a href=\"/reference/graphql-api/shop/object-types#json\">JSON</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n\n</div>\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "inspectablejobqueuestrategy",
        "metadata": {
            "title": "InspectableJobQueueStrategy",
            "keywords": [
                "inspectablejobqueuestrategy",
                "findone",
                "findmany",
                "findmanybyid",
                "removesettledjobs",
                "canceljob"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/job-queue/inspectable-job-queue-strategy.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "inspectablejobqueuestrategy",
                "title": "InspectableJobQueueStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/job-queue/inspectable-job-queue-strategy.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nDefines a job queue strategy that can be inspected using the default admin ui\n\n* Extends: <code><a href='/reference/typescript-api/job-queue/job-queue-strategy#jobqueuestrategy'>JobQueueStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a> | undefined&#62;`}   />\n\nReturns a job by its id.\n"
                    },
                    {
                        "id": "findmany",
                        "title": "findMany",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options?: JobListOptions) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#62;&#62;`}   />\n\nReturns a list of jobs according to the specified options.\n"
                    },
                    {
                        "id": "findmanybyid",
                        "title": "findManyById",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ids: <a href='/reference/typescript-api/common/id#id'>ID</a>[]) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>[]&#62;`}   />\n\nReturns an array of jobs for the given ids.\n"
                    },
                    {
                        "id": "removesettledjobs",
                        "title": "removeSettledJobs",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queueNames?: string[], olderThan?: Date) => Promise&#60;number&#62;`}   />\n\nRemove all settled jobs in the specified queues older than the given date.\nIf no queueName is passed, all queues will be considered. If no olderThan\ndate is passed, all jobs older than the current time will be removed.\n\nReturns a promise of the number of jobs removed.\n"
                    },
                    {
                        "id": "canceljob",
                        "title": "cancelJob",
                        "content": "\n<MemberInfo kind=\"method\" type={`(jobId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a> | undefined&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface InspectableJobQueueStrategy extends JobQueueStrategy {",
                    "    findOne(id: ID): Promise<Job | undefined>;",
                    "    findMany(options?: JobListOptions): Promise<PaginatedList<Job>>;",
                    "    findManyById(ids: ID[]): Promise<Job[]>;",
                    "    removeSettledJobs(queueNames?: string[], olderThan?: Date): Promise<number>;",
                    "    cancelJob(jobId: ID): Promise<Job | undefined>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "installation",
        "metadata": {
            "title": "Installation",
            "keywords": [
                "requirements",
                "@vendure/create",
                "1. run the command",
                "2. select a database",
                "3. populate with data",
                "4. complete setup",
                "5. start the server",
                "or",
                "troubleshooting",
                "set up a storefront"
            ],
            "description": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; * [Node.js](https://nodejs.org/en/) **v16** or above, with support for **even-numbered Node.js versions**. * The [supported TypeScript version](https://github.com/vendure-ecommerce/vendure/blob/master/packages/create/src/constants.ts#L7) is set upon installation. Upgrading to a newer version of TypeScript might result in compilation errors. * If you want to use MySQL, MariaDB, or Postgres as your data store, then you'll need an instance available locally. However, **if you are just testing out Vendure, we recommend using SQLite**, which has no external requirements."
        },
        "content": "",
        "sections": [
            {
                "id": "requirements",
                "title": "Requirements",
                "content": " \n* [Node.js](https://nodejs.org/en/) **v16** or above, with support for **even-numbered Node.js versions**.\n* The [supported TypeScript version](https://github.com/vendure-ecommerce/vendure/blob/master/packages/create/src/constants.ts#L7) is set upon installation. Upgrading to a newer version of TypeScript might result in compilation errors.\n* If you want to use MySQL, MariaDB, or Postgres as your data store, then you'll need an instance available locally. However, **if you are just testing out Vendure, we recommend using SQLite**, which has no external requirements.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "@vendure/create",
                "title": "@vendure/create",
                "content": "\nThe recommended way to get started with Vendure is by using the [@vendure/create](https://github.com/vendure-ecommerce/vendure/tree/master/packages/create) tool. This is a command-line tool which will scaffold and configure your new Vendure project and install all dependencies.\n\n",
                "subsections": [
                    {
                        "id": "1.-run-the-command",
                        "title": "1. Run the command",
                        "content": "\n\n"
                    },
                    {
                        "id": "2.-select-a-database",
                        "title": "2. Select a database",
                        "content": "\nVendure supports a number of different databases. The `@vendure/create` tool will prompt you to select one. \n\n**To quickly test out Vendure, we recommend using SQLite**, which requires no external dependencies. You can always switch to a different database later by changing your configuration file.\n\n\n![Vendure Create step 1](./create-1.webp)\n\n:::tip\nIf you select MySQL, MariaDB or Postgres, you need to make sure you:\n\n1. have the database server running and accessible\n2. have created a database for Vendure to use\n3. know the username and password for a user with access to that database\n:::\n\n"
                    },
                    {
                        "id": "3.-populate-with-data",
                        "title": "3. Populate with data",
                        "content": "\nThe final prompt will ask whether to populate your new Vendure server with some sample product data.\n\n**We recommend you do so**, as it will give you a good starting point for exploring the APIs which we will cover \nin the [Try the API section](/guides/getting-started/try-the-api/), as well as providing some data to use when\nbuilding your own storefront.\n\n![Vendure Create step 2](./create-2.webp)\n\n"
                    },
                    {
                        "id": "4.-complete-setup",
                        "title": "4. Complete setup",
                        "content": "\nNext, a project scaffold will be created and dependencies installed. This may take a few minutes.\n\nOnce complete, you'll see a message like this:\n\n![Vendure Create step 3](./create-3.webp)\n\n\n"
                    },
                    {
                        "id": "5.-start-the-server",
                        "title": "5. Start the server",
                        "content": "\nFollow the instructions to move into the new directory created for your project, and start the server:\n\n\nYou should now be able to access:\n\n* The Vendure Admin GraphQL API: [http://localhost:3000/admin-api](http://localhost:3000/admin-api)\n* The Vendure Shop GraphQL API: [http://localhost:3000/shop-api](http://localhost:3000/shop-api)\n* The Vendure Admin UI: [http://localhost:3000/admin](http://localhost:3000/admin)\n\nCongratulations! 🥳 You now have a fully-functional Vendure server running locally.\n\nNow you can explore Vendure by following our [Try the API guide](/guides/getting-started/try-the-api/) to learn how to interact with the server.\n\nIf you are new to GraphQL, you should also check out our [Introducing GraphQL guide](/guides/getting-started/graphql-intro/).\n\n:::tip\nOpen the Admin UI at [http://localhost:3000/admin](http://localhost:3000/admin) in your browser and log in with the superadmin credentials you specified, which default to:\n\n* **username**: superadmin\n* **password**: superadmin\n:::\n\n"
                    },
                    {
                        "id": "troubleshooting",
                        "title": "Troubleshooting",
                        "content": "\nIf you encounter any issues during installation, you can get a more detailed output by setting the log level to `verbose`:\n\n\n"
                    }
                ],
                "code": [
                    "npx @vendure/create my-shop",
                    "cd my-shop",
                    "",
                    "yarn dev",
                    "# or",
                    "npm run dev",
                    "npx @vendure/create my-shop --log-level verbose"
                ]
            },
            {
                "id": "set-up-a-storefront",
                "title": "Set up a storefront",
                "content": "\nOnce you have a Vendure server running, you can set up a storefront to interact with it! \n\nWe have a number of storefront starter kits available for you to use - head over to the [Storefront Starters](/guides/storefront/storefront-starters/)\npage to learn more.\n\n![Remix storefront](../../storefront/storefront-starters/remix-storefront.webp)\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "interfaces",
        "metadata": {
            "title": "Interfaces",
            "keywords": [
                "channelaware",
                "channels",
                "softdeletable",
                "deletedat",
                "orderable",
                "position",
                "taggable",
                "tags",
                "translatable",
                "translations"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/types/common-types.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "channelaware",
                "title": "ChannelAware",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/types/common-types.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" />\n\nEntities which can be assigned to Channels should implement this interface.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface ChannelAware {",
                    "    channels: Channel[];",
                    "}"
                ]
            },
            {
                "id": "softdeletable",
                "title": "SoftDeletable",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/types/common-types.ts\" sourceLine=\"28\" packageName=\"@vendure/core\" />\n\nEntities which can be soft deleted should implement this interface.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "deletedat",
                        "title": "deletedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface SoftDeletable {",
                    "    deletedAt: Date | null;",
                    "}"
                ]
            },
            {
                "id": "orderable",
                "title": "Orderable",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/types/common-types.ts\" sourceLine=\"39\" packageName=\"@vendure/core\" />\n\nEntities which can be ordered relative to their siblings in a list.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "position",
                        "title": "position",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface Orderable {",
                    "    position: number;",
                    "}"
                ]
            },
            {
                "id": "taggable",
                "title": "Taggable",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/types/common-types.ts\" sourceLine=\"50\" packageName=\"@vendure/core\" />\n\nEntities which can have Tags applied to them.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "tags",
                        "title": "tags",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/tag#tag'>Tag</a>[]`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface Taggable {",
                    "    tags: Tag[];",
                    "}"
                ]
            },
            {
                "id": "translatable",
                "title": "Translatable",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/types/locale-types.ts\" sourceLine=\"29\" packageName=\"@vendure/core\" />\n\nEntities which have localizable string properties should implement this type.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Translation&#60;<a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a>&#62;&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface Translatable {",
                    "    translations: Array<Translation<VendureEntity>>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "isgraphqlerrorresult",
        "metadata": {
            "title": "IsGraphQlErrorResult",
            "keywords": [
                "isgraphqlerrorresult",
                "input"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/error/error-result.ts\" sourceLine=\"71\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "isgraphqlerrorresult",
                "title": "isGraphQlErrorResult",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/error/error-result.ts\" sourceLine=\"71\" packageName=\"@vendure/core\" />\n\nReturns true if the <a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a> is actually an ErrorResult type. This is useful when dealing with\ncertain internal service method that return an ErrorResultUnion.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "input",
                        "title": "input",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`T`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { isGraphQlErrorResult } from '@vendure/core';",
                    "",
                    "// ...",
                    "",
                    "const transitionResult = await this.orderService.transitionToState(ctx, order.id, newState);",
                    "if (isGraphQlErrorResult(transitionResult)) {",
                    "    // The transition failed with an ErrorResult",
                    "    throw transitionResult;",
                    "} else {",
                    "    // TypeScript will correctly infer the type of `transitionResult` to be `Order`",
                    "    return transitionResult;",
                    "}",
                    "function isGraphQlErrorResult<T extends GraphQLErrorResult | U, U = any>(input: T): input is JustErrorResults<T>"
                ]
            }
        ]
    },
    {
        "id": "job-queue-plugin",
        "metadata": {
            "title": "Job Queue Plugin",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "job",
        "metadata": {
            "title": "Job",
            "keywords": [
                "job",
                "id",
                "queuename",
                "retries",
                "createdat",
                "name",
                "data",
                "state",
                "progress",
                "result",
                "error",
                "issettled",
                "startedat",
                "settledat",
                "duration",
                "attempts",
                "constructor",
                "start",
                "setprogress",
                "complete",
                "fail",
                "cancel",
                "defer",
                "on",
                "off",
                "jobeventtype",
                "jobeventlistener"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/job-queue/job.ts\" sourceLine=\"37\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "job",
                "title": "Job",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/job.ts\" sourceLine=\"37\" packageName=\"@vendure/core\" />\n\nA Job represents a piece of work to be run in the background, i.e. outside the request-response cycle.\nIt is intended to be used for long-running work triggered by API requests. Jobs should now generally\nbe directly instantiated. Rather, the <a href='/reference/typescript-api/job-queue/#jobqueue'>JobQueue</a> `add()` method should be used to create and\nadd a new Job to a queue.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`number | string | null`}   />\n\n\n"
                    },
                    {
                        "id": "queuename",
                        "title": "queueName",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "retries",
                        "title": "retries",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "createdat",
                        "title": "createdAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "data",
                        "title": "data",
                        "content": "\n<MemberInfo kind=\"property\" type={`T`}   />\n\n\n"
                    },
                    {
                        "id": "state",
                        "title": "state",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/job-state#jobstate'>JobState</a>`}   />\n\n\n"
                    },
                    {
                        "id": "progress",
                        "title": "progress",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "result",
                        "title": "result",
                        "content": "\n<MemberInfo kind=\"property\" type={`any`}   />\n\n\n"
                    },
                    {
                        "id": "error",
                        "title": "error",
                        "content": "\n<MemberInfo kind=\"property\" type={`any`}   />\n\n\n"
                    },
                    {
                        "id": "issettled",
                        "title": "isSettled",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "startedat",
                        "title": "startedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | undefined`}   />\n\n\n"
                    },
                    {
                        "id": "settledat",
                        "title": "settledAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | undefined`}   />\n\n\n"
                    },
                    {
                        "id": "duration",
                        "title": "duration",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "attempts",
                        "title": "attempts",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/typescript-api/job-queue/types#jobconfig'>JobConfig</a>&#60;T&#62;) => Job`}   />\n\n\n"
                    },
                    {
                        "id": "start",
                        "title": "start",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\nCalling this signifies that the job work has started. This method should be\ncalled in the <a href='/reference/typescript-api/job-queue/job-queue-strategy#jobqueuestrategy'>JobQueueStrategy</a> `next()` method.\n"
                    },
                    {
                        "id": "setprogress",
                        "title": "setProgress",
                        "content": "\n<MemberInfo kind=\"method\" type={`(percent: number) => `}   />\n\nSets the progress (0 - 100) of the job.\n"
                    },
                    {
                        "id": "complete",
                        "title": "complete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(result?: any) => `}   />\n\nCalling this method signifies that the job succeeded. The result\nwill be stored in the `Job.result` property.\n"
                    },
                    {
                        "id": "fail",
                        "title": "fail",
                        "content": "\n<MemberInfo kind=\"method\" type={`(err?: any) => `}   />\n\nCalling this method signifies that the job failed.\n"
                    },
                    {
                        "id": "cancel",
                        "title": "cancel",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "defer",
                        "title": "defer",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\nSets a RUNNING job back to PENDING. Should be used when the JobQueue is being\ndestroyed before the job has been completed.\n"
                    },
                    {
                        "id": "on",
                        "title": "on",
                        "content": "\n<MemberInfo kind=\"method\" type={`(eventType: <a href='/reference/typescript-api/job-queue/job#jobeventtype'>JobEventType</a>, listener: <a href='/reference/typescript-api/job-queue/job#jobeventlistener'>JobEventListener</a>&#60;T&#62;) => `}   />\n\nUsed to register event handlers for job events\n"
                    },
                    {
                        "id": "off",
                        "title": "off",
                        "content": "\n<MemberInfo kind=\"method\" type={`(eventType: <a href='/reference/typescript-api/job-queue/job#jobeventtype'>JobEventType</a>, listener: <a href='/reference/typescript-api/job-queue/job#jobeventlistener'>JobEventListener</a>&#60;T&#62;) => `}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class Job<T extends JobData<T> = any> {",
                    "    readonly id: number | string | null;",
                    "    readonly queueName: string;",
                    "    readonly retries: number;",
                    "    readonly createdAt: Date;",
                    "    name: string",
                    "    data: T",
                    "    state: JobState",
                    "    progress: number",
                    "    result: any",
                    "    error: any",
                    "    isSettled: boolean",
                    "    startedAt: Date | undefined",
                    "    settledAt: Date | undefined",
                    "    duration: number",
                    "    attempts: number",
                    "    constructor(config: JobConfig<T>)",
                    "    start() => ;",
                    "    setProgress(percent: number) => ;",
                    "    complete(result?: any) => ;",
                    "    fail(err?: any) => ;",
                    "    cancel() => ;",
                    "    defer() => ;",
                    "    on(eventType: JobEventType, listener: JobEventListener<T>) => ;",
                    "    off(eventType: JobEventType, listener: JobEventListener<T>) => ;",
                    "}"
                ]
            },
            {
                "id": "jobeventtype",
                "title": "JobEventType",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/job.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />\n\nAn event raised by a Job.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type JobEventType = 'progress'"
                ]
            },
            {
                "id": "jobeventlistener",
                "title": "JobEventListener",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/job.ts\" sourceLine=\"24\" packageName=\"@vendure/core\" />\n\nThe signature of the event handler expected by the `Job.on()` method.\n\n\n",
                "subsections": [],
                "code": [
                    "type JobEventListener<T extends JobData<T>> = (job: Job<T>) => void"
                ]
            }
        ]
    },
    {
        "id": "jobbuffer",
        "metadata": {
            "title": "JobBuffer",
            "keywords": [
                "jobbuffer",
                "id",
                "collect",
                "reduce"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/job-queue/job-buffer/job-buffer.ts\" sourceLine=\"83\" packageName=\"@vendure/core\" since=\"1.3.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "jobbuffer",
                "title": "JobBuffer",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/job-buffer/job-buffer.ts\" sourceLine=\"83\" packageName=\"@vendure/core\" since=\"1.3.0\" />\n\nA JobBuffer is used to temporarily prevent jobs from being sent to the job queue for processing.\nInstead, it collects certain jobs (as specified by the `collect()` method), and stores them.\n\nHow these buffered jobs are stored is determined by the configured <a href='/reference/typescript-api/job-queue/job-buffer-storage-strategy#jobbufferstoragestrategy'>JobBufferStorageStrategy</a>.\n\nThe JobBuffer can be thought of as a kind of \"interceptor\" of jobs. That is, when a JobBuffer is active,\nit sits in between calls to `JobQueue.add()` and the actual adding of the job to the queue.\n\nAt some later point, the buffer can be flushed (by calling `JobQueue.flush()`), at which point all the jobs\nthat were collected into the buffer will be removed from the buffer and passed to the `JobBuffer.reduce()` method.\nThis method is able to perform additional logic to e.g. aggregate many jobs into a single job in order to de-duplicate\nwork.\n\n*Example*\n\n\nA JobBuffer is used by adding it to the <a href='/reference/typescript-api/job-queue/job-queue-service#jobqueueservice'>JobQueueService</a>, at which point it will become active\nand start collecting jobs.\n\nAt some later point, the buffer can be flushed, causing the buffered jobs to be passed through the\n`reduce()` method and sent to the job queue.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "collect",
                        "title": "collect",
                        "content": "\n<MemberInfo kind=\"method\" type={`(job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;) => boolean | Promise&#60;boolean&#62;`}   />\n\nThis method is called whenever a job is added to the job queue. If it returns `true`, then\nthe job will be _buffered_ and _not_ added to the job queue. If it returns `false`, the job\nwill be added to the job queue as normal.\n"
                    },
                    {
                        "id": "reduce",
                        "title": "reduce",
                        "content": "\n<MemberInfo kind=\"method\" type={`(collectedJobs: Array&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;&#62;) => Array&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;&#62; | Promise&#60;Array&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;&#62;&#62;`}   />\n\nThis method is called whenever the buffer gets flushed via a call to `JobQueueService.flush()`.\nIt allows logic to be run on the buffered jobs which enables optimizations such as\naggregating and de-duplicating the work of many jobs into one job.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "// This is a buffer which will collect all the",
                    "// 'apply-collection-filters' jobs and buffer them.",
                    "export class CollectionJobBuffer implements JobBuffer<ApplyCollectionFiltersJobData> {",
                    "  readonly id = 'apply-collection-filters-buffer';",
                    "",
                    "  collect(job: Job): boolean {",
                    "    return job.queueName === 'apply-collection-filters';",
                    "  }",
                    "",
                    "",
                    "  // When the buffer gets flushed, this function will be passed all the collected jobs",
                    "  // and will reduce them down to a single job that has aggregated all of the collectionIds.",
                    "  reduce(collectedJobs: Array<Job<ApplyCollectionFiltersJobData>>): Array<Job<any>> {",
                    "    // Concatenate all the collectionIds from all the events that were buffered",
                    "    const collectionIdsToUpdate = collectedJobs.reduce((result, job) => {",
                    "      return [...result, ...job.data.collectionIds];",
                    "    }, [] as ID[]);",
                    "",
                    "    const referenceJob = collectedJobs[0];",
                    "",
                    "    // Create a new Job containing all the concatenated collectionIds,",
                    "    // de-duplicated to include each collectionId only once.",
                    "    const batchedCollectionJob = new Job<ApplyCollectionFiltersJobData>({",
                    "      ...referenceJob,",
                    "      id: undefined,",
                    "      data: {",
                    "        collectionIds: unique(collectionIdsToUpdate),",
                    "        ctx: referenceJob.data.ctx,",
                    "        applyToChangedVariantsOnly: referenceJob.data.applyToChangedVariantsOnly,",
                    "      },",
                    "    });",
                    "",
                    "    // Only this single job will get added to the job queue",
                    "    return [batchedCollectionJob];",
                    "  }",
                    "}",
                    "const collectionBuffer = new CollectionJobBuffer();",
                    "",
                    "await this.jobQueueService.addBuffer(collectionBuffer);",
                    "",
                    "// Here you can perform some work which would ordinarily",
                    "// trigger the 'apply-collection-filters' job, such as updating",
                    "// collection filters or changing ProductVariant prices.",
                    "",
                    "await this.jobQueueService.flush(collectionBuffer);",
                    "",
                    "await this.jobQueueService.removeBuffer(collectionBuffer);",
                    "interface JobBuffer<Data extends JobData<Data> = object> {",
                    "    readonly id: string;",
                    "    collect(job: Job<Data>): boolean | Promise<boolean>;",
                    "    reduce(collectedJobs: Array<Job<Data>>): Array<Job<Data>> | Promise<Array<Job<Data>>>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "jobbufferstoragestrategy",
        "metadata": {
            "title": "JobBufferStorageStrategy",
            "keywords": [
                "jobbufferstoragestrategy",
                "add",
                "buffersize",
                "flush"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/job-queue/job-buffer/job-buffer-storage-strategy.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" since=\"1.3.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "jobbufferstoragestrategy",
                "title": "JobBufferStorageStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/job-buffer/job-buffer-storage-strategy.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" since=\"1.3.0\" />\n\nThis strategy defines where to store jobs that have been collected by a\n<a href='/reference/typescript-api/job-queue/job-buffer#jobbuffer'>JobBuffer</a>.\n\n:::info\n\nThis is configured via the `jobQueueOptions.jobBufferStorageStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "add",
                        "title": "add",
                        "content": "\n<MemberInfo kind=\"method\" type={`(bufferId: string, job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#62;`}   />\n\nPersist a job to the storage medium. The storage format should\ntake into account the `bufferId` argument, as it is necessary to be\nable to later retrieve jobs by that id.\n"
                    },
                    {
                        "id": "buffersize",
                        "title": "bufferSize",
                        "content": "\n<MemberInfo kind=\"method\" type={`(bufferIds?: string[]) => Promise&#60;{ [bufferId: string]: number }&#62;`}   />\n\nReturns an object containing the number of buffered jobs arranged by bufferId.\n\nPassing bufferIds limits the results to the specified bufferIds.\nIf the array is empty, sizes will be returned for _all_ bufferIds.\n\n*Example*\n\n"
                    },
                    {
                        "id": "flush",
                        "title": "flush",
                        "content": "\n<MemberInfo kind=\"method\" type={`(bufferIds?: string[]) => Promise&#60;{ [bufferId: string]: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>[] }&#62;`}   />\n\nClears all jobs from the storage medium which match the specified bufferIds (if the\narray is empty, clear for _all_ bufferIds), and returns those jobs in an object\narranged by bufferId\n\n*Example*\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface JobBufferStorageStrategy extends InjectableStrategy {",
                    "    add(bufferId: string, job: Job): Promise<Job>;",
                    "    bufferSize(bufferIds?: string[]): Promise<{ [bufferId: string]: number }>;",
                    "    flush(bufferIds?: string[]): Promise<{ [bufferId: string]: Job[] }>;",
                    "}",
                    "const sizes = await myJobBufferStrategy.bufferSize(['buffer-1', 'buffer-2']);",
                    "",
                    "// sizes = { 'buffer-1': 12, 'buffer-2': 3 }",
                    "const result = await myJobBufferStrategy.flush(['buffer-1', 'buffer-2']);",
                    "",
                    "// result = {",
                    "//   'buffer-1': [Job, Job, Job, ...],",
                    "//   'buffer-2': [Job, Job, Job, ...],",
                    "// };"
                ]
            }
        ]
    },
    {
        "id": "jobqueue",
        "metadata": {
            "title": "JobQueue",
            "keywords": [
                "jobqueue",
                "name",
                "started",
                "constructor",
                "add"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/job-queue/job-queue.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "jobqueue",
                "title": "JobQueue",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/job-queue.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />\n\nA JobQueue is used to process <a href='/reference/typescript-api/job-queue/job#job'>Job</a>s. A job is added to the queue via the\n`.add()` method, and the configured <a href='/reference/typescript-api/job-queue/job-queue-strategy#jobqueuestrategy'>JobQueueStrategy</a> will check for new jobs and process each\naccording to the defined `process` function.\n\n*Note*: JobQueue instances should not be directly instantiated. Rather, the\n<a href='/reference/typescript-api/job-queue/job-queue-service#jobqueueservice'>JobQueueService</a> `createQueue()` method should be used (see that service\nfor example usage).\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "started",
                        "title": "started",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/typescript-api/job-queue/types#createqueueoptions'>CreateQueueOptions</a>&#60;Data&#62;, jobQueueStrategy: <a href='/reference/typescript-api/job-queue/job-queue-strategy#jobqueuestrategy'>JobQueueStrategy</a>, jobBufferService: JobBufferService) => JobQueue`}   />\n\n\n"
                    },
                    {
                        "id": "add",
                        "title": "add",
                        "content": "\n<MemberInfo kind=\"method\" type={`(data: Data, options?: Pick&#60;<a href='/reference/typescript-api/job-queue/types#jobconfig'>JobConfig</a>&#60;Data&#62;, 'retries'&#62;) => Promise&#60;<a href='/reference/typescript-api/job-queue/subscribable-job#subscribablejob'>SubscribableJob</a>&#60;Data&#62;&#62;`}   />\n\nAdds a new <a href='/reference/typescript-api/job-queue/job#job'>Job</a> to the queue. The resolved <a href='/reference/typescript-api/job-queue/subscribable-job#subscribablejob'>SubscribableJob</a> allows the\ncalling code to subscribe to updates to the Job:\n\n*Example*\n\n\nAlternatively, if you aren't interested in the intermediate\n`progress` changes, you can convert to a Promise like this:\n\n*Example*\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class JobQueue<Data extends JobData<Data> = object> {",
                    "    name: string",
                    "    started: boolean",
                    "    constructor(options: CreateQueueOptions<Data>, jobQueueStrategy: JobQueueStrategy, jobBufferService: JobBufferService)",
                    "    add(data: Data, options?: Pick<JobConfig<Data>, 'retries'>) => Promise<SubscribableJob<Data>>;",
                    "}",
                    "const job = await this.myQueue.add({ intervalMs, shouldFail }, { retries: 2 });",
                    "return job.updates().pipe(",
                    "  map(update => {",
                    "    // The returned Observable will emit a value for every update to the job",
                    "    // such as when the `progress` or `status` value changes.",
                    "    Logger.info(`Job ${update.id}: progress: ${update.progress}`);",
                    "    if (update.state === JobState.COMPLETED) {",
                    "      Logger.info(`COMPLETED ${update.id}: ${update.result}`);",
                    "    }",
                    "    return update.result;",
                    "  }),",
                    "  catchError(err => of(err.message)),",
                    ");",
                    "const job = await this.myQueue.add({ intervalMs, shouldFail }, { retries: 2 });",
                    "return job.updates().toPromise()",
                    "  .then(update => update.result),",
                    "  .catch(err => err.message);"
                ]
            }
        ]
    },
    {
        "id": "jobqueueoptions",
        "metadata": {
            "title": "JobQueueOptions",
            "keywords": [
                "jobqueueoptions",
                "jobqueuestrategy",
                "jobbufferstoragestrategy",
                "activequeues",
                "prefix"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"873\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "jobqueueoptions",
                "title": "JobQueueOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"873\" packageName=\"@vendure/core\" />\n\nOptions related to the built-in job queue.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "jobqueuestrategy",
                        "title": "jobQueueStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/job-queue/job-queue-strategy#jobqueuestrategy'>JobQueueStrategy</a>`} default=\"<a href='/reference/typescript-api/job-queue/in-memory-job-queue-strategy#inmemoryjobqueuestrategy'>InMemoryJobQueueStrategy</a>\"   />\n\nDefines how the jobs in the queue are persisted and accessed.\n"
                    },
                    {
                        "id": "jobbufferstoragestrategy",
                        "title": "jobBufferStorageStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/job-queue/job-buffer-storage-strategy#jobbufferstoragestrategy'>JobBufferStorageStrategy</a>`}   />\n\n\n"
                    },
                    {
                        "id": "activequeues",
                        "title": "activeQueues",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`}   />\n\nDefines the queues that will run in this process.\nThis can be used to configure only certain queues to run in this process.\nIf its empty all queues will be run. Note: this option is primarily intended\nto apply to the Worker process. Jobs will _always_ get published to the queue\nregardless of this setting, but this setting determines whether they get\n_processed_ or not.\n"
                    },
                    {
                        "id": "prefix",
                        "title": "prefix",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}  since=\"1.5.0\"  />\n\nPrefixes all job queue names with the passed string. This is useful with multiple deployments\nin cloud environments using services such as Amazon SQS or Google Cloud Tasks.\n\nFor example, we might have a staging and a production deployment in the same account/project and\neach one will need its own task queue. We can achieve this with a prefix.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface JobQueueOptions {",
                    "    jobQueueStrategy?: JobQueueStrategy;",
                    "    jobBufferStorageStrategy?: JobBufferStorageStrategy;",
                    "    activeQueues?: string[];",
                    "    prefix?: string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "jobqueueservice",
        "metadata": {
            "title": "JobQueueService",
            "keywords": [
                "jobqueueservice",
                "constructor",
                "createqueue",
                "start",
                "addbuffer",
                "removebuffer",
                "buffersize",
                "flush",
                "getjobqueues"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/job-queue/job-queue.service.ts\" sourceLine=\"48\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "jobqueueservice",
                "title": "JobQueueService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/job-queue.service.ts\" sourceLine=\"48\" packageName=\"@vendure/core\" />\n\nThe JobQueueService is used to create new <a href='/reference/typescript-api/job-queue/#jobqueue'>JobQueue</a> instances and access\nexisting jobs.\n\n*Example*\n\n\n* Implements: <code>OnModuleDestroy</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(configService: ConfigService, jobBufferService: JobBufferService) => JobQueueService`}   />\n\n\n"
                    },
                    {
                        "id": "createqueue",
                        "title": "createQueue",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/typescript-api/job-queue/types#createqueueoptions'>CreateQueueOptions</a>&#60;Data&#62;) => Promise&#60;<a href='/reference/typescript-api/job-queue/#jobqueue'>JobQueue</a>&#60;Data&#62;&#62;`}   />\n\nConfigures and creates a new <a href='/reference/typescript-api/job-queue/#jobqueue'>JobQueue</a> instance.\n"
                    },
                    {
                        "id": "start",
                        "title": "start",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => Promise&#60;void&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "addbuffer",
                        "title": "addBuffer",
                        "content": "\n<MemberInfo kind=\"method\" type={`(buffer: <a href='/reference/typescript-api/job-queue/job-buffer#jobbuffer'>JobBuffer</a>&#60;any&#62;) => `}  since=\"1.3.0\"  />\n\nAdds a <a href='/reference/typescript-api/job-queue/job-buffer#jobbuffer'>JobBuffer</a>, which will make it active and begin collecting\njobs to buffer.\n"
                    },
                    {
                        "id": "removebuffer",
                        "title": "removeBuffer",
                        "content": "\n<MemberInfo kind=\"method\" type={`(buffer: <a href='/reference/typescript-api/job-queue/job-buffer#jobbuffer'>JobBuffer</a>&#60;any&#62;) => `}  since=\"1.3.0\"  />\n\nRemoves a <a href='/reference/typescript-api/job-queue/job-buffer#jobbuffer'>JobBuffer</a>, prevent it from collecting and buffering any\nsubsequent jobs.\n"
                    },
                    {
                        "id": "buffersize",
                        "title": "bufferSize",
                        "content": "\n<MemberInfo kind=\"method\" type={`(forBuffers: Array&#60;<a href='/reference/typescript-api/job-queue/job-buffer#jobbuffer'>JobBuffer</a>&#60;any&#62; | string&#62;) => Promise&#60;{ [bufferId: string]: number }&#62;`}  since=\"1.3.0\"  />\n\nReturns an object containing the number of buffered jobs arranged by bufferId. This\ncan be used to decide whether a particular buffer has any jobs to flush.\n\nPassing in JobBuffer instances _or_ ids limits the results to the specified JobBuffers.\nIf no argument is passed, sizes will be returned for _all_ JobBuffers.\n\n*Example*\n\n"
                    },
                    {
                        "id": "flush",
                        "title": "flush",
                        "content": "\n<MemberInfo kind=\"method\" type={`(forBuffers: Array&#60;<a href='/reference/typescript-api/job-queue/job-buffer#jobbuffer'>JobBuffer</a>&#60;any&#62; | string&#62;) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>[]&#62;`}  since=\"1.3.0\"  />\n\nFlushes the specified buffers, which means that the buffer is cleared and the jobs get\nsent to the job queue for processing. Before sending the jobs to the job queue,\nthey will be passed through each JobBuffer's `reduce()` method, which is can be used\nto optimize the amount of work to be done by e.g. de-duplicating identical jobs or\naggregating data over the collected jobs.\n\nPassing in JobBuffer instances _or_ ids limits the action to the specified JobBuffers.\nIf no argument is passed, _all_ JobBuffers will be flushed.\n\nReturns an array of all Jobs which were added to the job queue.\n"
                    },
                    {
                        "id": "getjobqueues",
                        "title": "getJobQueues",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => GraphQlJobQueue[]`}   />\n\nReturns an array of `{ name: string; running: boolean; }` for each\nregistered JobQueue.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "// A service which transcodes video files",
                    "class VideoTranscoderService {",
                    "",
                    "  private jobQueue: JobQueue<{ videoId: string; }>;",
                    "",
                    "  async onModuleInit() {",
                    "    // The JobQueue is created on initialization",
                    "    this.jobQueue = await this.jobQueueService.createQueue({",
                    "      name: 'transcode-video',",
                    "      process: async job => {",
                    "        return await this.transcodeVideo(job.data.videoId);",
                    "      },",
                    "    });",
                    "  }",
                    "",
                    "  addToTranscodeQueue(videoId: string) {",
                    "    this.jobQueue.add({ videoId, })",
                    "  }",
                    "",
                    "  private async transcodeVideo(videoId: string) {",
                    "    // e.g. call some external transcoding service",
                    "  }",
                    "",
                    "}",
                    "class JobQueueService implements OnModuleDestroy {",
                    "    constructor(configService: ConfigService, jobBufferService: JobBufferService)",
                    "    createQueue(options: CreateQueueOptions<Data>) => Promise<JobQueue<Data>>;",
                    "    start() => Promise<void>;",
                    "    addBuffer(buffer: JobBuffer<any>) => ;",
                    "    removeBuffer(buffer: JobBuffer<any>) => ;",
                    "    bufferSize(forBuffers: Array<JobBuffer<any> | string>) => Promise<{ [bufferId: string]: number }>;",
                    "    flush(forBuffers: Array<JobBuffer<any> | string>) => Promise<Job[]>;",
                    "    getJobQueues() => GraphQlJobQueue[];",
                    "}",
                    "const sizes = await this.jobQueueService.bufferSize('buffer-1', 'buffer-2');",
                    "",
                    "// sizes = { 'buffer-1': 12, 'buffer-2': 3 }"
                ]
            }
        ]
    },
    {
        "id": "jobqueuestrategy",
        "metadata": {
            "title": "JobQueueStrategy",
            "keywords": [
                "jobqueuestrategy",
                "add",
                "start",
                "stop"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/job-queue/job-queue-strategy.ts\" sourceLine=\"23\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "jobqueuestrategy",
                "title": "JobQueueStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/job-queue/job-queue-strategy.ts\" sourceLine=\"23\" packageName=\"@vendure/core\" />\n\nDefines how the jobs in the <a href='/reference/typescript-api/job-queue/job-queue-service#jobqueueservice'>JobQueueService</a> are persisted and\naccessed. Custom strategies can be defined to make use of external\nservices such as Redis.\n\n:::info\n\nThis is configured via the `jobQueueOptions.jobQueueStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "add",
                        "title": "add",
                        "content": "\n<MemberInfo kind=\"method\" type={`(job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;&#62;`}   />\n\nAdd a new job to the queue.\n"
                    },
                    {
                        "id": "start",
                        "title": "start",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queueName: string, process: (job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;) =&#62; Promise&#60;any&#62;) => Promise&#60;void&#62;`}   />\n\nStart the job queue\n"
                    },
                    {
                        "id": "stop",
                        "title": "stop",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queueName: string, process: (job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;) =&#62; Promise&#60;any&#62;) => Promise&#60;void&#62;`}   />\n\nStops a queue from running. Its not guaranteed to stop immediately.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface JobQueueStrategy extends InjectableStrategy {",
                    "    add<Data extends JobData<Data> = object>(job: Job<Data>): Promise<Job<Data>>;",
                    "    start<Data extends JobData<Data> = object>(",
                    "        queueName: string,",
                    "        process: (job: Job<Data>) => Promise<any>,",
                    "    ): Promise<void>;",
                    "    stop<Data extends JobData<Data> = object>(",
                    "        queueName: string,",
                    "        process: (job: Job<Data>) => Promise<any>,",
                    "    ): Promise<void>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "jobstate",
        "metadata": {
            "title": "JobState",
            "keywords": [
                "jobstate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/generated-types.ts\" sourceLine=\"2085\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "jobstate",
                "title": "JobState",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/generated-types.ts\" sourceLine=\"2085\" packageName=\"@vendure/common\" />\n\nThe state of a Job in the JobQueue\n\n\n",
                "subsections": [],
                "code": [
                    "enum JobState {",
                    "    CANCELLED = 'CANCELLED'",
                    "    COMPLETED = 'COMPLETED'",
                    "    FAILED = 'FAILED'",
                    "    PENDING = 'PENDING'",
                    "    RETRYING = 'RETRYING'",
                    "    RUNNING = 'RUNNING'",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "jsoncompatible",
        "metadata": {
            "title": "JsonCompatible",
            "keywords": [
                "jsoncompatible"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"51\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "jsoncompatible",
                "title": "JsonCompatible",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"51\" packageName=\"@vendure/common\" />\n\nA type representing JSON-compatible values.\nFrom https://github.com/microsoft/TypeScript/issues/1897#issuecomment-580962081\n\n\n",
                "subsections": [],
                "code": [
                    "type JsonCompatible<T> = {",
                    "    [P in keyof T]: T[P] extends Json",
                    "        ? T[P]",
                    "        : Pick<T, P> extends Required<Pick<T, P>>",
                    "        ? never",
                    "        : JsonCompatible<T[P]>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "languagecode",
        "metadata": {
            "title": "LanguageCode",
            "keywords": [
                "languagecode"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/generated-types.ts\" sourceLine=\"2103\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "languagecode",
                "title": "LanguageCode",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/generated-types.ts\" sourceLine=\"2103\" packageName=\"@vendure/common\" />\n\nLanguages in the form of a ISO 639-1 language code with optional\nregion or script modifier (e.g. de_AT). The selection available is based\non the [Unicode CLDR summary list](https://unicode-org.github.io/cldr-staging/charts/37/summary/root.html)\nand includes the major spoken languages of the world and any widely-used variants.\n\n\n",
                "subsections": [],
                "code": [
                    "enum LanguageCode {",
                    "    af = 'af'",
                    "    ak = 'ak'",
                    "    am = 'am'",
                    "    ar = 'ar'",
                    "    as = 'as'",
                    "    az = 'az'",
                    "    be = 'be'",
                    "    bg = 'bg'",
                    "    bm = 'bm'",
                    "    bn = 'bn'",
                    "    bo = 'bo'",
                    "    br = 'br'",
                    "    bs = 'bs'",
                    "    ca = 'ca'",
                    "    ce = 'ce'",
                    "    co = 'co'",
                    "    cs = 'cs'",
                    "    cu = 'cu'",
                    "    cy = 'cy'",
                    "    da = 'da'",
                    "    de = 'de'",
                    "    de_AT = 'de_AT'",
                    "    de_CH = 'de_CH'",
                    "    dz = 'dz'",
                    "    ee = 'ee'",
                    "    el = 'el'",
                    "    en = 'en'",
                    "    en_AU = 'en_AU'",
                    "    en_CA = 'en_CA'",
                    "    en_GB = 'en_GB'",
                    "    en_US = 'en_US'",
                    "    eo = 'eo'",
                    "    es = 'es'",
                    "    es_ES = 'es_ES'",
                    "    es_MX = 'es_MX'",
                    "    et = 'et'",
                    "    eu = 'eu'",
                    "    fa = 'fa'",
                    "    fa_AF = 'fa_AF'",
                    "    ff = 'ff'",
                    "    fi = 'fi'",
                    "    fo = 'fo'",
                    "    fr = 'fr'",
                    "    fr_CA = 'fr_CA'",
                    "    fr_CH = 'fr_CH'",
                    "    fy = 'fy'",
                    "    ga = 'ga'",
                    "    gd = 'gd'",
                    "    gl = 'gl'",
                    "    gu = 'gu'",
                    "    gv = 'gv'",
                    "    ha = 'ha'",
                    "    he = 'he'",
                    "    hi = 'hi'",
                    "    hr = 'hr'",
                    "    ht = 'ht'",
                    "    hu = 'hu'",
                    "    hy = 'hy'",
                    "    ia = 'ia'",
                    "    id = 'id'",
                    "    ig = 'ig'",
                    "    ii = 'ii'",
                    "    is = 'is'",
                    "    it = 'it'",
                    "    ja = 'ja'",
                    "    jv = 'jv'",
                    "    ka = 'ka'",
                    "    ki = 'ki'",
                    "    kk = 'kk'",
                    "    kl = 'kl'",
                    "    km = 'km'",
                    "    kn = 'kn'",
                    "    ko = 'ko'",
                    "    ks = 'ks'",
                    "    ku = 'ku'",
                    "    kw = 'kw'",
                    "    ky = 'ky'",
                    "    la = 'la'",
                    "    lb = 'lb'",
                    "    lg = 'lg'",
                    "    ln = 'ln'",
                    "    lo = 'lo'",
                    "    lt = 'lt'",
                    "    lu = 'lu'",
                    "    lv = 'lv'",
                    "    mg = 'mg'",
                    "    mi = 'mi'",
                    "    mk = 'mk'",
                    "    ml = 'ml'",
                    "    mn = 'mn'",
                    "    mr = 'mr'",
                    "    ms = 'ms'",
                    "    mt = 'mt'",
                    "    my = 'my'",
                    "    nb = 'nb'",
                    "    nd = 'nd'",
                    "    ne = 'ne'",
                    "    nl = 'nl'",
                    "    nl_BE = 'nl_BE'",
                    "    nn = 'nn'",
                    "    ny = 'ny'",
                    "    om = 'om'",
                    "    or = 'or'",
                    "    os = 'os'",
                    "    pa = 'pa'",
                    "    pl = 'pl'",
                    "    ps = 'ps'",
                    "    pt = 'pt'",
                    "    pt_BR = 'pt_BR'",
                    "    pt_PT = 'pt_PT'",
                    "    qu = 'qu'",
                    "    rm = 'rm'",
                    "    rn = 'rn'",
                    "    ro = 'ro'",
                    "    ro_MD = 'ro_MD'",
                    "    ru = 'ru'",
                    "    rw = 'rw'",
                    "    sa = 'sa'",
                    "    sd = 'sd'",
                    "    se = 'se'",
                    "    sg = 'sg'",
                    "    si = 'si'",
                    "    sk = 'sk'",
                    "    sl = 'sl'",
                    "    sm = 'sm'",
                    "    sn = 'sn'",
                    "    so = 'so'",
                    "    sq = 'sq'",
                    "    sr = 'sr'",
                    "    st = 'st'",
                    "    su = 'su'",
                    "    sv = 'sv'",
                    "    sw = 'sw'",
                    "    sw_CD = 'sw_CD'",
                    "    ta = 'ta'",
                    "    te = 'te'",
                    "    tg = 'tg'",
                    "    th = 'th'",
                    "    ti = 'ti'",
                    "    tk = 'tk'",
                    "    to = 'to'",
                    "    tr = 'tr'",
                    "    tt = 'tt'",
                    "    ug = 'ug'",
                    "    uk = 'uk'",
                    "    ur = 'ur'",
                    "    uz = 'uz'",
                    "    vi = 'vi'",
                    "    vo = 'vo'",
                    "    wo = 'wo'",
                    "    xh = 'xh'",
                    "    yi = 'yi'",
                    "    yo = 'yo'",
                    "    zh = 'zh'",
                    "    zh_Hans = 'zh_Hans'",
                    "    zh_Hant = 'zh_Hant'",
                    "    zu = 'zu'",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "link",
        "metadata": {
            "title": "Link",
            "keywords": [
                "link",
                "props"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/Link.tsx\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "link",
                "title": "Link",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/Link.tsx\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />\n\nA React component which renders an anchor tag and navigates to the specified route when clicked.\nThis is useful when you want to use a React component in a Vendure UI plugin which navigates to\na route in the admin-ui.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "props",
                        "title": "props",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`PropsWithChildren&#60;{ href: string; [props: string]: any }&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { Link } from '@vendure/admin-ui/react';",
                    "",
                    "export const MyReactComponent = () => {",
                    "    return <Link href=\"/extensions/my-extension\">Go to my extension</Link>;",
                    "}",
                    "function Link(props: PropsWithChildren<{ href: string; [props: string]: any }>): void"
                ]
            }
        ]
    },
    {
        "id": "list-detail-views",
        "metadata": {
            "title": "List Detail Views",
            "keywords": [
                "list-detail-views"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "listquerybuilder",
        "metadata": {
            "title": "ListQueryBuilder",
            "keywords": [
                "listquerybuilder",
                "generated at run-time by vendure",
                "constructor",
                "build",
                "extendedlistqueryoptions",
                "relations",
                "channelid",
                "where",
                "orderby",
                "entityalias",
                "ctx",
                "custompropertymap",
                "ignorequerylimits"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/list-query-builder/list-query-builder.ts\" sourceLine=\"199\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "listquerybuilder",
                "title": "ListQueryBuilder",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/list-query-builder/list-query-builder.ts\" sourceLine=\"199\" packageName=\"@vendure/core\" />\n\nThis helper class is used when fetching entities the database from queries which return a <a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a> type.\nThese queries all follow the same format:\n\nIn the GraphQL definition, they return a type which implements the `Node` interface, and the query returns a\ntype which implements the `PaginatedList` interface:\n\nWhen Vendure bootstraps, it will find the `BlogPostListOptions` input and, because it is used in a query\nreturning a `PaginatedList` type, it knows that it should dynamically generate this input. This means\nall primitive field of the `BlogPost` type (namely, \"published\", \"title\" and \"body\") will have `filter` and\n`sort` inputs created for them, as well a `skip` and `take` fields for pagination.\n\nYour resolver function will then look like this:\n\n\nand the corresponding service will use the ListQueryBuilder:\n\n\n* Implements: <code>OnApplicationBootstrap</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService) => ListQueryBuilder`}   />\n\n\n"
                    },
                    {
                        "id": "build",
                        "title": "build",
                        "content": "\n<MemberInfo kind=\"method\" type={`(entity: Type&#60;T&#62;, options: ListQueryOptions&#60;T&#62; = {}, extendedOptions: <a href='/reference/typescript-api/data-access/list-query-builder#extendedlistqueryoptions'>ExtendedListQueryOptions</a>&#60;T&#62; = {}) => SelectQueryBuilder&#60;T&#62;`}   />\n\nCreates and configures a SelectQueryBuilder for queries that return paginated lists of entities.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "type BlogPost implements Node {",
                    "  id: ID!",
                    "  published: DateTime!",
                    "  title: String!",
                    "  body: String!",
                    "}",
                    "",
                    "type BlogPostList implements PaginatedList {",
                    "  items: [BlogPost!]!",
                    "  totalItems: Int!",
                    "}",
                    "",
                    "# Generated at run-time by Vendure",
                    "input BlogPostListOptions",
                    "",
                    "extend type Query {",
                    "   blogPosts(options: BlogPostListOptions): BlogPostList!",
                    "}",
                    "@Resolver()",
                    "export class BlogPostResolver",
                    "  constructor(private blogPostService: BlogPostService) {}",
                    "",
                    "  @Query()",
                    "  async blogPosts(",
                    "    @Ctx() ctx: RequestContext,",
                    "    @Args() args: any,",
                    "  ): Promise<PaginatedList<BlogPost>> {",
                    "    return this.blogPostService.findAll(ctx, args.options || undefined);",
                    "  }",
                    "}",
                    "@Injectable()",
                    "export class BlogPostService {",
                    "  constructor(private listQueryBuilder: ListQueryBuilder) {}",
                    "",
                    "  findAll(ctx: RequestContext, options?: ListQueryOptions<BlogPost>) {",
                    "    return this.listQueryBuilder",
                    "      .build(BlogPost, options)",
                    "      .getManyAndCount()",
                    "      .then(async ([items, totalItems]) => {",
                    "        return { items, totalItems };",
                    "      });",
                    "  }",
                    "}",
                    "class ListQueryBuilder implements OnApplicationBootstrap {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService)",
                    "    build(entity: Type<T>, options: ListQueryOptions<T> = {}, extendedOptions: ExtendedListQueryOptions<T> = {}) => SelectQueryBuilder<T>;",
                    "}"
                ]
            },
            {
                "id": "extendedlistqueryoptions",
                "title": "ExtendedListQueryOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/list-query-builder/list-query-builder.ts\" sourceLine=\"40\" packageName=\"@vendure/core\" />\n\nOptions which can be passed to the ListQueryBuilder's `build()` method.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "relations",
                        "title": "relations",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`}   />\n\n\n"
                    },
                    {
                        "id": "channelid",
                        "title": "channelId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "where",
                        "title": "where",
                        "content": "\n<MemberInfo kind=\"property\" type={`FindOptionsWhere&#60;T&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "orderby",
                        "title": "orderBy",
                        "content": "\n<MemberInfo kind=\"property\" type={`FindOneOptions&#60;T&#62;['order']`}   />\n\n\n"
                    },
                    {
                        "id": "entityalias",
                        "title": "entityAlias",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}  since=\"1.6.0\"  />\n\nAllows you to specify the alias used for the entity `T` in the generated SQL query.\nDefaults to the entity class name lower-cased, i.e. `ProductVariant` -> `'productvariant'`.\n"
                    },
                    {
                        "id": "ctx",
                        "title": "ctx",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>`}   />\n\nWhen a RequestContext is passed, then the query will be\nexecuted as part of any outer transaction.\n"
                    },
                    {
                        "id": "custompropertymap",
                        "title": "customPropertyMap",
                        "content": "\n<MemberInfo kind=\"property\" type={`{ [name: string]: string }`}   />\n\nOne of the main tasks of the ListQueryBuilder is to auto-generate filter and sort queries based on the\navailable columns of a given entity. However, it may also be sometimes desirable to allow filter/sort\non a property of a relation. In this case, the `customPropertyMap` can be used to define a property\nof the `options.sort` or `options.filter` which does not correspond to a direct column of the current\nentity, and then provide a mapping to the related property to be sorted/filtered.\n\nExample: we want to allow sort/filter by and Order's `customerLastName`. The actual lastName property is\nnot a column in the Order table, it exists on the Customer entity, and Order has a relation to Customer via\n`Order.customer`. Therefore, we can define a customPropertyMap like this:\n\n*Example*\n\n\n*Example*\n\nWe can now use the `customerLastName` property to filter or sort\non the list query:\n\n*Example*\n\n"
                    },
                    {
                        "id": "ignorequerylimits",
                        "title": "ignoreQueryLimits",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"  since=\"2.0.2\"  />\n\nWhen set to `true`, the configured `shopListQueryLimit` and `adminListQueryLimit` values will be ignored,\nallowing unlimited results to be returned. Use caution when exposing an unlimited list query to the public,\nas it could become a vector for a denial of service attack if an attacker requests a very large list.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "type ExtendedListQueryOptions<T extends VendureEntity> = {",
                    "    relations?: string[];",
                    "    channelId?: ID;",
                    "    where?: FindOptionsWhere<T>;",
                    "    orderBy?: FindOneOptions<T>['order'];",
                    "    entityAlias?: string;",
                    "    ctx?: RequestContext;",
                    "    customPropertyMap?: { [name: string]: string };",
                    "    ignoreQueryLimits?: boolean;",
                    "}",
                    "\"\"\"",
                    "Manually extend the filter & sort inputs to include the new",
                    "field that we want to be able to use in building list queries.",
                    "\"\"\"",
                    "input OrderFilterParameter {",
                    "    customerLastName: StringOperators",
                    "}",
                    "",
                    "input OrderSortParameter {",
                    "    customerLastName: SortOrder",
                    "}",
                    "const qb = this.listQueryBuilder.build(Order, options, {",
                    "  relations: ['customer'],",
                    "  customPropertyMap: {",
                    "    // Tell TypeORM how to map that custom",
                    "    // sort/filter field to the property on a",
                    "    // related entity.",
                    "    customerLastName: 'customer.lastName',",
                    "  },",
                    "};",
                    "query {",
                    "  myOrderQuery(options: {",
                    "    filter: {",
                    "      customerLastName: { contains: \"sm\" }",
                    "    }",
                    "  }) {",
                    "    # ...",
                    "  }",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "localassetstoragestrategy",
        "metadata": {
            "title": "LocalAssetStorageStrategy",
            "keywords": [
                "localassetstoragestrategy",
                "toabsoluteurl",
                "constructor",
                "writefilefromstream",
                "writefilefrombuffer",
                "fileexists",
                "readfiletobuffer",
                "readfiletostream",
                "deletefile"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/asset-server-plugin/src/local-asset-storage-strategy.ts\" sourceLine=\"15\" packageName=\"@vendure/asset-server-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "localassetstoragestrategy",
                "title": "LocalAssetStorageStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/asset-server-plugin/src/local-asset-storage-strategy.ts\" sourceLine=\"15\" packageName=\"@vendure/asset-server-plugin\" />\n\nA persistence strategy which saves files to the local file system.\n\n* Implements: <code><a href='/reference/typescript-api/assets/asset-storage-strategy#assetstoragestrategy'>AssetStorageStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "toabsoluteurl",
                        "title": "toAbsoluteUrl",
                        "content": "\n<MemberInfo kind=\"property\" type={`((reqest: Request, identifier: string) =&#62; string) | undefined`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(uploadPath: string, toAbsoluteUrlFn?: (reqest: Request, identifier: string) =&#62; string) => LocalAssetStorageStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "writefilefromstream",
                        "title": "writeFileFromStream",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fileName: string, data: ReadStream) => Promise&#60;string&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "writefilefrombuffer",
                        "title": "writeFileFromBuffer",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fileName: string, data: Buffer) => Promise&#60;string&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "fileexists",
                        "title": "fileExists",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fileName: string) => Promise&#60;boolean&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "readfiletobuffer",
                        "title": "readFileToBuffer",
                        "content": "\n<MemberInfo kind=\"method\" type={`(identifier: string) => Promise&#60;Buffer&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "readfiletostream",
                        "title": "readFileToStream",
                        "content": "\n<MemberInfo kind=\"method\" type={`(identifier: string) => Promise&#60;Stream&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "deletefile",
                        "title": "deleteFile",
                        "content": "\n<MemberInfo kind=\"method\" type={`(identifier: string) => Promise&#60;void&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class LocalAssetStorageStrategy implements AssetStorageStrategy {",
                    "    toAbsoluteUrl: ((reqest: Request, identifier: string) => string) | undefined;",
                    "    constructor(uploadPath: string, toAbsoluteUrlFn?: (reqest: Request, identifier: string) => string)",
                    "    writeFileFromStream(fileName: string, data: ReadStream) => Promise<string>;",
                    "    writeFileFromBuffer(fileName: string, data: Buffer) => Promise<string>;",
                    "    fileExists(fileName: string) => Promise<boolean>;",
                    "    readFileToBuffer(identifier: string) => Promise<Buffer>;",
                    "    readFileToStream(identifier: string) => Promise<Stream>;",
                    "    deleteFile(identifier: string) => Promise<void>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "localecurrencynamepipe",
        "metadata": {
            "title": "LocaleCurrencyNamePipe",
            "keywords": [
                "localecurrencynamepipe",
                "constructor",
                "transform"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/locale-currency-name.pipe.ts\" sourceLine=\"18\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "localecurrencynamepipe",
                "title": "LocaleCurrencyNamePipe",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/locale-currency-name.pipe.ts\" sourceLine=\"18\" packageName=\"@vendure/admin-ui\" />\n\nDisplays a human-readable name for a given ISO 4217 currency code.\n\n*Example*\n\n\n* Extends: <code>LocaleBasePipe</code>\n\n\n* Implements: <code>PipeTransform</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService?: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>, changeDetectorRef?: ChangeDetectorRef) => LocaleCurrencyNamePipe`}   />\n\n\n"
                    },
                    {
                        "id": "transform",
                        "title": "transform",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: any, display: 'full' | 'symbol' | 'name' = 'full', locale?: unknown) => any`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "{{ order.currencyCode | localeCurrencyName }}",
                    "class LocaleCurrencyNamePipe extends LocaleBasePipe implements PipeTransform {",
                    "    constructor(dataService?: DataService, changeDetectorRef?: ChangeDetectorRef)",
                    "    transform(value: any, display: 'full' | 'symbol' | 'name' = 'full', locale?: unknown) => any;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "localecurrencypipe",
        "metadata": {
            "title": "LocaleCurrencyPipe",
            "keywords": [
                "localecurrencypipe",
                "constructor",
                "transform"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/locale-currency.pipe.ts\" sourceLine=\"19\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "localecurrencypipe",
                "title": "LocaleCurrencyPipe",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/locale-currency.pipe.ts\" sourceLine=\"19\" packageName=\"@vendure/admin-ui\" />\n\nFormats a Vendure monetary value (in cents) into the correct format for the configured currency and display\nlocale.\n\n*Example*\n\n\n* Extends: <code>LocaleBasePipe</code>\n\n\n* Implements: <code>PipeTransform</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService?: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>, changeDetectorRef?: ChangeDetectorRef) => LocaleCurrencyPipe`}   />\n\n\n"
                    },
                    {
                        "id": "transform",
                        "title": "transform",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: unknown, args: unknown[]) => string | unknown`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "{{ variant.priceWithTax | localeCurrency }}",
                    "class LocaleCurrencyPipe extends LocaleBasePipe implements PipeTransform {",
                    "    constructor(dataService?: DataService, changeDetectorRef?: ChangeDetectorRef)",
                    "    transform(value: unknown, args: unknown[]) => string | unknown;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "localedatepipe",
        "metadata": {
            "title": "LocaleDatePipe",
            "keywords": [
                "localedatepipe",
                "constructor",
                "transform"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/locale-date.pipe.ts\" sourceLine=\"19\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "localedatepipe",
                "title": "LocaleDatePipe",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/locale-date.pipe.ts\" sourceLine=\"19\" packageName=\"@vendure/admin-ui\" />\n\nA replacement of the Angular DatePipe which makes use of the Intl API\nto format dates according to the selected UI language.\n\n*Example*\n\n\n* Extends: <code>LocaleBasePipe</code>\n\n\n* Implements: <code>PipeTransform</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService?: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>, changeDetectorRef?: ChangeDetectorRef) => LocaleDatePipe`}   />\n\n\n"
                    },
                    {
                        "id": "transform",
                        "title": "transform",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: unknown, args: unknown[]) => unknown`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "{{ order.orderPlacedAt | localeDate }}",
                    "class LocaleDatePipe extends LocaleBasePipe implements PipeTransform {",
                    "    constructor(dataService?: DataService, changeDetectorRef?: ChangeDetectorRef)",
                    "    transform(value: unknown, args: unknown[]) => unknown;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "localelanguagenamepipe",
        "metadata": {
            "title": "LocaleLanguageNamePipe",
            "keywords": [
                "localelanguagenamepipe",
                "constructor",
                "transform"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/locale-language-name.pipe.ts\" sourceLine=\"18\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "localelanguagenamepipe",
                "title": "LocaleLanguageNamePipe",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/locale-language-name.pipe.ts\" sourceLine=\"18\" packageName=\"@vendure/admin-ui\" />\n\nDisplays a human-readable name for a given ISO 639-1 language code.\n\n*Example*\n\n\n* Extends: <code>LocaleBasePipe</code>\n\n\n* Implements: <code>PipeTransform</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService?: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>, changeDetectorRef?: ChangeDetectorRef) => LocaleLanguageNamePipe`}   />\n\n\n"
                    },
                    {
                        "id": "transform",
                        "title": "transform",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: any, locale?: unknown) => string`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "{{ 'zh_Hant' | localeLanguageName }}",
                    "class LocaleLanguageNamePipe extends LocaleBasePipe implements PipeTransform {",
                    "    constructor(dataService?: DataService, changeDetectorRef?: ChangeDetectorRef)",
                    "    transform(value: any, locale?: unknown) => string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "localeregionnamepipe",
        "metadata": {
            "title": "LocaleRegionNamePipe",
            "keywords": [
                "localeregionnamepipe",
                "constructor",
                "transform"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/locale-region-name.pipe.ts\" sourceLine=\"18\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "localeregionnamepipe",
                "title": "LocaleRegionNamePipe",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/locale-region-name.pipe.ts\" sourceLine=\"18\" packageName=\"@vendure/admin-ui\" />\n\nDisplays a human-readable name for a given region.\n\n*Example*\n\n\n* Extends: <code>LocaleBasePipe</code>\n\n\n* Implements: <code>PipeTransform</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService?: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>, changeDetectorRef?: ChangeDetectorRef) => LocaleRegionNamePipe`}   />\n\n\n"
                    },
                    {
                        "id": "transform",
                        "title": "transform",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: any, locale?: unknown) => string`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "{{ 'GB' | localeRegionName }}",
                    "class LocaleRegionNamePipe extends LocaleBasePipe implements PipeTransform {",
                    "    constructor(dataService?: DataService, changeDetectorRef?: ChangeDetectorRef)",
                    "    transform(value: any, locale?: unknown) => string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "localization",
        "metadata": {
            "title": "Localization",
            "keywords": [
                "localization",
                "how to enable languages",
                "setting the admin ui language"
            ],
            "description": "Vendure supports **customer-facing** (Shop API) localization by allowing you to define translations for the following objects: * Collections * Countries * Facets * FacetValue"
        },
        "content": "",
        "sections": [
            {
                "id": "how-to-enable-languages",
                "title": "How to enable languages",
                "content": "\nTo select the set of languages you wish to create translations for, set them in the [global settings]({{< relref \"/user-guide/settings/global-settings\" >}}).\n\nOnce more than one language is enabled, you will see a language switcher appear when editing the object types listed above.\n\n![../settings/screen-translations.webp](../settings/screen-translations.webp)\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "setting-the-admin-ui-language",
                "title": "Setting the Admin UI language",
                "content": "\nSeparately, you can change the language used in the Admin UI from the menu in the top right. Note that changing the UI language has no effect on the localization of your products etc.\n\n![./screen-ui-language.webp](./screen-ui-language.webp)\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "localizedstringarray",
        "metadata": {
            "title": "LocalizedStringArray",
            "keywords": [
                "localizedstringarray"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/configurable-operation.ts\" sourceLine=\"43\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "localizedstringarray",
                "title": "LocalizedStringArray",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/configurable-operation.ts\" sourceLine=\"43\" packageName=\"@vendure/core\" />\n\nAn array of string values in a given <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>, used to define human-readable string values.\nThe `ui` property can be used in conjunction with the Vendure Admin UI to specify a custom form input\ncomponent.\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    "const title: LocalizedStringArray = [",
                    "  { languageCode: LanguageCode.en, value: 'English Title' },",
                    "  { languageCode: LanguageCode.de, value: 'German Title' },",
                    "  { languageCode: LanguageCode.zh, value: 'Chinese Title' },",
                    "]",
                    "type LocalizedStringArray = Array<Omit<LocalizedString, '__typename'>>"
                ]
            }
        ]
    },
    {
        "id": "logger",
        "metadata": {
            "title": "Logger",
            "keywords": [
                "logger",
                "implementing a custom logger",
                "error",
                "warn",
                "info",
                "verbose",
                "debug"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/logger/vendure-logger.ts\" sourceLine=\"136\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "logger",
                "title": "Logger",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/logger/vendure-logger.ts\" sourceLine=\"136\" packageName=\"@vendure/core\" />\n\nThe Logger is responsible for all logging in a Vendure application.\n\nIt is intended to be used as a static class:\n\n*Example*\n\n\nThe actual implementation - where the logs are written to - is defined by the <a href='/reference/typescript-api/logger/vendure-logger#vendurelogger'>VendureLogger</a>\ninstance configured in the <a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a>. By default, the <a href='/reference/typescript-api/logger/default-logger#defaultlogger'>DefaultLogger</a> is used, which\nlogs to the console.\n\n",
                "subsections": [],
                "code": [
                    "import { Logger } from '@vendure/core';",
                    "",
                    "Logger.info(`Some log message`, 'My Vendure Plugin');"
                ]
            },
            {
                "id": "implementing-a-custom-logger",
                "title": "Implementing a custom logger",
                "content": "\nA custom logger can be passed to the `logger` config option by creating a class which implements the\n<a href='/reference/typescript-api/logger/vendure-logger#vendurelogger'>VendureLogger</a> interface. For example, here is how you might go about implementing a logger which\nlogs to a file:\n\n*Example*\n\n\n* Implements: <code>LoggerService</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "logger",
                        "title": "logger",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/logger/vendure-logger#vendurelogger'>VendureLogger</a>`}   />\n\n\n"
                    },
                    {
                        "id": "error",
                        "title": "error",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string, trace?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "warn",
                        "title": "warn",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "info",
                        "title": "info",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "verbose",
                        "title": "verbose",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "debug",
                        "title": "debug",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { VendureLogger } from '@vendure/core';",
                    "import fs from 'fs';",
                    "",
                    "// A simple custom logger which writes all logs to a file.",
                    "export class SimpleFileLogger implements VendureLogger {",
                    "    private logfile: fs.WriteStream;",
                    "",
                    "    constructor(logfileLocation: string) {",
                    "        this.logfile = fs.createWriteStream(logfileLocation, { flags: 'w' });",
                    "    }",
                    "",
                    "    error(message: string, context?: string) {",
                    "        this.logfile.write(`ERROR: [${context}] ${message}\\n`);",
                    "    }",
                    "    warn(message: string, context?: string) {",
                    "        this.logfile.write(`WARN: [${context}] ${message}\\n`);",
                    "    }",
                    "    info(message: string, context?: string) {",
                    "        this.logfile.write(`INFO: [${context}] ${message}\\n`);",
                    "    }",
                    "    verbose(message: string, context?: string) {",
                    "        this.logfile.write(`VERBOSE: [${context}] ${message}\\n`);",
                    "    }",
                    "    debug(message: string, context?: string) {",
                    "        this.logfile.write(`DEBUG: [${context}] ${message}\\n`);",
                    "    }",
                    "}",
                    "",
                    "// in the VendureConfig",
                    "export const config = {",
                    "    // ...",
                    "    logger: new SimpleFileLogger('server.log'),",
                    "}",
                    "class Logger implements LoggerService {",
                    "    logger: VendureLogger",
                    "    error(message: string, context?: string, trace?: string) => void;",
                    "    warn(message: string, context?: string) => void;",
                    "    info(message: string, context?: string) => void;",
                    "    verbose(message: string, context?: string) => void;",
                    "    debug(message: string, context?: string) => void;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "logging",
        "metadata": {
            "title": "Logging",
            "keywords": [
                "logging",
                "log levels",
                "defaultlogger",
                "logging database queries",
                "logging in your own plugins"
            ],
            "description": "Logging allows you to see what is happening inside the Vendure server. It is useful for debugging and for monitoring the health of the server in production. In Vendure, logging is configured using the `logger` property of the [VendureConfig](/reference/typescript-api/configuration/vendure-config/#logger) object. The logger must implement the [VendureLogger](/reference/typescript-api/logger/vendure-logger) interface. :::info To implement a custom logger, see the [Implementing a custom logger](/reference/typescript-api/logger/#implementing-a-custom-logger) guide. :::"
        },
        "content": "",
        "sections": [
            {
                "id": "log-levels",
                "title": "Log levels",
                "content": "\nVendure uses 5 log levels, in order of increasing severity:\n\n| Level     | Description                                                                                              |\n|-----------|----------------------------------------------------------------------------------------------------------|\n| `Debug`   | The most verbose level, used for debugging purposes. The output can be very noisy at this level          |\n| `Verbose` | More information than the Info level, but less than `Debug`                                              |\n| `Info`    | General information about the normal running of the server                                               |\n| `Warning` | Issues which might need attention or action, but which do not prevent the server from continuing to run. |\n| `Error`   | Errors which should be investigated and handled; something has gone wrong.                               |\n\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "defaultlogger",
                "title": "DefaultLogger",
                "content": "\nVendure ships with a [DefaultLogger](/reference/typescript-api/logger/default-logger) which logs to the console (process.stdout). It can be configured with the desired log level:\n\n\n",
                "subsections": [],
                "code": [
                    "import { DefaultLogger, VendureConfig } from '@vendure/core';",
                    "",
                    "const config: VendureConfig = {",
                    "    // ...",
                    "    logger: new DefaultLogger({ level: LogLevel.Debug }),",
                    "};"
                ]
            },
            {
                "id": "logging-database-queries",
                "title": "Logging database queries",
                "content": "\nTo log database queries, set the `logging` property of the `dbConnectionOptions` as well as setting the logger to `Debug` level.\n\n\nMore information about the `logging` option can be found in the [TypeORM logging documentation](https://typeorm.io/logging).\n\n",
                "subsections": [],
                "code": [
                    "import { DefaultLogger, LogLevel, VendureConfig } from '@vendure/core';",
                    "",
                    "const config: VendureConfig = {",
                    "    // ...",
                    "    logger: new DefaultLogger({ level: LogLevel.Debug }),",
                    "    dbConnectionOptions: {",
                    "        // ... etc",
                    "        logging: true,",
                    "        ",
                    "        // You can also specify which types of DB events to log:",
                    "        // logging: ['error', 'warn', 'schema', 'query', 'info', 'log'],",
                    "    },",
                    "};"
                ]
            },
            {
                "id": "logging-in-your-own-plugins",
                "title": "Logging in your own plugins",
                "content": "\nWhen you extend Vendure by creating your own plugins, it's a good idea to log useful information about what your plugin is doing. To do this, you need to import the [Logger](/reference/typescript-api/logger/) class from `@vendure/core` and use it in your plugin:\n\n\n",
                "subsections": [],
                "code": [
                    "import { Logger } from '@vendure/core';",
                    "",
                    "// It is customary to define a logger context for your plugin",
                    "// so that the log messages can be easily identified.",
                    "const loggerCtx = 'MyPlugin';",
                    "",
                    "// somewhere in your code",
                    "Logger.info(`My plugin is doing something!`, loggerCtx);"
                ]
            }
        ]
    },
    {
        "id": "loglevel",
        "metadata": {
            "title": "LogLevel",
            "keywords": [
                "loglevel"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/logger/vendure-logger.ts\" sourceLine=\"9\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "loglevel",
                "title": "LogLevel",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/logger/vendure-logger.ts\" sourceLine=\"9\" packageName=\"@vendure/core\" />\n\nAn enum of valid logging levels.\n\n\n",
                "subsections": [],
                "code": [
                    "enum LogLevel {",
                    "    // Log Errors only. These are usually indicative of some potentially",
                    "serious issue, so should be acted upon.",
                    "    Error = 0",
                    "    // Warnings indicate that some situation may require investigation",
                    "and handling. But not as serious as an Error.",
                    "    Warn = 1",
                    "    // Logs general information such as startup messages.",
                    "    Info = 2",
                    "    // Logs additional information",
                    "    Verbose = 3",
                    "    // Logs detailed info useful in debug scenarios, including stack traces for",
                    "all errors. In production this would probably generate too much noise.",
                    "    Debug = 4",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "merge-strategies",
        "metadata": {
            "title": "Merge Strategies",
            "keywords": [
                "mergeordersstrategy",
                "merge",
                "useexistingstrategy",
                "useguestifexistingemptystrategy",
                "usegueststrategy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/merge-orders-strategy.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "mergeordersstrategy",
                "title": "MergeOrdersStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/merge-orders-strategy.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />\n\nMerges both Orders. If the guest order contains items which are already in the\nexisting Order, the guest Order quantity will replace that of the existing Order.\n\n* Implements: <code><a href='/reference/typescript-api/orders/order-merge-strategy#ordermergestrategy'>OrderMergeStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "merge",
                        "title": "merge",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, guestOrder: <a href='/reference/typescript-api/entities/order#order'>Order</a>, existingOrder: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => <a href='/reference/typescript-api/orders/order-merge-strategy#mergedorderline'>MergedOrderLine</a>[]`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class MergeOrdersStrategy implements OrderMergeStrategy {",
                    "    merge(ctx: RequestContext, guestOrder: Order, existingOrder: Order) => MergedOrderLine[];",
                    "}"
                ]
            },
            {
                "id": "useexistingstrategy",
                "title": "UseExistingStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/use-existing-strategy.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nThe guest order is discarded and the existing order is used as the active order.\n\n* Implements: <code><a href='/reference/typescript-api/orders/order-merge-strategy#ordermergestrategy'>OrderMergeStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "merge",
                        "title": "merge",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, guestOrder: <a href='/reference/typescript-api/entities/order#order'>Order</a>, existingOrder: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => <a href='/reference/typescript-api/orders/order-merge-strategy#mergedorderline'>MergedOrderLine</a>[]`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class UseExistingStrategy implements OrderMergeStrategy {",
                    "    merge(ctx: RequestContext, guestOrder: Order, existingOrder: Order) => MergedOrderLine[];",
                    "}"
                ]
            },
            {
                "id": "useguestifexistingemptystrategy",
                "title": "UseGuestIfExistingEmptyStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/use-guest-if-existing-empty-strategy.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nIf the existing order is empty, then the guest order is used. Otherwise the existing order is used.\n\n* Implements: <code><a href='/reference/typescript-api/orders/order-merge-strategy#ordermergestrategy'>OrderMergeStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "merge",
                        "title": "merge",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, guestOrder: <a href='/reference/typescript-api/entities/order#order'>Order</a>, existingOrder: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => <a href='/reference/typescript-api/orders/order-merge-strategy#mergedorderline'>MergedOrderLine</a>[]`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class UseGuestIfExistingEmptyStrategy implements OrderMergeStrategy {",
                    "    merge(ctx: RequestContext, guestOrder: Order, existingOrder: Order) => MergedOrderLine[];",
                    "}"
                ]
            },
            {
                "id": "usegueststrategy",
                "title": "UseGuestStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/use-guest-strategy.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nAny existing order is discarded and the guest order is set as the active order.\n\n* Implements: <code><a href='/reference/typescript-api/orders/order-merge-strategy#ordermergestrategy'>OrderMergeStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "merge",
                        "title": "merge",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, guestOrder: <a href='/reference/typescript-api/entities/order#order'>Order</a>, existingOrder: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => <a href='/reference/typescript-api/orders/order-merge-strategy#mergedorderline'>MergedOrderLine</a>[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class UseGuestStrategy implements OrderMergeStrategy {",
                    "    merge(ctx: RequestContext, guestOrder: Order, existingOrder: Order) => MergedOrderLine[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "mergeconfig",
        "metadata": {
            "title": "MergeConfig",
            "keywords": [
                "mergeconfig",
                "target",
                "source",
                "depth"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/merge-config.ts\" sourceLine=\"30\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "mergeconfig",
                "title": "mergeConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/merge-config.ts\" sourceLine=\"30\" packageName=\"@vendure/core\" />\n\nPerforms a deep merge of two VendureConfig objects. Unlike `Object.assign()` the `target` object is\nnot mutated, instead the function returns a new object which is the result of deeply merging the\nvalues of `source` into `target`.\n\nArrays do not get merged, they are treated as a single value that will be replaced. So if merging the\n`plugins` array, you must explicitly concatenate the array.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "target",
                        "title": "target",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`T`} />\n\n"
                    },
                    {
                        "id": "source",
                        "title": "source",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`PartialVendureConfig`} />\n\n"
                    },
                    {
                        "id": "depth",
                        "title": "depth",
                        "content": "\n<MemberInfo kind=\"parameter\" type={``} />\n\n\n"
                    }
                ],
                "code": [
                    "const result = mergeConfig(defaultConfig, {",
                    "  assetOptions: {",
                    "    uploadMaxFileSize: 5000,",
                    "  },",
                    "  plugins: [",
                    "    ...defaultConfig.plugins,",
                    "    MyPlugin,",
                    "  ]",
                    "};",
                    "function mergeConfig<T extends VendureConfig>(target: T, source: PartialVendureConfig, depth:  = 0): T"
                ]
            }
        ]
    },
    {
        "id": "middleware",
        "metadata": {
            "title": "Middleware",
            "keywords": [
                "middleware",
                "increasing the maximum request body size limit",
                "handler",
                "route",
                "beforelisten"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/types/common-types.ts\" sourceLine=\"209\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "middleware",
                "title": "Middleware",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/types/common-types.ts\" sourceLine=\"209\" packageName=\"@vendure/core\" />\n\nDefines API middleware, set in the <a href='/reference/typescript-api/configuration/api-options#apioptions'>ApiOptions</a>. Middleware can be either\n[Express middleware](https://expressjs.com/en/guide/using-middleware.html) or [NestJS middleware](https://docs.nestjs.com/middleware).\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "increasing-the-maximum-request-body-size-limit",
                "title": "Increasing the maximum request body size limit",
                "content": "\nInternally, Vendure relies on the body-parser middleware to parse incoming JSON data. By default, the maximum\nbody size is set to 100kb. Attempting to send a request with more than 100kb of JSON data will result in a\n`PayloadTooLargeError`. To increase this limit, we can manually configure the body-parser middleware:\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "handler",
                        "title": "handler",
                        "content": "\n<MemberInfo kind=\"property\" type={`MiddlewareHandler`}   />\n\nThe Express middleware function or NestJS `NestMiddleware` class.\n"
                    },
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe route to which this middleware will apply. Pattern based routes are supported as well.\n\nThe `'ab*cd'` route path will match `abcd`, `ab_cd`, `abecd`, and so on. The characters `?`, `+`, `*`, and `()` may be used in a route path,\nand are subsets of their regular expression counterparts. The hyphen (`-`) and the dot (`.`) are interpreted literally.\n"
                    },
                    {
                        "id": "beforelisten",
                        "title": "beforeListen",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"  since=\"1.1.0\"  />\n\nWhen set to `true`, this will cause the middleware to be applied before the Vendure server (and underlying Express server) starts listening\nfor connections. In practical terms this means that the middleware will be at the very start of the middleware stack, before even the\n`body-parser` middleware which is automatically applied by NestJS. This can be useful in certain cases such as when you need to access the\nraw unparsed request for a specific route.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "import { json } from 'body-parser';",
                    "",
                    "export const config: VendureConfig = {",
                    "  // ...",
                    "  apiOptions: {",
                    "    middleware: [{",
                    "      handler: json({ limit: '10mb' }),",
                    "      route: '*',",
                    "      beforeListen: true,",
                    "    }],",
                    "  },",
                    "};",
                    "interface Middleware {",
                    "    handler: MiddlewareHandler;",
                    "    route: string;",
                    "    beforeListen?: boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "migrating-from-v1",
        "metadata": {
            "title": "Migrating from v1",
            "keywords": [
                "migrating from vendure 1 to 2",
                "migration steps"
            ],
            "description": "This section contains guides for migrating from Vendure v1 to v2. There are a number of breaking changes between the two versions, which are due to a few major factors: 1. To support new features such as multi-vendor marketplace APIs and multiple stock locations, we had to make some changes to the database schema and some of the internal APIs. 2. We have updated all of our major dependencies to their latest versions. Some of these updates involve breaking changes in the dependencies themselves, and in those cases where you are using those dependencies directly (most notably TypeORM), you will need to make the corresponding changes to your code. 3. We have removed some old APIs which were previously marked as \"deprecated\"."
        },
        "content": "",
        "sections": [
            {
                "id": "migration-steps",
                "title": "Migration steps",
                "content": "\nMigration will consist of these main steps:\n\n1. **Update your Vendure dependencies** to the latest versions\n   ```diff\n   {\n     // ...\n     \"dependencies\": {\n   -    \"@vendure/common\": \"1.9.7\",\n   -    \"@vendure/core\": \"1.9.7\",\n   +    \"@vendure/common\": \"2.0.0\",\n   +    \"@vendure/core\": \"2.0.0\",\n        // etc.\n     },\n     \"devDependencies\": {\n   -    \"typescript\": \"4.3.5\",\n   +    \"typescript\": \"4.9.5\",\n        // etc.\n     }\n   }\n   ```\n2. **Migrate your database**. This is covered in detail in the [database migration section](/guides/developer-guide/migrating-from-v1/database-migration).\n3. **Update your custom code** (configuration, plugins, admin ui extensions) to handle the breaking changes. Details of these changes are covered in the [breaking API changes section](/guides/developer-guide/migrating-from-v1/breaking-api-changes).\n4. **Update your storefront** to handle some small breaking changes in the Shop GraphQL API. See the [storefront migration section](/guides/developer-guide/migrating-from-v1/storefront-migration) for details.\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "migration",
        "metadata": {
            "title": "Migration",
            "keywords": [
                "migration"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "migrationoptions",
        "metadata": {
            "title": "MigrationOptions",
            "keywords": [
                "migrationoptions",
                "name",
                "outputdir"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/migrate.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "migrationoptions",
                "title": "MigrationOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/migrate.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" />\n\nConfiguration for generating a new migration script via <a href='/reference/typescript-api/migration/generate-migration#generatemigration'>generateMigration</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe name of the migration. The resulting migration script will be named\n`{TIMESTAMP}-{name}.ts`.\n"
                    },
                    {
                        "id": "outputdir",
                        "title": "outputDir",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe output directory of the generated migration scripts.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface MigrationOptions {",
                    "    name: string;",
                    "    outputDir?: string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "migrations",
        "metadata": {
            "title": "Migrations",
            "keywords": [
                "synchronize vs migrate",
                "migration workflow",
                "1. generate a migration",
                "2. check the migration file",
                "3. run the migration",
                "migrations in-depth",
                "reverting a migration"
            ],
            "description": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; Database migrations are needed whenever the database schema changes. This can be caused by: * changes to the [custom fields](/guides/developer-guide/custom-fields/) configuration * new [database entities defined by plugins](/guides/developer-guide/database-entity//)"
        },
        "content": "",
        "sections": [
            {
                "id": "synchronize-vs-migrate",
                "title": "Synchronize vs migrate",
                "content": "\nTypeORM (which Vendure uses to interact with the database) has a `synchronize` option which, when set to `true`, will automatically update your database schema to reflect the current Vendure configuration. This is equivalent to automatically generating and running a migration _every time_ the server starts up.\n\nThis is convenient while developing, but **should not be used in production**, since a misconfiguration could potentially delete production data. In this case, migrations should be used.\n\n\n",
                "subsections": [],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    dbConnectionOptions: {",
                    "        // ...",
                    "        // highlight-next-line",
                    "        synchronize: false,",
                    "    }",
                    "};"
                ]
            },
            {
                "id": "migration-workflow",
                "title": "Migration workflow",
                "content": "\nThis section assumes a standard Vendure installation based on `@vendure/create`. \n\nLet's assume you have defined a new \"keywords\" custom field on the Product entity. The next time you start your server you'll see a message like this:\n\n\nSince we have `synchronize` set to `false`, we need to generate a migration to apply these changes to the database. The workflow for this is as follows:\n\n",
                "subsections": [
                    {
                        "id": "1.-generate-a-migration",
                        "title": "1. Generate a migration",
                        "content": "\nRun the following command:\n\n\n<Tabs>\n<TabItem value=\"npm\" label=\"npm\" default>\n\n\n</TabItem>\n<TabItem value=\"yarn\" label=\"yarn\">\n\n\n</TabItem>\n</Tabs>\n\n"
                    },
                    {
                        "id": "2.-check-the-migration-file",
                        "title": "2. Check the migration file",
                        "content": "\nThis will have created a new migration file in the `src/migrations` directory. Open this file and check that it looks correct. It should look something like this:\n\n\nThe `up()` function is what will be executed when the migration is run. The `down()` function is what will be executed if the migration is reverted. In this case, the `up()` function is adding a new column to the `product` table, and the `down()` function is removing it.\n\n:::note\nThe exact query will depend on the database you are using. The above example is for PostgreSQL.\n:::\n\n"
                    },
                    {
                        "id": "3.-run-the-migration",
                        "title": "3. Run the migration",
                        "content": "\nAssuming the migration file looks correct, the next time you start the server, the migration will\nbe run automatically. This is because the `runMigrations` function is called in the `src/index.ts` file:\n\n\nIt is also possible to run the migration manually without starting the server:\n\n<Tabs>\n<TabItem value=\"npm\" label=\"npm\" default>\n\n\n</TabItem>\n<TabItem value=\"yarn\" label=\"yarn\">\n\n\n</TabItem>\n</Tabs>\n\n:::caution\nTypeORM will attempt to run each migration inside a transaction. This means that if one of the migration commands fails, then the entire transaction will be rolled back to its original state.\n\n_However_ this is **not supported by MySQL / MariaDB**. This means that when using MySQL or MariaDB, errors in your migration script could leave your database in a broken or inconsistent state. Therefore it is **critical** that you first create a backup of your database before running a migration.\n\nYou can read more about this issue in [typeorm/issues/7054](https://github.com/typeorm/typeorm/issues/7054)\n:::\n\n"
                    }
                ],
                "code": [
                    "[server] Your database schema does not match your current configuration. Generate a new migration for the following changes:",
                    "[server]  - ALTER TABLE \"product\" ADD \"customFieldsKeywords\" character varying(255)",
                    "npm run migration:generate add-keywords-field",
                    "yarn migration:generate add-keywords-field",
                    "import {MigrationInterface, QueryRunner} from \"typeorm\";",
                    "",
                    "export class addKeywordsField1690558104092 implements MigrationInterface {",
                    "",
                    "   public async up(queryRunner: QueryRunner): Promise<any> {",
                    "        await queryRunner.query(`ALTER TABLE \"product\" ADD \"customFieldsKeywords\" character varying(255)`, undefined);",
                    "   }",
                    "",
                    "   public async down(queryRunner: QueryRunner): Promise<any> {",
                    "        await queryRunner.query(`ALTER TABLE \"product\" DROP COLUMN \"customFieldsKeywords\"`, undefined);",
                    "   }",
                    "",
                    "}",
                    "import { bootstrap, runMigrations } from '@vendure/core';",
                    "import { config } from './vendure-config';",
                    "",
                    "// highlight-next-line",
                    "runMigrations(config)",
                    "    .then(() => bootstrap(config))",
                    "    .catch(err => {",
                    "        console.log(err);",
                    "    });",
                    "npm run migration:run",
                    "yarn migration:run"
                ]
            },
            {
                "id": "migrations-in-depth",
                "title": "Migrations in-depth",
                "content": "\nNow we'll dive into what's going on under the hood.\n\nVendure exposes a some helper function which wrap around the underlying [TypeORM migration functionality](https://typeorm.io/migrations). The reason for using these helper functions rather than using the TypeORM CLI directly is that Vendure generates additional schema information based on custom fields and plugin configurations which are not available to the TypeORM CLI.\n\nIn a standard Vendure installation, you'll see the following migration script in your project root directory:\n\n\nand a set of scripts in your `package.json` file:\n\n\nWhen running and reverting migrations, Vendure is looking for migration files in the directory specified by the `dbConnectionOptions.migrations` option is set in your VendureConfig:\n\n\nTypeORM keeps track of which migrations have been run by creating a new `migrations` table in your database, and each time a migration is successfully run\nit adds a row to this table with the name of the migration class and a timestamp. This prevents the same migration from being run twice, and also allows\nTypeORM to know which migration to revert when the `revertLastMigration` function is called.\n\n![Migrations table](./migration.webp)\n\nThese are the underlying function exposed by Vendure which are used to generate, run and revert migrations:\n\n- [`generateMigration` function](/reference/typescript-api/migration/generate-migration/)\n- [`runMigrations` function](/reference/typescript-api/migration/run-migrations/)\n- [`revertLastMigration` function](/reference/typescript-api/migration/revert-last-migration/)\n\n",
                "subsections": [
                    {
                        "id": "reverting-a-migration",
                        "title": "Reverting a migration",
                        "content": "\nThe `revertLastMigration` function will revert the last applied migration by applying the `down()` method. If run again it will then revert the one before that, and so on.\nIn doing so, it will also remove the corresponding row from the `migrations` table.\n\n\n"
                    }
                ],
                "code": [
                    "import { generateMigration, revertLastMigration, runMigrations } from '@vendure/core';",
                    "import program from 'commander';",
                    "",
                    "import { config } from './src/vendure-config';",
                    "",
                    "program",
                    "    .command('generate <name>')",
                    "    .description('Generate a new migration file with the given name')",
                    "    .action(name => {",
                    "        return generateMigration(config, { name, outputDir: './src/migrations' });",
                    "    });",
                    "",
                    "program",
                    "    .command('run')",
                    "    .description('Run all pending migrations')",
                    "    .action(() => {",
                    "        return runMigrations(config);",
                    "    });",
                    "",
                    "program",
                    "    .command('revert')",
                    "    .description('Revert the last applied migration')",
                    "    .action(() => {",
                    "        return revertLastMigration(config);",
                    "    });",
                    "",
                    "program.parse(process.argv);",
                    "{",
                    "  // ...",
                    "  \"scripts\": {",
                    "    \"migration:generate\": \"ts-node migration.ts generate\",",
                    "    \"migration:run\": \"ts-node migration.ts run\",",
                    "    \"migration:revert\": \"ts-node migration.ts revert\"",
                    "  }",
                    "}",
                    "import { VendureConfig } from '@vendure/core';",
                    "import path from 'path';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    dbConnectionOptions: {",
                    "        // ...",
                    "        // highlight-next-line",
                    "        migrations: [path.join(__dirname, './migrations/*.+(js|ts)')],",
                    "    }",
                    "};"
                ]
            }
        ]
    },
    {
        "id": "modalservice",
        "metadata": {
            "title": "ModalService",
            "keywords": [
                "modalservice",
                "constructor",
                "fromcomponent",
                "dialog",
                "resolvewith",
                "dialogconfig",
                "title",
                "body",
                "translationvars",
                "buttons",
                "size",
                "modaloptions",
                "verticalalign",
                "closable",
                "locals"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/modal/modal.service.ts\" sourceLine=\"21\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "modalservice",
                "title": "ModalService",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/modal/modal.service.ts\" sourceLine=\"21\" packageName=\"@vendure/admin-ui\" />\n\nThis service is responsible for instantiating a ModalDialog component and\nembedding the specified component within.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(overlayHostService: OverlayHostService) => ModalService`}   />\n\n\n"
                    },
                    {
                        "id": "fromcomponent",
                        "title": "fromComponent",
                        "content": "\n<MemberInfo kind=\"method\" type={`(component: Type&#60;T&#62; &#38; Type&#60;<a href='/reference/admin-ui-api/services/modal-service#dialog'>Dialog</a>&#60;R&#62;&#62;, options?: <a href='/reference/admin-ui-api/services/modal-service#modaloptions'>ModalOptions</a>&#60;T&#62;) => Observable&#60;R | undefined&#62;`}   />\n\nCreate a modal from a component. The component must implement the <a href='/reference/admin-ui-api/services/modal-service#dialog'>Dialog</a> interface.\nAdditionally, the component should include templates for the title and the buttons to be\ndisplayed in the modal dialog. See example:\n\n*Example*\n\n\n*Example*\n\n"
                    },
                    {
                        "id": "dialog",
                        "title": "dialog",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/admin-ui-api/services/modal-service#dialogconfig'>DialogConfig</a>&#60;T&#62;) => Observable&#60;T | undefined&#62;`}   />\n\nDisplays a modal dialog with the provided title, body and buttons.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class ModalService {",
                    "    constructor(overlayHostService: OverlayHostService)",
                    "    fromComponent(component: Type<T> & Type<Dialog<R>>, options?: ModalOptions<T>) => Observable<R | undefined>;",
                    "    dialog(config: DialogConfig<T>) => Observable<T | undefined>;",
                    "}",
                    "class MyDialog implements Dialog {",
                    " resolveWith: (result?: any) => void;",
                    "",
                    " okay() {",
                    "   doSomeWork().subscribe(result => {",
                    "     this.resolveWith(result);",
                    "   })",
                    " }",
                    "",
                    " cancel() {",
                    "   this.resolveWith(false);",
                    " }",
                    "}",
                    "<ng-template vdrDialogTitle>Title of the modal</ng-template>",
                    "",
                    "<p>",
                    "  My Content",
                    "</p>",
                    "",
                    "<ng-template vdrDialogButtons>",
                    "  <button type=\"button\"",
                    "          class=\"btn\"",
                    "          (click)=\"cancel()\">Cancel</button>",
                    "  <button type=\"button\"",
                    "          class=\"btn btn-primary\"",
                    "          (click)=\"okay()\">Okay</button>",
                    "</ng-template>"
                ]
            },
            {
                "id": "dialog",
                "title": "Dialog",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/modal/modal.types.ts\" sourceLine=\"9\" packageName=\"@vendure/admin-ui\" />\n\nAny component intended to be used with the ModalService.fromComponent() method must implement\nthis interface.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "resolvewith",
                        "title": "resolveWith",
                        "content": "\n<MemberInfo kind=\"property\" type={`(result?: R) =&#62; void`}   />\n\nFunction to be invoked in order to close the dialog when the action is complete.\nThe Observable returned from the .fromComponent() method will emit the value passed\nto this method and then complete.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface Dialog<R = any> {",
                    "    resolveWith: (result?: R) => void;",
                    "}"
                ]
            },
            {
                "id": "dialogconfig",
                "title": "DialogConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/modal/modal.types.ts\" sourceLine=\"33\" packageName=\"@vendure/admin-ui\" />\n\nConfigures a generic modal dialog.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "title",
                        "title": "title",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "body",
                        "title": "body",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "translationvars",
                        "title": "translationVars",
                        "content": "\n<MemberInfo kind=\"property\" type={`{ [key: string]: string | number }`}   />\n\n\n"
                    },
                    {
                        "id": "buttons",
                        "title": "buttons",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;DialogButtonConfig&#60;T&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "size",
                        "title": "size",
                        "content": "\n<MemberInfo kind=\"property\" type={`'sm' | 'md' | 'lg' | 'xl'`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface DialogConfig<T> {",
                    "    title: string;",
                    "    body?: string;",
                    "    translationVars?: { [key: string]: string | number };",
                    "    buttons: Array<DialogButtonConfig<T>>;",
                    "    size?: 'sm' | 'md' | 'lg' | 'xl';",
                    "}"
                ]
            },
            {
                "id": "modaloptions",
                "title": "ModalOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/modal/modal.types.ts\" sourceLine=\"48\" packageName=\"@vendure/admin-ui\" />\n\nOptions to configure the behaviour of the modal.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "size",
                        "title": "size",
                        "content": "\n<MemberInfo kind=\"property\" type={`'sm' | 'md' | 'lg' | 'xl'`}   />\n\nSets the width of the dialog\n"
                    },
                    {
                        "id": "verticalalign",
                        "title": "verticalAlign",
                        "content": "\n<MemberInfo kind=\"property\" type={`'top' | 'center' | 'bottom'`}   />\n\nSets the vertical alignment of the dialog\n"
                    },
                    {
                        "id": "closable",
                        "title": "closable",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\nWhen true, the \"x\" icon is shown\nand clicking it or the mask will close the dialog\n"
                    },
                    {
                        "id": "locals",
                        "title": "locals",
                        "content": "\n<MemberInfo kind=\"property\" type={`Partial&#60;T&#62;`}   />\n\nValues to be passed directly to the component being instantiated inside the dialog.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ModalOptions<T> {",
                    "    size?: 'sm' | 'md' | 'lg' | 'xl';",
                    "    verticalAlign?: 'top' | 'center' | 'bottom';",
                    "    closable?: boolean;",
                    "    locals?: Partial<T>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "modify-the-nav-menu",
        "metadata": {
            "title": "Modify the Nav Menu",
            "keywords": [
                "extending the navmenu",
                "overriding existing nav items",
                "removing existing nav items"
            ],
            "description": "The Nav Menu is the main navigation for the Admin UI, located on the left-hand side when in desktop mode. It is used to provide top-level access to routes in the app, and can be extended and modified by UI extensions. Once you have defined some custom routes, you need some way for the administrator to access them. For this you will use the [addNavMenuItem](/reference/admin-ui-api/nav-menu/add-nav-menu-item/) and [addNavMenuSection](/reference/admin-ui-api/nav-menu/add-nav-menu-section) functions. Let's add a new section to the Admin UI main nav bar containing a link to the \"greeter\" module from the [Getting Started guide](/guides/extending-the-admin-ui/getting-started/#routes) example: ```ts title=\"src/plugins/greeter/ui/providers.ts\""
        },
        "content": "",
        "sections": [
            {
                "id": "extending-the-navmenu",
                "title": "Extending the NavMenu",
                "content": "\nOnce you have defined some custom routes, you need some way for the administrator to access them. For this you will use the [addNavMenuItem](/reference/admin-ui-api/nav-menu/add-nav-menu-item/) and [addNavMenuSection](/reference/admin-ui-api/nav-menu/add-nav-menu-section) functions.\n\nLet's add a new section to the Admin UI main nav bar containing a link to the \"greeter\" module from the [Getting Started guide](/guides/extending-the-admin-ui/getting-started/#routes) example:\n\n\nNow we must also register these providers with the compiler:\n\n\nRunning the server will compile our new shared module into the app, and the result should look like this:\n\n![./ui-extensions-navbar.webp](./ui-extensions-navbar.webp)\n\n",
                "subsections": [],
                "code": [
                    "import { addNavMenuSection } from '@vendure/admin-ui/core';",
                    "",
                    "export default [",
                    "    addNavMenuSection({",
                    "        id: 'greeter',",
                    "        label: 'My Extensions',",
                    "        items: [{",
                    "            id: 'greeter',",
                    "            label: 'Greeter',",
                    "            routerLink: ['/extensions/greet'],",
                    "            // Icon can be any of https://core.clarity.design/foundation/icons/shapes/",
                    "            icon: 'cursor-hand-open',",
                    "        }],",
                    "    },",
                    "    // Add this section before the \"settings\" section",
                    "    'settings'),",
                    "];",
                    "import path from 'path';",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "import { compileUiExtensions } from '@vendure/ui-devkit/compiler';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AdminUiPlugin.init({",
                    "            port: 3002,",
                    "            app: compileUiExtensions({",
                    "                outputPath: path.join(__dirname, '../admin-ui'),",
                    "                extensions: [",
                    "                    {",
                    "                        id: 'greeter',",
                    "                        extensionPath: path.join(__dirname, 'plugins/greeter/ui'),",
                    "                        routes: [{ route: 'greet', filePath: 'routes.ts' }],",
                    "                        // highlight-start",
                    "                        providers: ['providers.ts']",
                    "                        // highlight-end",
                    "                    },",
                    "                ],",
                    "            }),",
                    "        }),",
                    "    ],",
                    "};"
                ]
            },
            {
                "id": "overriding-existing-nav-items",
                "title": "Overriding existing nav items",
                "content": "\nIt is also possible to override one of the default (built-in) nav menu sections or items. This can be useful for example if you wish to provide a completely different implementation of the product list view.\n\nThis is done by setting the `id` property to that of an existing nav menu section or item. The `id` can be found by inspecting the link element in your browser's dev tools for the `data-item-id` attribute:\n\n![Navbar menu id](./nav-menu-id.webp)\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "removing-existing-nav-items",
                "title": "Removing existing nav items",
                "content": "\nIf you would like to remove an existing nav item, you can do so by overriding it and setting the `requiresPermission` property to an invalid value:\n\n\n",
                "subsections": [],
                "code": [
                    "import { SharedModule, addNavMenuItem} from '@vendure/admin-ui/core';",
                    "",
                    "export default [",
                    "    addNavMenuItem({",
                    "        id: 'collections',  // <-- we will override the \"collections\" menu item",
                    "        label: 'Collections',",
                    "        routerLink: ['/catalog', 'collections'],",
                    "        // highlight-start",
                    "        // we use an invalid permission which ensures it is hidden from all users",
                    "        requiresPermission: '__disable__'",
                    "        // highlight-end",
                    "    },",
                    "    'catalog'),",
                    "];"
                ]
            }
        ]
    },
    {
        "id": "mollieplugin",
        "metadata": {
            "title": "MolliePlugin",
            "keywords": [
                "mollieplugin",
                "requirements",
                "setup",
                "specifying the redirecturl",
                "storefront usage",
                "pay later methods",
                "options",
                "init",
                "molliepluginoptions",
                "vendurehost",
                "usedynamicredirecturl"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/payments-plugin/src/mollie/mollie.plugin.ts\" sourceLine=\"151\" packageName=\"@vendure/payments-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "mollieplugin",
                "title": "MolliePlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/payments-plugin/src/mollie/mollie.plugin.ts\" sourceLine=\"151\" packageName=\"@vendure/payments-plugin\" />\n\nPlugin to enable payments through the [Mollie platform](https://docs.mollie.com/).\nThis plugin uses the Order API from Mollie, not the Payments API.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "requirements",
                "title": "Requirements",
                "content": "\n1. You will need to create a Mollie account and get your apiKey in the dashboard.\n2. Install the Payments plugin and the Mollie client:\n\n    `yarn add @vendure/payments-plugin @mollie/api-client`\n\n    or\n\n    `npm install @vendure/payments-plugin @mollie/api-client`\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "setup",
                "title": "Setup",
                "content": "\n1. Add the plugin to your VendureConfig `plugins` array:\n    ```ts\n    import { MolliePlugin } from '@vendure/payments-plugin/package/mollie';\n\n    // ...\n\n    plugins: [\n      MolliePlugin.init({ vendureHost: 'https://yourhost.io/', useDynamicRedirectUrl: true }),\n    ]\n    ```\n2. Create a new PaymentMethod in the Admin UI, and select \"Mollie payments\" as the handler.\n3. Set your Mollie apiKey in the `API Key` field.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "specifying-the-redirecturl",
                "title": "Specifying the redirectUrl",
                "content": "\nCurrently, there are two ways to specify the `redirectUrl` to which the customer is redirected after completing the payment:\n1. Configure the `redirectUrl` in the PaymentMethod.\n2. Pass the `redirectUrl` as an argument to the `createPaymentIntent` mutation.\n\nWhich method is used depends on the value of the `useDynamicRedirectUrl` option while initializing the plugin.\nBy default, this option is set to `false` for backwards compatibility. In a future version, this option will be deprecated.\nUpon deprecation, the `redirectUrl` will always be passed as an argument to the `createPaymentIntent` mutation.\n\nTODO toevoegen van /code weggehaald..!\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "storefront-usage",
                "title": "Storefront usage",
                "content": "\nIn your storefront you add a payment to an order using the `createMolliePaymentIntent` mutation. In this example, our Mollie\nPaymentMethod was given the code \"mollie-payment-method\". The `redirectUrl``is the url that is used to redirect the end-user\nback to your storefront after completing the payment. When using the first method specified in `Specifying the redirectUrl`,\nthe order code is appened to the `redirectUrl`. For the second method, the order code is not appended to the specified `redirectUrl`.\n\n\nThe response will contain\na redirectUrl, which can be used to redirect your customer to the Mollie\nplatform.\n\n'molliePaymentMethodCode' is an optional parameter that can be passed to skip Mollie's hosted payment method selection screen\nYou can get available Mollie payment methods with the following query:\n\nYou can pass `MolliePaymentMethod.code` to the `createMolliePaymentIntent` mutation to skip the method selection.\n\nAfter completing payment on the Mollie platform,\nthe user is redirected to the configured redirect url + orderCode: `https://storefront/order/CH234X5`\n\n",
                "subsections": [],
                "code": [
                    "mutation CreateMolliePaymentIntent {",
                    "  createMolliePaymentIntent(input: {",
                    "    redirectUrl: \"https://storefront/order\"",
                    "    paymentMethodCode: \"mollie-payment-method\"",
                    "    molliePaymentMethodCode: \"ideal\"",
                    "  }) {",
                    "         ... on MolliePaymentIntent {",
                    "              url",
                    "          }",
                    "         ... on MolliePaymentIntentError {",
                    "              errorCode",
                    "              message",
                    "         }",
                    "  }",
                    "}",
                    "{",
                    " molliePaymentMethods(input: { paymentMethodCode: \"mollie-payment-method\" }) {",
                    "   id",
                    "   code",
                    "   description",
                    "   minimumAmount {",
                    "     value",
                    "     currency",
                    "   }",
                    "   maximumAmount {",
                    "     value",
                    "     currency",
                    "   }",
                    "   image {",
                    "     size1x",
                    "     size2x",
                    "     svg",
                    "   }",
                    " }",
                    "}"
                ]
            },
            {
                "id": "pay-later-methods",
                "title": "Pay later methods",
                "content": "Mollie supports pay-later methods like 'Klarna Pay Later'. For pay-later methods, the status of an order is\n'PaymentAuthorized' after the Mollie hosted checkout. You need to manually settle the payment via the admin ui to capture the payment!\nMake sure you capture a payment within 28 days, because this is the Klarna expiry time\n\nIf you don't want this behaviour (Authorized first), you can set 'autoCapture=true' on the payment method. This option will immediately\ncapture the payment after a customer authorizes the payment.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/payments-plugin/mollie-plugin#molliepluginoptions'>MolliePluginOptions</a>`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/payments-plugin/mollie-plugin#molliepluginoptions'>MolliePluginOptions</a>) => typeof <a href='/reference/core-plugins/payments-plugin/mollie-plugin#mollieplugin'>MolliePlugin</a>`}   />\n\nInitialize the mollie payment plugin\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class MolliePlugin {",
                    "    static options: MolliePluginOptions;",
                    "    init(options: MolliePluginOptions) => typeof MolliePlugin;",
                    "}"
                ]
            },
            {
                "id": "molliepluginoptions",
                "title": "MolliePluginOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/payments-plugin/src/mollie/mollie.plugin.ts\" sourceLine=\"17\" packageName=\"@vendure/payments-plugin\" />\n\nConfiguration options for the Mollie payments plugin.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "vendurehost",
                        "title": "vendureHost",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe host of your Vendure server, e.g. `'https://my-vendure.io'`.\nThis is used by Mollie to send webhook events to the Vendure server\n"
                    },
                    {
                        "id": "usedynamicredirecturl",
                        "title": "useDynamicRedirectUrl",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"  since=\"2.0.0\"  />\n\nFor backwards compatibility, by default set to false.\nThis option will be deprecated in a future version.\nWhen enabled, the `redirectUrl` can be passed via the `createPaymentIntent` mutation\ninstead of being configured in the Payment Method.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface MolliePluginOptions {",
                    "    vendureHost: string;",
                    "    useDynamicRedirectUrl?: boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "money-decorator",
        "metadata": {
            "title": "Money Decorator",
            "keywords": [
                "money",
                "options"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/money.decorator.ts\" sourceLine=\"26\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "money",
                "title": "Money",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/money.decorator.ts\" sourceLine=\"26\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nUse this decorator for any entity field that is storing a monetary value.\nThis allows the column type to be defined by the configured <a href='/reference/typescript-api/money/money-strategy#moneystrategy'>MoneyStrategy</a>.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`MoneyColumnOptions`} />\n\n\n"
                    }
                ],
                "code": [
                    "function Money(options?: MoneyColumnOptions): void"
                ]
            }
        ]
    },
    {
        "id": "money",
        "metadata": {
            "title": "Money",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "moneystrategy",
        "metadata": {
            "title": "MoneyStrategy",
            "keywords": [
                "moneystrategy",
                "range",
                "precision & rounding",
                "moneycolumnoptions",
                "round"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/entity/money-strategy.ts\" sourceLine=\"47\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "moneystrategy",
                "title": "MoneyStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/entity/money-strategy.ts\" sourceLine=\"47\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThe MoneyStrategy defines how monetary values are stored and manipulated. The MoneyStrategy\nis defined in <a href='/reference/typescript-api/configuration/entity-options#entityoptions'>EntityOptions</a>:\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "const config: VendureConfig = {",
                    "  entityOptions: {",
                    "    moneyStrategy: new MyCustomMoneyStrategy(),",
                    "  }",
                    "};"
                ]
            },
            {
                "id": "range",
                "title": "Range",
                "content": "\nThe <a href='/reference/typescript-api/money/default-money-strategy#defaultmoneystrategy'>DefaultMoneyStrategy</a> uses an `int` field in the database, which puts an\neffective limit of ~21.4 million on any stored value. For certain use cases\n(e.g. business sales with very high amounts, or currencies with very large\ndenominations), this may cause issues. In this case, you can use the\n<a href='/reference/typescript-api/money/big-int-money-strategy#bigintmoneystrategy'>BigIntMoneyStrategy</a> which will use the `bigint` type to store monetary values,\ngiving an effective upper limit of over 9 quadrillion.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "precision-&-rounding",
                "title": "Precision & rounding",
                "content": "\nBoth the `DefaultMoneyStrategy` and `BigIntMoneyStrategy` store monetary values as integers, representing\nthe price in the minor units of the currency (i.e. _cents_ in USD or _pennies_ in GBP).\n\nIn certain use-cases, it may be required that fractions of a cent or penny be supported. In this case,\nthe solution would be to define a custom MoneyStrategy which uses a non-integer data type for storing\nthe value in the database, and defines a `round()` implementation which allows decimal places to be kept.\n\n:::info\n\nThis is configured via the `entityOptions.moneyStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "moneycolumnoptions",
                        "title": "moneyColumnOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`ColumnOptions`}   />\n\nDefines the TypeORM column used to store monetary values.\n"
                    },
                    {
                        "id": "round",
                        "title": "round",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: number, quantity?: number) => number`}   />\n\nDefines the logic used to round monetary values. For instance, the default behavior\nin the <a href='/reference/typescript-api/money/default-money-strategy#defaultmoneystrategy'>DefaultMoneyStrategy</a> is to round the value, then multiply.\n\n\nHowever, it may be desirable to instead round only _after_ the unit amount has been\nmultiplied. In this case you can define a custom strategy with logic like this:\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface MoneyStrategy extends InjectableStrategy {",
                    "    readonly moneyColumnOptions: ColumnOptions;",
                    "    round(value: number, quantity?: number): number;",
                    "}",
                    "return Math.round(value) * quantity;",
                    "return Math.round(value * quantity);"
                ]
            }
        ]
    },
    {
        "id": "multi-vendor-marketplaces",
        "metadata": {
            "title": "Multi-vendor Marketplaces",
            "keywords": [
                "multi-vendor marketplaces",
                "multi-vendor plugin",
                "sellers, channels & roles",
                "assigning orderlines to the correct seller",
                "shipping",
                "splitting orders & payment",
                "custom orderprocess"
            ],
            "description": "Vendure v2.0 introduced a number of changes and new APIs to enable developers to build multi-vendor marketplace apps. This is a type of application in which multiple sellers are able to list products, and then customers can create orders containing products from one or more of these sellers. Well-known examples include Amazon, Ebay, Etsy and Airbnb. This guide introduces the major concepts & APIs you will need to understand in order to implement your own multi-vendor marketplace application. All the concepts presented here have been implemented in our [example multi-vendor plugin](https://github.com/vendure-ecommerce/vendure/tree/master/packages/dev-server/example-plugins/multivendor-plugin). The guides here will refer to specific parts of this plugin which you should consult to get a full understanding of how an implementation would look. :::caution"
        },
        "content": "",
        "sections": [
            {
                "id": "multi-vendor-plugin",
                "title": "Multi-vendor plugin",
                "content": "\nAll the concepts presented here have been implemented in our [example multi-vendor plugin](https://github.com/vendure-ecommerce/vendure/tree/master/packages/dev-server/example-plugins/multivendor-plugin). The guides here will refer to specific parts of this plugin which you should consult to get a full understanding of how an implementation would look.\n\n:::caution\n**Note:** the [example multi-vendor plugin](https://github.com/vendure-ecommerce/vendure/tree/master/packages/dev-server/example-plugins/multivendor-plugin) is for educational purposes only, and for the sake of clarity leaves out several parts that would be required in a production-ready solution, such as email verification and setup of a real payment solution.\n:::\n\n![The Admin UI Aggregate Order screen](./aggregate-order.webp)\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "sellers,-channels-&-roles",
                "title": "Sellers, Channels & Roles",
                "content": "\nThe core of Vendure's multi-vendor support is Channels. Read the [Channels guide](/guides/core-concepts/channels/) to get a more detailed understanding of how they work.\n\nEach Channel is assigned to a [Seller](/reference/typescript-api/entities/seller/), which is another term for the vendor who is selling things in our marketplace.\n\nSo the first thing to do is to implement a way to create a new Channel and Seller.\n\nIn the multi-vendor plugin, we have defined a new mutation in the Shop API which allows a new seller to register on our marketplace:\n\n\nExecuting the `registerNewSeller` mutation does the following:\n\n- Create a new [Seller](/reference/typescript-api/entities/seller/) representing the shop \"Bob's Parts\"\n- Create a new [Channel](/reference/typescript-api/entities/channel) and associate it with the new Seller\n- Create a [Role](/reference/typescript-api/entities/role) & [Administrator](/reference/typescript-api/entities/administrator) for Bob to access his shop admin account\n- Create a [ShippingMethod](/reference/typescript-api/entities/shipping-method) for Bob's shop\n- Create a [StockLocation](/reference/typescript-api/entities/stock-location) for Bob's shop\n\nBob can now log in to the Admin UI using the provided credentials and begin creating products to sell!\n\n\n",
                "subsections": [],
                "code": [
                    "mutation RegisterSeller {",
                    "  registerNewSeller(input: {",
                    "    shopName: \"Bob's Parts\",",
                    "    seller: {",
                    "      firstName: \"Bob\"",
                    "      lastName: \"Dobalina\"",
                    "      emailAddress: \"bob@bobs-parts.com\"",
                    "      password: \"test\",",
                    "    }",
                    "  }) {",
                    "    id",
                    "    code",
                    "    token",
                    "  }",
                    "}"
                ]
            },
            {
                "id": "assigning-orderlines-to-the-correct-seller",
                "title": "Assigning OrderLines to the correct Seller",
                "content": "\nIn order to correctly split the Order later, we need to assign each added OrderLine to the correct Seller. This is done with the [OrderSellerStrategy](/reference/typescript-api/orders/order-seller-strategy/) API, and specifically the `setOrderLineSellerChannel()` method.\n\nThe following logic will run any time the `addItemToOrder` mutation is executed from our storefront:\n\n\nThe end result is that each OrderLine in the Order will have its `sellerChannelId` property set to the correct Channel for the Seller.\n\n",
                "subsections": [],
                "code": [
                    "export class MultivendorSellerStrategy implements OrderSellerStrategy {",
                    "  // other properties omitted for brevity   ",
                    "    ",
                    "  async setOrderLineSellerChannel(ctx: RequestContext, orderLine: OrderLine) {",
                    "    await this.entityHydrator.hydrate(ctx, orderLine.productVariant, { relations: ['channels'] });",
                    "    const defaultChannel = await this.channelService.getDefaultChannel();",
                    "  ",
                    "    // If a ProductVariant is assigned to exactly 2 Channels, then one is the default Channel",
                    "    // and the other is the seller's Channel.",
                    "    if (orderLine.productVariant.channels.length === 2) {",
                    "      const sellerChannel = orderLine.productVariant.channels.find(",
                    "        c => !idsAreEqual(c.id, defaultChannel.id),",
                    "      );",
                    "      if (sellerChannel) {",
                    "        return sellerChannel;",
                    "      }",
                    "    }",
                    "  }",
                    "}"
                ]
            },
            {
                "id": "shipping",
                "title": "Shipping",
                "content": "\nWhen it comes time to choose a ShippingMethod for the Order, we need to ensure that the customer can only choose from the ShippingMethods which are supported by the Seller. To do this, we need to implement a [ShippingEligibilityChecker](/reference/typescript-api/shipping/shipping-eligibility-checker/) which will filter the available ShippingMethods based on the `sellerChannelId` properties of the OrderLines.\n\nHere's how we do it in the example plugin:\n\n\nIn the storefront, when it comes time to assign ShippingMethods to the Order, we need to ensure that\nevery OrderLine is covered by a valid ShippingMethod. We pass the ids of the eligible ShippingMethods to the `setOrderShippingMethod` mutation:\n\n\nNow we need a way to assign the correct method to each line in an Order. This is done with the [ShippingLineAssignmentStrategy](/reference/typescript-api/shipping/shipping-line-assignment-strategy/) API.\n\nWe will again be relying on the `sellerChannelId` property of the OrderLines to determine which ShippingMethod to assign to each line. Here's how we do it in the example plugin:\n\n\n",
                "subsections": [],
                "code": [
                    "export const multivendorShippingEligibilityChecker = new ShippingEligibilityChecker({",
                    "  // other properties omitted for brevity   ",
                    "    ",
                    "  check: async (ctx, order, args, method) => {",
                    "    await entityHydrator.hydrate(ctx, method, { relations: ['channels'] });",
                    "    await entityHydrator.hydrate(ctx, order, { relations: ['lines.sellerChannel'] });",
                    "    const sellerChannel = method.channels.find(c => c.code !== DEFAULT_CHANNEL_CODE);",
                    "    if (!sellerChannel) {",
                    "      return false;",
                    "    }",
                    "    for (const line of order.lines) {",
                    "      if (idsAreEqual(line.sellerChannelId, sellerChannel.id)) {",
                    "        return true;",
                    "      }",
                    "    }",
                    "    return false;",
                    "  },",
                    "});",
                    "mutation SetShippingMethod($ids: [ID!]!) {",
                    "  setOrderShippingMethod(shippingMethodId: $ids) {",
                    "    ... on Order {",
                    "      id",
                    "      state",
                    "      # ...etc",
                    "    }",
                    "    ... on ErrorResult {",
                    "      errorCode",
                    "      message",
                    "    }",
                    "  }",
                    "}",
                    "export class MultivendorShippingLineAssignmentStrategy implements ShippingLineAssignmentStrategy {",
                    "  // other properties omitted for brevity   ",
                    "    ",
                    "  async assignShippingLineToOrderLines(ctx: RequestContext, shippingLine: ShippingLine, order: Order) {",
                    "    // First we need to ensure the required relations are available",
                    "    // to work with.",
                    "    const defaultChannel = await this.channelService.getDefaultChannel();",
                    "    await this.entityHydrator.hydrate(ctx, shippingLine, { relations: ['shippingMethod.channels'] });",
                    "    const { channels } = shippingLine.shippingMethod;",
                    "  ",
                    "    // We assume that, if a ShippingMethod is assigned to exactly 2 Channels,",
                    "    // then one is the default Channel and the other is the seller's Channel.",
                    "    if (channels.length === 2) {",
                    "      const sellerChannel = channels.find(c => !idsAreEqual(c.id, defaultChannel.id));",
                    "      if (sellerChannel) {",
                    "        // Once we have established the seller's Channel, we can filter the OrderLines",
                    "        // that belong to that Channel. The `sellerChannelId` was previously established",
                    "        // in the `OrderSellerStrategy.setOrderLineSellerChannel()` method.",
                    "        return order.lines.filter(line => idsAreEqual(line.sellerChannelId, sellerChannel.id));",
                    "      }",
                    "    }",
                    "    return order.lines;",
                    "  }",
                    "}"
                ]
            },
            {
                "id": "splitting-orders-&-payment",
                "title": "Splitting orders & payment",
                "content": "\nWhen it comes to payments, there are many different ways that a multi-vendor marketplace might want to handle this. For example, the marketplace may collect all payments and then later disburse the funds to the Sellers. Or the marketplace may allow each Seller to connect their own payment gateway and collect payments directly.\n\nIn the example plugin, we have implemented a simplified version of a service like [Stripe Connect](https://stripe.com/connect), whereby each Seller has a `connectedAccountId` (we auto-generate a random string for the example when registering the Seller). When configuring the plugin we also specify a \"platform fee\" percentage, which is the percentage of the total Order value which the marketplace will collect as a fee. The remaining amount is then split between the Sellers.\n\nThe [OrderSellerStrategy](/reference/typescript-api/orders/order-seller-strategy/) API contains two methods which are used to first split the Order from a single order into one _Aggregate Order_ and multiple _Seller Orders_, and then to calculate the platform fee for each of the Seller Orders:\n\n- `OrderSellerStrategy.splitOrder`: Splits the OrderLines and ShippingLines of the Order into multiple groups, one for each Seller.\n- `OrderSellerStrategy.afterSellerOrdersCreated`: This method is run on every Seller Order created after the split, and we can use this to assign the platform fees to the Seller Order.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "custom-orderprocess",
                "title": "Custom OrderProcess",
                "content": "\nFinally, we need a custom [OrderProcess](/reference/typescript-api/orders/order-process/) which will help keep the state of the resulting Aggregate Order and its Seller Orders in sync. For example, we want to make sure that the Aggregate Order cannot be transitioned to the `Shipped` state unless all of its Seller Orders are also in the `Shipped` state.\n\nConversely, we can automatically set the state of the Aggregate Order to `Shipped` once all of its Seller Orders are in the `Shipped` state.\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "mutations",
        "metadata": {
            "title": "Mutations",
            "keywords": [
                "additemtoorder",
                "addpaymenttoorder",
                "adjustorderline",
                "applycouponcode",
                "authenticate",
                "createcustomeraddress",
                "deletecustomeraddress",
                "login",
                "logout",
                "refreshcustomerverification",
                "registercustomeraccount",
                "removeallorderlines",
                "removecouponcode",
                "removeorderline",
                "requestpasswordreset",
                "requestupdatecustomeremailaddress",
                "resetpassword",
                "setcustomerfororder",
                "setorderbillingaddress",
                "setordercustomfields",
                "setordershippingaddress",
                "setordershippingmethod",
                "transitionordertostate",
                "updatecustomer",
                "updatecustomeraddress",
                "updatecustomeremailaddress",
                "updatecustomerpassword",
                "verifycustomeraccount"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <div class=\"graphql-code-block\">"
        },
        "content": "",
        "sections": [
            {
                "id": "additemtoorder",
                "title": "addItemToOrder",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Adds an item to the order. If custom fields are defined on the OrderLine entity, a third argument 'customFields' will be available.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">addItemToOrder(productVariantId: <a href=\"/reference/graphql-api/shop/object-types#id\">ID</a>!, quantity: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a>!): <a href=\"/reference/graphql-api/shop/object-types#updateorderitemsresult\">UpdateOrderItemsResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "addpaymenttoorder",
                "title": "addPaymentToOrder",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Add a Payment to the Order</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">addPaymentToOrder(input: <a href=\"/reference/graphql-api/shop/input-types#paymentinput\">PaymentInput</a>!): <a href=\"/reference/graphql-api/shop/object-types#addpaymenttoorderresult\">AddPaymentToOrderResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "adjustorderline",
                "title": "adjustOrderLine",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Adjusts an OrderLine. If custom fields are defined on the OrderLine entity, a third argument 'customFields' of type <code>OrderLineCustomFieldsInput</code> will be available.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">adjustOrderLine(orderLineId: <a href=\"/reference/graphql-api/shop/object-types#id\">ID</a>!, quantity: <a href=\"/reference/graphql-api/shop/object-types#int\">Int</a>!): <a href=\"/reference/graphql-api/shop/object-types#updateorderitemsresult\">UpdateOrderItemsResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "applycouponcode",
                "title": "applyCouponCode",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Applies the given coupon code to the active Order</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">applyCouponCode(couponCode: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!): <a href=\"/reference/graphql-api/shop/object-types#applycouponcoderesult\">ApplyCouponCodeResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "authenticate",
                "title": "authenticate",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Authenticates the user using a named authentication strategy</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">authenticate(input: <a href=\"/reference/graphql-api/shop/input-types#authenticationinput\">AuthenticationInput</a>!, rememberMe: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a>): <a href=\"/reference/graphql-api/shop/object-types#authenticationresult\">AuthenticationResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "createcustomeraddress",
                "title": "createCustomerAddress",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Create a new Customer Address</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">createCustomerAddress(input: <a href=\"/reference/graphql-api/shop/input-types#createaddressinput\">CreateAddressInput</a>!): <a href=\"/reference/graphql-api/shop/object-types#address\">Address</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "deletecustomeraddress",
                "title": "deleteCustomerAddress",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Delete an existing Address</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">deleteCustomerAddress(id: <a href=\"/reference/graphql-api/shop/object-types#id\">ID</a>!): <a href=\"/reference/graphql-api/shop/object-types#success\">Success</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "login",
                "title": "login",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Authenticates the user using the native authentication strategy. This mutation is an alias for `authenticate(&#123; native: &#123; ... &#125;&#125;)`</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">login(username: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!, password: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!, rememberMe: <a href=\"/reference/graphql-api/shop/object-types#boolean\">Boolean</a>): <a href=\"/reference/graphql-api/shop/object-types#nativeauthenticationresult\">NativeAuthenticationResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "logout",
                "title": "logout",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">End the current authenticated session</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">logout: <a href=\"/reference/graphql-api/shop/object-types#success\">Success</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "refreshcustomerverification",
                "title": "refreshCustomerVerification",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Regenerate and send a verification token for a new Customer registration. Only applicable if <code>authOptions.requireVerification</code> is set to true.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">refreshCustomerVerification(emailAddress: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!): <a href=\"/reference/graphql-api/shop/object-types#refreshcustomerverificationresult\">RefreshCustomerVerificationResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "registercustomeraccount",
                "title": "registerCustomerAccount",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Register a Customer account with the given credentials. There are three possible registration flows:</div>\n\n<div class=\"graphql-code-line top-level comment\"></div>\n\n<div class=\"graphql-code-line top-level comment\">_If <code>authOptions.requireVerification</code> is set to `true`:_</div>\n\n<div class=\"graphql-code-line top-level comment\"></div>\n\n<div class=\"graphql-code-line top-level comment\">1. **The Customer is registered _with_ a password**. A verificationToken will be created (and typically emailed to the Customer). That</div>\n\n<div class=\"graphql-code-line top-level comment\">   verificationToken would then be passed to the <code>verifyCustomerAccount</code> mutation _without_ a password. The Customer is then</div>\n\n<div class=\"graphql-code-line top-level comment\">   verified and authenticated in one step.</div>\n\n<div class=\"graphql-code-line top-level comment\">2. **The Customer is registered _without_ a password**. A verificationToken will be created (and typically emailed to the Customer). That</div>\n\n<div class=\"graphql-code-line top-level comment\">   verificationToken would then be passed to the <code>verifyCustomerAccount</code> mutation _with_ the chosen password of the Customer. The Customer is then</div>\n\n<div class=\"graphql-code-line top-level comment\">   verified and authenticated in one step.</div>\n\n<div class=\"graphql-code-line top-level comment\"></div>\n\n<div class=\"graphql-code-line top-level comment\">_If <code>authOptions.requireVerification</code> is set to `false`:_</div>\n\n<div class=\"graphql-code-line top-level comment\"></div>\n\n<div class=\"graphql-code-line top-level comment\">3. The Customer _must_ be registered _with_ a password. No further action is needed - the Customer is able to authenticate immediately.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">registerCustomerAccount(input: <a href=\"/reference/graphql-api/shop/input-types#registercustomerinput\">RegisterCustomerInput</a>!): <a href=\"/reference/graphql-api/shop/object-types#registercustomeraccountresult\">RegisterCustomerAccountResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "removeallorderlines",
                "title": "removeAllOrderLines",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Remove all OrderLine from the Order</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">removeAllOrderLines: <a href=\"/reference/graphql-api/shop/object-types#removeorderitemsresult\">RemoveOrderItemsResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "removecouponcode",
                "title": "removeCouponCode",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Removes the given coupon code from the active Order</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">removeCouponCode(couponCode: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!): <a href=\"/reference/graphql-api/shop/object-types#order\">Order</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "removeorderline",
                "title": "removeOrderLine",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Remove an OrderLine from the Order</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">removeOrderLine(orderLineId: <a href=\"/reference/graphql-api/shop/object-types#id\">ID</a>!): <a href=\"/reference/graphql-api/shop/object-types#removeorderitemsresult\">RemoveOrderItemsResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "requestpasswordreset",
                "title": "requestPasswordReset",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Requests a password reset email to be sent</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">requestPasswordReset(emailAddress: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!): <a href=\"/reference/graphql-api/shop/object-types#requestpasswordresetresult\">RequestPasswordResetResult</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "requestupdatecustomeremailaddress",
                "title": "requestUpdateCustomerEmailAddress",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Request to update the emailAddress of the active Customer. If <code>authOptions.requireVerification</code> is enabled</div>\n\n<div class=\"graphql-code-line top-level comment\">(as is the default), then the <code>identifierChangeToken</code> will be assigned to the current User and</div>\n\n<div class=\"graphql-code-line top-level comment\">a IdentifierChangeRequestEvent will be raised. This can then be used e.g. by the EmailPlugin to email</div>\n\n<div class=\"graphql-code-line top-level comment\">that verification token to the Customer, which is then used to verify the change of email address.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">requestUpdateCustomerEmailAddress(password: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!, newEmailAddress: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!): <a href=\"/reference/graphql-api/shop/object-types#requestupdatecustomeremailaddressresult\">RequestUpdateCustomerEmailAddressResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "resetpassword",
                "title": "resetPassword",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Resets a Customer's password based on the provided token</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">resetPassword(token: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!, password: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!): <a href=\"/reference/graphql-api/shop/object-types#resetpasswordresult\">ResetPasswordResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "setcustomerfororder",
                "title": "setCustomerForOrder",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Set the Customer for the Order. Required only if the Customer is not currently logged in</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">setCustomerForOrder(input: <a href=\"/reference/graphql-api/shop/input-types#createcustomerinput\">CreateCustomerInput</a>!): <a href=\"/reference/graphql-api/shop/object-types#setcustomerfororderresult\">SetCustomerForOrderResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "setorderbillingaddress",
                "title": "setOrderBillingAddress",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Sets the billing address for this order</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">setOrderBillingAddress(input: <a href=\"/reference/graphql-api/shop/input-types#createaddressinput\">CreateAddressInput</a>!): <a href=\"/reference/graphql-api/shop/object-types#activeorderresult\">ActiveOrderResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "setordercustomfields",
                "title": "setOrderCustomFields",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Allows any custom fields to be set for the active order</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">setOrderCustomFields(input: <a href=\"/reference/graphql-api/shop/input-types#updateorderinput\">UpdateOrderInput</a>!): <a href=\"/reference/graphql-api/shop/object-types#activeorderresult\">ActiveOrderResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "setordershippingaddress",
                "title": "setOrderShippingAddress",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Sets the shipping address for this order</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">setOrderShippingAddress(input: <a href=\"/reference/graphql-api/shop/input-types#createaddressinput\">CreateAddressInput</a>!): <a href=\"/reference/graphql-api/shop/object-types#activeorderresult\">ActiveOrderResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "setordershippingmethod",
                "title": "setOrderShippingMethod",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Sets the shipping method by id, which can be obtained with the <code>eligibleShippingMethods</code> query.</div>\n\n<div class=\"graphql-code-line top-level comment\">An Order can have multiple shipping methods, in which case you can pass an array of ids. In this case,</div>\n\n<div class=\"graphql-code-line top-level comment\">you should configure a custom ShippingLineAssignmentStrategy in order to know which OrderLines each</div>\n\n<div class=\"graphql-code-line top-level comment\">shipping method will apply to.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">setOrderShippingMethod(shippingMethodId: [<a href=\"/reference/graphql-api/shop/object-types#id\">ID</a>!]!): <a href=\"/reference/graphql-api/shop/object-types#setordershippingmethodresult\">SetOrderShippingMethodResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "transitionordertostate",
                "title": "transitionOrderToState",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Transitions an Order to a new state. Valid next states can be found by querying `nextOrderStates`</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">transitionOrderToState(state: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!): <a href=\"/reference/graphql-api/shop/object-types#transitionordertostateresult\">TransitionOrderToStateResult</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "updatecustomer",
                "title": "updateCustomer",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Update an existing Customer</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">updateCustomer(input: <a href=\"/reference/graphql-api/shop/input-types#updatecustomerinput\">UpdateCustomerInput</a>!): <a href=\"/reference/graphql-api/shop/object-types#customer\">Customer</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "updatecustomeraddress",
                "title": "updateCustomerAddress",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Update an existing Address</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">updateCustomerAddress(input: <a href=\"/reference/graphql-api/shop/input-types#updateaddressinput\">UpdateAddressInput</a>!): <a href=\"/reference/graphql-api/shop/object-types#address\">Address</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "updatecustomeremailaddress",
                "title": "updateCustomerEmailAddress",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Confirm the update of the emailAddress with the provided token, which has been generated by the</div>\n\n<div class=\"graphql-code-line top-level comment\">`requestUpdateCustomerEmailAddress` mutation.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">updateCustomerEmailAddress(token: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!): <a href=\"/reference/graphql-api/shop/object-types#updatecustomeremailaddressresult\">UpdateCustomerEmailAddressResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "updatecustomerpassword",
                "title": "updateCustomerPassword",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Update the password of the active Customer</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">updateCustomerPassword(currentPassword: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!, newPassword: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!): <a href=\"/reference/graphql-api/shop/object-types#updatecustomerpasswordresult\">UpdateCustomerPasswordResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "verifycustomeraccount",
                "title": "verifyCustomerAccount",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Verify a Customer email address with the token sent to that address. Only applicable if <code>authOptions.requireVerification</code> is set to true.</div>\n\n<div class=\"graphql-code-line top-level comment\"></div>\n\n<div class=\"graphql-code-line top-level comment\">If the Customer was not registered with a password in the <code>registerCustomerAccount</code> mutation, the password _must_ be</div>\n\n<div class=\"graphql-code-line top-level comment\">provided here.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Mutation</span>\n &#123;</div>\n<div class=\"graphql-code-line \">verifyCustomerAccount(token: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!, password: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>): <a href=\"/reference/graphql-api/shop/object-types#verifycustomeraccountresult\">VerifyCustomerAccountResult</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "nativeauthenticationstrategy",
        "metadata": {
            "title": "NativeAuthenticationStrategy",
            "keywords": [
                "nativeauthenticationstrategy",
                "name",
                "init",
                "defineinputtype",
                "authenticate",
                "verifyuserpassword"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/auth/native-authentication-strategy.ts\" sourceLine=\"28\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "nativeauthenticationstrategy",
                "title": "NativeAuthenticationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/auth/native-authentication-strategy.ts\" sourceLine=\"28\" packageName=\"@vendure/core\" />\n\nThis strategy implements a username/password credential-based authentication, with the credentials\nbeing stored in the Vendure database. This is the default method of authentication, and it is advised\nto keep it configured unless there is a specific reason not to.\n\n* Implements: <code><a href='/reference/typescript-api/auth/authentication-strategy#authenticationstrategy'>AuthenticationStrategy</a>&#60;NativeAuthenticationData&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "defineinputtype",
                        "title": "defineInputType",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => DocumentNode`}   />\n\n\n"
                    },
                    {
                        "id": "authenticate",
                        "title": "authenticate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, data: NativeAuthenticationData) => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a> | false&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "verifyuserpassword",
                        "title": "verifyUserPassword",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, userId: <a href='/reference/typescript-api/common/id#id'>ID</a>, password: string) => Promise&#60;boolean&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class NativeAuthenticationStrategy implements AuthenticationStrategy<NativeAuthenticationData> {",
                    "    readonly name = NATIVE_AUTH_STRATEGY_NAME;",
                    "    init(injector: Injector) => ;",
                    "    defineInputType() => DocumentNode;",
                    "    authenticate(ctx: RequestContext, data: NativeAuthenticationData) => Promise<User | false>;",
                    "    verifyUserPassword(ctx: RequestContext, userId: ID, password: string) => Promise<boolean>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "nav-menu",
        "metadata": {
            "title": "Nav Menu",
            "keywords": [
                "nav-menu"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "navigation-types",
        "metadata": {
            "title": "Navigation Types",
            "keywords": [
                "navmenubadge",
                "type",
                "propagatetosection"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"19\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "navmenubadge",
                "title": "NavMenuBadge",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"19\" packageName=\"@vendure/admin-ui\" />\n\nA color-coded notification badge which will be displayed by the\nNavMenuItem's icon.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`NavMenuBadgeType`}   />\n\n\n"
                    },
                    {
                        "id": "propagatetosection",
                        "title": "propagateToSection",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\nIf true, the badge will propagate to the NavMenuItem's\nparent section, displaying a notification badge next\nto the section name.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface NavMenuBadge {",
                    "    type: NavMenuBadgeType;",
                    "    propagateToSection?: boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "navmenuitem",
        "metadata": {
            "title": "NavMenuItem",
            "keywords": [
                "navmenuitem",
                "id",
                "label",
                "routerlink",
                "onclick",
                "icon",
                "requirespermission",
                "statusbadge"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"37\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "navmenuitem",
                "title": "NavMenuItem",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"37\" packageName=\"@vendure/admin-ui\" />\n\nA NavMenuItem is a menu item in the main (left-hand side) nav\nbar.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "label",
                        "title": "label",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "routerlink",
                        "title": "routerLink",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/action-bar/router-link-definition#routerlinkdefinition'>RouterLinkDefinition</a>`}   />\n\n\n"
                    },
                    {
                        "id": "onclick",
                        "title": "onClick",
                        "content": "\n<MemberInfo kind=\"property\" type={`(event: MouseEvent) =&#62; void`}   />\n\n\n"
                    },
                    {
                        "id": "icon",
                        "title": "icon",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "requirespermission",
                        "title": "requiresPermission",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | ((userPermissions: string[]) =&#62; boolean)`}   />\n\n\n"
                    },
                    {
                        "id": "statusbadge",
                        "title": "statusBadge",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;<a href='/reference/admin-ui-api/nav-menu/navigation-types#navmenubadge'>NavMenuBadge</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface NavMenuItem {",
                    "    id: string;",
                    "    label: string;",
                    "    routerLink: RouterLinkDefinition;",
                    "    onClick?: (event: MouseEvent) => void;",
                    "    icon?: string;",
                    "    requiresPermission?: string | ((userPermissions: string[]) => boolean);",
                    "    statusBadge?: Observable<NavMenuBadge>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "navmenusection",
        "metadata": {
            "title": "NavMenuSection",
            "keywords": [
                "navmenusection",
                "id",
                "label",
                "items",
                "icon",
                "displaymode",
                "requirespermission",
                "collapsible",
                "collapsedbydefault"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"57\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "navmenusection",
                "title": "NavMenuSection",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"57\" packageName=\"@vendure/admin-ui\" />\n\nA NavMenuSection is a grouping of links in the main\n(left-hand side) nav bar.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "label",
                        "title": "label",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "items",
                        "title": "items",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/nav-menu/nav-menu-item#navmenuitem'>NavMenuItem</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "icon",
                        "title": "icon",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "displaymode",
                        "title": "displayMode",
                        "content": "\n<MemberInfo kind=\"property\" type={`'regular' | 'settings'`}   />\n\n\n"
                    },
                    {
                        "id": "requirespermission",
                        "title": "requiresPermission",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | ((userPermissions: string[]) =&#62; boolean)`}   />\n\nControl the display of this item based on the user permissions. Note: if you attempt to pass a\n<a href='/reference/typescript-api/auth/permission-definition#permissiondefinition'>PermissionDefinition</a> object, you will get a compilation error. Instead, pass the plain\nstring version. For example, if the permission is defined as:\nthen the generated permission strings will be:\n\n- `CreateProductReview`\n- `ReadProductReview`\n- `UpdateProductReview`\n- `DeleteProductReview`\n"
                    },
                    {
                        "id": "collapsible",
                        "title": "collapsible",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "collapsedbydefault",
                        "title": "collapsedByDefault",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface NavMenuSection {",
                    "    id: string;",
                    "    label: string;",
                    "    items: NavMenuItem[];",
                    "    icon?: string;",
                    "    displayMode?: 'regular' | 'settings';",
                    "    requiresPermission?: string | ((userPermissions: string[]) => boolean);",
                    "    collapsible?: boolean;",
                    "    collapsedByDefault?: boolean;",
                    "}",
                    "export const MyPermission = new PermissionDefinition('ProductReview');"
                ]
            }
        ]
    },
    {
        "id": "noopsessioncachestrategy",
        "metadata": {
            "title": "NoopSessionCacheStrategy",
            "keywords": [
                "noopsessioncachestrategy",
                "clear",
                "delete",
                "get",
                "set"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/session-cache/noop-session-cache-strategy.ts\" sourceLine=\"10\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "noopsessioncachestrategy",
                "title": "NoopSessionCacheStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/session-cache/noop-session-cache-strategy.ts\" sourceLine=\"10\" packageName=\"@vendure/core\" />\n\nA cache that doesn't cache. The cache lookup will miss every time\nso the session will always be taken from the database.\n\n* Implements: <code><a href='/reference/typescript-api/auth/session-cache-strategy#sessioncachestrategy'>SessionCacheStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "clear",
                        "title": "clear",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(sessionToken: string) => `}   />\n\n\n"
                    },
                    {
                        "id": "get",
                        "title": "get",
                        "content": "\n<MemberInfo kind=\"method\" type={`(sessionToken: string) => `}   />\n\n\n"
                    },
                    {
                        "id": "set",
                        "title": "set",
                        "content": "\n<MemberInfo kind=\"method\" type={`(session: <a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a>) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class NoopSessionCacheStrategy implements SessionCacheStrategy {",
                    "    clear() => ;",
                    "    delete(sessionToken: string) => ;",
                    "    get(sessionToken: string) => ;",
                    "    set(session: CachedSession) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "notificationservice",
        "metadata": {
            "title": "NotificationService",
            "keywords": [
                "notificationservice",
                "constructor",
                "success",
                "info",
                "warning",
                "error",
                "notify",
                "notificationtype",
                "toastconfig",
                "message",
                "translationvars",
                "type",
                "duration"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/notification/notification.service.ts\" sourceLine=\"54\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "notificationservice",
                "title": "NotificationService",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/notification/notification.service.ts\" sourceLine=\"54\" packageName=\"@vendure/admin-ui\" />\n\nProvides toast notification functionality.\n\n*Example*\n\nclass NotificationService {\n    constructor(i18nService: I18nService, resolver: ComponentFactoryResolver, overlayHostService: OverlayHostService)\n    success(message: string, translationVars?: { [key: string]: string | number }) => void;\n    info(message: string, translationVars?: { [key: string]: string | number }) => void;\n    warning(message: string, translationVars?: { [key: string]: string | number }) => void;\n    error(message: string, translationVars?: { [key: string]: string | number }) => void;\n    notify(config: ToastConfig) => void;\n}\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": ""
                    },
                    {
                        "id": "success",
                        "title": "success",
                        "content": ""
                    },
                    {
                        "id": "info",
                        "title": "info",
                        "content": ""
                    },
                    {
                        "id": "warning",
                        "title": "warning",
                        "content": ""
                    },
                    {
                        "id": "error",
                        "title": "error",
                        "content": ""
                    },
                    {
                        "id": "notify",
                        "title": "notify",
                        "content": ""
                    }
                ],
                "code": [
                    "class MyComponent {",
                    "  constructor(private notificationService: NotificationService) {}",
                    "",
                    "  save() {",
                    "    this.notificationService",
                    "        .success(_('asset.notify-create-assets-success'), {",
                    "          count: successCount,",
                    "        });",
                    "  }",
                    "}",
                    "",
                    "",
                    "<div className=\"members-wrapper\">",
                    "",
                    "",
                    "<MemberInfo kind=\"method\" type={`(i18nService: <a href='/reference/typescript-api/common/i18n-service#i18nservice'>I18nService</a>, resolver: ComponentFactoryResolver, overlayHostService: OverlayHostService) => NotificationService`}   />",
                    "",
                    "",
                    "",
                    "<MemberInfo kind=\"method\" type={`(message: string, translationVars?: { [key: string]: string | number }) => void`}   />",
                    "",
                    "Display a success toast notification",
                    "",
                    "<MemberInfo kind=\"method\" type={`(message: string, translationVars?: { [key: string]: string | number }) => void`}   />",
                    "",
                    "Display an info toast notification",
                    "",
                    "<MemberInfo kind=\"method\" type={`(message: string, translationVars?: { [key: string]: string | number }) => void`}   />",
                    "",
                    "Display a warning toast notification",
                    "",
                    "<MemberInfo kind=\"method\" type={`(message: string, translationVars?: { [key: string]: string | number }) => void`}   />",
                    "",
                    "Display an error toast notification",
                    "",
                    "<MemberInfo kind=\"method\" type={`(config: <a href='/reference/admin-ui-api/services/notification-service#toastconfig'>ToastConfig</a>) => void`}   />",
                    "",
                    "Display a toast notification.",
                    "",
                    "",
                    "</div>",
                    "",
                    ""
                ]
            },
            {
                "id": "notificationtype",
                "title": "NotificationType",
                "content": "type NotificationType = 'info' | 'success' | 'error' | 'warning'\n",
                "subsections": [],
                "code": [
                    "",
                    "<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/notification/notification.service.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />",
                    "",
                    "The types of notification available.",
                    "",
                    "",
                    ""
                ]
            },
            {
                "id": "toastconfig",
                "title": "ToastConfig",
                "content": "interface ToastConfig {\n    message: string;\n    translationVars?: { [key: string]: string | number };\n    type?: NotificationType;\n    duration?: number;\n}\n",
                "subsections": [
                    {
                        "id": "message",
                        "title": "message",
                        "content": ""
                    },
                    {
                        "id": "translationvars",
                        "title": "translationVars",
                        "content": ""
                    },
                    {
                        "id": "type",
                        "title": "type",
                        "content": ""
                    },
                    {
                        "id": "duration",
                        "title": "duration",
                        "content": ""
                    }
                ],
                "code": [
                    "",
                    "<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/notification/notification.service.ts\" sourceLine=\"23\" packageName=\"@vendure/admin-ui\" />",
                    "",
                    "Configuration for a toast notification.",
                    "",
                    "",
                    "<div className=\"members-wrapper\">",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`string`}   />",
                    "",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`{ [key: string]: string | number }`}   />",
                    "",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/services/notification-service#notificationtype'>NotificationType</a>`}   />",
                    "",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`number`}   />",
                    "",
                    "",
                    "",
                    "",
                    "</div>",
                    ""
                ]
            }
        ]
    },
    {
        "id": "objecttreecomponent",
        "metadata": {
            "title": "ObjectTreeComponent",
            "keywords": [
                "objecttreecomponent",
                "value",
                "isarrayitem",
                "depth",
                "expanded",
                "valueisarray",
                "entries",
                "constructor",
                "ngonchanges",
                "isobject"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/object-tree/object-tree.component.ts\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "objecttreecomponent",
                "title": "ObjectTreeComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/object-tree/object-tree.component.ts\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />\n\nThis component displays a plain JavaScript object as an expandable tree.\n\n*Example*\n\n\n* Implements: <code>OnChanges</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "value",
                        "title": "value",
                        "content": "\n<MemberInfo kind=\"property\" type={`{ [key: string]: any } | string`}   />\n\n\n"
                    },
                    {
                        "id": "isarrayitem",
                        "title": "isArrayItem",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "depth",
                        "title": "depth",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "expanded",
                        "title": "expanded",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "valueisarray",
                        "title": "valueIsArray",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "entries",
                        "title": "entries",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;{ key: string; value: any }&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(parent: <a href='/reference/admin-ui-api/components/object-tree-component#objecttreecomponent'>ObjectTreeComponent</a>) => ObjectTreeComponent`}   />\n\n\n"
                    },
                    {
                        "id": "ngonchanges",
                        "title": "ngOnChanges",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "isobject",
                        "title": "isObject",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: any) => boolean`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<vdr-object-tree [value]=\"payment.metadata\"></vdr-object-tree>",
                    "class ObjectTreeComponent implements OnChanges {",
                    "    @Input() value: { [key: string]: any } | string;",
                    "    @Input() isArrayItem = false;",
                    "    depth: number;",
                    "    expanded: boolean;",
                    "    valueIsArray: boolean;",
                    "    entries: Array<{ key: string; value: any }>;",
                    "    constructor(parent: ObjectTreeComponent)",
                    "    ngOnChanges() => ;",
                    "    isObject(value: any) => boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "onclickcontext",
        "metadata": {
            "title": "OnClickContext",
            "keywords": [
                "onclickcontext",
                "route",
                "dataservice",
                "notificationservice"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"77\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "onclickcontext",
                "title": "OnClickContext",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"77\" packageName=\"@vendure/admin-ui\" />\n\nUtilities available to the onClick handler of an ActionBarItem.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={`ActivatedRoute`}   />\n\n\n"
                    },
                    {
                        "id": "dataservice",
                        "title": "dataService",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/providers/data-service#dataservice'>DataService</a>`}   />\n\n\n"
                    },
                    {
                        "id": "notificationservice",
                        "title": "notificationService",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/providers/notification-service#notificationservice'>NotificationService</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface OnClickContext {",
                    "    route: ActivatedRoute;",
                    "    dataService: DataService;",
                    "    notificationService: NotificationService;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "order-workflow",
        "metadata": {
            "title": "Order Workflow",
            "keywords": [
                "order workflow",
                "order state",
                "structure of an order",
                "shop client order workflow",
                "manipulating the order",
                "checking out",
                "activeorderstrategy"
            ],
            "description": "An Order is a collection of one or more ProductVariants which can be purchased by a Customer. Orders are represented internally by the [Order entity]({{< relref \"order\" >}}) and in the GraphQL API by the [Order type]({{< relref \"/reference/graphql-api/shop/object-types#order\" >}}). Every Order has a `state` property of type [`OrderState`]({{< relref \"order-process\" >}}#orderstate). The following diagram shows the default states and how an Order transitions from one to the next. {{% alert %}} Note that this default workflow can be modified to better fit your business processes. See the [Customizing the Order Process guide]({{< relref \"customizing-the-order-process\" >}}). {{< /alert >}}"
        },
        "content": "",
        "sections": [
            {
                "id": "order-state",
                "title": "Order State",
                "content": "\nEvery Order has a `state` property of type [`OrderState`]({{< relref \"order-process\" >}}#orderstate). The following diagram shows the default states and how an Order transitions from one to the next.\n\n{{% alert %}}\nNote that this default workflow can be modified to better fit your business processes. See the [Customizing the Order Process guide]({{< relref \"customizing-the-order-process\" >}}).\n{{< /alert >}}\n\n![./order_state_diagram.png](./order_state_diagram.png)\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "structure-of-an-order",
                "title": "Structure of an Order",
                "content": "\nIn Vendure an [Order]({{< relref \"order\" >}}) consists of one or more [OrderLines]({{< relref \"order-line\" >}}) (representing a given quantity of a particular SKU).\n\nHere is a simplified diagram illustrating this relationship:\n\n![./order_class_diagram.png](./order_class_diagram.png)\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "shop-client-order-workflow",
                "title": "Shop client order workflow",
                "content": "\nThe [GraphQL Shop API Guide]({{< relref \"/guides/storefront/shop-api-guide\" >}}#order-flow) lists the GraphQL operations you will need to implement this workflow in your storefront client application.\n\nIn this section, we'll cover some examples of how these operations would look in your storefront.\n\n",
                "subsections": [
                    {
                        "id": "manipulating-the-order",
                        "title": "Manipulating the Order",
                        "content": "\nFirst, let's define a fragment for our Order that we can re-use in subsequent operations:\n\n\nThen we can add an item to the Order:\n\n\nTo remove an item from the order\n\n\nTo alter the quantity of an existing OrderLine\n\n\nAt any time we can query the contents of the active Order:\n\n\n"
                    },
                    {
                        "id": "checking-out",
                        "title": "Checking out",
                        "content": "\nDuring the checkout process, we'll need to make sure a Customer is assigned to the Order. If the Customer is already signed in, then this can be skipped since Vendure will have already assigned them. If not, then you'd execute:\n\n\nThen we need to set the shipping address:\n\n\nOnce the shipping address is set, we can find out which ShippingMethods can be used on this Order:\n\n\nThe Customer can then choose one of the available ShippingMethods, and we then set it on the Order:\n\n\nWe can now do the same for PaymentMethods:\n\n\nOnce the customer is ready to pay, we need to transition the Order to the `ArrangingPayment` state. In this state, no further modifications are permitted. If you _do_ need to modify the Order contents, you can always transition back to the `AddingItems` state:\n\n\nFinally, add a Payment to the Order:\n\n\nIf the Payment is successful, the Order will now be complete. You can forward the Customer to a confirmation page using the Order's `code`:\n\n\n"
                    }
                ],
                "code": [
                    "fragment ActiveOrder on Order {",
                    "  id",
                    "  code",
                    "  state",
                    "  couponCodes",
                    "  subTotalWithTax",
                    "  shippingWithTax",
                    "  totalWithTax",
                    "  totalQuantity",
                    "  lines {",
                    "    id",
                    "    productVariant {",
                    "      id",
                    "      name",
                    "    }",
                    "    featuredAsset {",
                    "      id",
                    "      preview",
                    "    }",
                    "    quantity",
                    "    linePriceWithTax",
                    "  }",
                    "}",
                    "mutation AddItemToOrder($productVariantId: ID! $quantity: Int!){",
                    "  addItemToOrder(productVariantId: $productVariantId, quantity: $quantity) {",
                    "    ... ActiveOrder",
                    "    ... on ErrorResult {",
                    "      errorCode",
                    "      message",
                    "    }",
                    "  }",
                    "}",
                    "mutation RemoveItemFromOrder($orderLineId: ID!){",
                    "  removeOrderLine(orderLineId: $orderLineId) {",
                    "    ... ActiveOrder",
                    "    ... on ErrorResult {",
                    "      errorCode",
                    "      message",
                    "    }",
                    "  }",
                    "}",
                    "mutation AdjustOrderLine($orderLineId: ID! $quantity: Int!){",
                    "  adjustOrderLine(orderLineId: $orderLineId, quantity: $quantity) {",
                    "    ... ActiveOrder",
                    "    ... on ErrorResult {",
                    "      errorCode",
                    "      message",
                    "    }",
                    "  }",
                    "}",
                    "query ActiveOrder {",
                    "  activeOrder {",
                    "    ... ActiveOrder",
                    "  }  ",
                    "}",
                    "mutation SetCustomerForOrder($input: CreateCustomerInput!){",
                    "  setCustomerForOrder(input: $input) {",
                    "    ... ActiveOrder",
                    "    ... on ErrorResult {",
                    "      errorCode",
                    "      message",
                    "    }",
                    "  }",
                    "}",
                    "mutation SetShippingAddress($input: CreateAddressInput!){",
                    "  setOrderShippingAddress(input: $input) {",
                    "    ... ActiveOrder",
                    "    ... on ErrorResult {",
                    "      errorCode",
                    "      message",
                    "    }",
                    "  }",
                    "}",
                    "query GetShippingMethods{",
                    "  eligibleShippingMethods {",
                    "    id",
                    "    name",
                    "    code",
                    "    description",
                    "    priceWithTax",
                    "  }",
                    "}",
                    "mutation SetShippingMethod($shippingMethodId: ID!){",
                    "  setOrderShippingMethod(shippingMethodId: $shippingMethodId) {",
                    "    ... ActiveOrder",
                    "    ... on ErrorResult {",
                    "      errorCode",
                    "      message",
                    "    }",
                    "  }",
                    "}",
                    "query GetPaymentMethods{",
                    "  eligiblePaymentMethods {",
                    "    id",
                    "    name",
                    "    code",
                    "    description",
                    "    isEligible",
                    "    eligibilityMessage",
                    "  }",
                    "}",
                    "mutation TransitionOrder($state: String!){",
                    "  transitionOrderToState(state: $state) {",
                    "    ... ActiveOrder",
                    "    ... on ErrorResult {",
                    "      errorCode",
                    "      message",
                    "    }",
                    "  }",
                    "}",
                    "mutation AddPayment($input: PaymentInput!){",
                    "  addPaymentToOrder(input: $input) {",
                    "    ... ActiveOrder",
                    "    ... on ErrorResult {",
                    "      errorCode",
                    "      message",
                    "    }",
                    "  }",
                    "}",
                    "query OrderByCode($code: String!) {",
                    "  orderByCode(code: $code) {",
                    "    ...ActiveOrder",
                    "  }",
                    "}"
                ]
            },
            {
                "id": "activeorderstrategy",
                "title": "ActiveOrderStrategy",
                "content": "\nIn the above examples, the active Order is always associated with the current session and is therefore implicit - which is why there is no need to pass an ID to each of the above operations.\n\nSometimes you _do_ want to be able to explicitly specify the Order you wish to operate on. In this case, you need to define a custom [ActiveOrderStrategy]({{< relref \"active-order-strategy\" >}}).\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "order",
        "metadata": {
            "title": "Order",
            "keywords": [
                "order",
                "constructor",
                "type",
                "sellerorders",
                "aggregateorder",
                "aggregateorderid",
                "code",
                "state",
                "active",
                "orderplacedat",
                "customer",
                "customerid",
                "lines",
                "surcharges",
                "couponcodes",
                "promotions",
                "shippingaddress",
                "billingaddress",
                "payments",
                "fulfillments",
                "currencycode",
                "customfields",
                "taxzoneid",
                "channels",
                "modifications",
                "subtotal",
                "subtotalwithtax",
                "shippinglines",
                "shipping",
                "shippingwithtax",
                "discounts",
                "total",
                "totalwithtax",
                "totalquantity",
                "taxsummary"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/order/order.entity.ts\" sourceLine=\"43\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "order",
                "title": "Order",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/order/order.entity.ts\" sourceLine=\"43\" packageName=\"@vendure/core\" />\n\nAn Order is created whenever a <a href='/reference/typescript-api/entities/customer#customer'>Customer</a> adds an item to the cart. It contains all the\ninformation required to fulfill an order: which <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>s in what quantities;\nthe shipping address and price; any applicable promotions; payments etc.\n\nAn Order exists in a well-defined state according to the <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a> type. A state machine\nis used to govern the transition from one state to another.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a></code>, <code>HasCustomFields</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;) => Order`}   />\n\n\n"
                    },
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`OrderType`}   />\n\n\n"
                    },
                    {
                        "id": "sellerorders",
                        "title": "sellerOrders",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "aggregateorder",
                        "title": "aggregateOrder",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>`}   />\n\n\n"
                    },
                    {
                        "id": "aggregateorderid",
                        "title": "aggregateOrderId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nA unique code for the Order, generated according to the\n<a href='/reference/typescript-api/orders/order-code-strategy#ordercodestrategy'>OrderCodeStrategy</a>. This should be used as an order reference\nfor Customers, rather than the Order's id.\n"
                    },
                    {
                        "id": "state",
                        "title": "state",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>`}   />\n\n\n"
                    },
                    {
                        "id": "active",
                        "title": "active",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\nWhether the Order is considered \"active\", meaning that the\nCustomer can still make changes to it and has not yet completed\nthe checkout process.\nThis is governed by the <a href='/reference/typescript-api/orders/order-placed-strategy#orderplacedstrategy'>OrderPlacedStrategy</a>.\n"
                    },
                    {
                        "id": "orderplacedat",
                        "title": "orderPlacedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date`}   />\n\nThe date & time that the Order was placed, i.e. the Customer\ncompleted the checkout and the Order is no longer \"active\".\nThis is governed by the <a href='/reference/typescript-api/orders/order-placed-strategy#orderplacedstrategy'>OrderPlacedStrategy</a>.\n"
                    },
                    {
                        "id": "customer",
                        "title": "customer",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/customer#customer'>Customer</a>`}   />\n\n\n"
                    },
                    {
                        "id": "customerid",
                        "title": "customerId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "lines",
                        "title": "lines",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "surcharges",
                        "title": "surcharges",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/surcharge#surcharge'>Surcharge</a>[]`}   />\n\nSurcharges are arbitrary modifications to the Order total which are neither\nProductVariants nor discounts resulting from applied Promotions. For example,\none-off discounts based on customer interaction, or surcharges based on payment\nmethods.\n"
                    },
                    {
                        "id": "couponcodes",
                        "title": "couponCodes",
                        "content": "\n<MemberInfo kind=\"property\" type={`string[]`}   />\n\nAn array of all coupon codes applied to the Order.\n"
                    },
                    {
                        "id": "promotions",
                        "title": "promotions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>[]`}   />\n\nPromotions applied to the order. Only gets populated after the payment process has completed,\ni.e. the Order is no longer active.\n"
                    },
                    {
                        "id": "shippingaddress",
                        "title": "shippingAddress",
                        "content": "\n<MemberInfo kind=\"property\" type={`OrderAddress`}   />\n\n\n"
                    },
                    {
                        "id": "billingaddress",
                        "title": "billingAddress",
                        "content": "\n<MemberInfo kind=\"property\" type={`OrderAddress`}   />\n\n\n"
                    },
                    {
                        "id": "payments",
                        "title": "payments",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/payment#payment'>Payment</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "fulfillments",
                        "title": "fulfillments",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "currencycode",
                        "title": "currencyCode",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/currency-code#currencycode'>CurrencyCode</a>`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomOrderFields`}   />\n\n\n"
                    },
                    {
                        "id": "taxzoneid",
                        "title": "taxZoneId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "modifications",
                        "title": "modifications",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order-modification#ordermodification'>OrderModification</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "subtotal",
                        "title": "subTotal",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe subTotal is the total of all OrderLines in the Order. This figure also includes any Order-level\ndiscounts which have been prorated (proportionally distributed) amongst the OrderItems.\nTo get a total of all OrderLines which does not account for prorated discounts, use the\nsum of <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>'s `discountedLinePrice` values.\n"
                    },
                    {
                        "id": "subtotalwithtax",
                        "title": "subTotalWithTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nSame as subTotal, but inclusive of tax.\n"
                    },
                    {
                        "id": "shippinglines",
                        "title": "shippingLines",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/shipping-line#shippingline'>ShippingLine</a>[]`}   />\n\nThe shipping charges applied to this order.\n"
                    },
                    {
                        "id": "shipping",
                        "title": "shipping",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe total of all the `shippingLines`.\n"
                    },
                    {
                        "id": "shippingwithtax",
                        "title": "shippingWithTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "discounts",
                        "title": "discounts",
                        "content": "\n<MemberInfo kind=\"property\" type={`Discount[]`}   />\n\n\n"
                    },
                    {
                        "id": "total",
                        "title": "total",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nEqual to `subTotal` plus `shipping`\n"
                    },
                    {
                        "id": "totalwithtax",
                        "title": "totalWithTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe final payable amount. Equal to `subTotalWithTax` plus `shippingWithTax`.\n"
                    },
                    {
                        "id": "totalquantity",
                        "title": "totalQuantity",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "taxsummary",
                        "title": "taxSummary",
                        "content": "\n<MemberInfo kind=\"property\" type={`OrderTaxSummary[]`}   />\n\nA summary of the taxes being applied to this Order.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Order extends VendureEntity implements ChannelAware, HasCustomFields {",
                    "    constructor(input?: DeepPartial<Order>)",
                    "    @Column('varchar', { default: OrderType.Regular })",
                    "    type: OrderType;",
                    "    @OneToMany(type => Order, sellerOrder => sellerOrder.aggregateOrder)",
                    "    sellerOrders: Order[];",
                    "    @Index()",
                    "    @ManyToOne(type => Order, aggregateOrder => aggregateOrder.sellerOrders)",
                    "    aggregateOrder?: Order;",
                    "    @EntityId({ nullable: true })",
                    "    aggregateOrderId?: ID;",
                    "    @Column()",
                    "    @Index({ unique: true })",
                    "    code: string;",
                    "    @Column('varchar') state: OrderState;",
                    "    @Column({ default: true })",
                    "    active: boolean;",
                    "    @Column({ nullable: true })",
                    "    orderPlacedAt?: Date;",
                    "    @Index()",
                    "    @ManyToOne(type => Customer)",
                    "    customer?: Customer;",
                    "    @EntityId({ nullable: true })",
                    "    customerId?: ID;",
                    "    @OneToMany(type => OrderLine, line => line.order)",
                    "    lines: OrderLine[];",
                    "    @OneToMany(type => Surcharge, surcharge => surcharge.order)",
                    "    surcharges: Surcharge[];",
                    "    @Column('simple-array')",
                    "    couponCodes: string[];",
                    "    @ManyToMany(type => Promotion)",
                    "    @JoinTable()",
                    "    promotions: Promotion[];",
                    "    @Column('simple-json') shippingAddress: OrderAddress;",
                    "    @Column('simple-json') billingAddress: OrderAddress;",
                    "    @OneToMany(type => Payment, payment => payment.order)",
                    "    payments: Payment[];",
                    "    @ManyToMany(type => Fulfillment)",
                    "    @JoinTable()",
                    "    fulfillments: Fulfillment[];",
                    "    @Column('varchar')",
                    "    currencyCode: CurrencyCode;",
                    "    @Column(type => CustomOrderFields)",
                    "    customFields: CustomOrderFields;",
                    "    @EntityId({ nullable: true })",
                    "    taxZoneId?: ID;",
                    "    @ManyToMany(type => Channel)",
                    "    @JoinTable()",
                    "    channels: Channel[];",
                    "    @OneToMany(type => OrderModification, modification => modification.order)",
                    "    modifications: OrderModification[];",
                    "    @Money()",
                    "    subTotal: number;",
                    "    @Money()",
                    "    subTotalWithTax: number;",
                    "    @OneToMany(type => ShippingLine, shippingLine => shippingLine.order)",
                    "    shippingLines: ShippingLine[];",
                    "    @Money({ default: 0 })",
                    "    shipping: number;",
                    "    @Money({ default: 0 })",
                    "    shippingWithTax: number;",
                    "    discounts: Discount[]",
                    "    total: number",
                    "    totalWithTax: number",
                    "    totalQuantity: number",
                    "    taxSummary: OrderTaxSummary[]",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "orderableasset",
        "metadata": {
            "title": "OrderableAsset",
            "keywords": [
                "orderableasset",
                "constructor",
                "assetid",
                "asset",
                "position"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/asset/orderable-asset.entity.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "orderableasset",
                "title": "OrderableAsset",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/asset/orderable-asset.entity.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nThis base class is extended in order to enable specific ordering of the one-to-many\nEntity -> Assets relation. Using a many-to-many relation does not provide a way\nto guarantee order of the Assets, so this entity is used in place of the\nusual join table that would be created by TypeORM.\nSee https://typeorm.io/#/many-to-many-relations/many-to-many-relations-with-custom-properties\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#orderable'>Orderable</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/orderable-asset#orderableasset'>OrderableAsset</a>&#62;) => OrderableAsset`}   />\n\n\n"
                    },
                    {
                        "id": "assetid",
                        "title": "assetId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "asset",
                        "title": "asset",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>`}   />\n\n\n"
                    },
                    {
                        "id": "position",
                        "title": "position",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class OrderableAsset extends VendureEntity implements Orderable {",
                    "    constructor(input?: DeepPartial<OrderableAsset>)",
                    "    @Column()",
                    "    assetId: ID;",
                    "    @Index()",
                    "    @ManyToOne(type => Asset, { eager: true, onDelete: 'CASCADE' })",
                    "    asset: Asset;",
                    "    @Column()",
                    "    position: number;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "orderbycodeaccessstrategy",
        "metadata": {
            "title": "OrderByCodeAccessStrategy",
            "keywords": [
                "orderbycodeaccessstrategy",
                "canaccessorder",
                "defaultorderbycodeaccessstrategy",
                "constructor"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/order-by-code-access-strategy.ts\" sourceLine=\"38\" packageName=\"@vendure/core\" since=\"1.1.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "orderbycodeaccessstrategy",
                "title": "OrderByCodeAccessStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/order-by-code-access-strategy.ts\" sourceLine=\"38\" packageName=\"@vendure/core\" since=\"1.1.0\" />\n\nThe OrderByCodeAccessStrategy determines how access to a placed Order via the\norderByCode query is granted.\nWith a custom strategy anonymous access could be made permanent or tied to specific\nconditions like IP range or an Order status.\n\n*Example*\n\nThis example grants access to the requested Order to anyone – unless it's Monday.\n\n:::info\n\nThis is configured via the `orderOptions.orderByCodeAccessStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "canaccessorder",
                        "title": "canAccessOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => boolean | Promise&#60;boolean&#62;`}   />\n\nGives or denies permission to access the requested Order\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "export class NotMondayOrderByCodeAccessStrategy implements OrderByCodeAccessStrategy {",
                    "    canAccessOrder(ctx: RequestContext, order: Order): boolean {",
                    "        const MONDAY = 1;",
                    "        const today = (new Date()).getDay();",
                    "",
                    "        return today !== MONDAY;",
                    "    }",
                    "}",
                    "interface OrderByCodeAccessStrategy extends InjectableStrategy {",
                    "    canAccessOrder(ctx: RequestContext, order: Order): boolean | Promise<boolean>;",
                    "}"
                ]
            },
            {
                "id": "defaultorderbycodeaccessstrategy",
                "title": "DefaultOrderByCodeAccessStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/order-by-code-access-strategy.ts\" sourceLine=\"57\" packageName=\"@vendure/core\" />\n\nThe default OrderByCodeAccessStrategy used by Vendure. It permitts permanent access to\nthe Customer owning the Order and anyone within a given time period after placing the Order\n(defaults to 2h).\n\n* Implements: <code><a href='/reference/typescript-api/orders/order-by-code-access-strategy#orderbycodeaccessstrategy'>OrderByCodeAccessStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(anonymousAccessDuration: string) => DefaultOrderByCodeAccessStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "canaccessorder",
                        "title": "canAccessOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => boolean`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultOrderByCodeAccessStrategy implements OrderByCodeAccessStrategy {",
                    "    constructor(anonymousAccessDuration: string)",
                    "    canAccessOrder(ctx: RequestContext, order: Order) => boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "ordercalculator",
        "metadata": {
            "title": "OrderCalculator",
            "keywords": [
                "ordercalculator",
                "constructor",
                "applypriceadjustments",
                "calculateordertotals"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/order-calculator/order-calculator.ts\" sourceLine=\"32\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "ordercalculator",
                "title": "OrderCalculator",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/order-calculator/order-calculator.ts\" sourceLine=\"32\" packageName=\"@vendure/core\" />\n\nThis helper is used when making changes to an Order, to apply all applicable price adjustments to that Order,\nincluding:\n\n- Promotions\n- Taxes\n- Shipping\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(configService: ConfigService, zoneService: <a href='/reference/typescript-api/services/zone-service#zoneservice'>ZoneService</a>, taxRateService: <a href='/reference/typescript-api/services/tax-rate-service#taxrateservice'>TaxRateService</a>, shippingMethodService: <a href='/reference/typescript-api/services/shipping-method-service#shippingmethodservice'>ShippingMethodService</a>, shippingCalculator: <a href='/reference/typescript-api/shipping/shipping-calculator#shippingcalculator'>ShippingCalculator</a>, requestContextCache: RequestContextCacheService) => OrderCalculator`}   />\n\n\n"
                    },
                    {
                        "id": "applypriceadjustments",
                        "title": "applyPriceAdjustments",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, promotions: <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>[], updatedOrderLines: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>[] = [], options?: { recalculateShipping?: boolean }) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;`}   />\n\nApplies taxes and promotions to an Order. Mutates the order object.\nReturns an array of any OrderItems which had new adjustments\napplied, either tax or promotions.\n"
                    },
                    {
                        "id": "calculateordertotals",
                        "title": "calculateOrderTotals",
                        "content": "\n<MemberInfo kind=\"method\" type={`(order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => `}   />\n\nSets the totals properties on an Order by summing each OrderLine, and taking\ninto account any Surcharges and ShippingLines. Does not save the Order, so\nthe entity must be persisted to the DB after calling this method.\n\nNote that this method does *not* evaluate any taxes or promotions. It assumes\nthat has already been done and is solely responsible for summing the\ntotals.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class OrderCalculator {",
                    "    constructor(configService: ConfigService, zoneService: ZoneService, taxRateService: TaxRateService, shippingMethodService: ShippingMethodService, shippingCalculator: ShippingCalculator, requestContextCache: RequestContextCacheService)",
                    "    applyPriceAdjustments(ctx: RequestContext, order: Order, promotions: Promotion[], updatedOrderLines: OrderLine[] = [], options?: { recalculateShipping?: boolean }) => Promise<Order>;",
                    "    calculateOrderTotals(order: Order) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "ordercodestrategy",
        "metadata": {
            "title": "OrderCodeStrategy",
            "keywords": [
                "ordercodestrategy",
                "generate",
                "defaultordercodestrategy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/order-code-strategy.ts\" sourceLine=\"39\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "ordercodestrategy",
                "title": "OrderCodeStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/order-code-strategy.ts\" sourceLine=\"39\" packageName=\"@vendure/core\" />\n\nThe OrderCodeStrategy determines how Order codes are generated.\nA custom strategy can be defined which e.g. integrates with an\nexisting system to generate a code:\n\n:::info\n\nThis is configured via the `orderOptions.orderCodeStrategy` property of\nyour VendureConfig.\n\n:::\n\n*Example*\n\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "generate",
                        "title": "generate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => string | Promise&#60;string&#62;`}   />\n\nGenerates the order code.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class MyOrderCodeStrategy implements OrderCodeStrategy {",
                    "  // Some imaginary service which calls out to an existing external",
                    "  // order management system.",
                    "  private mgmtService: ExternalOrderManagementService;",
                    "",
                    "  init(injector: Injector) {",
                    "    this.mgmtService = injector.get(ExternalOrderManagementService);",
                    "  }",
                    "",
                    "  async generate(ctx: RequestContext) {",
                    "    const result = await this.mgmtService.getAvailableOrderParams();",
                    "    return result.code;",
                    "  }",
                    "}",
                    "interface OrderCodeStrategy extends InjectableStrategy {",
                    "    generate(ctx: RequestContext): string | Promise<string>;",
                    "}"
                ]
            },
            {
                "id": "defaultordercodestrategy",
                "title": "DefaultOrderCodeStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/order-code-strategy.ts\" sourceLine=\"55\" packageName=\"@vendure/core\" />\n\nThe default OrderCodeStrategy generates a random string consisting\nof 16 uppercase letters and numbers.\n\n* Implements: <code><a href='/reference/typescript-api/orders/order-code-strategy#ordercodestrategy'>OrderCodeStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "generate",
                        "title": "generate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => string`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultOrderCodeStrategy implements OrderCodeStrategy {",
                    "    generate(ctx: RequestContext) => string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "orderhistoryentry",
        "metadata": {
            "title": "OrderHistoryEntry",
            "keywords": [
                "orderhistoryentry",
                "constructor",
                "order"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/history-entry/order-history-entry.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "orderhistoryentry",
                "title": "OrderHistoryEntry",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/history-entry/order-history-entry.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nRepresents an event in the history of a particular <a href='/reference/typescript-api/entities/order#order'>Order</a>.\n\n* Extends: <code><a href='/reference/typescript-api/entities/history-entry#historyentry'>HistoryEntry</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: DeepPartial&#60;<a href='/reference/typescript-api/entities/order-history-entry#orderhistoryentry'>OrderHistoryEntry</a>&#62;) => OrderHistoryEntry`}   />\n\n\n"
                    },
                    {
                        "id": "order",
                        "title": "order",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class OrderHistoryEntry extends HistoryEntry {",
                    "    constructor(input: DeepPartial<OrderHistoryEntry>)",
                    "    @Index()",
                    "    @ManyToOne(type => Order, { onDelete: 'CASCADE' })",
                    "    order: Order;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "orderhistoryentrycomponent",
        "metadata": {
            "title": "OrderHistoryEntryComponent",
            "keywords": [
                "orderhistoryentrycomponent",
                "order"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/custom-history-entry-component/history-entry-component-types.ts\" sourceLine=\"53\" packageName=\"@vendure/admin-ui\" since=\"1.9.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "orderhistoryentrycomponent",
                "title": "OrderHistoryEntryComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/custom-history-entry-component/history-entry-component-types.ts\" sourceLine=\"53\" packageName=\"@vendure/admin-ui\" since=\"1.9.0\" />\n\nUsed to implement a <a href='/reference/admin-ui-api/custom-history-entry-components/history-entry-component#historyentrycomponent'>HistoryEntryComponent</a> which requires access to the Order object.\n\n* Extends: <code><a href='/reference/admin-ui-api/custom-history-entry-components/history-entry-component#historyentrycomponent'>HistoryEntryComponent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "order",
                        "title": "order",
                        "content": "\n<MemberInfo kind=\"property\" type={`OrderDetailFragment`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface OrderHistoryEntryComponent extends HistoryEntryComponent {",
                    "    order: OrderDetailFragment;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "orderitempricecalculationstrategy",
        "metadata": {
            "title": "OrderItemPriceCalculationStrategy",
            "keywords": [
                "orderitempricecalculationstrategy",
                "when is the strategy invoked ?",
                "orderitempricecalculationstrategy vs promotions",
                "example use-cases",
                "calculateunitprice"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/order-item-price-calculation-strategy.ts\" sourceLine=\"60\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "orderitempricecalculationstrategy",
                "title": "OrderItemPriceCalculationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/order-item-price-calculation-strategy.ts\" sourceLine=\"60\" packageName=\"@vendure/core\" />\n\nThe OrderItemPriceCalculationStrategy defines the listPrice of an OrderLine when adding an item to an Order. By default the\n<a href='/reference/typescript-api/orders/default-order-item-price-calculation-strategy#defaultorderitempricecalculationstrategy'>DefaultOrderItemPriceCalculationStrategy</a> is used.\n\n:::info\n\nThis is configured via the `orderOptions.orderItemPriceCalculationStrategy` property of\nyour VendureConfig.\n\n:::\n\n",
                "subsections": [
                    {
                        "id": "when-is-the-strategy-invoked-?",
                        "title": "When is the strategy invoked ?",
                        "content": "* addItemToOrder (only on the new order line)\n* adjustOrderLine  (only on the adjusted order line)\n* setOrderShippingAddress (on all order lines)\n* setOrderBillingAddress (on all order lines)\n\n"
                    },
                    {
                        "id": "orderitempricecalculationstrategy-vs-promotions",
                        "title": "OrderItemPriceCalculationStrategy vs Promotions",
                        "content": "Both the OrderItemPriceCalculationStrategy and Promotions can be used to alter the price paid for a product.\n\nThe main difference is when a Promotion is applied, it adds a `discount` line to the Order, and the regular\nprice is used for the value of `OrderLine.listPrice` property, whereas\nthe OrderItemPriceCalculationStrategy actually alters the value of `OrderLine.listPrice` itself, and does not\nadd any discounts to the Order.\n\nUse OrderItemPriceCalculationStrategy if:\n\n* The price calculation is based on the properties of the ProductVariant and any CustomFields\n  specified on the OrderLine, for example via a product configurator.\n* The logic is a permanent part of your business requirements.\n\nUse Promotions if:\n\n* You want to implement \"discounts\" and \"special offers\"\n* The calculation is not a permanent part of your business requirements.\n* The price depends on dynamic aspects such as quantities and which other\n  ProductVariants are in the Order.\n* The configuration of the logic needs to be manipulated via the Admin UI.\n\n"
                    },
                    {
                        "id": "example-use-cases",
                        "title": "Example use-cases",
                        "content": "\nA custom OrderItemPriceCalculationStrategy can be used to implement things like:\n\n* A gift-wrapping service, where a boolean custom field is defined on the OrderLine. If `true`,\n  a gift-wrapping surcharge would be added to the price.\n* A product-configurator where e.g. various finishes, colors, and materials can be selected and stored\n  as OrderLine custom fields (see [the Custom Fields guide](/guides/developer-guide/custom-fields/).\n* Price lists or bulk pricing, where different price bands are stored e.g. in a customField on the ProductVariant, and this\n  is used to calculate the price based on the current quantity.\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n"
                    },
                    {
                        "id": "calculateunitprice",
                        "title": "calculateUnitPrice",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariant: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>, orderLineCustomFields: { [key: string]: any }, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, quantity: number) => <a href='/reference/typescript-api/common/price-calculation-result#pricecalculationresult'>PriceCalculationResult</a> | Promise&#60;<a href='/reference/typescript-api/common/price-calculation-result#pricecalculationresult'>PriceCalculationResult</a>&#62;`}   />\n\nReceives the ProductVariant to be added to the Order as well as any OrderLine custom fields and returns\nthe price for a single unit.\n\nNote: if you have any `relation` type custom fields defined on the OrderLine entity, they will only be\npassed in to this method if they are set to `eager: true`. Otherwise, you can use the <a href='/reference/typescript-api/data-access/entity-hydrator#entityhydrator'>EntityHydrator</a>\nto join the missing relations.\n\nNote: the `quantity` argument was added in v2.0.0\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface OrderItemPriceCalculationStrategy extends InjectableStrategy {",
                    "    calculateUnitPrice(",
                    "        ctx: RequestContext,",
                    "        productVariant: ProductVariant,",
                    "        orderLineCustomFields: { [key: string]: any },",
                    "        order: Order,",
                    "        quantity: number,",
                    "    ): PriceCalculationResult | Promise<PriceCalculationResult>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "orderline",
        "metadata": {
            "title": "OrderLine",
            "keywords": [
                "orderline",
                "constructor",
                "sellerchannel",
                "sellerchannelid",
                "shippingline",
                "shippinglineid",
                "productvariant",
                "productvariantid",
                "taxcategory",
                "featuredasset",
                "order",
                "quantity",
                "orderplacedquantity",
                "initiallistprice",
                "listprice",
                "listpriceincludestax",
                "adjustments",
                "taxlines",
                "cancellation",
                "customfields",
                "unitprice",
                "unitpricewithtax",
                "unitpricechangesinceadded",
                "unitpricewithtaxchangesinceadded",
                "discountedunitprice",
                "discountedunitpricewithtax",
                "proratedunitprice",
                "proratedunitpricewithtax",
                "unittax",
                "proratedunittax",
                "taxrate",
                "lineprice",
                "linepricewithtax",
                "discountedlineprice",
                "discountedlinepricewithtax",
                "discounts",
                "linetax",
                "proratedlineprice",
                "proratedlinepricewithtax",
                "proratedlinetax",
                "addadjustment",
                "clearadjustments"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/order-line/order-line.entity.ts\" sourceLine=\"29\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "orderline",
                "title": "OrderLine",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/order-line/order-line.entity.ts\" sourceLine=\"29\" packageName=\"@vendure/core\" />\n\nA single line on an <a href='/reference/typescript-api/entities/order#order'>Order</a> which contains information about the <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a> and\nquantity ordered, as well as the price and tax information.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code>HasCustomFields</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>&#62;) => OrderLine`}   />\n\n\n"
                    },
                    {
                        "id": "sellerchannel",
                        "title": "sellerChannel",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>`}   />\n\nThe <a href='/reference/typescript-api/entities/channel#channel'>Channel</a> of the <a href='/reference/typescript-api/entities/seller#seller'>Seller</a> for a multivendor setup.\n"
                    },
                    {
                        "id": "sellerchannelid",
                        "title": "sellerChannelId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "shippingline",
                        "title": "shippingLine",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/shipping-line#shippingline'>ShippingLine</a>`}   />\n\nThe <a href='/reference/typescript-api/entities/shipping-line#shippingline'>ShippingLine</a> to which this line has been assigned.\nThis is determined by the configured <a href='/reference/typescript-api/shipping/shipping-line-assignment-strategy#shippinglineassignmentstrategy'>ShippingLineAssignmentStrategy</a>.\n"
                    },
                    {
                        "id": "shippinglineid",
                        "title": "shippingLineId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "productvariant",
                        "title": "productVariant",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>`}   />\n\nThe <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a> which is being ordered.\n"
                    },
                    {
                        "id": "productvariantid",
                        "title": "productVariantId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "taxcategory",
                        "title": "taxCategory",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>`}   />\n\n\n"
                    },
                    {
                        "id": "featuredasset",
                        "title": "featuredAsset",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>`}   />\n\n\n"
                    },
                    {
                        "id": "order",
                        "title": "order",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>`}   />\n\n\n"
                    },
                    {
                        "id": "quantity",
                        "title": "quantity",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "orderplacedquantity",
                        "title": "orderPlacedQuantity",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe quantity of this OrderLine at the time the order was placed (as per the <a href='/reference/typescript-api/orders/order-placed-strategy#orderplacedstrategy'>OrderPlacedStrategy</a>).\n"
                    },
                    {
                        "id": "initiallistprice",
                        "title": "initialListPrice",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe price as calculated when the OrderLine was first added to the Order. Usually will be identical to the\n`listPrice`, except when the ProductVariant price has changed in the meantime and a re-calculation of\nthe Order has been performed.\n"
                    },
                    {
                        "id": "listprice",
                        "title": "listPrice",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThis is the price as listed by the ProductVariant (and possibly modified by the <a href='/reference/typescript-api/orders/order-item-price-calculation-strategy#orderitempricecalculationstrategy'>OrderItemPriceCalculationStrategy</a>),\nwhich, depending on the current Channel, may or may not include tax.\n"
                    },
                    {
                        "id": "listpriceincludestax",
                        "title": "listPriceIncludesTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\nWhether the listPrice includes tax, which depends on the settings of the current Channel.\n"
                    },
                    {
                        "id": "adjustments",
                        "title": "adjustments",
                        "content": "\n<MemberInfo kind=\"property\" type={`Adjustment[]`}   />\n\n\n"
                    },
                    {
                        "id": "taxlines",
                        "title": "taxLines",
                        "content": "\n<MemberInfo kind=\"property\" type={`TaxLine[]`}   />\n\n\n"
                    },
                    {
                        "id": "cancellation",
                        "title": "cancellation",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/stock-movement#cancellation'>Cancellation</a>`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomOrderLineFields`}   />\n\n\n"
                    },
                    {
                        "id": "unitprice",
                        "title": "unitPrice",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe price of a single unit, excluding tax and discounts.\n"
                    },
                    {
                        "id": "unitpricewithtax",
                        "title": "unitPriceWithTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe price of a single unit, including tax but excluding discounts.\n"
                    },
                    {
                        "id": "unitpricechangesinceadded",
                        "title": "unitPriceChangeSinceAdded",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nNon-zero if the `unitPrice` has changed since it was initially added to Order.\n"
                    },
                    {
                        "id": "unitpricewithtaxchangesinceadded",
                        "title": "unitPriceWithTaxChangeSinceAdded",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nNon-zero if the `unitPriceWithTax` has changed since it was initially added to Order.\n"
                    },
                    {
                        "id": "discountedunitprice",
                        "title": "discountedUnitPrice",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe price of a single unit including discounts, excluding tax.\n\nIf Order-level discounts have been applied, this will not be the\nactual taxable unit price (see `proratedUnitPrice`), but is generally the\ncorrect price to display to customers to avoid confusion\nabout the internal handling of distributed Order-level discounts.\n"
                    },
                    {
                        "id": "discountedunitpricewithtax",
                        "title": "discountedUnitPriceWithTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe price of a single unit including discounts and tax\n"
                    },
                    {
                        "id": "proratedunitprice",
                        "title": "proratedUnitPrice",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe actual unit price, taking into account both item discounts _and_ prorated (proportionally-distributed)\nOrder-level discounts. This value is the true economic value of a single unit in this OrderLine, and is used in tax\nand refund calculations.\n"
                    },
                    {
                        "id": "proratedunitpricewithtax",
                        "title": "proratedUnitPriceWithTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe `proratedUnitPrice` including tax.\n"
                    },
                    {
                        "id": "unittax",
                        "title": "unitTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "proratedunittax",
                        "title": "proratedUnitTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "taxrate",
                        "title": "taxRate",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "lineprice",
                        "title": "linePrice",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe total price of the line excluding tax and discounts.\n"
                    },
                    {
                        "id": "linepricewithtax",
                        "title": "linePriceWithTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe total price of the line including tax but excluding discounts.\n"
                    },
                    {
                        "id": "discountedlineprice",
                        "title": "discountedLinePrice",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe price of the line including discounts, excluding tax.\n"
                    },
                    {
                        "id": "discountedlinepricewithtax",
                        "title": "discountedLinePriceWithTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe price of the line including discounts and tax.\n"
                    },
                    {
                        "id": "discounts",
                        "title": "discounts",
                        "content": "\n<MemberInfo kind=\"property\" type={`Discount[]`}   />\n\n\n"
                    },
                    {
                        "id": "linetax",
                        "title": "lineTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe total tax on this line.\n"
                    },
                    {
                        "id": "proratedlineprice",
                        "title": "proratedLinePrice",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe actual line price, taking into account both item discounts _and_ prorated (proportionally-distributed)\nOrder-level discounts. This value is the true economic value of the OrderLine, and is used in tax\nand refund calculations.\n"
                    },
                    {
                        "id": "proratedlinepricewithtax",
                        "title": "proratedLinePriceWithTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe `proratedLinePrice` including tax.\n"
                    },
                    {
                        "id": "proratedlinetax",
                        "title": "proratedLineTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "addadjustment",
                        "title": "addAdjustment",
                        "content": "\n<MemberInfo kind=\"method\" type={`(adjustment: Adjustment) => `}   />\n\n\n"
                    },
                    {
                        "id": "clearadjustments",
                        "title": "clearAdjustments",
                        "content": "\n<MemberInfo kind=\"method\" type={`(type?: AdjustmentType) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class OrderLine extends VendureEntity implements HasCustomFields {",
                    "    constructor(input?: DeepPartial<OrderLine>)",
                    "    @Index()",
                    "    @ManyToOne(type => Channel, { nullable: true, onDelete: 'SET NULL' })",
                    "    sellerChannel?: Channel;",
                    "    @EntityId({ nullable: true })",
                    "    sellerChannelId?: ID;",
                    "    @Index()",
                    "    @ManyToOne(type => ShippingLine, { nullable: true, onDelete: 'SET NULL' })",
                    "    shippingLine?: ShippingLine;",
                    "    @EntityId({ nullable: true })",
                    "    shippingLineId?: ID;",
                    "    @Index()",
                    "    @ManyToOne(type => ProductVariant)",
                    "    productVariant: ProductVariant;",
                    "    @EntityId()",
                    "    productVariantId: ID;",
                    "    @Index()",
                    "    @ManyToOne(type => TaxCategory)",
                    "    taxCategory: TaxCategory;",
                    "    @Index()",
                    "    @ManyToOne(type => Asset)",
                    "    featuredAsset: Asset;",
                    "    @Index()",
                    "    @ManyToOne(type => Order, order => order.lines, { onDelete: 'CASCADE' })",
                    "    order: Order;",
                    "    @Column()",
                    "    quantity: number;",
                    "    @Column({ default: 0 })",
                    "    orderPlacedQuantity: number;",
                    "    @Money({ nullable: true })",
                    "    initialListPrice: number;",
                    "    @Money()",
                    "    listPrice: number;",
                    "    @Column()",
                    "    listPriceIncludesTax: boolean;",
                    "    @Column('simple-json')",
                    "    adjustments: Adjustment[];",
                    "    @Column('simple-json')",
                    "    taxLines: TaxLine[];",
                    "    @OneToOne(type => Cancellation, cancellation => cancellation.orderLine)",
                    "    cancellation: Cancellation;",
                    "    @Column(type => CustomOrderLineFields)",
                    "    customFields: CustomOrderLineFields;",
                    "    unitPrice: number",
                    "    unitPriceWithTax: number",
                    "    unitPriceChangeSinceAdded: number",
                    "    unitPriceWithTaxChangeSinceAdded: number",
                    "    discountedUnitPrice: number",
                    "    discountedUnitPriceWithTax: number",
                    "    proratedUnitPrice: number",
                    "    proratedUnitPriceWithTax: number",
                    "    unitTax: number",
                    "    proratedUnitTax: number",
                    "    taxRate: number",
                    "    linePrice: number",
                    "    linePriceWithTax: number",
                    "    discountedLinePrice: number",
                    "    discountedLinePriceWithTax: number",
                    "    discounts: Discount[]",
                    "    lineTax: number",
                    "    proratedLinePrice: number",
                    "    proratedLinePriceWithTax: number",
                    "    proratedLineTax: number",
                    "    addAdjustment(adjustment: Adjustment) => ;",
                    "    clearAdjustments(type?: AdjustmentType) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "orderlinereference",
        "metadata": {
            "title": "OrderLineReference",
            "keywords": [
                "fulfillmentline",
                "constructor",
                "fulfillment",
                "fulfillmentid",
                "orderlinereference",
                "quantity",
                "orderline",
                "orderlineid",
                "ordermodificationline",
                "modification",
                "modificationid",
                "refundline",
                "refund",
                "refundid"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/order-line-reference/fulfillment-line.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "fulfillmentline",
                "title": "FulfillmentLine",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/order-line-reference/fulfillment-line.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />\n\nThis entity represents a line from an <a href='/reference/typescript-api/entities/order#order'>Order</a> which has been fulfilled by a <a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a>.\n\n* Extends: <code><a href='/reference/typescript-api/entities/order-line-reference#orderlinereference'>OrderLineReference</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/order-line-reference#fulfillmentline'>FulfillmentLine</a>&#62;) => FulfillmentLine`}   />\n\n\n"
                    },
                    {
                        "id": "fulfillment",
                        "title": "fulfillment",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a>`}   />\n\n\n"
                    },
                    {
                        "id": "fulfillmentid",
                        "title": "fulfillmentId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class FulfillmentLine extends OrderLineReference {",
                    "    constructor(input?: DeepPartial<FulfillmentLine>)",
                    "    @Index()",
                    "    @ManyToOne(type => Fulfillment, fulfillment => fulfillment.lines)",
                    "    fulfillment: Fulfillment;",
                    "    @EntityId()",
                    "    fulfillmentId: ID;",
                    "}"
                ]
            },
            {
                "id": "orderlinereference",
                "title": "OrderLineReference",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/order-line-reference/order-line-reference.entity.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />\n\nThis is an abstract base class for entities which reference an <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "quantity",
                        "title": "quantity",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "orderline",
                        "title": "orderLine",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>`}   />\n\n\n"
                    },
                    {
                        "id": "orderlineid",
                        "title": "orderLineId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class OrderLineReference extends VendureEntity {",
                    "    @Column()",
                    "    quantity: number;",
                    "    @Index()",
                    "    @ManyToOne(type => OrderLine, { onDelete: 'CASCADE' })",
                    "    orderLine: OrderLine;",
                    "    @EntityId()",
                    "    orderLineId: ID;",
                    "}"
                ]
            },
            {
                "id": "ordermodificationline",
                "title": "OrderModificationLine",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/order-line-reference/order-modification-line.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />\n\nThis entity represents a line from an <a href='/reference/typescript-api/entities/order#order'>Order</a> which has been modified by an <a href='/reference/typescript-api/entities/order-modification#ordermodification'>OrderModification</a>.\n\n* Extends: <code><a href='/reference/typescript-api/entities/order-line-reference#orderlinereference'>OrderLineReference</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/order-line-reference#ordermodificationline'>OrderModificationLine</a>&#62;) => OrderModificationLine`}   />\n\n\n"
                    },
                    {
                        "id": "modification",
                        "title": "modification",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order-modification#ordermodification'>OrderModification</a>`}   />\n\n\n"
                    },
                    {
                        "id": "modificationid",
                        "title": "modificationId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class OrderModificationLine extends OrderLineReference {",
                    "    constructor(input?: DeepPartial<OrderModificationLine>)",
                    "    @Index()",
                    "    @ManyToOne(type => OrderModification, modification => modification.lines)",
                    "    modification: OrderModification;",
                    "    @EntityId()",
                    "    modificationId: ID;",
                    "}"
                ]
            },
            {
                "id": "refundline",
                "title": "RefundLine",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/order-line-reference/refund-line.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />\n\nThis entity represents a line from an <a href='/reference/typescript-api/entities/order#order'>Order</a> which has been refunded by a {@link Refund}.\n\n* Extends: <code><a href='/reference/typescript-api/entities/order-line-reference#orderlinereference'>OrderLineReference</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/order-line-reference#refundline'>RefundLine</a>&#62;) => RefundLine`}   />\n\n\n"
                    },
                    {
                        "id": "refund",
                        "title": "refund",
                        "content": "\n<MemberInfo kind=\"property\" type={`Refund`}   />\n\n\n"
                    },
                    {
                        "id": "refundid",
                        "title": "refundId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class RefundLine extends OrderLineReference {",
                    "    constructor(input?: DeepPartial<RefundLine>)",
                    "    @Index()",
                    "    @ManyToOne(type => Refund, refund => refund.lines)",
                    "    refund: Refund;",
                    "    @EntityId()",
                    "    refundId: ID;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "ordermergestrategy",
        "metadata": {
            "title": "OrderMergeStrategy",
            "keywords": [
                "ordermergestrategy",
                "merge",
                "mergedorderline",
                "orderlineid",
                "quantity",
                "customfields"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/order-merge-strategy.ts\" sourceLine=\"48\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "ordermergestrategy",
                "title": "OrderMergeStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/order-merge-strategy.ts\" sourceLine=\"48\" packageName=\"@vendure/core\" />\n\nAn OrderMergeStrategy defines what happens when a Customer with an existing Order\nsigns in with a guest Order, where both Orders may contain differing OrderLines.\n\nSomehow these differing OrderLines need to be reconciled into a single collection\nof OrderLines. The OrderMergeStrategy defines the rules governing this reconciliation.\n\n:::info\n\nThis is configured via the `orderOptions.mergeStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "merge",
                        "title": "merge",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, guestOrder: <a href='/reference/typescript-api/entities/order#order'>Order</a>, existingOrder: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => <a href='/reference/typescript-api/orders/order-merge-strategy#mergedorderline'>MergedOrderLine</a>[]`}   />\n\nMerges the lines of the guest Order with those of the existing Order which is associated\nwith the active customer.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface OrderMergeStrategy extends InjectableStrategy {",
                    "    merge(ctx: RequestContext, guestOrder: Order, existingOrder: Order): MergedOrderLine[];",
                    "}"
                ]
            },
            {
                "id": "mergedorderline",
                "title": "MergedOrderLine",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/order-merge-strategy.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />\n\nThe result of the <a href='/reference/typescript-api/orders/order-merge-strategy#ordermergestrategy'>OrderMergeStrategy</a> `merge` method.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "orderlineid",
                        "title": "orderLineId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "quantity",
                        "title": "quantity",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`any`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface MergedOrderLine {",
                    "    orderLineId: ID;",
                    "    quantity: number;",
                    "    customFields?: any;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "ordermodification",
        "metadata": {
            "title": "OrderModification",
            "keywords": [
                "ordermodification",
                "constructor",
                "note",
                "order",
                "lines",
                "surcharges",
                "pricechange",
                "payment",
                "refund",
                "shippingaddresschange",
                "billingaddresschange",
                "issettled"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/order-modification/order-modification.entity.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "ordermodification",
                "title": "OrderModification",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/order-modification/order-modification.entity.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />\n\nAn entity which represents a modification to an order which has been placed, and\nthen modified afterwards by an administrator.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/order-modification#ordermodification'>OrderModification</a>&#62;) => OrderModification`}   />\n\n\n"
                    },
                    {
                        "id": "note",
                        "title": "note",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "order",
                        "title": "order",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>`}   />\n\n\n"
                    },
                    {
                        "id": "lines",
                        "title": "lines",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order-line-reference#ordermodificationline'>OrderModificationLine</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "surcharges",
                        "title": "surcharges",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/surcharge#surcharge'>Surcharge</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "pricechange",
                        "title": "priceChange",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "payment",
                        "title": "payment",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/payment#payment'>Payment</a>`}   />\n\n\n"
                    },
                    {
                        "id": "refund",
                        "title": "refund",
                        "content": "\n<MemberInfo kind=\"property\" type={`Refund`}   />\n\n\n"
                    },
                    {
                        "id": "shippingaddresschange",
                        "title": "shippingAddressChange",
                        "content": "\n<MemberInfo kind=\"property\" type={`OrderAddress`}   />\n\n\n"
                    },
                    {
                        "id": "billingaddresschange",
                        "title": "billingAddressChange",
                        "content": "\n<MemberInfo kind=\"property\" type={`OrderAddress`}   />\n\n\n"
                    },
                    {
                        "id": "issettled",
                        "title": "isSettled",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class OrderModification extends VendureEntity {",
                    "    constructor(input?: DeepPartial<OrderModification>)",
                    "    @Column()",
                    "    note: string;",
                    "    @Index()",
                    "    @ManyToOne(type => Order, order => order.modifications, { onDelete: 'CASCADE' })",
                    "    order: Order;",
                    "    @OneToMany(type => OrderModificationLine, line => line.modification)",
                    "    lines: OrderModificationLine[];",
                    "    @OneToMany(type => Surcharge, surcharge => surcharge.orderModification)",
                    "    surcharges: Surcharge[];",
                    "    @Money()",
                    "    priceChange: number;",
                    "    @OneToOne(type => Payment)",
                    "    @JoinColumn()",
                    "    payment?: Payment;",
                    "    @OneToOne(type => Refund)",
                    "    @JoinColumn()",
                    "    refund?: Refund;",
                    "    @Column('simple-json', { nullable: true }) shippingAddressChange: OrderAddress;",
                    "    @Column('simple-json', { nullable: true }) billingAddressChange: OrderAddress;",
                    "    isSettled: boolean",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "ordermodifier",
        "metadata": {
            "title": "OrderModifier",
            "keywords": [
                "ordermodifier",
                "constructor",
                "constrainquantitytosaleable",
                "getexistingorderline",
                "getorcreateorderline",
                "updateorderlinequantity",
                "cancelorderbyorderlines",
                "modifyorder"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/order-modifier/order-modifier.ts\" sourceLine=\"80\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "ordermodifier",
                "title": "OrderModifier",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/order-modifier/order-modifier.ts\" sourceLine=\"80\" packageName=\"@vendure/core\" />\n\nThis helper is responsible for modifying the contents of an Order.\n\nNote:\nThere is not a clear separation of concerns between the OrderService and this, since\nthe OrderService also contains some method which modify the Order (e.g. removeItemFromOrder).\nSo this helper was mainly extracted to isolate the huge `modifyOrder` method since the\nOrderService was just growing too large. Future refactoring could improve the organization\nof these Order-related methods into a more clearly-delineated set of classes.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, orderCalculator: <a href='/reference/typescript-api/service-helpers/order-calculator#ordercalculator'>OrderCalculator</a>, paymentService: <a href='/reference/typescript-api/services/payment-service#paymentservice'>PaymentService</a>, countryService: <a href='/reference/typescript-api/services/country-service#countryservice'>CountryService</a>, stockMovementService: <a href='/reference/typescript-api/services/stock-movement-service#stockmovementservice'>StockMovementService</a>, productVariantService: <a href='/reference/typescript-api/services/product-variant-service#productvariantservice'>ProductVariantService</a>, customFieldRelationService: CustomFieldRelationService, promotionService: <a href='/reference/typescript-api/services/promotion-service#promotionservice'>PromotionService</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, entityHydrator: <a href='/reference/typescript-api/data-access/entity-hydrator#entityhydrator'>EntityHydrator</a>, historyService: <a href='/reference/typescript-api/services/history-service#historyservice'>HistoryService</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>) => OrderModifier`}   />\n\n\n"
                    },
                    {
                        "id": "constrainquantitytosaleable",
                        "title": "constrainQuantityToSaleable",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, variant: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>, quantity: number, existingQuantity:  = 0) => `}   />\n\nEnsure that the ProductVariant has sufficient saleable stock to add the given\nquantity to an Order.\n"
                    },
                    {
                        "id": "getexistingorderline",
                        "title": "getExistingOrderLine",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>, customFields?: { [key: string]: any }) => Promise&#60;<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a> | undefined&#62;`}   />\n\nGiven a ProductVariant ID and optional custom fields, this method will return an existing OrderLine that\nmatches, or `undefined` if no match is found.\n"
                    },
                    {
                        "id": "getorcreateorderline",
                        "title": "getOrCreateOrderLine",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>, customFields?: { [key: string]: any }) => `}   />\n\nReturns the OrderLine containing the given <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>, taking into account any custom field values. If no existing\nOrderLine is found, a new OrderLine will be created.\n"
                    },
                    {
                        "id": "updateorderlinequantity",
                        "title": "updateOrderLineQuantity",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderLine: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>, quantity: number, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>&#62;`}   />\n\nUpdates the quantity of an OrderLine, taking into account the available saleable stock level.\nReturns the actual quantity that the OrderLine was updated to (which may be less than the\n`quantity` argument if insufficient stock was available.\n"
                    },
                    {
                        "id": "cancelorderbyorderlines",
                        "title": "cancelOrderByOrderLines",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CancelOrderInput, lineInputs: OrderLineInput[]) => `}   />\n\n\n"
                    },
                    {
                        "id": "modifyorder",
                        "title": "modifyOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: ModifyOrderInput, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;JustErrorResults&#60;ModifyOrderResult&#62; | { order: <a href='/reference/typescript-api/entities/order#order'>Order</a>; modification: <a href='/reference/typescript-api/entities/order-modification#ordermodification'>OrderModification</a> }&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class OrderModifier {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, orderCalculator: OrderCalculator, paymentService: PaymentService, countryService: CountryService, stockMovementService: StockMovementService, productVariantService: ProductVariantService, customFieldRelationService: CustomFieldRelationService, promotionService: PromotionService, eventBus: EventBus, entityHydrator: EntityHydrator, historyService: HistoryService, translator: TranslatorService)",
                    "    constrainQuantityToSaleable(ctx: RequestContext, variant: ProductVariant, quantity: number, existingQuantity:  = 0) => ;",
                    "    getExistingOrderLine(ctx: RequestContext, order: Order, productVariantId: ID, customFields?: { [key: string]: any }) => Promise<OrderLine | undefined>;",
                    "    getOrCreateOrderLine(ctx: RequestContext, order: Order, productVariantId: ID, customFields?: { [key: string]: any }) => ;",
                    "    updateOrderLineQuantity(ctx: RequestContext, orderLine: OrderLine, quantity: number, order: Order) => Promise<OrderLine>;",
                    "    cancelOrderByOrderLines(ctx: RequestContext, input: CancelOrderInput, lineInputs: OrderLineInput[]) => ;",
                    "    modifyOrder(ctx: RequestContext, input: ModifyOrderInput, order: Order) => Promise<JustErrorResults<ModifyOrderResult> | { order: Order; modification: OrderModification }>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "orderoptions",
        "metadata": {
            "title": "OrderOptions",
            "keywords": [
                "orderoptions",
                "orderitemslimit",
                "orderlineitemslimit",
                "orderitempricecalculationstrategy",
                "process",
                "stockallocationstrategy",
                "mergestrategy",
                "checkoutmergestrategy",
                "ordercodestrategy",
                "orderbycodeaccessstrategy",
                "changedpricehandlingstrategy",
                "orderplacedstrategy",
                "activeorderstrategy",
                "ordersellerstrategy",
                "guestcheckoutstrategy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"461\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "orderoptions",
                "title": "OrderOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"461\" packageName=\"@vendure/core\" />\n\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "orderitemslimit",
                        "title": "orderItemsLimit",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"999\"   />\n\nThe maximum number of individual items allowed in a single order. This option exists\nto prevent excessive resource usage when dealing with very large orders. For example,\nif an order contains a million items, then any operations on that order (modifying a quantity,\nadding or removing an item) will require Vendure to loop through all million items\nto perform price calculations against active promotions and taxes. This can have a significant\nperformance impact for very large values.\n\nAttempting to exceed this limit will cause Vendure to throw a {@link OrderItemsLimitError}.\n"
                    },
                    {
                        "id": "orderlineitemslimit",
                        "title": "orderLineItemsLimit",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"999\"   />\n\nThe maximum number of items allowed per order line. This option is an addition\non the `orderItemsLimit` for more granular control. Note `orderItemsLimit` is still\nimportant in order to prevent excessive resource usage.\n\nAttempting to exceed this limit will cause Vendure to throw a {@link OrderItemsLimitError}.\n"
                    },
                    {
                        "id": "orderitempricecalculationstrategy",
                        "title": "orderItemPriceCalculationStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/order-item-price-calculation-strategy#orderitempricecalculationstrategy'>OrderItemPriceCalculationStrategy</a>`} default=\"DefaultPriceCalculationStrategy\"   />\n\nDefines the logic used to calculate the unit price of an OrderLine when adding an\nitem to an Order.\n"
                    },
                    {
                        "id": "process",
                        "title": "process",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/orders/order-process#orderprocess'>OrderProcess</a>&#60;any&#62;&#62;`} default=\"[]\"   />\n\nAllows the definition of custom states and transition logic for the order process state machine.\nTakes an array of objects implementing the <a href='/reference/typescript-api/orders/order-process#orderprocess'>OrderProcess</a> interface.\n"
                    },
                    {
                        "id": "stockallocationstrategy",
                        "title": "stockAllocationStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/stock-allocation-strategy#stockallocationstrategy'>StockAllocationStrategy</a>`} default=\"<a href='/reference/typescript-api/orders/default-stock-allocation-strategy#defaultstockallocationstrategy'>DefaultStockAllocationStrategy</a>\"   />\n\nDetermines the point of the order process at which stock gets allocated.\n"
                    },
                    {
                        "id": "mergestrategy",
                        "title": "mergeStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/order-merge-strategy#ordermergestrategy'>OrderMergeStrategy</a>`} default=\"<a href='/reference/typescript-api/orders/merge-strategies#mergeordersstrategy'>MergeOrdersStrategy</a>\"   />\n\nDefines the strategy used to merge a guest Order and an existing Order when\nsigning in.\n"
                    },
                    {
                        "id": "checkoutmergestrategy",
                        "title": "checkoutMergeStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/order-merge-strategy#ordermergestrategy'>OrderMergeStrategy</a>`} default=\"<a href='/reference/typescript-api/orders/merge-strategies#usegueststrategy'>UseGuestStrategy</a>\"   />\n\nDefines the strategy used to merge a guest Order and an existing Order when\nsigning in as part of the checkout flow.\n"
                    },
                    {
                        "id": "ordercodestrategy",
                        "title": "orderCodeStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/order-code-strategy#ordercodestrategy'>OrderCodeStrategy</a>`} default=\"<a href='/reference/typescript-api/orders/order-code-strategy#defaultordercodestrategy'>DefaultOrderCodeStrategy</a>\"   />\n\nAllows a user-defined function to create Order codes. This can be useful when\nintegrating with existing systems. By default, Vendure will generate a 16-character\nalphanumeric string.\n\nNote: when using a custom function for Order codes, bear in mind the database limit\nfor string types (e.g. 255 chars for a varchar field in MySQL), and also the need\nfor codes to be unique.\n"
                    },
                    {
                        "id": "orderbycodeaccessstrategy",
                        "title": "orderByCodeAccessStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/order-by-code-access-strategy#orderbycodeaccessstrategy'>OrderByCodeAccessStrategy</a>`} default=\"<a href='/reference/typescript-api/orders/order-by-code-access-strategy#defaultorderbycodeaccessstrategy'>DefaultOrderByCodeAccessStrategy</a>\"  since=\"1.1.0\"  />\n\nDefines the strategy used to check if and how an Order may be retrieved via the orderByCode query.\n\nThe default strategy permits permanent access to the Customer owning the Order and anyone\nwithin 2 hours after placing the Order.\n"
                    },
                    {
                        "id": "changedpricehandlingstrategy",
                        "title": "changedPriceHandlingStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/changed-price-handling-strategy#changedpricehandlingstrategy'>ChangedPriceHandlingStrategy</a>`} default=\"DefaultChangedPriceHandlingStrategy\"   />\n\nDefines how we handle the situation where an item exists in an Order, and\nthen later on another is added but in the meantime the price of the ProductVariant has changed.\n\nBy default, the latest price will be used. Any price changes resulting from using a newer price\nwill be reflected in the GraphQL `OrderLine.unitPrice[WithTax]ChangeSinceAdded` field.\n"
                    },
                    {
                        "id": "orderplacedstrategy",
                        "title": "orderPlacedStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/order-placed-strategy#orderplacedstrategy'>OrderPlacedStrategy</a>`} default=\"<a href='/reference/typescript-api/orders/default-order-placed-strategy#defaultorderplacedstrategy'>DefaultOrderPlacedStrategy</a>\"   />\n\nDefines the point of the order process at which the Order is set as \"placed\".\n"
                    },
                    {
                        "id": "activeorderstrategy",
                        "title": "activeOrderStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/active-order-strategy#activeorderstrategy'>ActiveOrderStrategy</a>&#60;any&#62; | Array&#60;<a href='/reference/typescript-api/orders/active-order-strategy#activeorderstrategy'>ActiveOrderStrategy</a>&#60;any&#62;&#62;`} default=\"<a href='/reference/typescript-api/orders/default-active-order-strategy#defaultactiveorderstrategy'>DefaultActiveOrderStrategy</a>\"  since=\"1.9.0\"  />\n\nDefines the strategy used to determine the active Order when interacting with Shop API operations\nsuch as `activeOrder` and `addItemToOrder`. By default, the strategy uses the active Session.\n\nNote that if multiple strategies are defined, they will be checked in order and the first one that\nreturns an Order will be used.\n"
                    },
                    {
                        "id": "ordersellerstrategy",
                        "title": "orderSellerStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/order-seller-strategy#ordersellerstrategy'>OrderSellerStrategy</a>`} default=\"<a href='/reference/typescript-api/orders/order-seller-strategy#defaultordersellerstrategy'>DefaultOrderSellerStrategy</a>\"  since=\"2.0.0\"  />\n\nDefines how Orders will be split amongst multiple Channels in a multivendor scenario.\n"
                    },
                    {
                        "id": "guestcheckoutstrategy",
                        "title": "guestCheckoutStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/guest-checkout-strategy#guestcheckoutstrategy'>GuestCheckoutStrategy</a>`} default=\"<a href='/reference/typescript-api/orders/default-guest-checkout-strategy#defaultguestcheckoutstrategy'>DefaultGuestCheckoutStrategy</a>\"  since=\"2.0.0\"  />\n\nDefines how we deal with guest checkouts.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface OrderOptions {",
                    "    orderItemsLimit?: number;",
                    "    orderLineItemsLimit?: number;",
                    "    orderItemPriceCalculationStrategy?: OrderItemPriceCalculationStrategy;",
                    "    process?: Array<OrderProcess<any>>;",
                    "    stockAllocationStrategy?: StockAllocationStrategy;",
                    "    mergeStrategy?: OrderMergeStrategy;",
                    "    checkoutMergeStrategy?: OrderMergeStrategy;",
                    "    orderCodeStrategy?: OrderCodeStrategy;",
                    "    orderByCodeAccessStrategy?: OrderByCodeAccessStrategy;",
                    "    changedPriceHandlingStrategy?: ChangedPriceHandlingStrategy;",
                    "    orderPlacedStrategy?: OrderPlacedStrategy;",
                    "    activeOrderStrategy?: ActiveOrderStrategy<any> | Array<ActiveOrderStrategy<any>>;",
                    "    orderSellerStrategy?: OrderSellerStrategy;",
                    "    guestCheckoutStrategy?: GuestCheckoutStrategy;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "orderplacedstrategy",
        "metadata": {
            "title": "OrderPlacedStrategy",
            "keywords": [
                "orderplacedstrategy",
                "shouldsetasplaced"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/order-placed-strategy.ts\" sourceLine=\"24\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "orderplacedstrategy",
                "title": "OrderPlacedStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/order-placed-strategy.ts\" sourceLine=\"24\" packageName=\"@vendure/core\" />\n\nThis strategy is responsible for deciding at which stage in the order process\nthe Order will be set as \"placed\" (i.e. the Customer has checked out, and\nnext it must be processed by an Administrator).\n\nBy default, the order is set as \"placed\" when it transitions from\n'ArrangingPayment' to either 'PaymentAuthorized' or 'PaymentSettled'.\n\n:::info\n\nThis is configured via the `orderOptions.orderPlacedStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "shouldsetasplaced",
                        "title": "shouldSetAsPlaced",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, fromState: <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, toState: <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => boolean | Promise&#60;boolean&#62;`}   />\n\nThis method is called whenever an _active_ Order transitions from one state to another.\nIf it resolves to `true`, then the Order will be set as \"placed\", which means:\n\n* Order.active = false\n* Order.placedAt = new Date()\n* Any active Promotions are linked to the Order\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface OrderPlacedStrategy extends InjectableStrategy {",
                    "    shouldSetAsPlaced(",
                    "        ctx: RequestContext,",
                    "        fromState: OrderState,",
                    "        toState: OrderState,",
                    "        order: Order,",
                    "    ): boolean | Promise<boolean>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "orderprocess",
        "metadata": {
            "title": "OrderProcess",
            "keywords": [
                "orderprocess",
                "transitions",
                "ontransitionstart",
                "ontransitionend",
                "ontransitionerror",
                "defaultorderprocessoptions",
                "checkmodificationpayments",
                "checkadditionalpaymentsamount",
                "checkallvariantsexist",
                "arrangingpaymentrequirescontents",
                "arrangingpaymentrequirescustomer",
                "arrangingpaymentrequiresshipping",
                "arrangingpaymentrequiresstock",
                "checkpaymentscovertotal",
                "checkallitemsbeforecancel",
                "checkfulfillmentstates",
                "configuredefaultorderprocess",
                "options",
                "defaultorderprocess",
                "orderstates",
                "orderstate",
                "ordertransitiondata",
                "ctx",
                "order"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/order-process.ts\" sourceLine=\"35\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "orderprocess",
                "title": "OrderProcess",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/order-process.ts\" sourceLine=\"35\" packageName=\"@vendure/core\" />\n\nAn OrderProcess is used to define the way the order process works as in: what states an Order can be\nin, and how it may transition from one state to another. Using the `onTransitionStart()` hook, an\nOrderProcess can perform checks before allowing a state transition to occur, and the `onTransitionEnd()`\nhook allows logic to be executed after a state change.\n\nFor detailed description of the interface members, see the <a href='/reference/typescript-api/state-machine/state-machine-config#statemachineconfig'>StateMachineConfig</a> docs.\n\n:::info\n\nThis is configured via the `orderOptions.process` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "transitions",
                        "title": "transitions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/transitions#transitions'>Transitions</a>&#60;State, State | <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>&#62; &#38; Partial&#60;<a href='/reference/typescript-api/state-machine/transitions#transitions'>Transitions</a>&#60;<a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a> | State&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "ontransitionstart",
                        "title": "onTransitionStart",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionstartfn'>OnTransitionStartFn</a>&#60;State | <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, <a href='/reference/typescript-api/orders/order-process#ordertransitiondata'>OrderTransitionData</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "ontransitionend",
                        "title": "onTransitionEnd",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionendfn'>OnTransitionEndFn</a>&#60;State | <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, <a href='/reference/typescript-api/orders/order-process#ordertransitiondata'>OrderTransitionData</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "ontransitionerror",
                        "title": "onTransitionError",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionerrorfn'>OnTransitionErrorFn</a>&#60;State | <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface OrderProcess<State extends keyof CustomOrderStates | string> extends InjectableStrategy {",
                    "    transitions?: Transitions<State, State | OrderState> & Partial<Transitions<OrderState | State>>;",
                    "    onTransitionStart?: OnTransitionStartFn<State | OrderState, OrderTransitionData>;",
                    "    onTransitionEnd?: OnTransitionEndFn<State | OrderState, OrderTransitionData>;",
                    "    onTransitionError?: OnTransitionErrorFn<State | OrderState>;",
                    "}"
                ]
            },
            {
                "id": "defaultorderprocessoptions",
                "title": "DefaultOrderProcessOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/default-order-process.ts\" sourceLine=\"50\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nOptions which can be passed to the <a href='/reference/typescript-api/orders/order-process#configuredefaultorderprocess'>configureDefaultOrderProcess</a> function\nto configure an instance of the default <a href='/reference/typescript-api/orders/order-process#orderprocess'>OrderProcess</a>. By default, all\noptions are set to `true`.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "checkmodificationpayments",
                        "title": "checkModificationPayments",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nPrevents an Order from transitioning out of the `Modifying` state if\nthe Order price has changed and there is no Payment or Refund associated\nwith the Modification.\n"
                    },
                    {
                        "id": "checkadditionalpaymentsamount",
                        "title": "checkAdditionalPaymentsAmount",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nPrevents an Order from transitioning out of the `ArrangingAdditionalPayment` state if\nthe Order's Payments do not cover the full amount of `totalWithTax`.\n"
                    },
                    {
                        "id": "checkallvariantsexist",
                        "title": "checkAllVariantsExist",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nPrevents the transition from `AddingItems` to any other state (apart from `Cancelled`) if\nand of the ProductVariants no longer exists due to deletion.\n"
                    },
                    {
                        "id": "arrangingpaymentrequirescontents",
                        "title": "arrangingPaymentRequiresContents",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nPrevents transition to the `ArrangingPayment` state if the active Order has no lines.\n"
                    },
                    {
                        "id": "arrangingpaymentrequirescustomer",
                        "title": "arrangingPaymentRequiresCustomer",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nPrevents transition to the `ArrangingPayment` state if the active Order has no customer\nassociated with it.\n"
                    },
                    {
                        "id": "arrangingpaymentrequiresshipping",
                        "title": "arrangingPaymentRequiresShipping",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nPrevents transition to the `ArrangingPayment` state if the active Order has no shipping\nmethod set.\n"
                    },
                    {
                        "id": "arrangingpaymentrequiresstock",
                        "title": "arrangingPaymentRequiresStock",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nPrevents transition to the `ArrangingPayment` state if there is insufficient saleable\nstock to cover the contents of the Order.\n"
                    },
                    {
                        "id": "checkpaymentscovertotal",
                        "title": "checkPaymentsCoverTotal",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nPrevents transition to the `PaymentAuthorized` or `PaymentSettled` states if the order\n`totalWithTax` amount is not covered by Payment(s) in the corresponding states.\n"
                    },
                    {
                        "id": "checkallitemsbeforecancel",
                        "title": "checkAllItemsBeforeCancel",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nPrevents transition to the `Cancelled` state unless all OrderItems are already\ncancelled.\n"
                    },
                    {
                        "id": "checkfulfillmentstates",
                        "title": "checkFulfillmentStates",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nPrevents transition to the `Shipped`, `PartiallyShipped`, `Delivered` & `PartiallyDelivered` states unless\nthere are corresponding Fulfillments in the correct states to allow this. E.g. `Shipped` only if all items in\nthe Order are part of a Fulfillment which itself is in the `Shipped` state.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface DefaultOrderProcessOptions {",
                    "    checkModificationPayments?: boolean;",
                    "    checkAdditionalPaymentsAmount?: boolean;",
                    "    checkAllVariantsExist?: boolean;",
                    "    arrangingPaymentRequiresContents?: boolean;",
                    "    arrangingPaymentRequiresCustomer?: boolean;",
                    "    arrangingPaymentRequiresShipping?: boolean;",
                    "    arrangingPaymentRequiresStock?: boolean;",
                    "    checkPaymentsCoverTotal?: boolean;",
                    "    checkAllItemsBeforeCancel?: boolean;",
                    "    checkFulfillmentStates?: boolean;",
                    "}"
                ]
            },
            {
                "id": "configuredefaultorderprocess",
                "title": "configureDefaultOrderProcess",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/default-order-process.ts\" sourceLine=\"163\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nUsed to configure a customized instance of the default <a href='/reference/typescript-api/orders/order-process#orderprocess'>OrderProcess</a> that ships with Vendure.\nUsing this function allows you to turn off certain checks and constraints that are enabled by default.\n\nThe <a href='/reference/typescript-api/orders/order-process#defaultorderprocessoptions'>DefaultOrderProcessOptions</a> type defines all available options. If you require even\nmore customization, you can create your own implementation of the <a href='/reference/typescript-api/orders/order-process#orderprocess'>OrderProcess</a> interface.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/typescript-api/orders/order-process#defaultorderprocessoptions'>DefaultOrderProcessOptions</a>`} />\n\n\n\n"
                    }
                ],
                "code": [
                    "import { configureDefaultOrderProcess, VendureConfig } from '@vendure/core';",
                    "",
                    "const myCustomOrderProcess = configureDefaultOrderProcess({",
                    "  // Disable the constraint that requires",
                    "  // Orders to have a shipping method assigned",
                    "  // before payment.",
                    "  arrangingPaymentRequiresShipping: false,",
                    "});",
                    "",
                    "export const config: VendureConfig = {",
                    "  orderOptions: {",
                    "    process: [myCustomOrderProcess],",
                    "  },",
                    "};",
                    "function configureDefaultOrderProcess(options: DefaultOrderProcessOptions): void"
                ]
            },
            {
                "id": "defaultorderprocess",
                "title": "defaultOrderProcess",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/default-order-process.ts\" sourceLine=\"477\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThis is the built-in <a href='/reference/typescript-api/orders/order-process#orderprocess'>OrderProcess</a> that ships with Vendure. A customized version of this process\ncan be created using the <a href='/reference/typescript-api/orders/order-process#configuredefaultorderprocess'>configureDefaultOrderProcess</a> function, which allows you to pass in an object\nto enable/disable certain checks.\n\n\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "orderstates",
                "title": "OrderStates",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/order-state-machine/order-state.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nAn interface to extend the <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a> type.\n\n\n\n",
                "subsections": [],
                "code": [
                    "interface OrderStates {",
                    "",
                    "}"
                ]
            },
            {
                "id": "orderstate",
                "title": "OrderState",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/order-state-machine/order-state.ts\" sourceLine=\"42\" packageName=\"@vendure/core\" />\n\nThese are the default states of the Order process. They can be augmented and\nmodified by using the <a href='/reference/typescript-api/orders/order-options#orderoptions'>OrderOptions</a> `process` property, and by default\nthe <a href='/reference/typescript-api/orders/order-process#defaultorderprocess'>defaultOrderProcess</a> will add the states\n\n- `ArrangingPayment`\n- `PaymentAuthorized`\n- `PaymentSettled`\n- `PartiallyShipped`\n- `Shipped`\n- `PartiallyDelivered`\n- `Delivered`\n- `Modifying`\n- `ArrangingAdditionalPayment`\n\n\n\n",
                "subsections": [],
                "code": [
                    "type OrderState = | 'Created'",
                    "    | 'Draft'",
                    "    | 'AddingItems'",
                    "    | 'Cancelled'",
                    "    | keyof CustomOrderStates",
                    "    | keyof OrderStates"
                ]
            },
            {
                "id": "ordertransitiondata",
                "title": "OrderTransitionData",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/order-state-machine/order-state.ts\" sourceLine=\"57\" packageName=\"@vendure/core\" />\n\nThis is the object passed to the <a href='/reference/typescript-api/orders/order-process#orderprocess'>OrderProcess</a> state transition hooks.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "ctx",
                        "title": "ctx",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>`}   />\n\n\n"
                    },
                    {
                        "id": "order",
                        "title": "order",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface OrderTransitionData {",
                    "    ctx: RequestContext;",
                    "    order: Order;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "orders",
        "metadata": {
            "title": "Orders",
            "keywords": [
                "orders",
                "the order workflow",
                "refunds",
                "cancellation",
                "modifying an order"
            ],
            "description": "An Order is created whenever someone adds an item to their cart in the storefront. In Vendure, there is no distinction between a \"cart\" and an \"order\". Thus a \"cart\" is just an Order which has not yet passed through the checkout process. The exact set of stages that an Order goes through can be customized in Vendure to suit your particular business needs, but we can look at the default steps to get a good idea of the typical workflow: ![./order-state-diagram-for-admin.png](./order-state-diagram-for-admin.png) When a new Order arrives, you would: 1. **Settle the payment** if not already done (this may or may not be needed depending on the way your payment provider is configured)."
        },
        "content": "",
        "sections": [
            {
                "id": "the-order-workflow",
                "title": "The Order Workflow",
                "content": "\nThe exact set of stages that an Order goes through can be customized in Vendure to suit your particular business needs, but we can look at the default steps to get a good idea of the typical workflow:\n\n![./order-state-diagram-for-admin.png](./order-state-diagram-for-admin.png)\n\nWhen a new Order arrives, you would:\n\n1. **Settle the payment** if not already done (this may or may not be needed depending on the way your payment provider is configured).\n    ![./screen-settle-payment.webp](./screen-settle-payment.webp)\n1. **Create a Fulfillment** by clicking the \"Fulfill Order\" button in the top-right of the order detail page. A Fulfillment represents the physical package which will be sent to the customer. You may split up your order into multiple Fulfillments, if that makes sense from a logistical point of view.\n    ![./screen-fulfillment.webp](./screen-fulfillment.webp)\n1. **Mark the Fulfillment as \"shipped\"** once the physical package leaves your warehouse. \n1. **Mark the Fulfillment as \"delivered\"** once you have notice of the package arriving with the customer. \n   ![./screen-fulfillment-shipped.webp](./screen-fulfillment-shipped.webp)\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "refunds",
                "title": "Refunds",
                "content": "\nYou can refund one or more items from an Order by clicking this menu item, which is available once the payments are settled:\n\n![./screen-refund-button.webp](./screen-refund-button.webp)\n\nThis will bring up a dialog which allows you to select which items to refund, as well as whether to refund shipping. You can also make an arbitrary adjustment to the refund amount if needed.\n\nA Refund is then made against the payment method used in that order. Some payment methods will handle refunds automatically, and others will expect you to perform the refund manually in your payment provider's admin interface, and then record the fact manually.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "cancellation",
                "title": "Cancellation",
                "content": "\nOne or more items may also be cancelled in a similar way to how refunds are handled. Performing a cancellation will return the selected items back into stock.\n\nCancellations and refunds are often done together, but do not have to be. For example, you may refund a faulty item without requiring the customer to return it. This would be a pure refund.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "modifying-an-order",
                "title": "Modifying an Order",
                "content": "\nAn Order can be modified after checkout is completed. \n\n![./screen-modify-button.webp](./screen-modify-button.webp)\n\nModification allows you to:\n\n* Alter the quantities of any items in the order\n* Remove items from the order  \n* Add new items to the order\n* Add arbitrary surcharges or discounts\n* Alter the shipping & billing address\n\n![./screen-modification.webp](./screen-modification.webp)\n\nOnce you have made the desired modifications, you preview the changes including the price difference.\n\nIf the modifications have resulted in an increased price (as in the above example), the Order will then be set into the \"Arranging additional payment\" state. This allows you to process another payment from the customer to make up the price difference.\n\nOn the other hand, if the new price is less than what was originally paid (e.g. if the quantity is decreased), then a Refund will be generated against the payment method used.\n\n\n\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "ordersellerstrategy",
        "metadata": {
            "title": "OrderSellerStrategy",
            "keywords": [
                "ordersellerstrategy",
                "setorderlinesellerchannel",
                "splitorder",
                "aftersellerorderscreated",
                "defaultordersellerstrategy",
                "splitordercontents",
                "channelid",
                "state",
                "lines",
                "shippinglines"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/order-seller-strategy.ts\" sourceLine=\"45\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "ordersellerstrategy",
                "title": "OrderSellerStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/order-seller-strategy.ts\" sourceLine=\"45\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThis strategy defines how an Order can be split into multiple sub-orders for the use-case of\na multivendor application.\n\n:::info\n\nThis is configured via the `orderOptions.orderSellerStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "setorderlinesellerchannel",
                        "title": "setOrderLineSellerChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderLine: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>) => <a href='/reference/typescript-api/entities/channel#channel'>Channel</a> | undefined | Promise&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a> | undefined&#62;`}   />\n\nThis method is called whenever a new OrderLine is added to the Order via the `addItemToOrder` mutation or the\nunderlying `addItemToOrder()` method of the <a href='/reference/typescript-api/services/order-service#orderservice'>OrderService</a>.\n\nIt should return the ID of the Channel to which this OrderLine will be assigned, which will be used to set the\n<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a> `sellerChannel` property.\n"
                    },
                    {
                        "id": "splitorder",
                        "title": "splitOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => <a href='/reference/typescript-api/orders/order-seller-strategy#splitordercontents'>SplitOrderContents</a>[] | Promise&#60;<a href='/reference/typescript-api/orders/order-seller-strategy#splitordercontents'>SplitOrderContents</a>[]&#62;`}   />\n\nUpon checkout (by default, when the Order moves from \"active\" to \"inactive\" according to the <a href='/reference/typescript-api/orders/order-placed-strategy#orderplacedstrategy'>OrderPlacedStrategy</a>),\nthis method will be called in order to split the Order into multiple Orders, one for each Seller.\n"
                    },
                    {
                        "id": "aftersellerorderscreated",
                        "title": "afterSellerOrdersCreated",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, aggregateOrder: <a href='/reference/typescript-api/entities/order#order'>Order</a>, sellerOrders: <a href='/reference/typescript-api/entities/order#order'>Order</a>[]) => void | Promise&#60;void&#62;`}   />\n\nThis method is called after splitting the orders, including calculating the totals for each of the seller Orders.\nThis method can be used to set platform fee surcharges on the seller Orders as well as perform any payment processing\nneeded.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface OrderSellerStrategy extends InjectableStrategy {",
                    "    setOrderLineSellerChannel?(",
                    "        ctx: RequestContext,",
                    "        orderLine: OrderLine,",
                    "    ): Channel | undefined | Promise<Channel | undefined>;",
                    "    splitOrder?(ctx: RequestContext, order: Order): SplitOrderContents[] | Promise<SplitOrderContents[]>;",
                    "    afterSellerOrdersCreated?(",
                    "        ctx: RequestContext,",
                    "        aggregateOrder: Order,",
                    "        sellerOrders: Order[],",
                    "    ): void | Promise<void>;",
                    "}"
                ]
            },
            {
                "id": "defaultordersellerstrategy",
                "title": "DefaultOrderSellerStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/default-order-seller-strategy.ts\" sourceLine=\"11\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThe DefaultOrderSellerStrategy treats the Order as single-vendor.\n\n* Implements: <code><a href='/reference/typescript-api/orders/order-seller-strategy#ordersellerstrategy'>OrderSellerStrategy</a></code>\n\n\n\n\n",
                "subsections": [],
                "code": [
                    "class DefaultOrderSellerStrategy implements OrderSellerStrategy {",
                    "",
                    "}"
                ]
            },
            {
                "id": "splitordercontents",
                "title": "SplitOrderContents",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/order-seller-strategy.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThe contents of the aggregate Order which make up a single seller Order.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "channelid",
                        "title": "channelId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "state",
                        "title": "state",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>`}   />\n\n\n"
                    },
                    {
                        "id": "lines",
                        "title": "lines",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "shippinglines",
                        "title": "shippingLines",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/shipping-line#shippingline'>ShippingLine</a>[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface SplitOrderContents {",
                    "    channelId: ID;",
                    "    state: OrderState;",
                    "    lines: OrderLine[];",
                    "    shippingLines: ShippingLine[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "orderservice",
        "metadata": {
            "title": "OrderService",
            "keywords": [
                "orderservice",
                "constructor",
                "getorderprocessstates",
                "findall",
                "findone",
                "findonebycode",
                "findonebyorderlineid",
                "findbycustomerid",
                "getorderpayments",
                "getordermodifications",
                "getpaymentrefunds",
                "getsellerorders",
                "getaggregateorder",
                "getorderchannels",
                "getactiveorderforuser",
                "create",
                "createdraft",
                "updatecustomfields",
                "additemtoorder",
                "adjustorderline",
                "removeitemfromorder",
                "removeallitemsfromorder",
                "addsurchargetoorder",
                "removesurchargefromorder",
                "applycouponcode",
                "removecouponcode",
                "getorderpromotions",
                "getnextorderstates",
                "setshippingaddress",
                "setbillingaddress",
                "geteligibleshippingmethods",
                "geteligiblepaymentmethods",
                "setshippingmethod",
                "transitiontostate",
                "transitionfulfillmenttostate",
                "modifyorder",
                "transitionpaymenttostate",
                "addpaymenttoorder",
                "addmanualpaymenttoorder",
                "settlepayment",
                "cancelpayment",
                "createfulfillment",
                "getorderfulfillments",
                "getordersurcharges",
                "cancelorder",
                "refundorder",
                "settlerefund",
                "addcustomertoorder",
                "addnotetoorder",
                "updateordernote",
                "deleteordernote",
                "deleteorder",
                "mergeorders",
                "applypriceadjustments"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/order.service.ts\" sourceLine=\"137\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "orderservice",
                "title": "OrderService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/order.service.ts\" sourceLine=\"137\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/order#order'>Order</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, productVariantService: <a href='/reference/typescript-api/services/product-variant-service#productvariantservice'>ProductVariantService</a>, customerService: <a href='/reference/typescript-api/services/customer-service#customerservice'>CustomerService</a>, countryService: <a href='/reference/typescript-api/services/country-service#countryservice'>CountryService</a>, orderCalculator: <a href='/reference/typescript-api/service-helpers/order-calculator#ordercalculator'>OrderCalculator</a>, shippingCalculator: <a href='/reference/typescript-api/shipping/shipping-calculator#shippingcalculator'>ShippingCalculator</a>, orderStateMachine: OrderStateMachine, orderMerger: OrderMerger, paymentService: <a href='/reference/typescript-api/services/payment-service#paymentservice'>PaymentService</a>, paymentStateMachine: PaymentStateMachine, paymentMethodService: <a href='/reference/typescript-api/services/payment-method-service#paymentmethodservice'>PaymentMethodService</a>, fulfillmentService: <a href='/reference/typescript-api/services/fulfillment-service#fulfillmentservice'>FulfillmentService</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, stockMovementService: <a href='/reference/typescript-api/services/stock-movement-service#stockmovementservice'>StockMovementService</a>, refundStateMachine: RefundStateMachine, historyService: <a href='/reference/typescript-api/services/history-service#historyservice'>HistoryService</a>, promotionService: <a href='/reference/typescript-api/services/promotion-service#promotionservice'>PromotionService</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, channelService: <a href='/reference/typescript-api/services/channel-service#channelservice'>ChannelService</a>, orderModifier: <a href='/reference/typescript-api/service-helpers/order-modifier#ordermodifier'>OrderModifier</a>, customFieldRelationService: CustomFieldRelationService, requestCache: RequestContextCacheService, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>, stockLevelService: <a href='/reference/typescript-api/services/stock-level-service#stocklevelservice'>StockLevelService</a>) => OrderService`}   />\n\n\n"
                    },
                    {
                        "id": "getorderprocessstates",
                        "title": "getOrderProcessStates",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => OrderProcessState[]`}   />\n\nReturns an array of all the configured states and transitions of the order process. This is\nbased on the default order process plus all configured <a href='/reference/typescript-api/orders/order-process#orderprocess'>OrderProcess</a> objects\ndefined in the <a href='/reference/typescript-api/orders/order-options#orderoptions'>OrderOptions</a> `process` array.\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: OrderListOptions, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findonebycode",
                        "title": "findOneByCode",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderCode: string, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findonebyorderlineid",
                        "title": "findOneByOrderLineId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderLineId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findbycustomerid",
                        "title": "findByCustomerId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, customerId: <a href='/reference/typescript-api/common/id#id'>ID</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getorderpayments",
                        "title": "getOrderPayments",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/payment#payment'>Payment</a>[]&#62;`}   />\n\nReturns all <a href='/reference/typescript-api/entities/payment#payment'>Payment</a> entities associated with the Order.\n"
                    },
                    {
                        "id": "getordermodifications",
                        "title": "getOrderModifications",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/order-modification#ordermodification'>OrderModification</a>[]&#62;`}   />\n\nReturns an array of any <a href='/reference/typescript-api/entities/order-modification#ordermodification'>OrderModification</a> entities associated with the Order.\n"
                    },
                    {
                        "id": "getpaymentrefunds",
                        "title": "getPaymentRefunds",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, paymentId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;Refund[]&#62;`}   />\n\nReturns any {@link Refund}s associated with a <a href='/reference/typescript-api/entities/payment#payment'>Payment</a>.\n"
                    },
                    {
                        "id": "getsellerorders",
                        "title": "getSellerOrders",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getaggregateorder",
                        "title": "getAggregateOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getorderchannels",
                        "title": "getOrderChannels",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getactiveorderforuser",
                        "title": "getActiveOrderForUser",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, userId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a> | undefined&#62;`}   />\n\nReturns any Order associated with the specified User's Customer account\nthat is still in the `active` state.\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, userId?: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;`}   />\n\nCreates a new, empty Order. If a `userId` is passed, the Order will get associated with that\nUser's Customer account.\n"
                    },
                    {
                        "id": "createdraft",
                        "title": "createDraft",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "updatecustomfields",
                        "title": "updateCustomFields",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, customFields: any) => `}   />\n\nUpdates the custom fields of an Order.\n"
                    },
                    {
                        "id": "additemtoorder",
                        "title": "addItemToOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>, quantity: number, customFields?: { [key: string]: any }) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;UpdateOrderItemsResult, <a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;&#62;`}   />\n\nAdds an item to the Order, either creating a new OrderLine or\nincrementing an existing one.\n"
                    },
                    {
                        "id": "adjustorderline",
                        "title": "adjustOrderLine",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, orderLineId: <a href='/reference/typescript-api/common/id#id'>ID</a>, quantity: number, customFields?: { [key: string]: any }) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;UpdateOrderItemsResult, <a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;&#62;`}   />\n\nAdjusts the quantity and/or custom field values of an existing OrderLine.\n"
                    },
                    {
                        "id": "removeitemfromorder",
                        "title": "removeItemFromOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, orderLineId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;RemoveOrderItemsResult, <a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;&#62;`}   />\n\nRemoves the specified OrderLine from the Order.\n"
                    },
                    {
                        "id": "removeallitemsfromorder",
                        "title": "removeAllItemsFromOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;RemoveOrderItemsResult, <a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;&#62;`}   />\n\nRemoves all OrderLines from the Order.\n"
                    },
                    {
                        "id": "addsurchargetoorder",
                        "title": "addSurchargeToOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, surchargeInput: Partial&#60;Omit&#60;<a href='/reference/typescript-api/entities/surcharge#surcharge'>Surcharge</a>, 'id' | 'createdAt' | 'updatedAt' | 'order'&#62;&#62;) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;`}   />\n\nAdds a <a href='/reference/typescript-api/entities/surcharge#surcharge'>Surcharge</a> to the Order.\n"
                    },
                    {
                        "id": "removesurchargefromorder",
                        "title": "removeSurchargeFromOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, surchargeId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;`}   />\n\nRemoves a <a href='/reference/typescript-api/entities/surcharge#surcharge'>Surcharge</a> from the Order.\n"
                    },
                    {
                        "id": "applycouponcode",
                        "title": "applyCouponCode",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, couponCode: string) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;ApplyCouponCodeResult, <a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;&#62;`}   />\n\nApplies a coupon code to the Order, which should be a valid coupon code as specified in the configuration\nof an active <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>.\n"
                    },
                    {
                        "id": "removecouponcode",
                        "title": "removeCouponCode",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, couponCode: string) => `}   />\n\nRemoves a coupon code from the Order.\n"
                    },
                    {
                        "id": "getorderpromotions",
                        "title": "getOrderPromotions",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>[]&#62;`}   />\n\nReturns all <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>s associated with an Order.\n"
                    },
                    {
                        "id": "getnextorderstates",
                        "title": "getNextOrderStates",
                        "content": "\n<MemberInfo kind=\"method\" type={`(order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => readonly <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>[]`}   />\n\nReturns the next possible states that the Order may transition to.\n"
                    },
                    {
                        "id": "setshippingaddress",
                        "title": "setShippingAddress",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, input: CreateAddressInput) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;`}   />\n\nSets the shipping address for the Order.\n"
                    },
                    {
                        "id": "setbillingaddress",
                        "title": "setBillingAddress",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, input: CreateAddressInput) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;`}   />\n\nSets the billing address for the Order.\n"
                    },
                    {
                        "id": "geteligibleshippingmethods",
                        "title": "getEligibleShippingMethods",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;ShippingMethodQuote[]&#62;`}   />\n\nReturns an array of quotes stating which <a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>s may be applied to this Order.\nThis is determined by the configured <a href='/reference/typescript-api/shipping/shipping-eligibility-checker#shippingeligibilitychecker'>ShippingEligibilityChecker</a> of each ShippingMethod.\n\nThe quote also includes a price for each method, as determined by the configured\n<a href='/reference/typescript-api/shipping/shipping-calculator#shippingcalculator'>ShippingCalculator</a> of each eligible ShippingMethod.\n"
                    },
                    {
                        "id": "geteligiblepaymentmethods",
                        "title": "getEligiblePaymentMethods",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;PaymentMethodQuote[]&#62;`}   />\n\nReturns an array of quotes stating which <a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>s may be used on this Order.\n"
                    },
                    {
                        "id": "setshippingmethod",
                        "title": "setShippingMethod",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, shippingMethodIds: <a href='/reference/typescript-api/common/id#id'>ID</a>[]) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;SetOrderShippingMethodResult, <a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;&#62;`}   />\n\nSets the ShippingMethod to be used on this Order.\n"
                    },
                    {
                        "id": "transitiontostate",
                        "title": "transitionToState",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, state: <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a> | OrderStateTransitionError&#62;`}   />\n\nTransitions the Order to the given state.\n"
                    },
                    {
                        "id": "transitionfulfillmenttostate",
                        "title": "transitionFulfillmentToState",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, fulfillmentId: <a href='/reference/typescript-api/common/id#id'>ID</a>, state: <a href='/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate'>FulfillmentState</a>) => Promise&#60;<a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a> | FulfillmentStateTransitionError&#62;`}   />\n\nTransitions a Fulfillment to the given state and then transitions the Order state based on\nwhether all Fulfillments of the Order are shipped or delivered.\n"
                    },
                    {
                        "id": "modifyorder",
                        "title": "modifyOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: ModifyOrderInput) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;ModifyOrderResult, <a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;&#62;`}   />\n\nAllows the Order to be modified, which allows several aspects of the Order to be changed:\n\n* Changes to OrderLine quantities\n* New OrderLines being added\n* Arbitrary <a href='/reference/typescript-api/entities/surcharge#surcharge'>Surcharge</a>s being added\n* Shipping or billing address changes\n\nSetting the `dryRun` input property to `true` will apply all changes, including updating the price of the\nOrder, except history entry and additional payment actions.\n\n__Using dryRun option, you must wrap function call in transaction manually.__\n"
                    },
                    {
                        "id": "transitionpaymenttostate",
                        "title": "transitionPaymentToState",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, paymentId: <a href='/reference/typescript-api/common/id#id'>ID</a>, state: <a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;TransitionPaymentToStateResult, <a href='/reference/typescript-api/entities/payment#payment'>Payment</a>&#62;&#62;`}   />\n\nTransitions the given <a href='/reference/typescript-api/entities/payment#payment'>Payment</a> to a new state. If the order totalWithTax price is then\ncovered by Payments, the Order state will be automatically transitioned to `PaymentSettled`\nor `PaymentAuthorized`.\n"
                    },
                    {
                        "id": "addpaymenttoorder",
                        "title": "addPaymentToOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, input: PaymentInput) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;AddPaymentToOrderResult, <a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;&#62;`}   />\n\nAdds a new Payment to the Order. If the Order totalWithTax is covered by Payments, then the Order\nstate will get automatically transitioned to the `PaymentSettled` or `PaymentAuthorized` state.\n"
                    },
                    {
                        "id": "addmanualpaymenttoorder",
                        "title": "addManualPaymentToOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: ManualPaymentInput) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;AddManualPaymentToOrderResult, <a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;&#62;`}   />\n\nThis method is used after modifying an existing completed order using the `modifyOrder()` method. If the modifications\ncause the order total to increase (such as when adding a new OrderLine), then there will be an outstanding charge to\npay.\n\nThis method allows you to add a new Payment and assumes the actual processing has been done manually, e.g. in the\ndashboard of your payment provider.\n"
                    },
                    {
                        "id": "settlepayment",
                        "title": "settlePayment",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, paymentId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;<a href='/reference/typescript-api/payment/payment-method-types#settlepaymentresult'>SettlePaymentResult</a>, <a href='/reference/typescript-api/entities/payment#payment'>Payment</a>&#62;&#62;`}   />\n\nSettles a payment by invoking the <a href='/reference/typescript-api/payment/payment-method-handler#paymentmethodhandler'>PaymentMethodHandler</a>'s `settlePayment()` method. Automatically\ntransitions the Order state if all Payments are settled.\n"
                    },
                    {
                        "id": "cancelpayment",
                        "title": "cancelPayment",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, paymentId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;<a href='/reference/typescript-api/payment/payment-method-types#cancelpaymentresult'>CancelPaymentResult</a>, <a href='/reference/typescript-api/entities/payment#payment'>Payment</a>&#62;&#62;`}   />\n\nCancels a payment by invoking the <a href='/reference/typescript-api/payment/payment-method-handler#paymentmethodhandler'>PaymentMethodHandler</a>'s `cancelPayment()` method (if defined), and transitions the Payment to\nthe `Cancelled` state.\n"
                    },
                    {
                        "id": "createfulfillment",
                        "title": "createFulfillment",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: FulfillOrderInput) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;AddFulfillmentToOrderResult, <a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a>&#62;&#62;`}   />\n\nCreates a new Fulfillment associated with the given Order and OrderItems.\n"
                    },
                    {
                        "id": "getorderfulfillments",
                        "title": "getOrderFulfillments",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;<a href='/reference/typescript-api/entities/fulfillment#fulfillment'>Fulfillment</a>[]&#62;`}   />\n\nReturns an array of all Fulfillments associated with the Order.\n"
                    },
                    {
                        "id": "getordersurcharges",
                        "title": "getOrderSurcharges",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/surcharge#surcharge'>Surcharge</a>[]&#62;`}   />\n\nReturns an array of all Surcharges associated with the Order.\n"
                    },
                    {
                        "id": "cancelorder",
                        "title": "cancelOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CancelOrderInput) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;CancelOrderResult, <a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;&#62;`}   />\n\nCancels an Order by transitioning it to the `Cancelled` state. If stock is being tracked for the ProductVariants\nin the Order, then new <a href='/reference/typescript-api/entities/stock-movement#stockmovement'>StockMovement</a>s will be created to correct the stock levels.\n"
                    },
                    {
                        "id": "refundorder",
                        "title": "refundOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: RefundOrderInput) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;RefundOrderResult, Refund&#62;&#62;`}   />\n\nCreates a {@link Refund} against the order and in doing so invokes the `createRefund()` method of the\n<a href='/reference/typescript-api/payment/payment-method-handler#paymentmethodhandler'>PaymentMethodHandler</a>.\n"
                    },
                    {
                        "id": "settlerefund",
                        "title": "settleRefund",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: SettleRefundInput) => Promise&#60;Refund&#62;`}   />\n\nSettles a Refund by transitioning it to the `Settled` state.\n"
                    },
                    {
                        "id": "addcustomertoorder",
                        "title": "addCustomerToOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>, customer: <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;`}   />\n\nAssociates a Customer with the Order.\n"
                    },
                    {
                        "id": "addnotetoorder",
                        "title": "addNoteToOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: AddNoteToOrderInput) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;`}   />\n\nCreates a new \"ORDER_NOTE\" type <a href='/reference/typescript-api/entities/order-history-entry#orderhistoryentry'>OrderHistoryEntry</a> in the Order's history timeline.\n"
                    },
                    {
                        "id": "updateordernote",
                        "title": "updateOrderNote",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateOrderNoteInput) => Promise&#60;<a href='/reference/typescript-api/entities/history-entry#historyentry'>HistoryEntry</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "deleteordernote",
                        "title": "deleteOrderNote",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "deleteorder",
                        "title": "deleteOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderOrId: <a href='/reference/typescript-api/common/id#id'>ID</a> | <a href='/reference/typescript-api/entities/order#order'>Order</a>) => `}  since=\"1.5.0\"  />\n\nDeletes an Order, ensuring that any Sessions that reference this Order are dereferenced before deletion.\n"
                    },
                    {
                        "id": "mergeorders",
                        "title": "mergeOrders",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>, guestOrder?: <a href='/reference/typescript-api/entities/order#order'>Order</a>, existingOrder?: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a> | undefined&#62;`}   />\n\nWhen a guest user with an anonymous Order signs in and has an existing Order associated with that Customer,\nwe need to reconcile the contents of the two orders.\n\nThe logic used to do the merging is specified in the <a href='/reference/typescript-api/orders/order-options#orderoptions'>OrderOptions</a> `mergeStrategy` config setting.\n"
                    },
                    {
                        "id": "applypriceadjustments",
                        "title": "applyPriceAdjustments",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, updatedOrderLines?: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>[]) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;`}   />\n\nApplies promotions, taxes and shipping to the Order. If the `updatedOrderLines` argument is passed in,\nthen all of those OrderLines will have their prices re-calculated using the configured <a href='/reference/typescript-api/orders/order-item-price-calculation-strategy#orderitempricecalculationstrategy'>OrderItemPriceCalculationStrategy</a>.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class OrderService {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, productVariantService: ProductVariantService, customerService: CustomerService, countryService: CountryService, orderCalculator: OrderCalculator, shippingCalculator: ShippingCalculator, orderStateMachine: OrderStateMachine, orderMerger: OrderMerger, paymentService: PaymentService, paymentStateMachine: PaymentStateMachine, paymentMethodService: PaymentMethodService, fulfillmentService: FulfillmentService, listQueryBuilder: ListQueryBuilder, stockMovementService: StockMovementService, refundStateMachine: RefundStateMachine, historyService: HistoryService, promotionService: PromotionService, eventBus: EventBus, channelService: ChannelService, orderModifier: OrderModifier, customFieldRelationService: CustomFieldRelationService, requestCache: RequestContextCacheService, translator: TranslatorService, stockLevelService: StockLevelService)",
                    "    getOrderProcessStates() => OrderProcessState[];",
                    "    findAll(ctx: RequestContext, options?: OrderListOptions, relations?: RelationPaths<Order>) => Promise<PaginatedList<Order>>;",
                    "    findOne(ctx: RequestContext, orderId: ID, relations?: RelationPaths<Order>) => Promise<Order | undefined>;",
                    "    findOneByCode(ctx: RequestContext, orderCode: string, relations?: RelationPaths<Order>) => Promise<Order | undefined>;",
                    "    findOneByOrderLineId(ctx: RequestContext, orderLineId: ID, relations?: RelationPaths<Order>) => Promise<Order | undefined>;",
                    "    findByCustomerId(ctx: RequestContext, customerId: ID, options?: ListQueryOptions<Order>, relations?: RelationPaths<Order>) => Promise<PaginatedList<Order>>;",
                    "    getOrderPayments(ctx: RequestContext, orderId: ID) => Promise<Payment[]>;",
                    "    getOrderModifications(ctx: RequestContext, orderId: ID) => Promise<OrderModification[]>;",
                    "    getPaymentRefunds(ctx: RequestContext, paymentId: ID) => Promise<Refund[]>;",
                    "    getSellerOrders(ctx: RequestContext, order: Order) => Promise<Order[]>;",
                    "    getAggregateOrder(ctx: RequestContext, order: Order) => Promise<Order | undefined>;",
                    "    getOrderChannels(ctx: RequestContext, order: Order) => Promise<Channel[]>;",
                    "    getActiveOrderForUser(ctx: RequestContext, userId: ID) => Promise<Order | undefined>;",
                    "    create(ctx: RequestContext, userId?: ID) => Promise<Order>;",
                    "    createDraft(ctx: RequestContext) => ;",
                    "    updateCustomFields(ctx: RequestContext, orderId: ID, customFields: any) => ;",
                    "    addItemToOrder(ctx: RequestContext, orderId: ID, productVariantId: ID, quantity: number, customFields?: { [key: string]: any }) => Promise<ErrorResultUnion<UpdateOrderItemsResult, Order>>;",
                    "    adjustOrderLine(ctx: RequestContext, orderId: ID, orderLineId: ID, quantity: number, customFields?: { [key: string]: any }) => Promise<ErrorResultUnion<UpdateOrderItemsResult, Order>>;",
                    "    removeItemFromOrder(ctx: RequestContext, orderId: ID, orderLineId: ID) => Promise<ErrorResultUnion<RemoveOrderItemsResult, Order>>;",
                    "    removeAllItemsFromOrder(ctx: RequestContext, orderId: ID) => Promise<ErrorResultUnion<RemoveOrderItemsResult, Order>>;",
                    "    addSurchargeToOrder(ctx: RequestContext, orderId: ID, surchargeInput: Partial<Omit<Surcharge, 'id' | 'createdAt' | 'updatedAt' | 'order'>>) => Promise<Order>;",
                    "    removeSurchargeFromOrder(ctx: RequestContext, orderId: ID, surchargeId: ID) => Promise<Order>;",
                    "    applyCouponCode(ctx: RequestContext, orderId: ID, couponCode: string) => Promise<ErrorResultUnion<ApplyCouponCodeResult, Order>>;",
                    "    removeCouponCode(ctx: RequestContext, orderId: ID, couponCode: string) => ;",
                    "    getOrderPromotions(ctx: RequestContext, orderId: ID) => Promise<Promotion[]>;",
                    "    getNextOrderStates(order: Order) => readonly OrderState[];",
                    "    setShippingAddress(ctx: RequestContext, orderId: ID, input: CreateAddressInput) => Promise<Order>;",
                    "    setBillingAddress(ctx: RequestContext, orderId: ID, input: CreateAddressInput) => Promise<Order>;",
                    "    getEligibleShippingMethods(ctx: RequestContext, orderId: ID) => Promise<ShippingMethodQuote[]>;",
                    "    getEligiblePaymentMethods(ctx: RequestContext, orderId: ID) => Promise<PaymentMethodQuote[]>;",
                    "    setShippingMethod(ctx: RequestContext, orderId: ID, shippingMethodIds: ID[]) => Promise<ErrorResultUnion<SetOrderShippingMethodResult, Order>>;",
                    "    transitionToState(ctx: RequestContext, orderId: ID, state: OrderState) => Promise<Order | OrderStateTransitionError>;",
                    "    transitionFulfillmentToState(ctx: RequestContext, fulfillmentId: ID, state: FulfillmentState) => Promise<Fulfillment | FulfillmentStateTransitionError>;",
                    "    modifyOrder(ctx: RequestContext, input: ModifyOrderInput) => Promise<ErrorResultUnion<ModifyOrderResult, Order>>;",
                    "    transitionPaymentToState(ctx: RequestContext, paymentId: ID, state: PaymentState) => Promise<ErrorResultUnion<TransitionPaymentToStateResult, Payment>>;",
                    "    addPaymentToOrder(ctx: RequestContext, orderId: ID, input: PaymentInput) => Promise<ErrorResultUnion<AddPaymentToOrderResult, Order>>;",
                    "    addManualPaymentToOrder(ctx: RequestContext, input: ManualPaymentInput) => Promise<ErrorResultUnion<AddManualPaymentToOrderResult, Order>>;",
                    "    settlePayment(ctx: RequestContext, paymentId: ID) => Promise<ErrorResultUnion<SettlePaymentResult, Payment>>;",
                    "    cancelPayment(ctx: RequestContext, paymentId: ID) => Promise<ErrorResultUnion<CancelPaymentResult, Payment>>;",
                    "    createFulfillment(ctx: RequestContext, input: FulfillOrderInput) => Promise<ErrorResultUnion<AddFulfillmentToOrderResult, Fulfillment>>;",
                    "    getOrderFulfillments(ctx: RequestContext, order: Order) => Promise<Fulfillment[]>;",
                    "    getOrderSurcharges(ctx: RequestContext, orderId: ID) => Promise<Surcharge[]>;",
                    "    cancelOrder(ctx: RequestContext, input: CancelOrderInput) => Promise<ErrorResultUnion<CancelOrderResult, Order>>;",
                    "    refundOrder(ctx: RequestContext, input: RefundOrderInput) => Promise<ErrorResultUnion<RefundOrderResult, Refund>>;",
                    "    settleRefund(ctx: RequestContext, input: SettleRefundInput) => Promise<Refund>;",
                    "    addCustomerToOrder(ctx: RequestContext, orderId: ID, customer: Customer) => Promise<Order>;",
                    "    addNoteToOrder(ctx: RequestContext, input: AddNoteToOrderInput) => Promise<Order>;",
                    "    updateOrderNote(ctx: RequestContext, input: UpdateOrderNoteInput) => Promise<HistoryEntry>;",
                    "    deleteOrderNote(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "    deleteOrder(ctx: RequestContext, orderOrId: ID | Order) => ;",
                    "    mergeOrders(ctx: RequestContext, user: User, guestOrder?: Order, existingOrder?: Order) => Promise<Order | undefined>;",
                    "    applyPriceAdjustments(ctx: RequestContext, order: Order, updatedOrderLines?: OrderLine[]) => Promise<Order>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "orderstatelabelcomponent",
        "metadata": {
            "title": "OrderStateLabelComponent",
            "keywords": [
                "orderstatelabelcomponent",
                "state",
                "chipcolortype"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/order-state-label/order-state-label.component.ts\" sourceLine=\"13\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "orderstatelabelcomponent",
                "title": "OrderStateLabelComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/order-state-label/order-state-label.component.ts\" sourceLine=\"13\" packageName=\"@vendure/admin-ui\" />\n\nDisplays the state of an order in a colored chip.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "state",
                        "title": "state",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "chipcolortype",
                        "title": "chipColorType",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>",
                    "class OrderStateLabelComponent {",
                    "    @Input() state: string;",
                    "    chipColorType: void",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "ordertestingservice",
        "metadata": {
            "title": "OrderTestingService",
            "keywords": [
                "ordertestingservice",
                "constructor",
                "testshippingmethod",
                "testeligibleshippingmethods"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/order-testing.service.ts\" sourceLine=\"34\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "ordertestingservice",
                "title": "OrderTestingService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/order-testing.service.ts\" sourceLine=\"34\" packageName=\"@vendure/core\" />\n\nThis service is responsible for creating temporary mock Orders against which tests can be run, such as\ntesting a ShippingMethod or Promotion.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, orderCalculator: <a href='/reference/typescript-api/service-helpers/order-calculator#ordercalculator'>OrderCalculator</a>, shippingCalculator: <a href='/reference/typescript-api/shipping/shipping-calculator#shippingcalculator'>ShippingCalculator</a>, configArgService: ConfigArgService, configService: ConfigService, productPriceApplicator: <a href='/reference/typescript-api/service-helpers/product-price-applicator#productpriceapplicator'>ProductPriceApplicator</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>) => OrderTestingService`}   />\n\n\n"
                    },
                    {
                        "id": "testshippingmethod",
                        "title": "testShippingMethod",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: TestShippingMethodInput) => Promise&#60;TestShippingMethodResult&#62;`}   />\n\nRuns a given ShippingMethod configuration against a mock Order to test for eligibility and resulting\nprice.\n"
                    },
                    {
                        "id": "testeligibleshippingmethods",
                        "title": "testEligibleShippingMethods",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: TestEligibleShippingMethodsInput) => Promise&#60;ShippingMethodQuote[]&#62;`}   />\n\nTests all available ShippingMethods against a mock Order and return those which are eligible. This\nis intended to simulate a call to the `eligibleShippingMethods` query of the Shop API.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class OrderTestingService {",
                    "    constructor(connection: TransactionalConnection, orderCalculator: OrderCalculator, shippingCalculator: ShippingCalculator, configArgService: ConfigArgService, configService: ConfigService, productPriceApplicator: ProductPriceApplicator, translator: TranslatorService)",
                    "    testShippingMethod(ctx: RequestContext, input: TestShippingMethodInput) => Promise<TestShippingMethodResult>;",
                    "    testEligibleShippingMethods(ctx: RequestContext, input: TestEligibleShippingMethodsInput) => Promise<ShippingMethodQuote[]>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "page-actionbar-buttons",
        "metadata": {
            "title": "Page ActionBar Buttons",
            "keywords": [
                "actionbar example",
                "handling button clicks",
                "using routerlink",
                "using onclick",
                "setting visibility & disabled state",
                "restricting access by permissions"
            ],
            "description": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; The `ActionBar` is the horizontal area at the top of each list or detail page, which contains the main buttons for that page. This guide explains how to add new buttons to the ActionBar. For example, consider an \"order invoice\" extension that allows you to print invoices for orders. In this case, you can add a \"print invoice\" button to the ActionBar. This is done using the [addActionBarItem function](/reference/admin-ui-api/action-bar/add-action-bar-item/). ```ts title=\"src/plugins/invoice/ui/providers.ts\""
        },
        "content": "",
        "sections": [
            {
                "id": "actionbar-example",
                "title": "ActionBar Example",
                "content": "\n\n![./ui-extensions-actionbar.webp](./ui-extensions-actionbar.webp)\n\nIn each list or detail view in the app, the ActionBar has a unique `locationId` which is how the app knows in which view to place your button. The complete list of available locations into which you can add new ActionBar can be found in the [PageLocationId docs](/reference/admin-ui-api/action-bar/page-location-id/). You can also press `ctrl + u` when in development mode to see the location of all UI extension points.\n\n",
                "subsections": [],
                "code": [
                    "import { addActionBarItem } from '@vendure/admin-ui/core';",
                    "",
                    "export default [",
                    "    addActionBarItem({",
                    "        id: 'print-invoice',",
                    "        label: 'Print invoice',",
                    "        locationId: 'order-detail',",
                    "        routerLink: route => {",
                    "            const id = route.snapshot.params.id;",
                    "            return ['./extensions/order-invoices', id];",
                    "        },",
                    "        requiresPermission: 'ReadOrder',",
                    "    }),",
                    "];"
                ]
            },
            {
                "id": "handling-button-clicks",
                "title": "Handling button clicks",
                "content": "\nThere are two ways to handle the click event of an ActionBar button:\n\n1. Use the `routerLink` property to navigate to a new route when the button is clicked.\n2. Use the `onClick` property to execute a function when the button is clicked.\n\n",
                "subsections": [
                    {
                        "id": "using-routerlink",
                        "title": "Using routerLink",
                        "content": "\nThe `routerLink` property allows you to specify a route to navigate to when the button is clicked. The route can be a constant value, or it can be a function which receives the current route as well as a [`context` object](/reference/admin-ui-api/action-bar/action-bar-context) as arguments.\n\n\n<Tabs>\n<TabItem value=\"routerLink constant\" label=\"routerLink constant\" default>\n\n\n</TabItem>\n<TabItem value=\"routerLink function\" label=\"routerLink function\">\n\n\n</TabItem>\n</Tabs>\n\n"
                    },
                    {
                        "id": "using-onclick",
                        "title": "Using onClick",
                        "content": "\nThe onClick property of the addActionBarItem function allows you to define a function that will be executed when the ActionBar button is clicked. This function receives two arguments: the click event and the current context.\n\nThe context object provides access to commonly-used services, which allows you to perform GraphQL queries and mutations, and the current route, which can be used to get parameters from the URL.\n\nHere's an example of how to use the onClick property to perform a GraphQL mutation when the ActionBar button is clicked:\n\n\nIn this example, clicking the ActionBar button triggers a GraphQL mutation. The `context.dataService` is utilized to execute the mutation. It can also be employed to retrieve additional information about the current order if needed. The `context.route` is used to extract the ID of the current order from the URL.\n\nThe utility function `firstValueFrom` from the RxJS library is used in this example to convert the Observable returned by `context.dataService.mutate(...)` into a Promise. This conversion allows the use of the `await` keyword to pause execution until the Observable emits its first value or completes.\n\n"
                    }
                ],
                "code": [
                    "import { addActionBarItem } from '@vendure/admin-ui/core';",
                    "",
                    "export default [",
                    "    addActionBarItem({",
                    "        id: 'print-invoice',",
                    "        label: 'Print invoice',",
                    "        locationId: 'order-detail',",
                    "        // highlight-start",
                    "        // The route can be a constant value...",
                    "        routerLink: ['./extensions/order-invoices'],",
                    "        // highlight-end",
                    "    }),",
                    "];",
                    "import { addActionBarItem } from '@vendure/admin-ui/core';",
                    "",
                    "export default [",
                    "    addActionBarItem({",
                    "        id: 'print-invoice',",
                    "        label: 'Print invoice',",
                    "        locationId: 'order-detail',",
                    "        // highlight-start",
                    "        // The route can be a function",
                    "        routerLink: (route) => {",
                    "            const id = route.snapshot.params.id;",
                    "            return ['./extensions/order-invoices', id];",
                    "        },",
                    "        // highlight-end",
                    "    }),",
                    "];",
                    "import gql from 'graphql-tag';",
                    "import { firstValueFrom } from 'rxjs';",
                    "import { addActionBarItem } from '@vendure/admin-ui/core';",
                    "",
                    "const mutation = gql`",
                    "    mutation MyMutation($orderId: ID!) {",
                    "        myMutation(orderId: $orderId)",
                    "    }`;",
                    "",
                    "export default [",
                    "    addActionBarItem({",
                    "        id: 'myButtonId',",
                    "        label: 'My Button Label',",
                    "        locationId: 'order-detail',",
                    "        // highlight-start",
                    "        onClick: async (event, context) => {",
                    "            try {",
                    "                const orderId = context.route.snapshot.params.id;",
                    "                await firstValueFrom(",
                    "                    context.dataService.mutate(mutation, { orderId })",
                    "                );",
                    "            } catch (error) {",
                    "                context.notificationService",
                    "                    .error('Error executing mutation: ' + error.message);",
                    "            }",
                    "        },",
                    "        // highlight-end",
                    "    }),",
                    "];"
                ]
            },
            {
                "id": "setting-visibility-&-disabled-state",
                "title": "Setting visibility & disabled state",
                "content": "\nUse the `buttonState` property (added in v2.1) to control the visibility and disabled state of the button. This property is a function which receives the current context as an argument and returns an Observable of the button state:\n\n\n",
                "subsections": [],
                "code": [
                    "import { map, switchMap } from 'rxjs/operators';",
                    "import { addActionBarItem } from '@vendure/admin-ui/core'; ",
                    "",
                    "export default [",
                    "    addActionBarItem({",
                    "        id: 'print-invoice',",
                    "        label: 'Print invoice',",
                    "        locationId: 'order-detail',",
                    "        buttonState: context => {",
                    "            return context.route.data.pipe(",
                    "                // For any of the detail pages, we can get an observable stream",
                    "                // of the entity with the following \"switchMap\" function:",
                    "                switchMap(data => data.detail.entity),",
                    "                map((order: any) => {",
                    "                    return {",
                    "                        disabled: order.state === 'AddingItems',",
                    "                        visible: true,",
                    "                    };",
                    "                }),",
                    "            );",
                    "        },",
                    "    }),",
                    "];"
                ]
            },
            {
                "id": "restricting-access-by-permissions",
                "title": "Restricting access by permissions",
                "content": "\nYou can use the `requiresPermission` property to restrict access to the button by permission. This property accepts a single permission string or an array of permission strings. If the current user does not have the required permission, the button will not be visible.\n\n\n",
                "subsections": [],
                "code": [
                    "import { addActionBarItem } from '@vendure/admin-ui/core';",
                    "",
                    "export default [",
                    "    addActionBarItem({",
                    "        id: 'print-invoice',",
                    "        label: 'Print invoice',",
                    "        locationId: 'order-detail',",
                    "        routerLink: ['./extensions/order-invoices'],",
                    "        // highlight-next-line",
                    "        requiresPermission: 'CreateInvoice',",
                    "    }),",
                    "];"
                ]
            }
        ]
    },
    {
        "id": "page-tabs",
        "metadata": {
            "title": "Page Tabs",
            "keywords": [],
            "description": "You can add your own tabs to any of the Admin UI's list or detail pages using the [registerPageTab](/reference/admin-ui-api/tabs/register-page-tab/) function. For example, to add a new tab to the product detail page for displaying product reviews: ```ts title=\"src/plugins/reviews/ui/providers.ts\" import { registerPageTab } from '@vendure/admin-ui/core'; import { ReviewListComponent } from './components/review-list/review-list.component'; export default ["
        },
        "content": "",
        "sections": []
    },
    {
        "id": "pageblock",
        "metadata": {
            "title": "PageBlock",
            "keywords": [
                "pageblock",
                "props"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/PageBlock.tsx\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "pageblock",
                "title": "PageBlock",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/PageBlock.tsx\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />\n\nA container for page content which provides a consistent width and spacing.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "props",
                        "title": "props",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`PropsWithChildren`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { PageBlock } from '@vendure/admin-ui/react';",
                    "",
                    "export function MyComponent() {",
                    "  return (",
                    "    <PageBlock>",
                    "      ...",
                    "    </PageBlock>",
                    "  );",
                    "}",
                    "function PageBlock(props: PropsWithChildren): void"
                ]
            }
        ]
    },
    {
        "id": "pagedetaillayout",
        "metadata": {
            "title": "PageDetailLayout",
            "keywords": [
                "pagedetaillayout",
                "props"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/PageDetailLayout.tsx\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "pagedetaillayout",
                "title": "PageDetailLayout",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-components/PageDetailLayout.tsx\" sourceLine=\"22\" packageName=\"@vendure/admin-ui\" />\n\nA responsive container for detail views with a main content area and an optional sidebar.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "props",
                        "title": "props",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`PropsWithChildren&#60;{ sidebar?: ReactNode }&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { PageDetailLayout } from '@vendure/admin-ui/react';",
                    "",
                    "export function MyComponent() {",
                    "  return (",
                    "    <PageDetailLayout sidebar={<div>Sidebar content</div>}>",
                    "      <div>Main content</div>",
                    "    </PageDetailLayout>",
                    "  );",
                    "}",
                    "function PageDetailLayout(props: PropsWithChildren<{ sidebar?: ReactNode }>): void"
                ]
            }
        ]
    },
    {
        "id": "pagelocationid",
        "metadata": {
            "title": "PageLocationId",
            "keywords": [
                "pagelocationid"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/component-registry-types.ts\" sourceLine=\"52\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "pagelocationid",
                "title": "PageLocationId",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/component-registry-types.ts\" sourceLine=\"52\" packageName=\"@vendure/admin-ui\" />\n\nThe valid locationIds for registering action bar items or tabs.\n\n\n",
                "subsections": [],
                "code": [
                    "type PageLocationId = | 'administrator-detail'",
                    "    | 'administrator-list'",
                    "    | 'asset-detail'",
                    "    | 'asset-list'",
                    "    | 'channel-detail'",
                    "    | 'channel-list'",
                    "    | 'collection-detail'",
                    "    | 'collection-list'",
                    "    | 'country-detail'",
                    "    | 'country-list'",
                    "    | 'customer-detail'",
                    "    | 'customer-list'",
                    "    | 'customer-group-list'",
                    "    | 'customer-group-detail'",
                    "    | 'draft-order-detail'",
                    "    | 'facet-detail'",
                    "    | 'facet-list'",
                    "    | 'global-setting-detail'",
                    "    | 'system-status'",
                    "    | 'job-list'",
                    "    | 'order-detail'",
                    "    | 'order-list'",
                    "    | 'payment-method-detail'",
                    "    | 'payment-method-list'",
                    "    | 'product-detail'",
                    "    | 'product-list'",
                    "    | 'product-variant-detail'",
                    "    | 'profile'",
                    "    | 'promotion-detail'",
                    "    | 'promotion-list'",
                    "    | 'role-detail'",
                    "    | 'role-list'",
                    "    | 'seller-detail'",
                    "    | 'seller-list'",
                    "    | 'shipping-method-detail'",
                    "    | 'shipping-method-list'",
                    "    | 'stock-location-detail'",
                    "    | 'stock-location-list'",
                    "    | 'tax-category-detail'",
                    "    | 'tax-category-list'",
                    "    | 'tax-rate-detail'",
                    "    | 'tax-rate-list'",
                    "    | 'zone-detail'",
                    "    | 'zone-list'"
                ]
            }
        ]
    },
    {
        "id": "pagetabconfig",
        "metadata": {
            "title": "PageTabConfig",
            "keywords": [
                "pagetabconfig",
                "location",
                "tabicon",
                "route",
                "tab",
                "priority",
                "component",
                "routeconfig"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/page/page.service.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "pagetabconfig",
                "title": "PageTabConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/page/page.service.ts\" sourceLine=\"14\" packageName=\"@vendure/admin-ui\" />\n\nThe object used to configure a new page tab.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "location",
                        "title": "location",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/action-bar/page-location-id#pagelocationid'>PageLocationId</a>`}   />\n\nA valid location representing a list or detail page.\n"
                    },
                    {
                        "id": "tabicon",
                        "title": "tabIcon",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nAn optional icon to display in the tab. The icon\nshould be a valid shape name from the [Clarity Icons](https://core.clarity.design/foundation/icons/shapes/)\nset.\n"
                    },
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe route path to the tab. This will be appended to the\nroute of the parent page.\n"
                    },
                    {
                        "id": "tab",
                        "title": "tab",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe name of the tab to display in the UI.\n"
                    },
                    {
                        "id": "priority",
                        "title": "priority",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe priority of the tab. Tabs with a lower priority will be displayed first.\n"
                    },
                    {
                        "id": "component",
                        "title": "component",
                        "content": "\n<MemberInfo kind=\"property\" type={`Type&#60;any&#62; | ReturnType&#60;typeof <a href='/reference/admin-ui-api/list-detail-views/detail-component-with-resolver#detailcomponentwithresolver'>detailComponentWithResolver</a>&#62;`}   />\n\nThe component to render at the route of the tab.\n"
                    },
                    {
                        "id": "routeconfig",
                        "title": "routeConfig",
                        "content": "\n<MemberInfo kind=\"property\" type={`Route`}   />\n\nYou can optionally provide any native Angular route configuration options here.\nAny values provided here will take precedence over the values generated\nby the `route` and `component` properties.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface PageTabConfig {",
                    "    location: PageLocationId;",
                    "    tabIcon?: string;",
                    "    route: string;",
                    "    tab: string;",
                    "    priority?: number;",
                    "    component: Type<any> | ReturnType<typeof detailComponentWithResolver>;",
                    "    routeConfig?: Route;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "paginatedlist",
        "metadata": {
            "title": "PaginatedList",
            "keywords": [
                "paginatedlist",
                "items",
                "totalitems"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"66\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "paginatedlist",
                "title": "PaginatedList",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/shared-types.ts\" sourceLine=\"66\" packageName=\"@vendure/common\" />\n\nA type describing the shape of a paginated list response. In Vendure, almost all list queries\n(`products`, `collections`, `orders`, `customers` etc) return an object of this type.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "items",
                        "title": "items",
                        "content": "\n<MemberInfo kind=\"property\" type={`T[]`}   />\n\n\n"
                    },
                    {
                        "id": "totalitems",
                        "title": "totalItems",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "type PaginatedList<T> = {",
                    "    items: T[];",
                    "    totalItems: number;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "passwordhashingstrategy",
        "metadata": {
            "title": "PasswordHashingStrategy",
            "keywords": [
                "passwordhashingstrategy",
                "hash",
                "check"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/auth/password-hashing-strategy.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" since=\"1.3.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "passwordhashingstrategy",
                "title": "PasswordHashingStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/auth/password-hashing-strategy.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" since=\"1.3.0\" />\n\nDefines how user passwords get hashed when using the <a href='/reference/typescript-api/auth/native-authentication-strategy#nativeauthenticationstrategy'>NativeAuthenticationStrategy</a>.\n\n:::info\n\nThis is configured via the `authOptions.passwordHashingStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "hash",
                        "title": "hash",
                        "content": "\n<MemberInfo kind=\"method\" type={`(plaintext: string) => Promise&#60;string&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "check",
                        "title": "check",
                        "content": "\n<MemberInfo kind=\"method\" type={`(plaintext: string, hash: string) => Promise&#60;boolean&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface PasswordHashingStrategy extends InjectableStrategy {",
                    "    hash(plaintext: string): Promise<string>;",
                    "    check(plaintext: string, hash: string): Promise<boolean>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "passwordvalidationstrategy",
        "metadata": {
            "title": "PasswordValidationStrategy",
            "keywords": [
                "passwordvalidationstrategy",
                "validate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/auth/password-validation-strategy.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" since=\"1.5.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "passwordvalidationstrategy",
                "title": "PasswordValidationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/auth/password-validation-strategy.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" since=\"1.5.0\" />\n\nDefines validation to apply to new password (when creating an account or updating an existing account's\npassword when using the <a href='/reference/typescript-api/auth/native-authentication-strategy#nativeauthenticationstrategy'>NativeAuthenticationStrategy</a>.\n\n:::info\n\nThis is configured via the `authOptions.passwordValidationStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "validate",
                        "title": "validate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, password: string) => Promise&#60;boolean | string&#62; | boolean | string`}  since=\"1.5.0\"  />\n\nValidates a password submitted during account registration or when a customer updates their password.\nThe method should resolve to `true` if the password is acceptable. If not, it should return `false` or\noptionally a string which will be passed to the returned ErrorResult, which can e.g. advise on why\nexactly the proposed password is not valid.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface PasswordValidationStrategy extends InjectableStrategy {",
                    "    validate(ctx: RequestContext, password: string): Promise<boolean | string> | boolean | string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "payment-method-types",
        "metadata": {
            "title": "Payment Method Types",
            "keywords": [
                "createpaymentresult",
                "amount",
                "state",
                "transactionid",
                "errormessage",
                "metadata",
                "createpaymenterrorresult",
                "createrefundresult",
                "settlepaymentresult",
                "success",
                "settlepaymenterrorresult",
                "cancelpaymentresult",
                "cancelpaymenterrorresult",
                "createpaymentfn",
                "settlepaymentfn",
                "cancelpaymentfn",
                "createrefundfn"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"30\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "createpaymentresult",
                "title": "CreatePaymentResult",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"30\" packageName=\"@vendure/core\" />\n\nThis object is the return value of the <a href='/reference/typescript-api/payment/payment-method-types#createpaymentfn'>CreatePaymentFn</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "amount",
                        "title": "amount",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe amount (as an integer - i.e. $10 = `1000`) that this payment is for.\nTypically this should equal the Order total, unless multiple payment methods\nare being used for the order.\n"
                    },
                    {
                        "id": "state",
                        "title": "state",
                        "content": "\n<MemberInfo kind=\"property\" type={`Exclude&#60;<a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>, 'Error'&#62;`}   />\n\nThe <a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a> of the resulting Payment.\n\nIn a single-step payment flow, this should be set to `'Settled'`.\nIn a two-step flow, this should be set to `'Authorized'`.\n\nIf using a {@link CustomPaymentProcess}, may be something else\nentirely according to your business logic.\n"
                    },
                    {
                        "id": "transactionid",
                        "title": "transactionId",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe unique payment reference code typically assigned by\nthe payment provider.\n"
                    },
                    {
                        "id": "errormessage",
                        "title": "errorMessage",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nIf the payment is declined or fails for ome other reason, pass the\nrelevant error message here, and it gets returned with the\nErrorResponse of the `addPaymentToOrder` mutation.\n"
                    },
                    {
                        "id": "metadata",
                        "title": "metadata",
                        "content": "\n<MemberInfo kind=\"property\" type={`PaymentMetadata`}   />\n\nThis field can be used to store other relevant data which is often\nprovided by the payment provider, such as security data related to\nthe payment method or data used in troubleshooting or debugging.\n\nAny data stored in the optional `public` property will be available\nvia the Shop API. This is useful for certain checkout flows such as\nexternal gateways, where the payment provider returns a unique\nurl which must then be passed to the storefront app.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface CreatePaymentResult {",
                    "    amount: number;",
                    "    state: Exclude<PaymentState, 'Error'>;",
                    "    transactionId?: string;",
                    "    errorMessage?: string;",
                    "    metadata?: PaymentMetadata;",
                    "}"
                ]
            },
            {
                "id": "createpaymenterrorresult",
                "title": "CreatePaymentErrorResult",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"83\" packageName=\"@vendure/core\" />\n\nThis object is the return value of the <a href='/reference/typescript-api/payment/payment-method-types#createpaymentfn'>CreatePaymentFn</a> when there has been an error.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "amount",
                        "title": "amount",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "state",
                        "title": "state",
                        "content": "\n<MemberInfo kind=\"property\" type={`'Error'`}   />\n\n\n"
                    },
                    {
                        "id": "transactionid",
                        "title": "transactionId",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "errormessage",
                        "title": "errorMessage",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "metadata",
                        "title": "metadata",
                        "content": "\n<MemberInfo kind=\"property\" type={`PaymentMetadata`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface CreatePaymentErrorResult {",
                    "    amount: number;",
                    "    state: 'Error';",
                    "    transactionId?: string;",
                    "    errorMessage: string;",
                    "    metadata?: PaymentMetadata;",
                    "}"
                ]
            },
            {
                "id": "createrefundresult",
                "title": "CreateRefundResult",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"98\" packageName=\"@vendure/core\" />\n\nThis object is the return value of the <a href='/reference/typescript-api/payment/payment-method-types#createrefundfn'>CreateRefundFn</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "state",
                        "title": "state",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/payment/refund-state#refundstate'>RefundState</a>`}   />\n\n\n"
                    },
                    {
                        "id": "transactionid",
                        "title": "transactionId",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "metadata",
                        "title": "metadata",
                        "content": "\n<MemberInfo kind=\"property\" type={`PaymentMetadata`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface CreateRefundResult {",
                    "    state: RefundState;",
                    "    transactionId?: string;",
                    "    metadata?: PaymentMetadata;",
                    "}"
                ]
            },
            {
                "id": "settlepaymentresult",
                "title": "SettlePaymentResult",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"112\" packageName=\"@vendure/core\" />\n\nThis object is the return value of the <a href='/reference/typescript-api/payment/payment-method-types#settlepaymentfn'>SettlePaymentFn</a> when the Payment\nhas been successfully settled.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "success",
                        "title": "success",
                        "content": "\n<MemberInfo kind=\"property\" type={`true`}   />\n\n\n"
                    },
                    {
                        "id": "metadata",
                        "title": "metadata",
                        "content": "\n<MemberInfo kind=\"property\" type={`PaymentMetadata`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface SettlePaymentResult {",
                    "    success: true;",
                    "    metadata?: PaymentMetadata;",
                    "}"
                ]
            },
            {
                "id": "settlepaymenterrorresult",
                "title": "SettlePaymentErrorResult",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"125\" packageName=\"@vendure/core\" />\n\nThis object is the return value of the <a href='/reference/typescript-api/payment/payment-method-types#settlepaymentfn'>SettlePaymentFn</a> when the Payment\ncould not be settled.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "success",
                        "title": "success",
                        "content": "\n<MemberInfo kind=\"property\" type={`false`}   />\n\n\n"
                    },
                    {
                        "id": "state",
                        "title": "state",
                        "content": "\n<MemberInfo kind=\"property\" type={`Exclude&#60;<a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>, 'Settled'&#62;`}   />\n\nThe state to transition this Payment to upon unsuccessful settlement.\nDefaults to `Error`. Note that if using a different state, it must be\nlegal to transition to that state from the `Authorized` state according\nto the PaymentState config (which can be customized using the\n{@link CustomPaymentProcess}).\n"
                    },
                    {
                        "id": "errormessage",
                        "title": "errorMessage",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe message that will be returned when attempting to settle the payment, and will\nalso be persisted as `Payment.errorMessage`.\n"
                    },
                    {
                        "id": "metadata",
                        "title": "metadata",
                        "content": "\n<MemberInfo kind=\"property\" type={`PaymentMetadata`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface SettlePaymentErrorResult {",
                    "    success: false;",
                    "    state?: Exclude<PaymentState, 'Settled'>;",
                    "    errorMessage?: string;",
                    "    metadata?: PaymentMetadata;",
                    "}"
                ]
            },
            {
                "id": "cancelpaymentresult",
                "title": "CancelPaymentResult",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"153\" packageName=\"@vendure/core\" />\n\nThis object is the return value of the <a href='/reference/typescript-api/payment/payment-method-types#cancelpaymentfn'>CancelPaymentFn</a> when the Payment\nhas been successfully cancelled.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "success",
                        "title": "success",
                        "content": "\n<MemberInfo kind=\"property\" type={`true`}   />\n\n\n"
                    },
                    {
                        "id": "metadata",
                        "title": "metadata",
                        "content": "\n<MemberInfo kind=\"property\" type={`PaymentMetadata`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface CancelPaymentResult {",
                    "    success: true;",
                    "    metadata?: PaymentMetadata;",
                    "}"
                ]
            },
            {
                "id": "cancelpaymenterrorresult",
                "title": "CancelPaymentErrorResult",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"165\" packageName=\"@vendure/core\" />\n\nThis object is the return value of the <a href='/reference/typescript-api/payment/payment-method-types#cancelpaymentfn'>CancelPaymentFn</a> when the Payment\ncould not be cancelled.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "success",
                        "title": "success",
                        "content": "\n<MemberInfo kind=\"property\" type={`false`}   />\n\n\n"
                    },
                    {
                        "id": "state",
                        "title": "state",
                        "content": "\n<MemberInfo kind=\"property\" type={`Exclude&#60;<a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>, 'Cancelled'&#62;`}   />\n\nThe state to transition this Payment to upon unsuccessful cancellation.\nDefaults to `Error`. Note that if using a different state, it must be\nlegal to transition to that state from the `Authorized` state according\nto the PaymentState config (which can be customized using the\n{@link CustomPaymentProcess}).\n"
                    },
                    {
                        "id": "errormessage",
                        "title": "errorMessage",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe message that will be returned when attempting to cancel the payment, and will\nalso be persisted as `Payment.errorMessage`.\n"
                    },
                    {
                        "id": "metadata",
                        "title": "metadata",
                        "content": "\n<MemberInfo kind=\"property\" type={`PaymentMetadata`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface CancelPaymentErrorResult {",
                    "    success: false;",
                    "    state?: Exclude<PaymentState, 'Cancelled'>;",
                    "    errorMessage?: string;",
                    "    metadata?: PaymentMetadata;",
                    "}"
                ]
            },
            {
                "id": "createpaymentfn",
                "title": "CreatePaymentFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"193\" packageName=\"@vendure/core\" />\n\nThis function contains the logic for creating a payment. See <a href='/reference/typescript-api/payment/payment-method-handler#paymentmethodhandler'>PaymentMethodHandler</a> for an example.\n\nReturns a <a href='/reference/typescript-api/payment/payment-method-types#createpaymentresult'>CreatePaymentResult</a>.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type CreatePaymentFn<T extends ConfigArgs> = (",
                    "    ctx: RequestContext,",
                    "    order: Order,",
                    "    amount: number,",
                    "    args: ConfigArgValues<T>,",
                    "    metadata: PaymentMetadata,",
                    "    method: PaymentMethod,",
                    ") => CreatePaymentResult | CreatePaymentErrorResult | Promise<CreatePaymentResult | CreatePaymentErrorResult>"
                ]
            },
            {
                "id": "settlepaymentfn",
                "title": "SettlePaymentFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"209\" packageName=\"@vendure/core\" />\n\nThis function contains the logic for settling a payment. See <a href='/reference/typescript-api/payment/payment-method-handler#paymentmethodhandler'>PaymentMethodHandler</a> for an example.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type SettlePaymentFn<T extends ConfigArgs> = (",
                    "    ctx: RequestContext,",
                    "    order: Order,",
                    "    payment: Payment,",
                    "    args: ConfigArgValues<T>,",
                    "    method: PaymentMethod,",
                    ") => SettlePaymentResult | SettlePaymentErrorResult | Promise<SettlePaymentResult | SettlePaymentErrorResult>"
                ]
            },
            {
                "id": "cancelpaymentfn",
                "title": "CancelPaymentFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"224\" packageName=\"@vendure/core\" />\n\nThis function contains the logic for cancelling a payment. See <a href='/reference/typescript-api/payment/payment-method-handler#paymentmethodhandler'>PaymentMethodHandler</a> for an example.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type CancelPaymentFn<T extends ConfigArgs> = (",
                    "    ctx: RequestContext,",
                    "    order: Order,",
                    "    payment: Payment,",
                    "    args: ConfigArgValues<T>,",
                    "    method: PaymentMethod,",
                    ") => CancelPaymentResult | CancelPaymentErrorResult | Promise<CancelPaymentResult | CancelPaymentErrorResult>"
                ]
            },
            {
                "id": "createrefundfn",
                "title": "CreateRefundFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"239\" packageName=\"@vendure/core\" />\n\nThis function contains the logic for creating a refund. See <a href='/reference/typescript-api/payment/payment-method-handler#paymentmethodhandler'>PaymentMethodHandler</a> for an example.\n\n\n",
                "subsections": [],
                "code": [
                    "type CreateRefundFn<T extends ConfigArgs> = (",
                    "    ctx: RequestContext,",
                    "    input: RefundOrderInput,",
                    "    amount: number,",
                    "    order: Order,",
                    "    payment: Payment,",
                    "    args: ConfigArgValues<T>,",
                    "    method: PaymentMethod,",
                    ") => CreateRefundResult | Promise<CreateRefundResult>"
                ]
            }
        ]
    },
    {
        "id": "payment-methods",
        "metadata": {
            "title": "Payment Methods",
            "keywords": [
                "payment methods",
                "payment eligibility checker",
                "payment handler"
            ],
            "description": "Payment methods define how your storefront handles payments. Your storefront may offer multiple payment methods or just one. A Payment method consists of two parts: an **eligibility checker** and a **handler** This is an optional part which can be useful in certain situations where you want to limit a payment method based on things like: * Billing address * Order contents or total price"
        },
        "content": "",
        "sections": [
            {
                "id": "payment-eligibility-checker",
                "title": "Payment eligibility checker",
                "content": "\nThis is an optional part which can be useful in certain situations where you want to limit a payment method based on things like:\n\n* Billing address\n* Order contents or total price\n* Customer group\n\nSince these requirements are particular to your business needs, Vendure does not provide any built-in checkers, but your developers can create one to suit your requirements.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "payment-handler",
                "title": "Payment handler",
                "content": "\nThe payment handler contains the actual logic for processing a payment. Again, since there are many ways to handle payments, Vendure only provides a \"dummy handler\" by default and it is up to your developers to create integrations. \n\nPayment handlers can be created which enable payment via:\n\n* Popular payment services such as Stripe, Paypal, Braintree, Klarna etc\n* Pay-on-delivery\n* Store credit\n* etc\n\n\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "payment",
        "metadata": {
            "title": "Payment",
            "keywords": [
                "payment"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "paymentmethod",
        "metadata": {
            "title": "PaymentMethod",
            "keywords": [
                "paymentmethod",
                "constructor",
                "name",
                "code",
                "description",
                "translations",
                "enabled",
                "checker",
                "handler",
                "channels",
                "customfields"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/payment-method/payment-method.entity.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "paymentmethod",
                "title": "PaymentMethod",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/payment-method/payment-method.entity.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />\n\nA PaymentMethod is created automatically according to the configured <a href='/reference/typescript-api/payment/payment-method-handler#paymentmethodhandler'>PaymentMethodHandler</a>s defined\nin the <a href='/reference/typescript-api/payment/payment-options#paymentoptions'>PaymentOptions</a> config.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#translatable'>Translatable</a></code>, <code><a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a></code>, <code>HasCustomFields</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>&#62;) => PaymentMethod`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "description",
                        "title": "description",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Translation&#60;<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "enabled",
                        "title": "enabled",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "checker",
                        "title": "checker",
                        "content": "\n<MemberInfo kind=\"property\" type={`ConfigurableOperation | null`}   />\n\n\n"
                    },
                    {
                        "id": "handler",
                        "title": "handler",
                        "content": "\n<MemberInfo kind=\"property\" type={`ConfigurableOperation`}   />\n\n\n"
                    },
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomPaymentMethodFields`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class PaymentMethod extends VendureEntity implements Translatable, ChannelAware, HasCustomFields {",
                    "    constructor(input?: DeepPartial<PaymentMethod>)",
                    "    name: LocaleString;",
                    "    @Column({ default: '' }) code: string;",
                    "    description: LocaleString;",
                    "    @OneToMany(type => PaymentMethodTranslation, translation => translation.base, { eager: true })",
                    "    translations: Array<Translation<PaymentMethod>>;",
                    "    @Column() enabled: boolean;",
                    "    @Column('simple-json', { nullable: true }) checker: ConfigurableOperation | null;",
                    "    @Column('simple-json') handler: ConfigurableOperation;",
                    "    @ManyToMany(type => Channel)",
                    "    @JoinTable()",
                    "    channels: Channel[];",
                    "    @Column(type => CustomPaymentMethodFields)",
                    "    customFields: CustomPaymentMethodFields;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "paymentmethodconfigoptions",
        "metadata": {
            "title": "PaymentMethodConfigOptions",
            "keywords": [
                "paymentmethodconfigoptions",
                "createpayment",
                "settlepayment",
                "cancelpayment",
                "createrefund",
                "onstatetransitionstart"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"255\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "paymentmethodconfigoptions",
                "title": "PaymentMethodConfigOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"255\" packageName=\"@vendure/core\" />\n\nDefines the object which is used to construct the <a href='/reference/typescript-api/payment/payment-method-handler#paymentmethodhandler'>PaymentMethodHandler</a>.\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/configurable-operation-def-options#configurableoperationdefoptions'>ConfigurableOperationDefOptions</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "createpayment",
                        "title": "createPayment",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/payment/payment-method-types#createpaymentfn'>CreatePaymentFn</a>&#60;T&#62;`}   />\n\nThis function provides the logic for creating a payment. For example,\nit may call out to a third-party service with the data and should return a\n<a href='/reference/typescript-api/payment/payment-method-types#createpaymentresult'>CreatePaymentResult</a> object contains the details of the payment.\n"
                    },
                    {
                        "id": "settlepayment",
                        "title": "settlePayment",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/payment/payment-method-types#settlepaymentfn'>SettlePaymentFn</a>&#60;T&#62;`}   />\n\nThis function provides the logic for settling a payment, also known as \"capturing\".\nFor payment integrations that settle/capture the payment on creation (i.e. the\n`createPayment()` method returns with a state of `'Settled'`) this method\nneed only return `{ success: true }`.\n"
                    },
                    {
                        "id": "cancelpayment",
                        "title": "cancelPayment",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/payment/payment-method-types#cancelpaymentfn'>CancelPaymentFn</a>&#60;T&#62;`}  since=\"1.7.0\"  />\n\nThis function provides the logic for cancelling a payment, which would be invoked when a call is\nmade to the `cancelPayment` mutation in the Admin API. Cancelling a payment can apply\nif, for example, you have created a \"payment intent\" with the payment provider but not yet\ncompleted the payment. It allows the incomplete payment to be cleaned up on the provider's end\nif it gets cancelled via Vendure.\n"
                    },
                    {
                        "id": "createrefund",
                        "title": "createRefund",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/payment/payment-method-types#createrefundfn'>CreateRefundFn</a>&#60;T&#62;`}   />\n\nThis function provides the logic for refunding a payment created with this\npayment method. Some payment providers may not provide the facility to\nprogrammatically create a refund. In such a case, this method should be\nomitted and any Refunds will have to be settled manually by an administrator.\n"
                    },
                    {
                        "id": "onstatetransitionstart",
                        "title": "onStateTransitionStart",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionstartfn'>OnTransitionStartFn</a>&#60;<a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>, <a href='/reference/typescript-api/payment/payment-transition-data#paymenttransitiondata'>PaymentTransitionData</a>&#62;`}   />\n\nThis function, when specified, will be invoked before any transition from one <a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a> to another.\nThe return value (a sync / async `boolean`) is used to determine whether the transition is permitted.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface PaymentMethodConfigOptions<T extends ConfigArgs> extends ConfigurableOperationDefOptions<T> {",
                    "    createPayment: CreatePaymentFn<T>;",
                    "    settlePayment: SettlePaymentFn<T>;",
                    "    cancelPayment?: CancelPaymentFn<T>;",
                    "    createRefund?: CreateRefundFn<T>;",
                    "    onStateTransitionStart?: OnTransitionStartFn<PaymentState, PaymentTransitionData>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "paymentmethodeligibilitychecker",
        "metadata": {
            "title": "PaymentMethodEligibilityChecker",
            "keywords": [
                "paymentmethodeligibilitychecker",
                "constructor",
                "paymentmethodeligibilitycheckerconfig",
                "check",
                "checkpaymentmethodeligibilitycheckerfn"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-eligibility-checker.ts\" sourceLine=\"47\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "paymentmethodeligibilitychecker",
                "title": "PaymentMethodEligibilityChecker",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-eligibility-checker.ts\" sourceLine=\"47\" packageName=\"@vendure/core\" />\n\nThe PaymentMethodEligibilityChecker class is used to check whether an order qualifies for a\ngiven <a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>.\n\n*Example*\n\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/#configurableoperationdef'>ConfigurableOperationDef</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/typescript-api/payment/payment-method-eligibility-checker#paymentmethodeligibilitycheckerconfig'>PaymentMethodEligibilityCheckerConfig</a>&#60;T&#62;) => PaymentMethodEligibilityChecker`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "const ccPaymentEligibilityChecker = new PaymentMethodEligibilityChecker({",
                    "    code: 'order-total-payment-eligibility-checker',",
                    "    description: [{ languageCode: LanguageCode.en, value: 'Checks that the order total is above some minimum value' }],",
                    "    args: {",
                    "        orderMinimum: { type: 'int', ui: { component: 'currency-form-input' } },",
                    "    },",
                    "    check: (ctx, order, args) => {",
                    "        return order.totalWithTax >= args.orderMinimum;",
                    "    },",
                    "});",
                    "class PaymentMethodEligibilityChecker<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {",
                    "    constructor(config: PaymentMethodEligibilityCheckerConfig<T>)",
                    "}"
                ]
            },
            {
                "id": "paymentmethodeligibilitycheckerconfig",
                "title": "PaymentMethodEligibilityCheckerConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-eligibility-checker.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" />\n\nConfiguration passed into the constructor of a <a href='/reference/typescript-api/payment/payment-method-eligibility-checker#paymentmethodeligibilitychecker'>PaymentMethodEligibilityChecker</a> to\nconfigure its behavior.\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/configurable-operation-def-options#configurableoperationdefoptions'>ConfigurableOperationDefOptions</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "check",
                        "title": "check",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/payment/payment-method-eligibility-checker#checkpaymentmethodeligibilitycheckerfn'>CheckPaymentMethodEligibilityCheckerFn</a>&#60;T&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface PaymentMethodEligibilityCheckerConfig<T extends ConfigArgs> extends ConfigurableOperationDefOptions<T> {",
                    "    check: CheckPaymentMethodEligibilityCheckerFn<T>;",
                    "}"
                ]
            },
            {
                "id": "checkpaymentmethodeligibilitycheckerfn",
                "title": "CheckPaymentMethodEligibilityCheckerFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-eligibility-checker.ts\" sourceLine=\"83\" packageName=\"@vendure/core\" />\n\nA function which implements logic to determine whether a given <a href='/reference/typescript-api/entities/order#order'>Order</a> is eligible for\na particular payment method. If the function resolves to `false` or a string, the check is\nconsidered to have failed. A string result can be used to provide information about the\nreason for ineligibility, if desired.\n\n\n",
                "subsections": [],
                "code": [
                    "type CheckPaymentMethodEligibilityCheckerFn<T extends ConfigArgs> = (",
                    "    ctx: RequestContext,",
                    "    order: Order,",
                    "    args: ConfigArgValues<T>,",
                    "    method: PaymentMethod,",
                    ") => boolean | string | Promise<boolean | string>"
                ]
            }
        ]
    },
    {
        "id": "paymentmethodhandler",
        "metadata": {
            "title": "PaymentMethodHandler",
            "keywords": [
                "paymentmethodhandler",
                "constructor"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"354\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "paymentmethodhandler",
                "title": "PaymentMethodHandler",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-method-handler.ts\" sourceLine=\"354\" packageName=\"@vendure/core\" />\n\nA PaymentMethodHandler contains the code which is used to generate a Payment when a call to the\n`addPaymentToOrder` mutation is made. It contains any necessary steps of interfacing with a\nthird-party payment gateway before the Payment is created and can also define actions to fire\nwhen the state of the payment is changed.\n\nPaymentMethodHandlers are instantiated using a <a href='/reference/typescript-api/payment/payment-method-config-options#paymentmethodconfigoptions'>PaymentMethodConfigOptions</a> object, which\nconfigures the business logic used to create, settle and refund payments.\n\n*Example*\n\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/#configurableoperationdef'>ConfigurableOperationDef</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/typescript-api/payment/payment-method-config-options#paymentmethodconfigoptions'>PaymentMethodConfigOptions</a>&#60;T&#62;) => PaymentMethodHandler`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { PaymentMethodHandler, CreatePaymentResult, SettlePaymentResult, LanguageCode } from '@vendure/core';",
                    "// A mock 3rd-party payment SDK",
                    "import gripeSDK from 'gripe';",
                    "",
                    "export const examplePaymentHandler = new PaymentMethodHandler({",
                    "  code: 'example-payment-provider',",
                    "  description: [{",
                    "    languageCode: LanguageCode.en,",
                    "    value: 'Example Payment Provider',",
                    "  }],",
                    "  args: {",
                    "    apiKey: { type: 'string' },",
                    "  },",
                    "  createPayment: async (ctx, order, amount, args, metadata): Promise<CreatePaymentResult> => {",
                    "    try {",
                    "      const result = await gripeSDK.charges.create({",
                    "        amount,",
                    "        apiKey: args.apiKey,",
                    "        source: metadata.authToken,",
                    "      });",
                    "      return {",
                    "        amount: order.total,",
                    "        state: 'Settled' as const,",
                    "        transactionId: result.id.toString(),",
                    "        metadata: result.outcome,",
                    "      };",
                    "    } catch (err: any) {",
                    "      return {",
                    "        amount: order.total,",
                    "        state: 'Declined' as const,",
                    "        metadata: {",
                    "          errorMessage: err.message,",
                    "        },",
                    "      };",
                    "    }",
                    "  },",
                    "  settlePayment: async (ctx, order, payment, args): Promise<SettlePaymentResult> => {",
                    "    return { success: true };",
                    "  }",
                    "});",
                    "class PaymentMethodHandler<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {",
                    "    constructor(config: PaymentMethodConfigOptions<T>)",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "paymentmethodservice",
        "metadata": {
            "title": "PaymentMethodService",
            "keywords": [
                "paymentmethodservice",
                "constructor",
                "findall",
                "findone",
                "create",
                "update",
                "delete",
                "assignpaymentmethodstochannel",
                "removepaymentmethodsfromchannel",
                "getpaymentmethodeligibilitycheckers",
                "getpaymentmethodhandlers",
                "geteligiblepaymentmethods",
                "getmethodandoperations"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/payment-method.service.ts\" sourceLine=\"48\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "paymentmethodservice",
                "title": "PaymentMethodService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/payment-method.service.ts\" sourceLine=\"48\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, roleService: <a href='/reference/typescript-api/services/role-service#roleservice'>RoleService</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, configArgService: ConfigArgService, channelService: <a href='/reference/typescript-api/services/channel-service#channelservice'>ChannelService</a>, customFieldRelationService: CustomFieldRelationService, translatableSaver: <a href='/reference/typescript-api/service-helpers/translatable-saver#translatablesaver'>TranslatableSaver</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>) => PaymentMethodService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>&#62;, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>&#62; = []) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, paymentMethodId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>&#62; = []) => Promise&#60;<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreatePaymentMethodInput) => Promise&#60;<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdatePaymentMethodInput) => Promise&#60;<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, paymentMethodId: <a href='/reference/typescript-api/common/id#id'>ID</a>, force: boolean = false) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "assignpaymentmethodstochannel",
                        "title": "assignPaymentMethodsToChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: AssignPaymentMethodsToChannelInput) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "removepaymentmethodsfromchannel",
                        "title": "removePaymentMethodsFromChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: RemovePaymentMethodsFromChannelInput) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getpaymentmethodeligibilitycheckers",
                        "title": "getPaymentMethodEligibilityCheckers",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => ConfigurableOperationDefinition[]`}   />\n\n\n"
                    },
                    {
                        "id": "getpaymentmethodhandlers",
                        "title": "getPaymentMethodHandlers",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => ConfigurableOperationDefinition[]`}   />\n\n\n"
                    },
                    {
                        "id": "geteligiblepaymentmethods",
                        "title": "getEligiblePaymentMethods",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;PaymentMethodQuote[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getmethodandoperations",
                        "title": "getMethodAndOperations",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, method: string) => Promise&#60;{\n         paymentMethod: <a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>;\n         handler: <a href='/reference/typescript-api/payment/payment-method-handler#paymentmethodhandler'>PaymentMethodHandler</a>;\n         checker: <a href='/reference/typescript-api/payment/payment-method-eligibility-checker#paymentmethodeligibilitychecker'>PaymentMethodEligibilityChecker</a> | null;\n     }&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class PaymentMethodService {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, roleService: RoleService, listQueryBuilder: ListQueryBuilder, eventBus: EventBus, configArgService: ConfigArgService, channelService: ChannelService, customFieldRelationService: CustomFieldRelationService, translatableSaver: TranslatableSaver, translator: TranslatorService)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<PaymentMethod>, relations: RelationPaths<PaymentMethod> = []) => Promise<PaginatedList<PaymentMethod>>;",
                    "    findOne(ctx: RequestContext, paymentMethodId: ID, relations: RelationPaths<PaymentMethod> = []) => Promise<PaymentMethod | undefined>;",
                    "    create(ctx: RequestContext, input: CreatePaymentMethodInput) => Promise<PaymentMethod>;",
                    "    update(ctx: RequestContext, input: UpdatePaymentMethodInput) => Promise<PaymentMethod>;",
                    "    delete(ctx: RequestContext, paymentMethodId: ID, force: boolean = false) => Promise<DeletionResponse>;",
                    "    assignPaymentMethodsToChannel(ctx: RequestContext, input: AssignPaymentMethodsToChannelInput) => Promise<Array<Translated<PaymentMethod>>>;",
                    "    removePaymentMethodsFromChannel(ctx: RequestContext, input: RemovePaymentMethodsFromChannelInput) => Promise<Array<Translated<PaymentMethod>>>;",
                    "    getPaymentMethodEligibilityCheckers(ctx: RequestContext) => ConfigurableOperationDefinition[];",
                    "    getPaymentMethodHandlers(ctx: RequestContext) => ConfigurableOperationDefinition[];",
                    "    getEligiblePaymentMethods(ctx: RequestContext, order: Order) => Promise<PaymentMethodQuote[]>;",
                    "    getMethodAndOperations(ctx: RequestContext, method: string) => Promise<{",
                    "        paymentMethod: PaymentMethod;",
                    "        handler: PaymentMethodHandler;",
                    "        checker: PaymentMethodEligibilityChecker | null;",
                    "    }>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "paymentoptions",
        "metadata": {
            "title": "PaymentOptions",
            "keywords": [
                "paymentoptions",
                "paymentmethodhandlers",
                "paymentmethodeligibilitycheckers",
                "custompaymentprocess",
                "process"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"794\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "paymentoptions",
                "title": "PaymentOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"794\" packageName=\"@vendure/core\" />\n\nDefines payment-related options in the <a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "paymentmethodhandlers",
                        "title": "paymentMethodHandlers",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/payment/payment-method-handler#paymentmethodhandler'>PaymentMethodHandler</a>[]`}   />\n\nDefines which <a href='/reference/typescript-api/payment/payment-method-handler#paymentmethodhandler'>PaymentMethodHandler</a>s are available when configuring\n<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>s\n"
                    },
                    {
                        "id": "paymentmethodeligibilitycheckers",
                        "title": "paymentMethodEligibilityCheckers",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/payment/payment-method-eligibility-checker#paymentmethodeligibilitychecker'>PaymentMethodEligibilityChecker</a>[]`}   />\n\nDefines which <a href='/reference/typescript-api/payment/payment-method-eligibility-checker#paymentmethodeligibilitychecker'>PaymentMethodEligibilityChecker</a>s are available when configuring\n<a href='/reference/typescript-api/entities/payment-method#paymentmethod'>PaymentMethod</a>s\n"
                    },
                    {
                        "id": "custompaymentprocess",
                        "title": "customPaymentProcess",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/payment/payment-process#paymentprocess'>PaymentProcess</a>&#60;any&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "process",
                        "title": "process",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/payment/payment-process#paymentprocess'>PaymentProcess</a>&#60;any&#62;&#62;`} default=\"<a href='/reference/typescript-api/payment/default-payment-process#defaultpaymentprocess'>defaultPaymentProcess</a>\"  since=\"2.0.0\"  />\n\nAllows the definition of custom states and transition logic for the payment process state machine.\nTakes an array of objects implementing the <a href='/reference/typescript-api/payment/payment-process#paymentprocess'>PaymentProcess</a> interface.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface PaymentOptions {",
                    "    paymentMethodHandlers: PaymentMethodHandler[];",
                    "    paymentMethodEligibilityCheckers?: PaymentMethodEligibilityChecker[];",
                    "    customPaymentProcess?: Array<PaymentProcess<any>>;",
                    "    process?: Array<PaymentProcess<any>>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "paymentprocess",
        "metadata": {
            "title": "PaymentProcess",
            "keywords": [
                "paymentprocess",
                "transitions",
                "ontransitionstart",
                "ontransitionend",
                "ontransitionerror"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-process.ts\" sourceLine=\"33\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "paymentprocess",
                "title": "PaymentProcess",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/payment/payment-process.ts\" sourceLine=\"33\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nA PaymentProcess is used to define the way the payment process works as in: what states a Payment can be\nin, and how it may transition from one state to another. Using the `onTransitionStart()` hook, a\nPaymentProcess can perform checks before allowing a state transition to occur, and the `onTransitionEnd()`\nhook allows logic to be executed after a state change.\n\nFor detailed description of the interface members, see the <a href='/reference/typescript-api/state-machine/state-machine-config#statemachineconfig'>StateMachineConfig</a> docs.\n\n:::info\n\nThis is configured via the `paymentOptions.process` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "transitions",
                        "title": "transitions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/transitions#transitions'>Transitions</a>&#60;State, State | <a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>&#62; &#38; Partial&#60;<a href='/reference/typescript-api/state-machine/transitions#transitions'>Transitions</a>&#60;<a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a> | State&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "ontransitionstart",
                        "title": "onTransitionStart",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionstartfn'>OnTransitionStartFn</a>&#60;State | <a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>, <a href='/reference/typescript-api/payment/payment-transition-data#paymenttransitiondata'>PaymentTransitionData</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "ontransitionend",
                        "title": "onTransitionEnd",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionendfn'>OnTransitionEndFn</a>&#60;State | <a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>, <a href='/reference/typescript-api/payment/payment-transition-data#paymenttransitiondata'>PaymentTransitionData</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "ontransitionerror",
                        "title": "onTransitionError",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionerrorfn'>OnTransitionErrorFn</a>&#60;State | <a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface PaymentProcess<State extends keyof CustomPaymentStates | string> extends InjectableStrategy {",
                    "    transitions?: Transitions<State, State | PaymentState> & Partial<Transitions<PaymentState | State>>;",
                    "    onTransitionStart?: OnTransitionStartFn<State | PaymentState, PaymentTransitionData>;",
                    "    onTransitionEnd?: OnTransitionEndFn<State | PaymentState, PaymentTransitionData>;",
                    "    onTransitionError?: OnTransitionErrorFn<State | PaymentState>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "payments-plugin",
        "metadata": {
            "title": "Payments Plugin",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "paymentservice",
        "metadata": {
            "title": "PaymentService",
            "keywords": [
                "paymentservice",
                "constructor",
                "create",
                "findoneorthrow",
                "transitiontostate",
                "getnextstates",
                "createpayment",
                "settlepayment",
                "cancelpayment",
                "createmanualpayment",
                "createrefund"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/payment.service.ts\" sourceLine=\"42\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "paymentservice",
                "title": "PaymentService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/payment.service.ts\" sourceLine=\"42\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/payment#payment'>Payment</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, paymentStateMachine: PaymentStateMachine, refundStateMachine: RefundStateMachine, paymentMethodService: <a href='/reference/typescript-api/services/payment-method-service#paymentmethodservice'>PaymentMethodService</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>) => PaymentService`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: DeepPartial&#60;<a href='/reference/typescript-api/entities/payment#payment'>Payment</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/entities/payment#payment'>Payment</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findoneorthrow",
                        "title": "findOneOrThrow",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations: string[] = ['order']) => Promise&#60;<a href='/reference/typescript-api/entities/payment#payment'>Payment</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "transitiontostate",
                        "title": "transitionToState",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, paymentId: <a href='/reference/typescript-api/common/id#id'>ID</a>, state: <a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>) => Promise&#60;<a href='/reference/typescript-api/entities/payment#payment'>Payment</a> | PaymentStateTransitionError&#62;`}   />\n\nTransitions a Payment to the given state.\n\nWhen updating a Payment in the context of an Order, it is\npreferable to use the <a href='/reference/typescript-api/services/order-service#orderservice'>OrderService</a> `transitionPaymentToState()` method, which will also handle\nupdating the Order state too.\n"
                    },
                    {
                        "id": "getnextstates",
                        "title": "getNextStates",
                        "content": "\n<MemberInfo kind=\"method\" type={`(payment: <a href='/reference/typescript-api/entities/payment#payment'>Payment</a>) => readonly <a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "createpayment",
                        "title": "createPayment",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, amount: number, method: string, metadata: any) => Promise&#60;<a href='/reference/typescript-api/entities/payment#payment'>Payment</a> | IneligiblePaymentMethodError&#62;`}   />\n\nCreates a new Payment.\n\nWhen creating a Payment in the context of an Order, it is\npreferable to use the <a href='/reference/typescript-api/services/order-service#orderservice'>OrderService</a> `addPaymentToOrder()` method, which will also handle\nupdating the Order state too.\n"
                    },
                    {
                        "id": "settlepayment",
                        "title": "settlePayment",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, paymentId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;PaymentStateTransitionError | <a href='/reference/typescript-api/entities/payment#payment'>Payment</a>&#62;`}   />\n\nSettles a Payment.\n\nWhen settling a Payment in the context of an Order, it is\npreferable to use the <a href='/reference/typescript-api/services/order-service#orderservice'>OrderService</a> `settlePayment()` method, which will also handle\nupdating the Order state too.\n"
                    },
                    {
                        "id": "cancelpayment",
                        "title": "cancelPayment",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, paymentId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;PaymentStateTransitionError | <a href='/reference/typescript-api/entities/payment#payment'>Payment</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "createmanualpayment",
                        "title": "createManualPayment",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, amount: number, input: ManualPaymentInput) => `}   />\n\nCreates a Payment from the manual payment mutation in the Admin API\n\nWhen creating a manual Payment in the context of an Order, it is\npreferable to use the <a href='/reference/typescript-api/services/order-service#orderservice'>OrderService</a> `addManualPaymentToOrder()` method, which will also handle\nupdating the Order state too.\n"
                    },
                    {
                        "id": "createrefund",
                        "title": "createRefund",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: RefundOrderInput, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, selectedPayment: <a href='/reference/typescript-api/entities/payment#payment'>Payment</a>) => Promise&#60;Refund | RefundStateTransitionError&#62;`}   />\n\nCreates a Refund against the specified Payment. If the amount to be refunded exceeds the value of the\nspecified Payment (in the case of multiple payments on a single Order), then the remaining outstanding\nrefund amount will be refunded against the next available Payment from the Order.\n\nWhen creating a Refund in the context of an Order, it is\npreferable to use the <a href='/reference/typescript-api/services/order-service#orderservice'>OrderService</a> `refundOrder()` method, which performs additional\nvalidation.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class PaymentService {",
                    "    constructor(connection: TransactionalConnection, paymentStateMachine: PaymentStateMachine, refundStateMachine: RefundStateMachine, paymentMethodService: PaymentMethodService, eventBus: EventBus)",
                    "    create(ctx: RequestContext, input: DeepPartial<Payment>) => Promise<Payment>;",
                    "    findOneOrThrow(ctx: RequestContext, id: ID, relations: string[] = ['order']) => Promise<Payment>;",
                    "    transitionToState(ctx: RequestContext, paymentId: ID, state: PaymentState) => Promise<Payment | PaymentStateTransitionError>;",
                    "    getNextStates(payment: Payment) => readonly PaymentState[];",
                    "    createPayment(ctx: RequestContext, order: Order, amount: number, method: string, metadata: any) => Promise<Payment | IneligiblePaymentMethodError>;",
                    "    settlePayment(ctx: RequestContext, paymentId: ID) => Promise<PaymentStateTransitionError | Payment>;",
                    "    cancelPayment(ctx: RequestContext, paymentId: ID) => Promise<PaymentStateTransitionError | Payment>;",
                    "    createManualPayment(ctx: RequestContext, order: Order, amount: number, input: ManualPaymentInput) => ;",
                    "    createRefund(ctx: RequestContext, input: RefundOrderInput, order: Order, selectedPayment: Payment) => Promise<Refund | RefundStateTransitionError>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "paymentstate",
        "metadata": {
            "title": "PaymentState",
            "keywords": [
                "paymentstate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/payment-state-machine/payment-state.ts\" sourceLine=\"27\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "paymentstate",
                "title": "PaymentState",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/payment-state-machine/payment-state.ts\" sourceLine=\"27\" packageName=\"@vendure/core\" />\n\nThese are the default states of the payment process.\n\n\n",
                "subsections": [],
                "code": [
                    "type PaymentState = | 'Created'",
                    "    | 'Error'",
                    "    | 'Cancelled'",
                    "    | keyof CustomPaymentStates",
                    "    | keyof PaymentStates"
                ]
            }
        ]
    },
    {
        "id": "paymentstates",
        "metadata": {
            "title": "PaymentStates",
            "keywords": [
                "paymentstates"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/payment-state-machine/payment-state.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "paymentstates",
                "title": "PaymentStates",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/payment-state-machine/payment-state.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" />\n\nAn interface to extend standard <a href='/reference/typescript-api/payment/payment-state#paymentstate'>PaymentState</a>.\n\n\n",
                "subsections": [],
                "code": [
                    "interface PaymentStates {",
                    "",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "paymenttransitiondata",
        "metadata": {
            "title": "PaymentTransitionData",
            "keywords": [
                "paymenttransitiondata",
                "ctx",
                "payment",
                "order"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/payment-state-machine/payment-state.ts\" sourceLine=\"41\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "paymenttransitiondata",
                "title": "PaymentTransitionData",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/payment-state-machine/payment-state.ts\" sourceLine=\"41\" packageName=\"@vendure/core\" />\n\nThe data which is passed to the `onStateTransitionStart` function configured when constructing\na new `PaymentMethodHandler`\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "ctx",
                        "title": "ctx",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>`}   />\n\n\n"
                    },
                    {
                        "id": "payment",
                        "title": "payment",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/payment#payment'>Payment</a>`}   />\n\n\n"
                    },
                    {
                        "id": "order",
                        "title": "order",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface PaymentTransitionData {",
                    "    ctx: RequestContext;",
                    "    payment: Payment;",
                    "    order: Order;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "permission",
        "metadata": {
            "title": "Permission",
            "keywords": [
                "permission",
                "understanding permission.owner"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/common/src/generated-types.ts\" sourceLine=\"4211\" packageName=\"@vendure/common\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "permission",
                "title": "Permission",
                "content": "\n<GenerationInfo sourceFile=\"packages/common/src/generated-types.ts\" sourceLine=\"4211\" packageName=\"@vendure/common\" />\n\nPermissions for administrators and customers. Used to control access to\nGraphQL resolvers via the <a href='/reference/typescript-api/request/allow-decorator#allow'>Allow</a> decorator.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "understanding-permission.owner",
                "title": "Understanding Permission.Owner",
                "content": "\n`Permission.Owner` is a special permission which is used in some Vendure resolvers to indicate that that resolver should only\nbe accessible to the \"owner\" of that resource.\n\nFor example, the Shop API `activeCustomer` query resolver should only return the Customer object for the \"owner\" of that Customer, i.e.\nbased on the activeUserId of the current session. As a result, the resolver code looks like this:\n\n*Example*\n\n\nHere we can see that the \"ownership\" must be enforced by custom logic inside the resolver. Since \"ownership\" cannot be defined generally\nnor statically encoded at build-time, any resolvers using `Permission.Owner` **must** include logic to enforce that only the owner\nof the resource has access. If not, then it is the equivalent of using `Permission.Public`.\n\n\n",
                "subsections": [],
                "code": [
                    "@Query()",
                    "@Allow(Permission.Owner)",
                    "async activeCustomer(@Ctx() ctx: RequestContext): Promise<Customer | undefined> {",
                    "  const userId = ctx.activeUserId;",
                    "  if (userId) {",
                    "    return this.customerService.findOneByUserId(ctx, userId);",
                    "  }",
                    "}",
                    "enum Permission {",
                    "    Authenticated = 'Authenticated'",
                    "    CreateAdministrator = 'CreateAdministrator'",
                    "    CreateAsset = 'CreateAsset'",
                    "    CreateCatalog = 'CreateCatalog'",
                    "    CreateChannel = 'CreateChannel'",
                    "    CreateCollection = 'CreateCollection'",
                    "    CreateCountry = 'CreateCountry'",
                    "    CreateCustomer = 'CreateCustomer'",
                    "    CreateCustomerGroup = 'CreateCustomerGroup'",
                    "    CreateFacet = 'CreateFacet'",
                    "    CreateOrder = 'CreateOrder'",
                    "    CreatePaymentMethod = 'CreatePaymentMethod'",
                    "    CreateProduct = 'CreateProduct'",
                    "    CreatePromotion = 'CreatePromotion'",
                    "    CreateSeller = 'CreateSeller'",
                    "    CreateSettings = 'CreateSettings'",
                    "    CreateShippingMethod = 'CreateShippingMethod'",
                    "    CreateStockLocation = 'CreateStockLocation'",
                    "    CreateSystem = 'CreateSystem'",
                    "    CreateTag = 'CreateTag'",
                    "    CreateTaxCategory = 'CreateTaxCategory'",
                    "    CreateTaxRate = 'CreateTaxRate'",
                    "    CreateZone = 'CreateZone'",
                    "    DeleteAdministrator = 'DeleteAdministrator'",
                    "    DeleteAsset = 'DeleteAsset'",
                    "    DeleteCatalog = 'DeleteCatalog'",
                    "    DeleteChannel = 'DeleteChannel'",
                    "    DeleteCollection = 'DeleteCollection'",
                    "    DeleteCountry = 'DeleteCountry'",
                    "    DeleteCustomer = 'DeleteCustomer'",
                    "    DeleteCustomerGroup = 'DeleteCustomerGroup'",
                    "    DeleteFacet = 'DeleteFacet'",
                    "    DeleteOrder = 'DeleteOrder'",
                    "    DeletePaymentMethod = 'DeletePaymentMethod'",
                    "    DeleteProduct = 'DeleteProduct'",
                    "    DeletePromotion = 'DeletePromotion'",
                    "    DeleteSeller = 'DeleteSeller'",
                    "    DeleteSettings = 'DeleteSettings'",
                    "    DeleteShippingMethod = 'DeleteShippingMethod'",
                    "    DeleteStockLocation = 'DeleteStockLocation'",
                    "    DeleteSystem = 'DeleteSystem'",
                    "    DeleteTag = 'DeleteTag'",
                    "    DeleteTaxCategory = 'DeleteTaxCategory'",
                    "    DeleteTaxRate = 'DeleteTaxRate'",
                    "    DeleteZone = 'DeleteZone'",
                    "    Owner = 'Owner'",
                    "    Public = 'Public'",
                    "    ReadAdministrator = 'ReadAdministrator'",
                    "    ReadAsset = 'ReadAsset'",
                    "    ReadCatalog = 'ReadCatalog'",
                    "    ReadChannel = 'ReadChannel'",
                    "    ReadCollection = 'ReadCollection'",
                    "    ReadCountry = 'ReadCountry'",
                    "    ReadCustomer = 'ReadCustomer'",
                    "    ReadCustomerGroup = 'ReadCustomerGroup'",
                    "    ReadFacet = 'ReadFacet'",
                    "    ReadOrder = 'ReadOrder'",
                    "    ReadPaymentMethod = 'ReadPaymentMethod'",
                    "    ReadProduct = 'ReadProduct'",
                    "    ReadPromotion = 'ReadPromotion'",
                    "    ReadSeller = 'ReadSeller'",
                    "    ReadSettings = 'ReadSettings'",
                    "    ReadShippingMethod = 'ReadShippingMethod'",
                    "    ReadStockLocation = 'ReadStockLocation'",
                    "    ReadSystem = 'ReadSystem'",
                    "    ReadTag = 'ReadTag'",
                    "    ReadTaxCategory = 'ReadTaxCategory'",
                    "    ReadTaxRate = 'ReadTaxRate'",
                    "    ReadZone = 'ReadZone'",
                    "    SuperAdmin = 'SuperAdmin'",
                    "    UpdateAdministrator = 'UpdateAdministrator'",
                    "    UpdateAsset = 'UpdateAsset'",
                    "    UpdateCatalog = 'UpdateCatalog'",
                    "    UpdateChannel = 'UpdateChannel'",
                    "    UpdateCollection = 'UpdateCollection'",
                    "    UpdateCountry = 'UpdateCountry'",
                    "    UpdateCustomer = 'UpdateCustomer'",
                    "    UpdateCustomerGroup = 'UpdateCustomerGroup'",
                    "    UpdateFacet = 'UpdateFacet'",
                    "    UpdateGlobalSettings = 'UpdateGlobalSettings'",
                    "    UpdateOrder = 'UpdateOrder'",
                    "    UpdatePaymentMethod = 'UpdatePaymentMethod'",
                    "    UpdateProduct = 'UpdateProduct'",
                    "    UpdatePromotion = 'UpdatePromotion'",
                    "    UpdateSeller = 'UpdateSeller'",
                    "    UpdateSettings = 'UpdateSettings'",
                    "    UpdateShippingMethod = 'UpdateShippingMethod'",
                    "    UpdateStockLocation = 'UpdateStockLocation'",
                    "    UpdateSystem = 'UpdateSystem'",
                    "    UpdateTag = 'UpdateTag'",
                    "    UpdateTaxCategory = 'UpdateTaxCategory'",
                    "    UpdateTaxRate = 'UpdateTaxRate'",
                    "    UpdateZone = 'UpdateZone'",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "permissiondefinition",
        "metadata": {
            "title": "PermissionDefinition",
            "keywords": [
                "permissiondefinition",
                "constructor",
                "permission",
                "crudpermissiondefinition",
                "create",
                "read",
                "update",
                "delete",
                "permissiondefinitionconfig",
                "name",
                "description",
                "assignable",
                "internal"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/permission-definition.ts\" sourceLine=\"86\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "permissiondefinition",
                "title": "PermissionDefinition",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/permission-definition.ts\" sourceLine=\"86\" packageName=\"@vendure/core\" />\n\nDefines a new Permission with which to control access to GraphQL resolvers & REST controllers.\nUsed in conjunction with the <a href='/reference/typescript-api/request/allow-decorator#allow'>Allow</a> decorator (see example below).\n\n**Note:** To define CRUD permissions, use the <a href='/reference/typescript-api/auth/permission-definition#crudpermissiondefinition'>CrudPermissionDefinition</a>.\n\n*Example*\n\n\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/typescript-api/auth/permission-definition#permissiondefinitionconfig'>PermissionDefinitionConfig</a>) => PermissionDefinition`}   />\n\n\n"
                    },
                    {
                        "id": "permission",
                        "title": "Permission",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/permission#permission'>Permission</a>`}   />\n\nReturns the permission defined by this definition, for use in the\n<a href='/reference/typescript-api/request/allow-decorator#allow'>Allow</a> decorator.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "export const sync = new PermissionDefinition({",
                    "  name: 'SyncInventory',",
                    "  description: 'Allows syncing stock levels via Admin API'",
                    "});",
                    "const config: VendureConfig = {",
                    "  authOptions: {",
                    "    customPermissions: [sync],",
                    "  },",
                    "}",
                    "@Resolver()",
                    "export class ExternalSyncResolver {",
                    "",
                    "  @Allow(sync.Permission)",
                    "  @Mutation()",
                    "  syncStockLevels() {",
                    "    // ...",
                    "  }",
                    "}",
                    "class PermissionDefinition {",
                    "    constructor(config: PermissionDefinitionConfig)",
                    "    Permission: Permission",
                    "}"
                ]
            },
            {
                "id": "crudpermissiondefinition",
                "title": "CrudPermissionDefinition",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/permission-definition.ts\" sourceLine=\"146\" packageName=\"@vendure/core\" />\n\nDefines a set of CRUD Permissions for the given name, i.e. a `name` of 'Wishlist' will create\n4 Permissions: 'CreateWishlist', 'ReadWishlist', 'UpdateWishlist' & 'DeleteWishlist'.\n\n*Example*\n\n\n\n\n* Extends: <code><a href='/reference/typescript-api/auth/permission-definition#permissiondefinition'>PermissionDefinition</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(name: string, descriptionFn?: (operation: 'create' | 'read' | 'update' | 'delete') =&#62; string) => CrudPermissionDefinition`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "Create",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/permission#permission'>Permission</a>`}   />\n\nReturns the 'Create' CRUD permission defined by this definition, for use in the\n<a href='/reference/typescript-api/request/allow-decorator#allow'>Allow</a> decorator.\n"
                    },
                    {
                        "id": "read",
                        "title": "Read",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/permission#permission'>Permission</a>`}   />\n\nReturns the 'Read' CRUD permission defined by this definition, for use in the\n<a href='/reference/typescript-api/request/allow-decorator#allow'>Allow</a> decorator.\n"
                    },
                    {
                        "id": "update",
                        "title": "Update",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/permission#permission'>Permission</a>`}   />\n\nReturns the 'Update' CRUD permission defined by this definition, for use in the\n<a href='/reference/typescript-api/request/allow-decorator#allow'>Allow</a> decorator.\n"
                    },
                    {
                        "id": "delete",
                        "title": "Delete",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/permission#permission'>Permission</a>`}   />\n\nReturns the 'Delete' CRUD permission defined by this definition, for use in the\n<a href='/reference/typescript-api/request/allow-decorator#allow'>Allow</a> decorator.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "export const wishlist = new CrudPermissionDefinition('Wishlist');",
                    "const config: VendureConfig = {",
                    "  authOptions: {",
                    "    customPermissions: [wishlist],",
                    "  },",
                    "}",
                    "@Resolver()",
                    "export class WishlistResolver {",
                    "",
                    "  @Allow(wishlist.Create)",
                    "  @Mutation()",
                    "  createWishlist() {",
                    "    // ...",
                    "  }",
                    "}",
                    "class CrudPermissionDefinition extends PermissionDefinition {",
                    "    constructor(name: string, descriptionFn?: (operation: 'create' | 'read' | 'update' | 'delete') => string)",
                    "    Create: Permission",
                    "    Read: Permission",
                    "    Update: Permission",
                    "    Delete: Permission",
                    "}"
                ]
            },
            {
                "id": "permissiondefinitionconfig",
                "title": "PermissionDefinitionConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/permission-definition.ts\" sourceLine=\"10\" packageName=\"@vendure/core\" />\n\nConfigures a <a href='/reference/typescript-api/auth/permission-definition#permissiondefinition'>PermissionDefinition</a>\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe name of the permission. By convention this should be\nUpperCamelCased.\n"
                    },
                    {
                        "id": "description",
                        "title": "description",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nA description of the permission.\n"
                    },
                    {
                        "id": "assignable",
                        "title": "assignable",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"true\"   />\n\nWhether this permission can be assigned to a Role. In general this\nshould be left as the default `true` except in special cases.\n"
                    },
                    {
                        "id": "internal",
                        "title": "internal",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nInternal permissions are not exposed via the API and are reserved for\nspecial use-cases such at the `Owner` or `Public` permissions.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface PermissionDefinitionConfig {",
                    "    name: string;",
                    "    description?: string;",
                    "    assignable?: boolean;",
                    "    internal?: boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "pipes",
        "metadata": {
            "title": "Pipes",
            "keywords": [
                "pipes"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "plugin-utilities",
        "metadata": {
            "title": "Plugin Utilities",
            "keywords": [
                "createproxyhandler",
                "options",
                "proxyoptions",
                "label",
                "route",
                "port",
                "hostname",
                "basepath"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/plugin/plugin-utils.ts\" sourceLine=\"37\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "createproxyhandler",
                "title": "createProxyHandler",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/plugin/plugin-utils.ts\" sourceLine=\"37\" packageName=\"@vendure/core\" />\n\nCreates a proxy middleware which proxies the given route to the given port.\nUseful for plugins which start their own servers but should be accessible\nvia the main Vendure url.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/typescript-api/plugin/plugin-utilities#proxyoptions'>ProxyOptions</a>`} />\n\n\n\n"
                    }
                ],
                "code": [
                    "// Example usage in the `configuration` method of a VendurePlugin.",
                    "// Imagine that we have started a Node server on port 5678",
                    "// running some service which we want to access via the `/my-plugin/`",
                    "// route of the main Vendure server.",
                    "@VendurePlugin({",
                    "  configuration: (config: Required<VendureConfig>) => {",
                    "      config.apiOptions.middleware.push({",
                    "          handler: createProxyHandler({",
                    "              label: 'Admin UI',",
                    "              route: 'my-plugin',",
                    "              port: 5678,",
                    "          }),",
                    "          route: 'my-plugin',",
                    "      });",
                    "      return config;",
                    "  }",
                    "})",
                    "export class MyPlugin {}",
                    "function createProxyHandler(options: ProxyOptions): RequestHandler"
                ]
            },
            {
                "id": "proxyoptions",
                "title": "ProxyOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/plugin/plugin-utils.ts\" sourceLine=\"76\" packageName=\"@vendure/core\" />\n\nOptions to configure proxy middleware via <a href='/reference/typescript-api/plugin/plugin-utilities#createproxyhandler'>createProxyHandler</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "label",
                        "title": "label",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nA human-readable label for the service which is being proxied. Used to\ngenerate more informative logs.\n"
                    },
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe route of the Vendure server which will act as the proxy url.\n"
                    },
                    {
                        "id": "port",
                        "title": "port",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe port on which the service being proxied is running.\n"
                    },
                    {
                        "id": "hostname",
                        "title": "hostname",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'localhost'\"   />\n\nThe hostname of the server on which the service being proxied is running.\n"
                    },
                    {
                        "id": "basepath",
                        "title": "basePath",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nAn optional base path on the proxied server.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ProxyOptions {",
                    "    label: string;",
                    "    route: string;",
                    "    port: number;",
                    "    hostname?: string;",
                    "    basePath?: string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "plugin",
        "metadata": {
            "title": "Plugin",
            "keywords": [
                "plugin"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "plugincommonmodule",
        "metadata": {
            "title": "PluginCommonModule",
            "keywords": [
                "plugincommonmodule"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/plugin/plugin-common.module.ts\" sourceLine=\"30\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "plugincommonmodule",
                "title": "PluginCommonModule",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/plugin/plugin-common.module.ts\" sourceLine=\"30\" packageName=\"@vendure/core\" />\n\nThis module provides the common services, configuration, and event bus capabilities\nrequired by a typical plugin. It should be imported into plugins to avoid having to\nrepeat the same boilerplate for each individual plugin.\n\nThe PluginCommonModule exports:\n\n* `EventBusModule`, allowing the injection of the <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a> service.\n* `ServiceModule` allowing the injection of any of the various entity services such as ProductService, OrderService etc.\n* `ConfigModule`, allowing the injection of the ConfigService.\n* `JobQueueModule`, allowing the injection of the <a href='/reference/typescript-api/job-queue/job-queue-service#jobqueueservice'>JobQueueService</a>.\n* `HealthCheckModule`, allowing the injection of the <a href='/reference/typescript-api/health-check/health-check-registry-service#healthcheckregistryservice'>HealthCheckRegistryService</a>.\n\n\n",
                "subsections": [],
                "code": [
                    "class PluginCommonModule {",
                    "",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "pollingjobqueuestrategy",
        "metadata": {
            "title": "PollingJobQueueStrategy",
            "keywords": [
                "pollingjobqueuestrategy",
                "concurrency",
                "pollinterval",
                "setretries",
                "backoffstrategy",
                "constructor",
                "start",
                "stop",
                "canceljob",
                "next",
                "update",
                "findone"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/job-queue/polling-job-queue-strategy.ts\" sourceLine=\"192\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "pollingjobqueuestrategy",
                "title": "PollingJobQueueStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/polling-job-queue-strategy.ts\" sourceLine=\"192\" packageName=\"@vendure/core\" />\n\nThis class allows easier implementation of <a href='/reference/typescript-api/job-queue/job-queue-strategy#jobqueuestrategy'>JobQueueStrategy</a> in a polling style.\nInstead of providing <a href='/reference/typescript-api/job-queue/job-queue-strategy#jobqueuestrategy'>JobQueueStrategy</a> `start()` you should provide a `next` method.\n\nThis class should be extended by any strategy which does not support a push-based system\nto notify on new jobs. It is used by the <a href='/reference/typescript-api/job-queue/sql-job-queue-strategy#sqljobqueuestrategy'>SqlJobQueueStrategy</a> and <a href='/reference/typescript-api/job-queue/in-memory-job-queue-strategy#inmemoryjobqueuestrategy'>InMemoryJobQueueStrategy</a>.\n\n* Extends: <code>InjectableJobQueueStrategy</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "concurrency",
                        "title": "concurrency",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "pollinterval",
                        "title": "pollInterval",
                        "content": "\n<MemberInfo kind=\"property\" type={`number | ((queueName: string) =&#62; number)`}   />\n\n\n"
                    },
                    {
                        "id": "setretries",
                        "title": "setRetries",
                        "content": "\n<MemberInfo kind=\"property\" type={`(queueName: string, job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>) =&#62; number`}   />\n\n\n"
                    },
                    {
                        "id": "backoffstrategy",
                        "title": "backOffStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/job-queue/types#backoffstrategy'>BackoffStrategy</a>`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config?: PollingJobQueueStrategyConfig) => PollingJobQueueStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(concurrency?: number, pollInterval?: number) => PollingJobQueueStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(concurrencyOrConfig?: number | PollingJobQueueStrategyConfig, maybePollInterval?: number) => PollingJobQueueStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "start",
                        "title": "start",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queueName: string, process: (job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;) =&#62; Promise&#60;any&#62;) => `}   />\n\n\n"
                    },
                    {
                        "id": "stop",
                        "title": "stop",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queueName: string, process: (job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;) =&#62; Promise&#60;any&#62;) => `}   />\n\n\n"
                    },
                    {
                        "id": "canceljob",
                        "title": "cancelJob",
                        "content": "\n<MemberInfo kind=\"method\" type={`(jobId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "next",
                        "title": "next",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queueName: string) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a> | undefined&#62;`}   />\n\nShould return the next job in the given queue. The implementation is\nresponsible for returning the correct job according to the time of\ncreation.\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>) => Promise&#60;void&#62;`}   />\n\nUpdate the job details in the store.\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a> | undefined&#62;`}   />\n\nReturns a job by its id.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class PollingJobQueueStrategy extends InjectableJobQueueStrategy {",
                    "    public concurrency: number;",
                    "    public pollInterval: number | ((queueName: string) => number);",
                    "    public setRetries: (queueName: string, job: Job) => number;",
                    "    public backOffStrategy?: BackoffStrategy;",
                    "    constructor(config?: PollingJobQueueStrategyConfig)",
                    "    constructor(concurrency?: number, pollInterval?: number)",
                    "    constructor(concurrencyOrConfig?: number | PollingJobQueueStrategyConfig, maybePollInterval?: number)",
                    "    start(queueName: string, process: (job: Job<Data>) => Promise<any>) => ;",
                    "    stop(queueName: string, process: (job: Job<Data>) => Promise<any>) => ;",
                    "    cancelJob(jobId: ID) => Promise<Job | undefined>;",
                    "    next(queueName: string) => Promise<Job | undefined>;",
                    "    update(job: Job) => Promise<void>;",
                    "    findOne(id: ID) => Promise<Job | undefined>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "populate",
        "metadata": {
            "title": "Populate",
            "keywords": [
                "populate",
                "bootstrapfn",
                "initialdatapathorobject",
                "productscsvpath",
                "channelortoken"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/cli/populate.ts\" sourceLine=\"51\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "populate",
                "title": "populate",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/cli/populate.ts\" sourceLine=\"51\" packageName=\"@vendure/core\" />\n\nPopulates the Vendure server with some initial data and (optionally) product data from\na supplied CSV file. The format of the CSV file is described in the section\n[Importing Product Data](/guides/developer-guide/importing-data/).\n\nIf the `channelOrToken` argument is provided, all ChannelAware entities (Products, ProductVariants,\nAssets, ShippingMethods, PaymentMethods etc.) will be assigned to the specified Channel.\nThe argument can be either a Channel object or a valid channel `token`.\n\nInternally the `populate()` function does the following:\n\n1. Uses the <a href='/reference/typescript-api/import-export/populator#populator'>Populator</a> to populate the <a href='/reference/typescript-api/import-export/initial-data#initialdata'>InitialData</a>.\n2. If `productsCsvPath` is provided, uses <a href='/reference/typescript-api/import-export/importer#importer'>Importer</a> to populate Product data.\n3. Uses <a href='/reference/typescript-api/import-export/populator#populator'>Populator</a> to populate collections specified in the <a href='/reference/typescript-api/import-export/initial-data#initialdata'>InitialData</a>.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "bootstrapfn",
                        "title": "bootstrapFn",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`() =&#62; Promise&#60;T | undefined&#62;`} />\n\n"
                    },
                    {
                        "id": "initialdatapathorobject",
                        "title": "initialDataPathOrObject",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`string | object`} />\n\n"
                    },
                    {
                        "id": "productscsvpath",
                        "title": "productsCsvPath",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`string`} />\n\n"
                    },
                    {
                        "id": "channelortoken",
                        "title": "channelOrToken",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`string | import('@vendure/core').<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { bootstrap } from '@vendure/core';",
                    "import { populate } from '@vendure/core/cli';",
                    "import { config } from './vendure-config.ts'",
                    "import { initialData } from './my-initial-data.ts';",
                    "",
                    "const productsCsvFile = path.join(__dirname, 'path/to/products.csv')",
                    "",
                    "populate(",
                    "  () => bootstrap(config),",
                    "  initialData,",
                    "  productsCsvFile,",
                    ")",
                    ".then(app => app.close())",
                    ".then(",
                    "  () => process.exit(0),",
                    "  err => {",
                    "    console.log(err);",
                    "    process.exit(1);",
                    "  },",
                    ");",
                    "function populate<T extends INestApplicationContext>(bootstrapFn: () => Promise<T | undefined>, initialDataPathOrObject: string | object, productsCsvPath?: string, channelOrToken?: string | import('@vendure/core').Channel): Promise<T>"
                ]
            }
        ]
    },
    {
        "id": "populator",
        "metadata": {
            "title": "Populator",
            "keywords": [
                "populator",
                "populateinitialdata",
                "populatecollections"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/data-import/providers/populator/populator.ts\" sourceLine=\"46\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "populator",
                "title": "Populator",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/data-import/providers/populator/populator.ts\" sourceLine=\"46\" packageName=\"@vendure/core\" />\n\nResponsible for populating the database with <a href='/reference/typescript-api/import-export/initial-data#initialdata'>InitialData</a>, i.e. non-product data such as countries, tax rates,\nshipping methods, payment methods & roles.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "populateinitialdata",
                        "title": "populateInitialData",
                        "content": "\n<MemberInfo kind=\"method\" type={`(data: <a href='/reference/typescript-api/import-export/initial-data#initialdata'>InitialData</a>, channel?: <a href='/reference/typescript-api/entities/channel#channel'>Channel</a>) => `}   />\n\nShould be run *before* populating the products, so that there are TaxRates by which\nproduct prices can be set. If the `channel` argument is set, then any <a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a>\nentities will be assigned to that Channel.\n"
                    },
                    {
                        "id": "populatecollections",
                        "title": "populateCollections",
                        "content": "\n<MemberInfo kind=\"method\" type={`(data: <a href='/reference/typescript-api/import-export/initial-data#initialdata'>InitialData</a>, channel?: <a href='/reference/typescript-api/entities/channel#channel'>Channel</a>) => `}   />\n\nShould be run *after* the products have been populated, otherwise the expected FacetValues will not\nyet exist.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Populator {",
                    "    populateInitialData(data: InitialData, channel?: Channel) => ;",
                    "    populateCollections(data: InitialData, channel?: Channel) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "pricecalculationresult",
        "metadata": {
            "title": "PriceCalculationResult",
            "keywords": [
                "pricecalculationresult",
                "price",
                "priceincludestax"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/types/common-types.ts\" sourceLine=\"171\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "pricecalculationresult",
                "title": "PriceCalculationResult",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/types/common-types.ts\" sourceLine=\"171\" packageName=\"@vendure/core\" />\n\nThe result of the price calculation from the <a href='/reference/typescript-api/products-stock/product-variant-price-calculation-strategy#productvariantpricecalculationstrategy'>ProductVariantPriceCalculationStrategy</a> or the\n<a href='/reference/typescript-api/orders/order-item-price-calculation-strategy#orderitempricecalculationstrategy'>OrderItemPriceCalculationStrategy</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "price",
                        "title": "price",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "priceincludestax",
                        "title": "priceIncludesTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "type PriceCalculationResult = {",
                    "    price: number;",
                    "    priceIncludesTax: boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "processcontext",
        "metadata": {
            "title": "ProcessContext",
            "keywords": [
                "processcontext",
                "isserver",
                "isworker"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/process-context/process-context.ts\" sourceLine=\"31\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "processcontext",
                "title": "ProcessContext",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/process-context/process-context.ts\" sourceLine=\"31\" packageName=\"@vendure/core\" />\n\nThe ProcessContext can be injected into your providers & modules in order to know whether it\nis being executed in the context of the main Vendure server or the worker.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "isserver",
                        "title": "isServer",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "isworker",
                        "title": "isWorker",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { Injectable, OnApplicationBootstrap } from '@nestjs/common';",
                    "import { ProcessContext } from '@vendure/core';",
                    "",
                    "@Injectable()",
                    "export class MyService implements OnApplicationBootstrap {",
                    "  constructor(private processContext: ProcessContext) {}",
                    "",
                    "  onApplicationBootstrap() {",
                    "    if (this.processContext.isServer) {",
                    "      // code which will only execute when running in",
                    "      // the server process",
                    "    }",
                    "  }",
                    "}",
                    "class ProcessContext {",
                    "    isServer: boolean",
                    "    isWorker: boolean",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "product",
        "metadata": {
            "title": "Product",
            "keywords": [
                "product",
                "constructor",
                "deletedat",
                "name",
                "slug",
                "description",
                "enabled",
                "featuredasset",
                "assets",
                "translations",
                "variants",
                "optiongroups",
                "facetvalues",
                "customfields",
                "channels"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/product/product.entity.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "product",
                "title": "Product",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/product/product.entity.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />\n\nA Product contains one or more <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>s and serves as a container for those variants,\nproviding an overall name, description etc.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#translatable'>Translatable</a></code>, <code>HasCustomFields</code>, <code><a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a></code>, <code><a href='/reference/typescript-api/entities/interfaces#softdeletable'>SoftDeletable</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;) => Product`}   />\n\n\n"
                    },
                    {
                        "id": "deletedat",
                        "title": "deletedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "slug",
                        "title": "slug",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "description",
                        "title": "description",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "enabled",
                        "title": "enabled",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "featuredasset",
                        "title": "featuredAsset",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>`}   />\n\n\n"
                    },
                    {
                        "id": "assets",
                        "title": "assets",
                        "content": "\n<MemberInfo kind=\"property\" type={`ProductAsset[]`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Translation&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "variants",
                        "title": "variants",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "optiongroups",
                        "title": "optionGroups",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "facetvalues",
                        "title": "facetValues",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomProductFields`}   />\n\n\n"
                    },
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Product extends VendureEntity implements Translatable, HasCustomFields, ChannelAware, SoftDeletable {",
                    "    constructor(input?: DeepPartial<Product>)",
                    "    @Column({ type: Date, nullable: true })",
                    "    deletedAt: Date | null;",
                    "    name: LocaleString;",
                    "    slug: LocaleString;",
                    "    description: LocaleString;",
                    "    @Column({ default: true })",
                    "    enabled: boolean;",
                    "    @Index()",
                    "    @ManyToOne(type => Asset, { onDelete: 'SET NULL' })",
                    "    featuredAsset: Asset;",
                    "    @OneToMany(type => ProductAsset, productAsset => productAsset.product)",
                    "    assets: ProductAsset[];",
                    "    @OneToMany(type => ProductTranslation, translation => translation.base, { eager: true })",
                    "    translations: Array<Translation<Product>>;",
                    "    @OneToMany(type => ProductVariant, variant => variant.product)",
                    "    variants: ProductVariant[];",
                    "    @OneToMany(type => ProductOptionGroup, optionGroup => optionGroup.product)",
                    "    optionGroups: ProductOptionGroup[];",
                    "    @ManyToMany(type => FacetValue)",
                    "    @JoinTable()",
                    "    facetValues: FacetValue[];",
                    "    @Column(type => CustomProductFields)",
                    "    customFields: CustomProductFields;",
                    "    @ManyToMany(type => Channel)",
                    "    @JoinTable()",
                    "    channels: Channel[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "production-configuration",
        "metadata": {
            "title": "Production configuration",
            "keywords": [
                "production configuration",
                "environment variables",
                "superadmin credentials",
                "api hardening",
                "or",
                "id strategy",
                "database timezone"
            ],
            "description": "This is a guide to the recommended configuration for a production Vendure application. Keep sensitive information or context-dependent settings in environment variables. In local development you can store the values in a `.env` file. For production, you should use the mechanism provided by your hosting platform to set the values for production. The default `@vendure/create` project scaffold makes use of environment variables already. For example: ```ts const IS_DEV = process.env.APP_ENV === 'dev';"
        },
        "content": "",
        "sections": [
            {
                "id": "environment-variables",
                "title": "Environment variables",
                "content": "\nKeep sensitive information or context-dependent settings in environment variables. In local development you can store the values in a `.env` file. For production, you should use the mechanism provided by your hosting platform to set the values for production.\n\nThe default `@vendure/create` project scaffold makes use of environment variables already. For example:\n\n\nThe `APP_ENV` environment variable can then be set using the admin dashboard of your hosting provider:\n\n![A typical UI for setting env vars](./env-var-ui.webp)\n\nIf you are using [Docker or Kubernetes](/guides/deployment/using-docker), they include their own methods of setting environment variables.\n\n",
                "subsections": [],
                "code": [
                    "const IS_DEV = process.env.APP_ENV === 'dev';"
                ]
            },
            {
                "id": "superadmin-credentials",
                "title": "Superadmin credentials",
                "content": "\nEnsure you set the superadmin credentials to something other than the default of `superadmin:superadmin`. Use your hosting platform's environment variables to set a **strong** password for the Superadmin account.\n\n\n",
                "subsections": [],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "  authOptions: {",
                    "    tokenMethod: ['bearer', 'cookie'],",
                    "    superadminCredentials: {",
                    "      identifier: process.env.SUPERADMIN_USERNAME,",
                    "      password: process.env.SUPERADMIN_PASSWORD,",
                    "    },",
                    "  },",
                    "  // ...",
                    "};"
                ]
            },
            {
                "id": "api-hardening",
                "title": "API hardening",
                "content": "\nIt is recommended that you install and configure the [HardenPlugin](/reference/core-plugins/harden-plugin/) for all production deployments. This plugin locks down your schema (disabling introspection and field suggestions) and protects your Shop API against malicious queries that could otherwise overwhelm your server.\n\nInstall the plugin: \n\n\nThen add it to your VendureConfig:\n\n\n:::info\nFor a detailed explanation of how to best configure this plugin, see the [HardenPlugin docs](/reference/core-plugins/harden-plugin/).\n:::\n\n",
                "subsections": [],
                "code": [
                    "npm install @vendure/harden-plugin",
                    "",
                    "# or",
                    "",
                    "yarn add @vendure/harden-plugin",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { HardenPlugin } from '@vendure/harden-plugin';",
                    "",
                    "const IS_DEV = process.env.APP_ENV === 'dev';",
                    "",
                    "export const config: VendureConfig = {",
                    "  // ...",
                    "  plugins: [",
                    "    HardenPlugin.init({",
                    "      maxQueryComplexity: 500,",
                    "      apiMode: IS_DEV ? 'dev' : 'prod',",
                    "    }),",
                    "    // ...",
                    "  ]",
                    "};"
                ]
            },
            {
                "id": "id-strategy",
                "title": "ID Strategy",
                "content": "\nBy default, Vendure uses auto-increment integer IDs as entity primary keys. While easier to work with in development, sequential primary keys can leak information such as the number of orders or customers in the system.\n\nFor this reason you should consider using the UuidIdStrategy for production.\n\n\nAnother option, if you wish to stick with integer IDs, is to create a custom [EntityIdStrategy](/reference/typescript-api/configuration/entity-id-strategy/) which uses the `encodeId()` and `decodeId()` methods to obfuscate the sequential nature of the ID.\n\n",
                "subsections": [],
                "code": [
                    "import { UuidIdStrategy, VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "    entityOptions: {",
                    "        entityIdStrategy: new UuidIdStrategy(),",
                    "    },",
                    "    // ...",
                    "}"
                ]
            },
            {
                "id": "database-timezone",
                "title": "Database Timezone",
                "content": "\nVendure internally treats all dates & times as UTC. However, you may sometimes run into issues where dates are offset by some fixed amount of hours. E.g. you place an order at 17:00, but it shows up in the Admin UI as being placed at 19:00. Typically, this is caused by the timezone of your database not being set to UTC.\n\nYou can check the timezone in **MySQL/MariaDB** by executing:\n\nand you should expect to see `00:00:00`.\n\nIn **Postgres**, you can execute:\nand you should expect to see `UTC` or `Etc/UTC`.\n\n",
                "subsections": [],
                "code": [
                    "SELECT TIMEDIFF(NOW(), UTC_TIMESTAMP);",
                    "show timezone;"
                ]
            }
        ]
    },
    {
        "id": "productoption",
        "metadata": {
            "title": "ProductOption",
            "keywords": [
                "productoption",
                "constructor",
                "deletedat",
                "name",
                "code",
                "translations",
                "group",
                "groupid",
                "customfields"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/product-option/product-option.entity.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "productoption",
                "title": "ProductOption",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/product-option/product-option.entity.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" />\n\nA ProductOption is used to differentiate <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>s from one another.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#translatable'>Translatable</a></code>, <code>HasCustomFields</code>, <code><a href='/reference/typescript-api/entities/interfaces#softdeletable'>SoftDeletable</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a>&#62;) => ProductOption`}   />\n\n\n"
                    },
                    {
                        "id": "deletedat",
                        "title": "deletedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Translation&#60;<a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "group",
                        "title": "group",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a>`}   />\n\n\n"
                    },
                    {
                        "id": "groupid",
                        "title": "groupId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomProductOptionFields`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ProductOption extends VendureEntity implements Translatable, HasCustomFields, SoftDeletable {",
                    "    constructor(input?: DeepPartial<ProductOption>)",
                    "    @Column({ type: Date, nullable: true })",
                    "    deletedAt: Date | null;",
                    "    name: LocaleString;",
                    "    @Column() code: string;",
                    "    @OneToMany(type => ProductOptionTranslation, translation => translation.base, { eager: true })",
                    "    translations: Array<Translation<ProductOption>>;",
                    "    @Index()",
                    "    @ManyToOne(type => ProductOptionGroup, group => group.options)",
                    "    group: ProductOptionGroup;",
                    "    @EntityId()",
                    "    groupId: ID;",
                    "    @Column(type => CustomProductOptionFields)",
                    "    customFields: CustomProductOptionFields;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "productoptiongroup",
        "metadata": {
            "title": "ProductOptionGroup",
            "keywords": [
                "productoptiongroup",
                "constructor",
                "deletedat",
                "name",
                "code",
                "translations",
                "options",
                "product",
                "customfields"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/product-option-group/product-option-group.entity.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "productoptiongroup",
                "title": "ProductOptionGroup",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/product-option-group/product-option-group.entity.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" />\n\nA grouping of one or more <a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a>s.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#translatable'>Translatable</a></code>, <code>HasCustomFields</code>, <code><a href='/reference/typescript-api/entities/interfaces#softdeletable'>SoftDeletable</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a>&#62;) => ProductOptionGroup`}   />\n\n\n"
                    },
                    {
                        "id": "deletedat",
                        "title": "deletedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Translation&#60;<a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "product",
                        "title": "product",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product#product'>Product</a>`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomProductOptionGroupFields`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ProductOptionGroup extends VendureEntity implements Translatable, HasCustomFields, SoftDeletable {",
                    "    constructor(input?: DeepPartial<ProductOptionGroup>)",
                    "    @Column({ type: Date, nullable: true })",
                    "    deletedAt: Date | null;",
                    "    name: LocaleString;",
                    "    @Column()",
                    "    code: string;",
                    "    @OneToMany(type => ProductOptionGroupTranslation, translation => translation.base, { eager: true })",
                    "    translations: Array<Translation<ProductOptionGroup>>;",
                    "    @OneToMany(type => ProductOption, option => option.group)",
                    "    options: ProductOption[];",
                    "    @Index()",
                    "    @ManyToOne(type => Product)",
                    "    product: Product;",
                    "    @Column(type => CustomProductOptionGroupFields)",
                    "    customFields: CustomProductOptionGroupFields;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "productoptiongroupservice",
        "metadata": {
            "title": "ProductOptionGroupService",
            "keywords": [
                "productoptiongroupservice",
                "constructor",
                "findall",
                "findone",
                "getoptiongroupsbyproductid",
                "create",
                "update",
                "deletegroupandoptionsfromproduct"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/product-option-group.service.ts\" sourceLine=\"34\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "productoptiongroupservice",
                "title": "ProductOptionGroupService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/product-option-group.service.ts\" sourceLine=\"34\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, translatableSaver: <a href='/reference/typescript-api/service-helpers/translatable-saver#translatablesaver'>TranslatableSaver</a>, customFieldRelationService: CustomFieldRelationService, productOptionService: <a href='/reference/typescript-api/services/product-option-service#productoptionservice'>ProductOptionService</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>) => ProductOptionGroupService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, filterTerm?: string, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a>&#62;) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a>&#62;) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getoptiongroupsbyproductid",
                        "title": "getOptionGroupsByProductId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateProductOptionGroupInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateProductOptionGroupInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "deletegroupandoptionsfromproduct",
                        "title": "deleteGroupAndOptionsFromProduct",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>, productId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => `}   />\n\nDeletes the ProductOptionGroup and any associated ProductOptions. If the ProductOptionGroup\nis still referenced by a soft-deleted Product, then a soft-delete will be used to preserve\nreferential integrity. Otherwise a hard-delete will be performed.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ProductOptionGroupService {",
                    "    constructor(connection: TransactionalConnection, translatableSaver: TranslatableSaver, customFieldRelationService: CustomFieldRelationService, productOptionService: ProductOptionService, eventBus: EventBus, translator: TranslatorService)",
                    "    findAll(ctx: RequestContext, filterTerm?: string, relations?: RelationPaths<ProductOptionGroup>) => Promise<Array<Translated<ProductOptionGroup>>>;",
                    "    findOne(ctx: RequestContext, id: ID, relations?: RelationPaths<ProductOptionGroup>) => Promise<Translated<ProductOptionGroup> | undefined>;",
                    "    getOptionGroupsByProductId(ctx: RequestContext, id: ID) => Promise<Array<Translated<ProductOptionGroup>>>;",
                    "    create(ctx: RequestContext, input: CreateProductOptionGroupInput) => Promise<Translated<ProductOptionGroup>>;",
                    "    update(ctx: RequestContext, input: UpdateProductOptionGroupInput) => Promise<Translated<ProductOptionGroup>>;",
                    "    deleteGroupAndOptionsFromProduct(ctx: RequestContext, id: ID, productId: ID) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "productoptionservice",
        "metadata": {
            "title": "ProductOptionService",
            "keywords": [
                "productoptionservice",
                "constructor",
                "findall",
                "findone",
                "create",
                "update",
                "delete"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/product-option.service.ts\" sourceLine=\"32\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "productoptionservice",
                "title": "ProductOptionService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/product-option.service.ts\" sourceLine=\"32\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, translatableSaver: <a href='/reference/typescript-api/service-helpers/translatable-saver#translatablesaver'>TranslatableSaver</a>, customFieldRelationService: CustomFieldRelationService, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>) => ProductOptionService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, group: <a href='/reference/typescript-api/entities/product-option-group#productoptiongroup'>ProductOptionGroup</a> | <a href='/reference/typescript-api/common/id#id'>ID</a>, input: CreateGroupOptionInput | CreateProductOptionInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateProductOptionInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\nDeletes a ProductOption.\n\n- If the ProductOption is used by any ProductVariants, the deletion will fail.\n- If the ProductOption is used only by soft-deleted ProductVariants, the option will itself\n  be soft-deleted.\n- If the ProductOption is not used by any ProductVariant at all, it will be hard-deleted.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ProductOptionService {",
                    "    constructor(connection: TransactionalConnection, translatableSaver: TranslatableSaver, customFieldRelationService: CustomFieldRelationService, eventBus: EventBus, translator: TranslatorService)",
                    "    findAll(ctx: RequestContext) => Promise<Array<Translated<ProductOption>>>;",
                    "    findOne(ctx: RequestContext, id: ID) => Promise<Translated<ProductOption> | undefined>;",
                    "    create(ctx: RequestContext, group: ProductOptionGroup | ID, input: CreateGroupOptionInput | CreateProductOptionInput) => Promise<Translated<ProductOption>>;",
                    "    update(ctx: RequestContext, input: UpdateProductOptionInput) => Promise<Translated<ProductOption>>;",
                    "    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "productpriceapplicator",
        "metadata": {
            "title": "ProductPriceApplicator",
            "keywords": [
                "productpriceapplicator",
                "constructor",
                "applychannelpriceandtax"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/product-price-applicator/product-price-applicator.ts\" sourceLine=\"41\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "productpriceapplicator",
                "title": "ProductPriceApplicator",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/product-price-applicator/product-price-applicator.ts\" sourceLine=\"41\" packageName=\"@vendure/core\" />\n\nThis helper is used to apply the correct price to a ProductVariant based on the current context\nincluding active Channel, any current Order, etc. If you use the <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a> to\ndirectly query ProductVariants, you will find that the `price` and `priceWithTax` properties will\nalways be `0` until you use the `applyChannelPriceAndTax()` method:\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(configService: ConfigService, taxRateService: <a href='/reference/typescript-api/services/tax-rate-service#taxrateservice'>TaxRateService</a>, zoneService: <a href='/reference/typescript-api/services/zone-service#zoneservice'>ZoneService</a>, requestCache: RequestContextCacheService) => ProductPriceApplicator`}   />\n\n\n"
                    },
                    {
                        "id": "applychannelpriceandtax",
                        "title": "applyChannelPriceAndTax",
                        "content": "\n<MemberInfo kind=\"method\" type={`(variant: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>, ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order?: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;`}   />\n\nPopulates the `price` field with the price for the specified channel. Make sure that\nthe ProductVariant being passed in has its `taxCategory` relation joined.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "export class MyCustomService {",
                    "  constructor(private connection: TransactionalConnection,",
                    "              private productPriceApplicator: ProductPriceApplicator) {}",
                    "",
                    "  getVariant(ctx: RequestContext, id: ID) {",
                    "    const productVariant = await this.connection",
                    "      .getRepository(ctx, ProductVariant)",
                    "      .findOne(id, { relations: ['taxCategory'] });",
                    "",
                    "    await this.productPriceApplicator",
                    "      .applyChannelPriceAndTax(productVariant, ctx);",
                    "",
                    "    return productVariant;",
                    "  }",
                    "}",
                    "class ProductPriceApplicator {",
                    "    constructor(configService: ConfigService, taxRateService: TaxRateService, zoneService: ZoneService, requestCache: RequestContextCacheService)",
                    "    applyChannelPriceAndTax(variant: ProductVariant, ctx: RequestContext, order?: Order) => Promise<ProductVariant>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "products-stock",
        "metadata": {
            "title": "Products Stock",
            "keywords": [
                "products-stock"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "products",
        "metadata": {
            "title": "Products",
            "keywords": [
                "products",
                "products vs productvariants",
                "tracking inventory",
                "back orders"
            ],
            "description": "Products represent the items you want to sell to your customers. In Vendure, every Product has one or more _ProductVariants_. You can think of a Product as a \"container\" which houses the variants: ![./product-variants.png](./product-variants.png) In the diagram above you'll notice that it is the ProductVariants which have an SKU (_stock-keeping unit_: a unique product code) and a price. **Products** provide the overall name, description, slug, images. A product _does not_ have a price, sku, or stock level."
        },
        "content": "",
        "sections": [
            {
                "id": "products-vs-productvariants",
                "title": "Products vs ProductVariants",
                "content": "\nIn Vendure, every Product has one or more _ProductVariants_. You can think of a Product as a \"container\" which houses the variants: \n\n![./product-variants.png](./product-variants.png)\n\nIn the diagram above you'll notice that it is the ProductVariants which have an SKU (_stock-keeping unit_: a unique product code) and a price.\n\n**Products** provide the overall name, description, slug, images. A product _does not_ have a price, sku, or stock level. \n\n**ProductVariants** have a price, sku, stock level, tax settings. They are the actual things that get added to orders and purchased.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "tracking-inventory",
                "title": "Tracking Inventory",
                "content": "\nVendure can track the stock levels of each of your ProductVariants. This is done by setting the \"track inventory\" option to \"track\" (or \"inherit from global settings\" if the [global setting]({{< relref \"/user-guide/settings/global-settings\" >}}) is set to track).\n\n![./screen-inventory.webp](./screen-inventory.webp)\n\nWhen tracking inventory:\n\n* When a customer checks out, the contents of the order will be \"allocated\". This means that the stock has not yet been sold, but it is no longer available to purchase (no longer _saleable_).\n* Once a Fulfillment has been created (see the Orders section), those allocated items will be converted into sales, meaning the stock level will be lowered by the corresponding quantity.\n* If a customer attempts to add more of a ProductVariant than are currently _saleable_, they will encounter an error.\n\n",
                "subsections": [
                    {
                        "id": "back-orders",
                        "title": "Back orders",
                        "content": "\nBack orders can be enabled by setting a **negative value** as the \"Out-of-stock threshold\". This can be done via [global settings]({{< relref \"/user-guide/settings/global-settings\" >}}) or on a per-variant basis.\n\n"
                    }
                ],
                "code": []
            }
        ]
    },
    {
        "id": "productservice",
        "metadata": {
            "title": "ProductService",
            "keywords": [
                "productservice",
                "constructor",
                "findall",
                "findone",
                "findbyids",
                "getproductchannels",
                "getfacetvaluesforproduct",
                "findonebyslug",
                "create",
                "update",
                "softdelete",
                "assignproductstochannel",
                "removeproductsfromchannel",
                "addoptiongrouptoproduct",
                "removeoptiongroupfromproduct"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/product.service.ts\" sourceLine=\"53\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "productservice",
                "title": "ProductService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/product.service.ts\" sourceLine=\"53\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/product#product'>Product</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, channelService: <a href='/reference/typescript-api/services/channel-service#channelservice'>ChannelService</a>, assetService: <a href='/reference/typescript-api/services/asset-service#assetservice'>AssetService</a>, productVariantService: <a href='/reference/typescript-api/services/product-variant-service#productvariantservice'>ProductVariantService</a>, facetValueService: <a href='/reference/typescript-api/services/facet-value-service#facetvalueservice'>FacetValueService</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, translatableSaver: <a href='/reference/typescript-api/service-helpers/translatable-saver#translatablesaver'>TranslatableSaver</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, slugValidator: <a href='/reference/typescript-api/service-helpers/slug-validator#slugvalidator'>SlugValidator</a>, customFieldRelationService: CustomFieldRelationService, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>, productOptionGroupService: <a href='/reference/typescript-api/services/product-option-group-service#productoptiongroupservice'>ProductOptionGroupService</a>) => ProductService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;Translated&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findbyids",
                        "title": "findByIds",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productIds: <a href='/reference/typescript-api/common/id#id'>ID</a>[], relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getproductchannels",
                        "title": "getProductChannels",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]&#62;`}   />\n\nReturns all Channels to which the Product is assigned.\n"
                    },
                    {
                        "id": "getfacetvaluesforproduct",
                        "title": "getFacetValuesForProduct",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findonebyslug",
                        "title": "findOneBySlug",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, slug: string, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateProductInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateProductInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "softdelete",
                        "title": "softDelete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "assignproductstochannel",
                        "title": "assignProductsToChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: AssignProductsToChannelInput) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;&#62;&#62;`}   />\n\nAssigns a Product to the specified Channel, and optionally uses a `priceFactor` to set the ProductVariantPrices\non the new Channel.\n\nInternally, this method will also call <a href='/reference/typescript-api/services/product-variant-service#productvariantservice'>ProductVariantService</a> `assignProductVariantsToChannel()` for\neach of the Product's variants, and will assign the Product's Assets to the Channel too.\n"
                    },
                    {
                        "id": "removeproductsfromchannel",
                        "title": "removeProductsFromChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: RemoveProductsFromChannelInput) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "addoptiongrouptoproduct",
                        "title": "addOptionGroupToProduct",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productId: <a href='/reference/typescript-api/common/id#id'>ID</a>, optionGroupId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "removeoptiongroupfromproduct",
                        "title": "removeOptionGroupFromProduct",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productId: <a href='/reference/typescript-api/common/id#id'>ID</a>, optionGroupId: <a href='/reference/typescript-api/common/id#id'>ID</a>, force?: boolean) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;RemoveOptionGroupFromProductResult, Translated&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;&#62;&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ProductService {",
                    "    constructor(connection: TransactionalConnection, channelService: ChannelService, assetService: AssetService, productVariantService: ProductVariantService, facetValueService: FacetValueService, listQueryBuilder: ListQueryBuilder, translatableSaver: TranslatableSaver, eventBus: EventBus, slugValidator: SlugValidator, customFieldRelationService: CustomFieldRelationService, translator: TranslatorService, productOptionGroupService: ProductOptionGroupService)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<Product>, relations?: RelationPaths<Product>) => Promise<PaginatedList<Translated<Product>>>;",
                    "    findOne(ctx: RequestContext, productId: ID, relations?: RelationPaths<Product>) => Promise<Translated<Product> | undefined>;",
                    "    findByIds(ctx: RequestContext, productIds: ID[], relations?: RelationPaths<Product>) => Promise<Array<Translated<Product>>>;",
                    "    getProductChannels(ctx: RequestContext, productId: ID) => Promise<Channel[]>;",
                    "    getFacetValuesForProduct(ctx: RequestContext, productId: ID) => Promise<Array<Translated<FacetValue>>>;",
                    "    findOneBySlug(ctx: RequestContext, slug: string, relations?: RelationPaths<Product>) => Promise<Translated<Product> | undefined>;",
                    "    create(ctx: RequestContext, input: CreateProductInput) => Promise<Translated<Product>>;",
                    "    update(ctx: RequestContext, input: UpdateProductInput) => Promise<Translated<Product>>;",
                    "    softDelete(ctx: RequestContext, productId: ID) => Promise<DeletionResponse>;",
                    "    assignProductsToChannel(ctx: RequestContext, input: AssignProductsToChannelInput) => Promise<Array<Translated<Product>>>;",
                    "    removeProductsFromChannel(ctx: RequestContext, input: RemoveProductsFromChannelInput) => Promise<Array<Translated<Product>>>;",
                    "    addOptionGroupToProduct(ctx: RequestContext, productId: ID, optionGroupId: ID) => Promise<Translated<Product>>;",
                    "    removeOptionGroupFromProduct(ctx: RequestContext, productId: ID, optionGroupId: ID, force?: boolean) => Promise<ErrorResultUnion<RemoveOptionGroupFromProductResult, Translated<Product>>>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "productvariant",
        "metadata": {
            "title": "ProductVariant",
            "keywords": [
                "productvariant",
                "constructor",
                "deletedat",
                "name",
                "enabled",
                "sku",
                "listprice",
                "listpriceincludestax",
                "currencycode",
                "price",
                "pricewithtax",
                "taxrateapplied",
                "featuredasset",
                "assets",
                "taxcategory",
                "productvariantprices",
                "translations",
                "product",
                "productid",
                "outofstockthreshold",
                "useglobaloutofstockthreshold",
                "trackinventory",
                "stocklevels",
                "stockmovements",
                "options",
                "facetvalues",
                "customfields",
                "collections",
                "channels"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/product-variant/product-variant.entity.ts\" sourceLine=\"37\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "productvariant",
                "title": "ProductVariant",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/product-variant/product-variant.entity.ts\" sourceLine=\"37\" packageName=\"@vendure/core\" />\n\nA ProductVariant represents a single stock keeping unit (SKU) in the store's inventory.\nWhereas a <a href='/reference/typescript-api/entities/product#product'>Product</a> is a \"container\" of variants, the variant itself holds the\ndata on price, tax category etc. When one adds items to their cart, they are adding\nProductVariants, not Products.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#translatable'>Translatable</a></code>, <code>HasCustomFields</code>, <code><a href='/reference/typescript-api/entities/interfaces#softdeletable'>SoftDeletable</a></code>, <code><a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;) => ProductVariant`}   />\n\n\n"
                    },
                    {
                        "id": "deletedat",
                        "title": "deletedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "enabled",
                        "title": "enabled",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "sku",
                        "title": "sku",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "listprice",
                        "title": "listPrice",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "listpriceincludestax",
                        "title": "listPriceIncludesTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "currencycode",
                        "title": "currencyCode",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/currency-code#currencycode'>CurrencyCode</a>`}   />\n\n\n"
                    },
                    {
                        "id": "price",
                        "title": "price",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "pricewithtax",
                        "title": "priceWithTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "taxrateapplied",
                        "title": "taxRateApplied",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>`}   />\n\n\n"
                    },
                    {
                        "id": "featuredasset",
                        "title": "featuredAsset",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/asset#asset'>Asset</a>`}   />\n\n\n"
                    },
                    {
                        "id": "assets",
                        "title": "assets",
                        "content": "\n<MemberInfo kind=\"property\" type={`ProductVariantAsset[]`}   />\n\n\n"
                    },
                    {
                        "id": "taxcategory",
                        "title": "taxCategory",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>`}   />\n\n\n"
                    },
                    {
                        "id": "productvariantprices",
                        "title": "productVariantPrices",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product-variant-price#productvariantprice'>ProductVariantPrice</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Translation&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "product",
                        "title": "product",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product#product'>Product</a>`}   />\n\n\n"
                    },
                    {
                        "id": "productid",
                        "title": "productId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "outofstockthreshold",
                        "title": "outOfStockThreshold",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nSpecifies the value of stockOnHand at which the ProductVariant is considered\nout of stock.\n"
                    },
                    {
                        "id": "useglobaloutofstockthreshold",
                        "title": "useGlobalOutOfStockThreshold",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\nWhen true, the `outOfStockThreshold` value will be taken from the GlobalSettings and the\nvalue set on this ProductVariant will be ignored.\n"
                    },
                    {
                        "id": "trackinventory",
                        "title": "trackInventory",
                        "content": "\n<MemberInfo kind=\"property\" type={`GlobalFlag`}   />\n\n\n"
                    },
                    {
                        "id": "stocklevels",
                        "title": "stockLevels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/stock-level#stocklevel'>StockLevel</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "stockmovements",
                        "title": "stockMovements",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/stock-movement#stockmovement'>StockMovement</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "facetvalues",
                        "title": "facetValues",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomProductVariantFields`}   />\n\n\n"
                    },
                    {
                        "id": "collections",
                        "title": "collections",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/collection#collection'>Collection</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ProductVariant extends VendureEntity implements Translatable, HasCustomFields, SoftDeletable, ChannelAware {",
                    "    constructor(input?: DeepPartial<ProductVariant>)",
                    "    @Column({ type: Date, nullable: true })",
                    "    deletedAt: Date | null;",
                    "    name: LocaleString;",
                    "    @Column({ default: true })",
                    "    enabled: boolean;",
                    "    @Column()",
                    "    sku: string;",
                    "    listPrice: number;",
                    "    listPriceIncludesTax: boolean;",
                    "    currencyCode: CurrencyCode;",
                    "    price: number",
                    "    priceWithTax: number",
                    "    taxRateApplied: TaxRate;",
                    "    @Index()",
                    "    @ManyToOne(type => Asset, { onDelete: 'SET NULL' })",
                    "    featuredAsset: Asset;",
                    "    @OneToMany(type => ProductVariantAsset, productVariantAsset => productVariantAsset.productVariant, {",
                    "        onDelete: 'SET NULL',",
                    "    })",
                    "    assets: ProductVariantAsset[];",
                    "    @Index()",
                    "    @ManyToOne(type => TaxCategory)",
                    "    taxCategory: TaxCategory;",
                    "    @OneToMany(type => ProductVariantPrice, price => price.variant, { eager: true })",
                    "    productVariantPrices: ProductVariantPrice[];",
                    "    @OneToMany(type => ProductVariantTranslation, translation => translation.base, { eager: true })",
                    "    translations: Array<Translation<ProductVariant>>;",
                    "    @Index()",
                    "    @ManyToOne(type => Product, product => product.variants)",
                    "    product: Product;",
                    "    @EntityId({ nullable: true })",
                    "    productId: ID;",
                    "    @Column({ default: 0 })",
                    "    outOfStockThreshold: number;",
                    "    @Column({ default: true })",
                    "    useGlobalOutOfStockThreshold: boolean;",
                    "    @Column({ type: 'varchar', default: GlobalFlag.INHERIT })",
                    "    trackInventory: GlobalFlag;",
                    "    @OneToMany(type => StockLevel, stockLevel => stockLevel.productVariant)",
                    "    stockLevels: StockLevel[];",
                    "    @OneToMany(type => StockMovement, stockMovement => stockMovement.productVariant)",
                    "    stockMovements: StockMovement[];",
                    "    @ManyToMany(type => ProductOption)",
                    "    @JoinTable()",
                    "    options: ProductOption[];",
                    "    @ManyToMany(type => FacetValue)",
                    "    @JoinTable()",
                    "    facetValues: FacetValue[];",
                    "    @Column(type => CustomProductVariantFields)",
                    "    customFields: CustomProductVariantFields;",
                    "    @ManyToMany(type => Collection, collection => collection.productVariants)",
                    "    collections: Collection[];",
                    "    @ManyToMany(type => Channel)",
                    "    @JoinTable()",
                    "    channels: Channel[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "productvariantprice",
        "metadata": {
            "title": "ProductVariantPrice",
            "keywords": [
                "productvariantprice",
                "constructor",
                "price",
                "channelid",
                "currencycode",
                "variant"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/product-variant/product-variant-price.entity.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "productvariantprice",
                "title": "ProductVariantPrice",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/product-variant/product-variant-price.entity.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nA ProductVariantPrice is a Channel-specific price for a ProductVariant. For every Channel to\nwhich a ProductVariant is assigned, there will be a corresponding ProductVariantPrice entity.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/product-variant-price#productvariantprice'>ProductVariantPrice</a>&#62;) => ProductVariantPrice`}   />\n\n\n"
                    },
                    {
                        "id": "price",
                        "title": "price",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "channelid",
                        "title": "channelId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "currencycode",
                        "title": "currencyCode",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/currency-code#currencycode'>CurrencyCode</a>`}   />\n\n\n"
                    },
                    {
                        "id": "variant",
                        "title": "variant",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ProductVariantPrice extends VendureEntity {",
                    "    constructor(input?: DeepPartial<ProductVariantPrice>)",
                    "    @Money() price: number;",
                    "    @EntityId({ nullable: true }) channelId: ID;",
                    "    @Column('varchar')",
                    "    currencyCode: CurrencyCode;",
                    "    @Index()",
                    "    @ManyToOne(type => ProductVariant, variant => variant.productVariantPrices, { onDelete: 'CASCADE' })",
                    "    variant: ProductVariant;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "productvariantpricecalculationstrategy",
        "metadata": {
            "title": "ProductVariantPriceCalculationStrategy",
            "keywords": [
                "productvariantpricecalculationstrategy",
                "calculate",
                "productvariantpricecalculationargs",
                "inputprice",
                "productvariant",
                "taxcategory",
                "activetaxzone",
                "ctx"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/catalog/product-variant-price-calculation-strategy.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "productvariantpricecalculationstrategy",
                "title": "ProductVariantPriceCalculationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/catalog/product-variant-price-calculation-strategy.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />\n\nDefines how ProductVariant are calculated based on the input price, tax zone and current request context.\n\n:::info\n\nThis is configured via the `catalogOptions.productVariantPriceCalculationStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "calculate",
                        "title": "calculate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(args: <a href='/reference/typescript-api/products-stock/product-variant-price-calculation-strategy#productvariantpricecalculationargs'>ProductVariantPriceCalculationArgs</a>) => Promise&#60;<a href='/reference/typescript-api/common/price-calculation-result#pricecalculationresult'>PriceCalculationResult</a>&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface ProductVariantPriceCalculationStrategy extends InjectableStrategy {",
                    "    calculate(args: ProductVariantPriceCalculationArgs): Promise<PriceCalculationResult>;",
                    "}"
                ]
            },
            {
                "id": "productvariantpricecalculationargs",
                "title": "ProductVariantPriceCalculationArgs",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/catalog/product-variant-price-calculation-strategy.ts\" sourceLine=\"35\" packageName=\"@vendure/core\" />\n\nThe arguments passed the `calculate` method of the configured <a href='/reference/typescript-api/products-stock/product-variant-price-calculation-strategy#productvariantpricecalculationstrategy'>ProductVariantPriceCalculationStrategy</a>.\n\nThe `productVariant` argument was added in v2.1.0.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "inputprice",
                        "title": "inputPrice",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "productvariant",
                        "title": "productVariant",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>`}   />\n\n\n"
                    },
                    {
                        "id": "taxcategory",
                        "title": "taxCategory",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>`}   />\n\n\n"
                    },
                    {
                        "id": "activetaxzone",
                        "title": "activeTaxZone",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>`}   />\n\n\n"
                    },
                    {
                        "id": "ctx",
                        "title": "ctx",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ProductVariantPriceCalculationArgs {",
                    "    inputPrice: number;",
                    "    productVariant: ProductVariant;",
                    "    taxCategory: TaxCategory;",
                    "    activeTaxZone: Zone;",
                    "    ctx: RequestContext;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "productvariantpriceselectionstrategy",
        "metadata": {
            "title": "ProductVariantPriceSelectionStrategy",
            "keywords": [
                "productvariantpriceselectionstrategy",
                "selectprice",
                "defaultproductvariantpriceselectionstrategy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/catalog/product-variant-price-selection-strategy.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "productvariantpriceselectionstrategy",
                "title": "ProductVariantPriceSelectionStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/catalog/product-variant-price-selection-strategy.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThe strategy for selecting the price for a ProductVariant in a given Channel.\n\n:::info\n\nThis is configured via the `catalogOptions.productVariantPriceSelectionStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "selectprice",
                        "title": "selectPrice",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, prices: <a href='/reference/typescript-api/entities/product-variant-price#productvariantprice'>ProductVariantPrice</a>[]) => <a href='/reference/typescript-api/entities/product-variant-price#productvariantprice'>ProductVariantPrice</a> | undefined | Promise&#60;<a href='/reference/typescript-api/entities/product-variant-price#productvariantprice'>ProductVariantPrice</a> | undefined&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface ProductVariantPriceSelectionStrategy extends InjectableStrategy {",
                    "    selectPrice(",
                    "        ctx: RequestContext,",
                    "        prices: ProductVariantPrice[],",
                    "    ): ProductVariantPrice | undefined | Promise<ProductVariantPrice | undefined>;",
                    "}"
                ]
            },
            {
                "id": "defaultproductvariantpriceselectionstrategy",
                "title": "DefaultProductVariantPriceSelectionStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/catalog/default-product-variant-price-selection-strategy.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThe default strategy for selecting the price for a ProductVariant in a given Channel. It\nfirst filters all available prices to those which are in the current Channel, and then\nselects the first price which matches the current currency.\n\n* Implements: <code><a href='/reference/typescript-api/configuration/product-variant-price-selection-strategy#productvariantpriceselectionstrategy'>ProductVariantPriceSelectionStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "selectprice",
                        "title": "selectPrice",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, prices: <a href='/reference/typescript-api/entities/product-variant-price#productvariantprice'>ProductVariantPrice</a>[]) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class DefaultProductVariantPriceSelectionStrategy implements ProductVariantPriceSelectionStrategy {",
                    "    selectPrice(ctx: RequestContext, prices: ProductVariantPrice[]) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "productvariantselectorcomponent",
        "metadata": {
            "title": "ProductVariantSelectorComponent",
            "keywords": [
                "productvariantselectorcomponent",
                "searchinput$",
                "searchloading",
                "searchresults$",
                "productselected",
                "constructor",
                "ngoninit",
                "selectresult"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/product-variant-selector/product-variant-selector.component.ts\" sourceLine=\"21\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "productvariantselectorcomponent",
                "title": "ProductVariantSelectorComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/product-variant-selector/product-variant-selector.component.ts\" sourceLine=\"21\" packageName=\"@vendure/admin-ui\" />\n\nA component for selecting product variants via an autocomplete-style select input.\n\n*Example*\n\n\n* Implements: <code>OnInit</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "searchinput$",
                        "title": "searchInput$",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "searchloading",
                        "title": "searchLoading",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "searchresults$",
                        "title": "searchResults$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;ProductSelectorSearchQuery['search']['items']&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "productselected",
                        "title": "productSelected",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>) => ProductVariantSelectorComponent`}   />\n\n\n"
                    },
                    {
                        "id": "ngoninit",
                        "title": "ngOnInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => void`}   />\n\n\n"
                    },
                    {
                        "id": "selectresult",
                        "title": "selectResult",
                        "content": "\n<MemberInfo kind=\"method\" type={`(product?: ProductSelectorSearchQuery['search']['items'][number]) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<vdr-product-variant-selector",
                    "  (productSelected)=\"selectResult($event)\"></vdr-product-selector>",
                    "class ProductVariantSelectorComponent implements OnInit {",
                    "    searchInput$ = new Subject<string>();",
                    "    searchLoading = false;",
                    "    searchResults$: Observable<ProductSelectorSearchQuery['search']['items']>;",
                    "    @Output() productSelected = new EventEmitter<ProductSelectorSearchQuery['search']['items'][number]>();",
                    "    constructor(dataService: DataService)",
                    "    ngOnInit() => void;",
                    "    selectResult(product?: ProductSelectorSearchQuery['search']['items'][number]) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "productvariantservice",
        "metadata": {
            "title": "ProductVariantService",
            "keywords": [
                "productvariantservice",
                "constructor",
                "findall",
                "findone",
                "findbyids",
                "getvariantsbyproductid",
                "getvariantsbycollectionid",
                "getproductvariantchannels",
                "getproductvariantprices",
                "getvariantbyorderlineid",
                "getoptionsforvariant",
                "getfacetvaluesforvariant",
                "getproductforvariant",
                "getsaleablestocklevel",
                "getdisplaystocklevel",
                "getfulfillablestocklevel",
                "create",
                "update",
                "createorupdateproductvariantprice",
                "softdelete",
                "hydratepricefields",
                "applychannelpriceandtax",
                "assignproductvariantstochannel",
                "removeproductvariantsfromchannel"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/product-variant.service.ts\" sourceLine=\"67\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "productvariantservice",
                "title": "ProductVariantService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/product-variant.service.ts\" sourceLine=\"67\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, taxCategoryService: <a href='/reference/typescript-api/services/tax-category-service#taxcategoryservice'>TaxCategoryService</a>, facetValueService: <a href='/reference/typescript-api/services/facet-value-service#facetvalueservice'>FacetValueService</a>, assetService: <a href='/reference/typescript-api/services/asset-service#assetservice'>AssetService</a>, translatableSaver: <a href='/reference/typescript-api/service-helpers/translatable-saver#translatablesaver'>TranslatableSaver</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, globalSettingsService: <a href='/reference/typescript-api/services/global-settings-service#globalsettingsservice'>GlobalSettingsService</a>, stockMovementService: <a href='/reference/typescript-api/services/stock-movement-service#stockmovementservice'>StockMovementService</a>, stockLevelService: <a href='/reference/typescript-api/services/stock-level-service#stocklevelservice'>StockLevelService</a>, channelService: <a href='/reference/typescript-api/services/channel-service#channelservice'>ChannelService</a>, roleService: <a href='/reference/typescript-api/services/role-service#roleservice'>RoleService</a>, customFieldRelationService: CustomFieldRelationService, requestCache: RequestContextCacheService, productPriceApplicator: <a href='/reference/typescript-api/service-helpers/product-price-applicator#productpriceapplicator'>ProductPriceApplicator</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>) => ProductVariantService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findbyids",
                        "title": "findByIds",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, ids: <a href='/reference/typescript-api/common/id#id'>ID</a>[]) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getvariantsbyproductid",
                        "title": "getVariantsByProductId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productId: <a href='/reference/typescript-api/common/id#id'>ID</a>, options: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62; = {}, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getvariantsbycollectionid",
                        "title": "getVariantsByCollectionId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, collectionId: <a href='/reference/typescript-api/common/id#id'>ID</a>, options: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62; = []) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;&#62;&#62;`}   />\n\nReturns a <a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a> of all ProductVariants associated with the given Collection.\n"
                    },
                    {
                        "id": "getproductvariantchannels",
                        "title": "getProductVariantChannels",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]&#62;`}   />\n\nReturns all Channels to which the ProductVariant is assigned.\n"
                    },
                    {
                        "id": "getproductvariantprices",
                        "title": "getProductVariantPrices",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/product-variant-price#productvariantprice'>ProductVariantPrice</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getvariantbyorderlineid",
                        "title": "getVariantByOrderLineId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderLineId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;&#62;`}   />\n\nReturns the ProductVariant associated with the given <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>.\n"
                    },
                    {
                        "id": "getoptionsforvariant",
                        "title": "getOptionsForVariant",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, variantId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a>&#62;&#62;&#62;`}   />\n\nReturns the <a href='/reference/typescript-api/entities/product-option#productoption'>ProductOption</a>s for the given ProductVariant.\n"
                    },
                    {
                        "id": "getfacetvaluesforvariant",
                        "title": "getFacetValuesForVariant",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, variantId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/facet-value#facetvalue'>FacetValue</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getproductforvariant",
                        "title": "getProductForVariant",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, variant: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;&#62;`}   />\n\nReturns the Product associated with the ProductVariant. Whereas the `ProductService.findOne()`\nmethod performs a large multi-table join with all the typical data needed for a \"product detail\"\npage, this method returns only the Product itself.\n"
                    },
                    {
                        "id": "getsaleablestocklevel",
                        "title": "getSaleableStockLevel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, variant: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>) => Promise&#60;number&#62;`}   />\n\nReturns the number of saleable units of the ProductVariant, i.e. how many are available\nfor purchase by Customers. This is determined by the ProductVariant's `stockOnHand` value,\nas well as the local and global `outOfStockThreshold` settings.\n"
                    },
                    {
                        "id": "getdisplaystocklevel",
                        "title": "getDisplayStockLevel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, variant: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>) => Promise&#60;string&#62;`}   />\n\nReturns the stockLevel to display to the customer, as specified by the configured\n<a href='/reference/typescript-api/products-stock/stock-display-strategy#stockdisplaystrategy'>StockDisplayStrategy</a>.\n"
                    },
                    {
                        "id": "getfulfillablestocklevel",
                        "title": "getFulfillableStockLevel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, variant: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>) => Promise&#60;number&#62;`}   />\n\nReturns the number of fulfillable units of the ProductVariant, equivalent to stockOnHand\nfor those variants which are tracking inventory.\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateProductVariantInput[]) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateProductVariantInput[]) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "createorupdateproductvariantprice",
                        "title": "createOrUpdateProductVariantPrice",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>, price: number, channelId: <a href='/reference/typescript-api/common/id#id'>ID</a>, currencyCode?: <a href='/reference/typescript-api/common/currency-code#currencycode'>CurrencyCode</a>) => Promise&#60;<a href='/reference/typescript-api/entities/product-variant-price#productvariantprice'>ProductVariantPrice</a>&#62;`}   />\n\nCreates a <a href='/reference/typescript-api/entities/product-variant-price#productvariantprice'>ProductVariantPrice</a> for the given ProductVariant/Channel combination.\nIf the `currencyCode` is not specified, the default currency of the Channel will be used.\n"
                    },
                    {
                        "id": "softdelete",
                        "title": "softDelete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a> | <a href='/reference/typescript-api/common/id#id'>ID</a>[]) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "hydratepricefields",
                        "title": "hydratePriceFields",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, variant: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>, priceField: F) => Promise&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>[F]&#62;`}   />\n\nThis method is intended to be used by the ProductVariant GraphQL entity resolver to resolve the\nprice-related fields which need to be populated at run-time using the `applyChannelPriceAndTax`\nmethod.\n\nIs optimized to make as few DB calls as possible using caching based on the open request.\n"
                    },
                    {
                        "id": "applychannelpriceandtax",
                        "title": "applyChannelPriceAndTax",
                        "content": "\n<MemberInfo kind=\"method\" type={`(variant: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>, ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order?: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;`}   />\n\nPopulates the `price` field with the price for the specified channel.\n"
                    },
                    {
                        "id": "assignproductvariantstochannel",
                        "title": "assignProductVariantsToChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: AssignProductVariantsToChannelInput) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;&#62;&#62;`}   />\n\nAssigns the specified ProductVariants to the specified Channel. In doing so, it will create a new\n<a href='/reference/typescript-api/entities/product-variant-price#productvariantprice'>ProductVariantPrice</a> and also assign the associated Product and any Assets to the Channel too.\n"
                    },
                    {
                        "id": "removeproductvariantsfromchannel",
                        "title": "removeProductVariantsFromChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: RemoveProductVariantsFromChannelInput) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>&#62;&#62;&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ProductVariantService {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, taxCategoryService: TaxCategoryService, facetValueService: FacetValueService, assetService: AssetService, translatableSaver: TranslatableSaver, eventBus: EventBus, listQueryBuilder: ListQueryBuilder, globalSettingsService: GlobalSettingsService, stockMovementService: StockMovementService, stockLevelService: StockLevelService, channelService: ChannelService, roleService: RoleService, customFieldRelationService: CustomFieldRelationService, requestCache: RequestContextCacheService, productPriceApplicator: ProductPriceApplicator, translator: TranslatorService)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<ProductVariant>) => Promise<PaginatedList<Translated<ProductVariant>>>;",
                    "    findOne(ctx: RequestContext, productVariantId: ID, relations?: RelationPaths<ProductVariant>) => Promise<Translated<ProductVariant> | undefined>;",
                    "    findByIds(ctx: RequestContext, ids: ID[]) => Promise<Array<Translated<ProductVariant>>>;",
                    "    getVariantsByProductId(ctx: RequestContext, productId: ID, options: ListQueryOptions<ProductVariant> = {}, relations?: RelationPaths<ProductVariant>) => Promise<PaginatedList<Translated<ProductVariant>>>;",
                    "    getVariantsByCollectionId(ctx: RequestContext, collectionId: ID, options: ListQueryOptions<ProductVariant>, relations: RelationPaths<ProductVariant> = []) => Promise<PaginatedList<Translated<ProductVariant>>>;",
                    "    getProductVariantChannels(ctx: RequestContext, productVariantId: ID) => Promise<Channel[]>;",
                    "    getProductVariantPrices(ctx: RequestContext, productVariantId: ID) => Promise<ProductVariantPrice[]>;",
                    "    getVariantByOrderLineId(ctx: RequestContext, orderLineId: ID) => Promise<Translated<ProductVariant>>;",
                    "    getOptionsForVariant(ctx: RequestContext, variantId: ID) => Promise<Array<Translated<ProductOption>>>;",
                    "    getFacetValuesForVariant(ctx: RequestContext, variantId: ID) => Promise<Array<Translated<FacetValue>>>;",
                    "    getProductForVariant(ctx: RequestContext, variant: ProductVariant) => Promise<Translated<Product>>;",
                    "    getSaleableStockLevel(ctx: RequestContext, variant: ProductVariant) => Promise<number>;",
                    "    getDisplayStockLevel(ctx: RequestContext, variant: ProductVariant) => Promise<string>;",
                    "    getFulfillableStockLevel(ctx: RequestContext, variant: ProductVariant) => Promise<number>;",
                    "    create(ctx: RequestContext, input: CreateProductVariantInput[]) => Promise<Array<Translated<ProductVariant>>>;",
                    "    update(ctx: RequestContext, input: UpdateProductVariantInput[]) => Promise<Array<Translated<ProductVariant>>>;",
                    "    createOrUpdateProductVariantPrice(ctx: RequestContext, productVariantId: ID, price: number, channelId: ID, currencyCode?: CurrencyCode) => Promise<ProductVariantPrice>;",
                    "    softDelete(ctx: RequestContext, id: ID | ID[]) => Promise<DeletionResponse>;",
                    "    hydratePriceFields(ctx: RequestContext, variant: ProductVariant, priceField: F) => Promise<ProductVariant[F]>;",
                    "    applyChannelPriceAndTax(variant: ProductVariant, ctx: RequestContext, order?: Order) => Promise<ProductVariant>;",
                    "    assignProductVariantsToChannel(ctx: RequestContext, input: AssignProductVariantsToChannelInput) => Promise<Array<Translated<ProductVariant>>>;",
                    "    removeProductVariantsFromChannel(ctx: RequestContext, input: RemoveProductVariantsFromChannelInput) => Promise<Array<Translated<ProductVariant>>>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "promotion-action",
        "metadata": {
            "title": "Promotion Action",
            "keywords": [
                "promotionaction",
                "priorityvalue",
                "constructor",
                "promotionitemaction",
                "promotionorderaction",
                "promotionshippingaction",
                "executepromotionitemactionfn",
                "executepromotionorderactionfn",
                "executepromotionshippingactionfn",
                "promotionactionsideeffectfn",
                "promotionactionconfig",
                "conditions",
                "onactivate",
                "ondeactivate",
                "promotionitemactionconfig",
                "execute",
                "promotionorderactionconfig",
                "promotionshippingactionconfig"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-action.ts\" sourceLine=\"247\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "promotionaction",
                "title": "PromotionAction",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-action.ts\" sourceLine=\"247\" packageName=\"@vendure/core\" />\n\nAn abstract class which is extended by <a href='/reference/typescript-api/promotions/promotion-action#promotionitemaction'>PromotionItemAction</a>, <a href='/reference/typescript-api/promotions/promotion-action#promotionorderaction'>PromotionOrderAction</a>,\nand <a href='/reference/typescript-api/promotions/promotion-action#promotionshippingaction'>PromotionShippingAction</a>.\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/#configurableoperationdef'>ConfigurableOperationDef</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "priorityvalue",
                        "title": "priorityValue",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"0\"   />\n\nUsed to determine the order of application of multiple Promotions\non the same Order. See the <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a> `priorityScore` field for\nmore information.\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/typescript-api/promotions/promotion-action#promotionactionconfig'>PromotionActionConfig</a>&#60;T, U&#62;) => PromotionAction`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class PromotionAction<T extends ConfigArgs = ConfigArgs, U extends PromotionCondition[] | undefined = any> extends ConfigurableOperationDef<T> {",
                    "    readonly priorityValue: number;",
                    "    constructor(config: PromotionActionConfig<T, U>)",
                    "}"
                ]
            },
            {
                "id": "promotionitemaction",
                "title": "PromotionItemAction",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-action.ts\" sourceLine=\"320\" packageName=\"@vendure/core\" />\n\nRepresents a PromotionAction which applies to individual <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>s.\n\n*Example*\n\n\n* Extends: <code><a href='/reference/typescript-api/promotions/promotion-action#promotionaction'>PromotionAction</a>&#60;T, U&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/typescript-api/promotions/promotion-action#promotionitemactionconfig'>PromotionItemActionConfig</a>&#60;T, U&#62;) => PromotionItemAction`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "// Applies a percentage discount to each OrderLine",
                    "const itemPercentageDiscount = new PromotionItemAction({",
                    "    code: 'item_percentage_discount',",
                    "    args: { discount: 'percentage' },",
                    "    execute(ctx, orderItem, orderLine, args) {",
                    "        return -orderLine.unitPrice * (args.discount / 100);",
                    "    },",
                    "    description: 'Discount every item by { discount }%',",
                    "});",
                    "class PromotionItemAction<T extends ConfigArgs = ConfigArgs, U extends Array<PromotionCondition<any>> = []> extends PromotionAction<T, U> {",
                    "    constructor(config: PromotionItemActionConfig<T, U>)",
                    "}"
                ]
            },
            {
                "id": "promotionorderaction",
                "title": "PromotionOrderAction",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-action.ts\" sourceLine=\"375\" packageName=\"@vendure/core\" />\n\nRepresents a PromotionAction which applies to the <a href='/reference/typescript-api/entities/order#order'>Order</a> as a whole.\n\n*Example*\n\n\n* Extends: <code><a href='/reference/typescript-api/promotions/promotion-action#promotionaction'>PromotionAction</a>&#60;T, U&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/typescript-api/promotions/promotion-action#promotionorderactionconfig'>PromotionOrderActionConfig</a>&#60;T, U&#62;) => PromotionOrderAction`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "// Applies a percentage discount to the entire Order",
                    "const orderPercentageDiscount = new PromotionOrderAction({",
                    "    code: 'order_percentage_discount',",
                    "    args: { discount: 'percentage' },",
                    "    execute(ctx, order, args) {",
                    "        return -order.subTotal * (args.discount / 100);",
                    "    },",
                    "    description: 'Discount order by { discount }%',",
                    "});",
                    "class PromotionOrderAction<T extends ConfigArgs = ConfigArgs, U extends PromotionCondition[] = []> extends PromotionAction<T, U> {",
                    "    constructor(config: PromotionOrderActionConfig<T, U>)",
                    "}"
                ]
            },
            {
                "id": "promotionshippingaction",
                "title": "PromotionShippingAction",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-action.ts\" sourceLine=\"417\" packageName=\"@vendure/core\" />\n\nRepresents a PromotionAction which applies to the shipping cost of an Order.\n\n* Extends: <code><a href='/reference/typescript-api/promotions/promotion-action#promotionaction'>PromotionAction</a>&#60;T, U&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/typescript-api/promotions/promotion-action#promotionshippingactionconfig'>PromotionShippingActionConfig</a>&#60;T, U&#62;) => PromotionShippingAction`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class PromotionShippingAction<T extends ConfigArgs = ConfigArgs, U extends PromotionCondition[] = []> extends PromotionAction<T, U> {",
                    "    constructor(config: PromotionShippingActionConfig<T, U>)",
                    "}"
                ]
            },
            {
                "id": "executepromotionitemactionfn",
                "title": "ExecutePromotionItemActionFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-action.ts\" sourceLine=\"72\" packageName=\"@vendure/core\" />\n\nThe function which is used by a PromotionItemAction to calculate the\ndiscount on the OrderLine.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type ExecutePromotionItemActionFn<T extends ConfigArgs, U extends Array<PromotionCondition<any>>> = (",
                    "    ctx: RequestContext,",
                    "    orderLine: OrderLine,",
                    "    args: ConfigArgValues<T>,",
                    "    state: ConditionState<U>,",
                    "    promotion: Promotion,",
                    ") => number | Promise<number>"
                ]
            },
            {
                "id": "executepromotionorderactionfn",
                "title": "ExecutePromotionOrderActionFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-action.ts\" sourceLine=\"88\" packageName=\"@vendure/core\" />\n\nThe function which is used by a PromotionOrderAction to calculate the\ndiscount on the Order.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type ExecutePromotionOrderActionFn<T extends ConfigArgs, U extends Array<PromotionCondition<any>>> = (",
                    "    ctx: RequestContext,",
                    "    order: Order,",
                    "    args: ConfigArgValues<T>,",
                    "    state: ConditionState<U>,",
                    "    promotion: Promotion,",
                    ") => number | Promise<number>"
                ]
            },
            {
                "id": "executepromotionshippingactionfn",
                "title": "ExecutePromotionShippingActionFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-action.ts\" sourceLine=\"104\" packageName=\"@vendure/core\" />\n\nThe function which is used by a PromotionOrderAction to calculate the\ndiscount on the Order.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type ExecutePromotionShippingActionFn<T extends ConfigArgs, U extends Array<PromotionCondition<any>>> = (",
                    "    ctx: RequestContext,",
                    "    shippingLine: ShippingLine,",
                    "    order: Order,",
                    "    args: ConfigArgValues<T>,",
                    "    state: ConditionState<U>,",
                    "    promotion: Promotion,",
                    ") => number | Promise<number>"
                ]
            },
            {
                "id": "promotionactionsideeffectfn",
                "title": "PromotionActionSideEffectFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-action.ts\" sourceLine=\"125\" packageName=\"@vendure/core\" since=\"1.8.0\" experimental=\"true\" />\n\nThe signature of a PromotionAction's side-effect functions `onActivate` and `onDeactivate`.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type PromotionActionSideEffectFn<T extends ConfigArgs> = (",
                    "    ctx: RequestContext,",
                    "    order: Order,",
                    "    args: ConfigArgValues<T>,",
                    "    promotion: Promotion,",
                    ") => void | Promise<void>"
                ]
            },
            {
                "id": "promotionactionconfig",
                "title": "PromotionActionConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-action.ts\" sourceLine=\"139\" packageName=\"@vendure/core\" />\n\nConfiguration for all types of <a href='/reference/typescript-api/promotions/promotion-action#promotionaction'>PromotionAction</a>.\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/configurable-operation-def-options#configurableoperationdefoptions'>ConfigurableOperationDefOptions</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "priorityvalue",
                        "title": "priorityValue",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"0\"   />\n\nUsed to determine the order of application of multiple Promotions\non the same Order. See the <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a> `priorityScore` field for\nmore information.\n"
                    },
                    {
                        "id": "conditions",
                        "title": "conditions",
                        "content": "\n<MemberInfo kind=\"property\" type={`U extends undefined ? undefined : ConditionTuple&#60;Exclude&#60;U, undefined&#62;&#62;`}   />\n\nAllows PromotionActions to define one or more PromotionConditions as dependencies. Having a PromotionCondition\nas a dependency has the following consequences:\n1. A Promotion using this PromotionAction is only valid if it also contains all PromotionConditions\non which it depends.\n2. The `execute()` function will receive a statically-typed `state` argument which will contain\nthe return values of the PromotionConditions' `check()` function.\n"
                    },
                    {
                        "id": "onactivate",
                        "title": "onActivate",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/promotions/promotion-action#promotionactionsideeffectfn'>PromotionActionSideEffectFn</a>&#60;T&#62;`}  since=\"1.8.0\" experimental=\"true\" />\n\nAn optional side effect function which is invoked when the promotion\nbecomes active. It can be used for things like adding a free gift to the order\nor other side effects that are unrelated to price calculations.\n\nIf used, make sure to use the corresponding `onDeactivate` function to clean up\nor reverse any side effects as needed.\n"
                    },
                    {
                        "id": "ondeactivate",
                        "title": "onDeactivate",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/promotions/promotion-action#promotionactionsideeffectfn'>PromotionActionSideEffectFn</a>&#60;T&#62;`}  since=\"1.8.0\" experimental=\"true\" />\n\nUsed to reverse or clean up any side effects executed as part of the `onActivate` function.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface PromotionActionConfig<T extends ConfigArgs, U extends Array<PromotionCondition<any>> | undefined> extends ConfigurableOperationDefOptions<T> {",
                    "    priorityValue?: number;",
                    "    conditions?: U extends undefined ? undefined : ConditionTuple<Exclude<U, undefined>>;",
                    "    onActivate?: PromotionActionSideEffectFn<T>;",
                    "    onDeactivate?: PromotionActionSideEffectFn<T>;",
                    "}"
                ]
            },
            {
                "id": "promotionitemactionconfig",
                "title": "PromotionItemActionConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-action.ts\" sourceLine=\"193\" packageName=\"@vendure/core\" />\n\nConfiguration for a <a href='/reference/typescript-api/promotions/promotion-action#promotionitemaction'>PromotionItemAction</a>\n\n* Extends: <code><a href='/reference/typescript-api/promotions/promotion-action#promotionactionconfig'>PromotionActionConfig</a>&#60;T, U&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "execute",
                        "title": "execute",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/promotions/promotion-action#executepromotionitemactionfn'>ExecutePromotionItemActionFn</a>&#60;T, U&#62;`}   />\n\nThe function which contains the promotion calculation logic.\nShould resolve to a number which represents the amount by which to discount\nthe OrderLine, i.e. the number should be negative.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface PromotionItemActionConfig<T extends ConfigArgs, U extends PromotionCondition[]> extends PromotionActionConfig<T, U> {",
                    "    execute: ExecutePromotionItemActionFn<T, U>;",
                    "}"
                ]
            },
            {
                "id": "promotionorderactionconfig",
                "title": "PromotionOrderActionConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-action.ts\" sourceLine=\"210\" packageName=\"@vendure/core\" />\n\n\n\n* Extends: <code><a href='/reference/typescript-api/promotions/promotion-action#promotionactionconfig'>PromotionActionConfig</a>&#60;T, U&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "execute",
                        "title": "execute",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/promotions/promotion-action#executepromotionorderactionfn'>ExecutePromotionOrderActionFn</a>&#60;T, U&#62;`}   />\n\nThe function which contains the promotion calculation logic.\nShould resolve to a number which represents the amount by which to discount\nthe Order, i.e. the number should be negative.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface PromotionOrderActionConfig<T extends ConfigArgs, U extends PromotionCondition[]> extends PromotionActionConfig<T, U> {",
                    "    execute: ExecutePromotionOrderActionFn<T, U>;",
                    "}"
                ]
            },
            {
                "id": "promotionshippingactionconfig",
                "title": "PromotionShippingActionConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-action.ts\" sourceLine=\"227\" packageName=\"@vendure/core\" />\n\n\n\n* Extends: <code><a href='/reference/typescript-api/promotions/promotion-action#promotionactionconfig'>PromotionActionConfig</a>&#60;T, U&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "execute",
                        "title": "execute",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/promotions/promotion-action#executepromotionshippingactionfn'>ExecutePromotionShippingActionFn</a>&#60;T, U&#62;`}   />\n\nThe function which contains the promotion calculation logic.\nShould resolve to a number which represents the amount by which to discount\nthe Shipping, i.e. the number should be negative.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface PromotionShippingActionConfig<T extends ConfigArgs, U extends PromotionCondition[]> extends PromotionActionConfig<T, U> {",
                    "    execute: ExecutePromotionShippingActionFn<T, U>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "promotion-condition",
        "metadata": {
            "title": "Promotion Condition",
            "keywords": [
                "promotioncondition",
                "priorityvalue",
                "code",
                "constructor",
                "check",
                "promotionconditionconfig",
                "checkpromotionconditionfn"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-condition.ts\" sourceLine=\"66\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "promotioncondition",
                "title": "PromotionCondition",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-condition.ts\" sourceLine=\"66\" packageName=\"@vendure/core\" />\n\nPromotionConditions are used to create <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>s. The purpose of a PromotionCondition\nis to check the order against a particular predicate function (the `check` function) and to return\n`true` if the Order satisfies the condition, or `false` if it does not.\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/#configurableoperationdef'>ConfigurableOperationDef</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "priorityvalue",
                        "title": "priorityValue",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"0\"   />\n\nUsed to determine the order of application of multiple Promotions\non the same Order. See the <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a> `priorityScore` field for\nmore information.\n"
                    },
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`C`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/typescript-api/promotions/promotion-condition#promotionconditionconfig'>PromotionConditionConfig</a>&#60;T, C, R&#62;) => PromotionCondition`}   />\n\n\n"
                    },
                    {
                        "id": "check",
                        "title": "check",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, args: ConfigArg[], promotion: <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>) => Promise&#60;R&#62;`}   />\n\nThis is the function which contains the conditional logic to decide whether\na Promotion should apply to an Order. See <a href='/reference/typescript-api/promotions/promotion-condition#checkpromotionconditionfn'>CheckPromotionConditionFn</a>.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class PromotionCondition<T extends ConfigArgs = ConfigArgs, C extends string = string, R extends CheckPromotionConditionResult = any> extends ConfigurableOperationDef<T> {",
                    "    readonly priorityValue: number;",
                    "    code: C",
                    "    constructor(config: PromotionConditionConfig<T, C, R>)",
                    "    check(ctx: RequestContext, order: Order, args: ConfigArg[], promotion: Promotion) => Promise<R>;",
                    "}"
                ]
            },
            {
                "id": "promotionconditionconfig",
                "title": "PromotionConditionConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-condition.ts\" sourceLine=\"46\" packageName=\"@vendure/core\" />\n\nThis object is used to configure a PromotionCondition.\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/configurable-operation-def-options#configurableoperationdefoptions'>ConfigurableOperationDefOptions</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`C`}   />\n\n\n"
                    },
                    {
                        "id": "check",
                        "title": "check",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/promotions/promotion-condition#checkpromotionconditionfn'>CheckPromotionConditionFn</a>&#60;T, R&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "priorityvalue",
                        "title": "priorityValue",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface PromotionConditionConfig<T extends ConfigArgs, C extends string, R extends CheckPromotionConditionResult> extends ConfigurableOperationDefOptions<T> {",
                    "    code: C;",
                    "    check: CheckPromotionConditionFn<T, R>;",
                    "    priorityValue?: number;",
                    "}"
                ]
            },
            {
                "id": "checkpromotionconditionfn",
                "title": "CheckPromotionConditionFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/promotion/promotion-condition.ts\" sourceLine=\"31\" packageName=\"@vendure/core\" />\n\nA function which checks whether or not a given <a href='/reference/typescript-api/entities/order#order'>Order</a> satisfies the <a href='/reference/typescript-api/promotions/promotion-condition#promotioncondition'>PromotionCondition</a>.\n\nThe function should return either a `boolean` or and plain object type:\n\n* `false`: The condition is not satisfied - do not apply PromotionActions\n* `true`: The condition is satisfied, apply PromotionActions\n* `{ [key: string]: any; }`: The condition is satisfied, apply PromotionActions\n_and_ pass this object into the PromotionAction's `state` argument.\n\n\n",
                "subsections": [],
                "code": [
                    "type CheckPromotionConditionFn<T extends ConfigArgs, R extends CheckPromotionConditionResult> = (",
                    "    ctx: RequestContext,",
                    "    order: Order,",
                    "    args: ConfigArgValues<T>,",
                    "    promotion: Promotion,",
                    ") => R | Promise<R>"
                ]
            }
        ]
    },
    {
        "id": "promotion",
        "metadata": {
            "title": "Promotion",
            "keywords": [
                "promotion",
                "type",
                "constructor",
                "deletedat",
                "startsat",
                "endsat",
                "couponcode",
                "percustomerusagelimit",
                "usagelimit",
                "name",
                "description",
                "translations",
                "enabled",
                "channels",
                "customfields",
                "conditions",
                "actions",
                "priorityscore",
                "apply",
                "test",
                "activate",
                "deactivate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/promotion/promotion.entity.ts\" sourceLine=\"57\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "promotion",
                "title": "Promotion",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/promotion/promotion.entity.ts\" sourceLine=\"57\" packageName=\"@vendure/core\" />\n\nA Promotion is used to define a set of conditions under which promotions actions (typically discounts)\nwill be applied to an Order.\n\nEach assigned <a href='/reference/typescript-api/promotions/promotion-condition#promotioncondition'>PromotionCondition</a> is checked against the Order, and if they all return `true`,\nthen each assign <a href='/reference/typescript-api/promotions/promotion-action#promotionitemaction'>PromotionItemAction</a> / <a href='/reference/typescript-api/promotions/promotion-action#promotionorderaction'>PromotionOrderAction</a> is applied to the Order.\n\n* Extends: <code>AdjustmentSource</code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a></code>, <code><a href='/reference/typescript-api/entities/interfaces#softdeletable'>SoftDeletable</a></code>, <code>HasCustomFields</code>, <code><a href='/reference/typescript-api/entities/interfaces#translatable'>Translatable</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>&#62; &#38; {\n             promotionConditions?: Array&#60;<a href='/reference/typescript-api/promotions/promotion-condition#promotioncondition'>PromotionCondition</a>&#60;any&#62;&#62;;\n             promotionActions?: Array&#60;<a href='/reference/typescript-api/promotions/promotion-action#promotionaction'>PromotionAction</a>&#60;any&#62;&#62;;\n         }) => Promotion`}   />\n\n\n"
                    },
                    {
                        "id": "deletedat",
                        "title": "deletedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n"
                    },
                    {
                        "id": "startsat",
                        "title": "startsAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n"
                    },
                    {
                        "id": "endsat",
                        "title": "endsAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n"
                    },
                    {
                        "id": "couponcode",
                        "title": "couponCode",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "percustomerusagelimit",
                        "title": "perCustomerUsageLimit",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "usagelimit",
                        "title": "usageLimit",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "description",
                        "title": "description",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Translation&#60;<a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "enabled",
                        "title": "enabled",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomPromotionFields`}   />\n\n\n"
                    },
                    {
                        "id": "conditions",
                        "title": "conditions",
                        "content": "\n<MemberInfo kind=\"property\" type={`ConfigurableOperation[]`}   />\n\n\n"
                    },
                    {
                        "id": "actions",
                        "title": "actions",
                        "content": "\n<MemberInfo kind=\"property\" type={`ConfigurableOperation[]`}   />\n\n\n"
                    },
                    {
                        "id": "priorityscore",
                        "title": "priorityScore",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe PriorityScore is used to determine the sequence in which multiple promotions are tested\non a given order. A higher number moves the Promotion towards the end of the sequence.\n\nThe score is derived from the sum of the priorityValues of the PromotionConditions and\nPromotionActions comprising this Promotion.\n\nAn example illustrating the need for a priority is this:\n\n\nConsider 2 Promotions, 1) buy 1 get one free and 2) 10% off when order total is over $50.\nIf Promotion 2 is evaluated prior to Promotion 1, then it can trigger the 10% discount even\nif the subsequent application of Promotion 1 brings the order total down to way below $50.\n"
                    },
                    {
                        "id": "apply",
                        "title": "apply",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, args: ApplyOrderActionArgs | ApplyOrderItemActionArgs | ApplyShippingActionArgs, state?: PromotionState) => Promise&#60;Adjustment | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "test",
                        "title": "test",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;PromotionTestResult&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "activate",
                        "title": "activate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "deactivate",
                        "title": "deactivate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Promotion extends AdjustmentSource implements ChannelAware, SoftDeletable, HasCustomFields, Translatable {",
                    "    type = AdjustmentType.PROMOTION;",
                    "    constructor(input?: DeepPartial<Promotion> & {",
                    "            promotionConditions?: Array<PromotionCondition<any>>;",
                    "            promotionActions?: Array<PromotionAction<any>>;",
                    "        })",
                    "    @Column({ type: Date, nullable: true })",
                    "    deletedAt: Date | null;",
                    "    @Column({ type: Date, nullable: true })",
                    "    startsAt: Date | null;",
                    "    @Column({ type: Date, nullable: true })",
                    "    endsAt: Date | null;",
                    "    @Column({ nullable: true })",
                    "    couponCode: string;",
                    "    @Column({ nullable: true })",
                    "    perCustomerUsageLimit: number;",
                    "    @Column({ nullable: true })",
                    "    usageLimit: number;",
                    "    name: LocaleString;",
                    "    description: LocaleString;",
                    "    @OneToMany(type => PromotionTranslation, translation => translation.base, { eager: true })",
                    "    translations: Array<Translation<Promotion>>;",
                    "    @Column() enabled: boolean;",
                    "    @ManyToMany(type => Channel)",
                    "    @JoinTable()",
                    "    channels: Channel[];",
                    "    @Column(type => CustomPromotionFields)",
                    "    customFields: CustomPromotionFields;",
                    "    @Column('simple-json') conditions: ConfigurableOperation[];",
                    "    @Column('simple-json') actions: ConfigurableOperation[];",
                    "    @Column() priorityScore: number;",
                    "    apply(ctx: RequestContext, args: ApplyOrderActionArgs | ApplyOrderItemActionArgs | ApplyShippingActionArgs, state?: PromotionState) => Promise<Adjustment | undefined>;",
                    "    test(ctx: RequestContext, order: Order) => Promise<PromotionTestResult>;",
                    "    activate(ctx: RequestContext, order: Order) => ;",
                    "    deactivate(ctx: RequestContext, order: Order) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "promotionoptions",
        "metadata": {
            "title": "PromotionOptions",
            "keywords": [
                "promotionoptions",
                "promotionconditions",
                "promotionactions"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"705\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "promotionoptions",
                "title": "PromotionOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"705\" packageName=\"@vendure/core\" />\n\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "promotionconditions",
                        "title": "promotionConditions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/promotions/promotion-condition#promotioncondition'>PromotionCondition</a>&#60;any&#62;&#62;`}   />\n\nAn array of conditions which can be used to construct Promotions\n"
                    },
                    {
                        "id": "promotionactions",
                        "title": "promotionActions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/promotions/promotion-action#promotionaction'>PromotionAction</a>&#60;any&#62;&#62;`}   />\n\nAn array of actions which can be used to construct Promotions\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface PromotionOptions {",
                    "    promotionConditions?: Array<PromotionCondition<any>>;",
                    "    promotionActions?: Array<PromotionAction<any>>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "promotions",
        "metadata": {
            "title": "Promotions",
            "keywords": [
                "promotions",
                "promotion conditions",
                "coupon codes",
                "promotion actions",
                "coupon code per-customer limit"
            ],
            "description": "Promotions are a means of offering discounts on an order based on various criteria. A Promotion consists of _conditions_ and _actions_. * **conditions** are the rules which determine whether the Promotion should be applied to the order. * **actions** specify exactly how this Promotion should modify the order. A condition defines the criteria that must be met for the Promotion to be activated. Vendure comes with some simple conditions provided which enable things like: * If the order total is at least $X"
        },
        "content": "",
        "sections": [
            {
                "id": "promotion-conditions",
                "title": "Promotion Conditions",
                "content": "\nA condition defines the criteria that must be met for the Promotion to be activated. Vendure comes with some simple conditions provided which enable things like:\n\n* If the order total is at least $X\n* Buy at least X of a certain product\n* But at least X of any product with the specified [FacetValues]({{< relref \"/user-guide/catalog/facets\" >}})\n* If the customer is a member of the specified [Customer Group]({{< relref \"/user-guide/customers\" >}}#customer-groups)\n\nVendure allows completely custom conditions to be defined by your developers, implementing the specific logic needed by your business.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "coupon-codes",
                "title": "Coupon codes",
                "content": "\nA coupon code can be any text which will activate a Promotion. A coupon code can be used in conjunction with conditions if desired.\n\n\n{{< alert \"primary\" >}}\nNote: Promotions **must** have either a **coupon code** _or_ **at least 1 condition** defined.\n{{< /alert >}}\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "promotion-actions",
                "title": "Promotion Actions",
                "content": "\nIf all the defined conditions pass (or if the specified coupon code is used), then the actions are performed on the order. Vendure comes with some commonly-used actions which allow promotions like:\n\n* Discount the whole order by a fixed amount\n* Discount the whole order by a percentage\n* Discount selected products by a percentage\n* Free shipping\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "coupon-code-per-customer-limit",
                "title": "Coupon code per-customer limit",
                "content": "\nIf a per-customer limit is specified, then the specified coupon code may only be used that many times by a single Customer. For guest checkouts, the \"same customer\" status is determined by the email address used when checking out.\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "promotionservice",
        "metadata": {
            "title": "PromotionService",
            "keywords": [
                "promotionservice",
                "availableconditions",
                "availableactions",
                "constructor",
                "findall",
                "findone",
                "getpromotionconditions",
                "getpromotionactions",
                "createpromotion",
                "updatepromotion",
                "softdeletepromotion",
                "assignpromotionstochannel",
                "removepromotionsfromchannel",
                "validatecouponcode",
                "getactivepromotionsinchannel",
                "getactivepromotionsonorder",
                "runpromotionsideeffects",
                "addpromotionstoorder"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/promotion.service.ts\" sourceLine=\"58\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "promotionservice",
                "title": "PromotionService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/promotion.service.ts\" sourceLine=\"58\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "availableconditions",
                        "title": "availableConditions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/promotions/promotion-condition#promotioncondition'>PromotionCondition</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "availableactions",
                        "title": "availableActions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/promotions/promotion-action#promotionaction'>PromotionAction</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, channelService: <a href='/reference/typescript-api/services/channel-service#channelservice'>ChannelService</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, configArgService: ConfigArgService, customFieldRelationService: CustomFieldRelationService, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, translatableSaver: <a href='/reference/typescript-api/service-helpers/translatable-saver#translatablesaver'>TranslatableSaver</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>) => PromotionService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>&#62;, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>&#62; = []) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, adjustmentSourceId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>&#62; = []) => Promise&#60;<a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getpromotionconditions",
                        "title": "getPromotionConditions",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => ConfigurableOperationDefinition[]`}   />\n\n\n"
                    },
                    {
                        "id": "getpromotionactions",
                        "title": "getPromotionActions",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => ConfigurableOperationDefinition[]`}   />\n\n\n"
                    },
                    {
                        "id": "createpromotion",
                        "title": "createPromotion",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreatePromotionInput) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;CreatePromotionResult, <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "updatepromotion",
                        "title": "updatePromotion",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdatePromotionInput) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;UpdatePromotionResult, <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "softdeletepromotion",
                        "title": "softDeletePromotion",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, promotionId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "assignpromotionstochannel",
                        "title": "assignPromotionsToChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: AssignPromotionsToChannelInput) => Promise&#60;<a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "removepromotionsfromchannel",
                        "title": "removePromotionsFromChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: RemovePromotionsFromChannelInput) => `}   />\n\n\n"
                    },
                    {
                        "id": "validatecouponcode",
                        "title": "validateCouponCode",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, couponCode: string, customerId?: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;JustErrorResults&#60;ApplyCouponCodeResult&#62; | <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>&#62;`}   />\n\nChecks the validity of a coupon code, by checking that it is associated with an existing,\nenabled and non-expired Promotion. Additionally, if there is a usage limit on the coupon code,\nthis method will enforce that limit against the specified Customer.\n"
                    },
                    {
                        "id": "getactivepromotionsinchannel",
                        "title": "getActivePromotionsInChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "getactivepromotionsonorder",
                        "title": "getActivePromotionsOnOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, orderId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "runpromotionsideeffects",
                        "title": "runPromotionSideEffects",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>, promotionsPre: <a href='/reference/typescript-api/entities/promotion#promotion'>Promotion</a>[]) => `}   />\n\n\n"
                    },
                    {
                        "id": "addpromotionstoorder",
                        "title": "addPromotionsToOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;<a href='/reference/typescript-api/entities/order#order'>Order</a>&#62;`}   />\n\nUsed internally to associate a Promotion with an Order, once an Order has been placed.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class PromotionService {",
                    "    availableConditions: PromotionCondition[] = [];",
                    "    availableActions: PromotionAction[] = [];",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, channelService: ChannelService, listQueryBuilder: ListQueryBuilder, configArgService: ConfigArgService, customFieldRelationService: CustomFieldRelationService, eventBus: EventBus, translatableSaver: TranslatableSaver, translator: TranslatorService)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<Promotion>, relations: RelationPaths<Promotion> = []) => Promise<PaginatedList<Promotion>>;",
                    "    findOne(ctx: RequestContext, adjustmentSourceId: ID, relations: RelationPaths<Promotion> = []) => Promise<Promotion | undefined>;",
                    "    getPromotionConditions(ctx: RequestContext) => ConfigurableOperationDefinition[];",
                    "    getPromotionActions(ctx: RequestContext) => ConfigurableOperationDefinition[];",
                    "    createPromotion(ctx: RequestContext, input: CreatePromotionInput) => Promise<ErrorResultUnion<CreatePromotionResult, Promotion>>;",
                    "    updatePromotion(ctx: RequestContext, input: UpdatePromotionInput) => Promise<ErrorResultUnion<UpdatePromotionResult, Promotion>>;",
                    "    softDeletePromotion(ctx: RequestContext, promotionId: ID) => Promise<DeletionResponse>;",
                    "    assignPromotionsToChannel(ctx: RequestContext, input: AssignPromotionsToChannelInput) => Promise<Promotion[]>;",
                    "    removePromotionsFromChannel(ctx: RequestContext, input: RemovePromotionsFromChannelInput) => ;",
                    "    validateCouponCode(ctx: RequestContext, couponCode: string, customerId?: ID) => Promise<JustErrorResults<ApplyCouponCodeResult> | Promotion>;",
                    "    getActivePromotionsInChannel(ctx: RequestContext) => ;",
                    "    getActivePromotionsOnOrder(ctx: RequestContext, orderId: ID) => Promise<Promotion[]>;",
                    "    runPromotionSideEffects(ctx: RequestContext, order: Order, promotionsPre: Promotion[]) => ;",
                    "    addPromotionsToOrder(ctx: RequestContext, order: Order) => Promise<Order>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "providers",
        "metadata": {
            "title": "Providers",
            "keywords": [
                "providers"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "province",
        "metadata": {
            "title": "Province",
            "keywords": [
                "province",
                "constructor",
                "type"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/region/province.entity.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "province",
                "title": "Province",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/region/province.entity.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nA Province represents an administrative subdivision of a <a href='/reference/typescript-api/entities/country#country'>Country</a>. For example, in the\nUnited States, the country would be \"United States\" and the province would be \"California\".\n\n* Extends: <code><a href='/reference/typescript-api/entities/region#region'>Region</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/province#province'>Province</a>&#62;) => Province`}   />\n\n\n"
                    },
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`RegionType`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Province extends Region {",
                    "    constructor(input?: DeepPartial<Province>)",
                    "    readonly type: RegionType = 'province';",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "provinceservice",
        "metadata": {
            "title": "ProvinceService",
            "keywords": [
                "provinceservice",
                "constructor",
                "findall",
                "findone",
                "create",
                "update",
                "delete"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/province.service.ts\" sourceLine=\"31\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "provinceservice",
                "title": "ProvinceService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/province.service.ts\" sourceLine=\"31\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/province#province'>Province</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, translatableSaver: <a href='/reference/typescript-api/service-helpers/translatable-saver#translatablesaver'>TranslatableSaver</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>) => ProvinceService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/province#province'>Province</a>&#62;, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/province#province'>Province</a>&#62; = []) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;Translated&#60;<a href='/reference/typescript-api/entities/province#province'>Province</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, provinceId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/province#province'>Province</a>&#62; = []) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/province#province'>Province</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateProvinceInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/province#province'>Province</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateProvinceInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/province#province'>Province</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ProvinceService {",
                    "    constructor(connection: TransactionalConnection, listQueryBuilder: ListQueryBuilder, translatableSaver: TranslatableSaver, eventBus: EventBus, translator: TranslatorService)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<Province>, relations: RelationPaths<Province> = []) => Promise<PaginatedList<Translated<Province>>>;",
                    "    findOne(ctx: RequestContext, provinceId: ID, relations: RelationPaths<Province> = []) => Promise<Translated<Province> | undefined>;",
                    "    create(ctx: RequestContext, input: CreateProvinceInput) => Promise<Translated<Province>>;",
                    "    update(ctx: RequestContext, input: UpdateProvinceInput) => Promise<Translated<Province>>;",
                    "    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "purgerule",
        "metadata": {
            "title": "PurgeRule",
            "keywords": [
                "purgerule",
                "eventtype",
                "buffertimems",
                "handle",
                "constructor",
                "purgeruleconfig",
                "buffertime",
                "handler"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/stellate-plugin/src/purge-rule.ts\" sourceLine=\"49\" packageName=\"@vendure/stellate-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "purgerule",
                "title": "PurgeRule",
                "content": "\n<GenerationInfo sourceFile=\"packages/stellate-plugin/src/purge-rule.ts\" sourceLine=\"49\" packageName=\"@vendure/stellate-plugin\" />\n\nDefines a rule that listens for a particular VendureEvent and uses that to\nmake calls to the [Stellate Purging API](https://docs.stellate.co/docs/purging-api) via\nthe provided <a href='/reference/core-plugins/stellate-plugin/stellate-service#stellateservice'>StellateService</a> instance.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "eventtype",
                        "title": "eventType",
                        "content": "\n<MemberInfo kind=\"property\" type={`Type&#60;Event&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "buffertimems",
                        "title": "bufferTimeMs",
                        "content": "\n<MemberInfo kind=\"property\" type={`number | undefined`}   />\n\n\n"
                    },
                    {
                        "id": "handle",
                        "title": "handle",
                        "content": "\n<MemberInfo kind=\"method\" type={`(handlerArgs: { events: Event[]; stellateService: <a href='/reference/core-plugins/stellate-plugin/stellate-service#stellateservice'>StellateService</a>; injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a> }) => `}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/core-plugins/stellate-plugin/purge-rule#purgeruleconfig'>PurgeRuleConfig</a>&#60;Event&#62;) => PurgeRule`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class PurgeRule<Event extends VendureEvent = VendureEvent> {",
                    "    eventType: Type<Event>",
                    "    bufferTimeMs: number | undefined",
                    "    handle(handlerArgs: { events: Event[]; stellateService: StellateService; injector: Injector }) => ;",
                    "    constructor(config: PurgeRuleConfig<Event>)",
                    "}"
                ]
            },
            {
                "id": "purgeruleconfig",
                "title": "PurgeRuleConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/stellate-plugin/src/purge-rule.ts\" sourceLine=\"13\" packageName=\"@vendure/stellate-plugin\" />\n\nConfigures a <a href='/reference/core-plugins/stellate-plugin/purge-rule#purgerule'>PurgeRule</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "eventtype",
                        "title": "eventType",
                        "content": "\n<MemberInfo kind=\"property\" type={`Type&#60;Event&#62;`}   />\n\nSpecifies which VendureEvent will trigger this purge rule.\n"
                    },
                    {
                        "id": "buffertime",
                        "title": "bufferTime",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"5000\"   />\n\nHow long to buffer events for in milliseconds before executing the handler. This allows\nus to efficiently batch calls to the Stellate Purge API.\n"
                    },
                    {
                        "id": "handler",
                        "title": "handler",
                        "content": "\n<MemberInfo kind=\"property\" type={`(handlerArgs: {\n         events: Event[];\n         stellateService: <a href='/reference/core-plugins/stellate-plugin/stellate-service#stellateservice'>StellateService</a>;\n         injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>;\n     }) =&#62; void | Promise&#60;void&#62;`}   />\n\nThe function to invoke when the specified event is published. This function should use the\n<a href='/reference/core-plugins/stellate-plugin/stellate-service#stellateservice'>StellateService</a> instance to call the Stellate Purge API.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface PurgeRuleConfig<Event extends VendureEvent> {",
                    "    eventType: Type<Event>;",
                    "    bufferTime?: number;",
                    "    handler: (handlerArgs: {",
                    "        events: Event[];",
                    "        stellateService: StellateService;",
                    "        injector: Injector;",
                    "    }) => void | Promise<void>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "queries",
        "metadata": {
            "title": "Queries",
            "keywords": [
                "activechannel",
                "activecustomer",
                "activeorder",
                "availablecountries",
                "collection",
                "collections",
                "eligiblepaymentmethods",
                "eligibleshippingmethods",
                "facet",
                "facets",
                "me",
                "nextorderstates",
                "order",
                "orderbycode",
                "product",
                "products",
                "search"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <div class=\"graphql-code-block\">"
        },
        "content": "",
        "sections": [
            {
                "id": "activechannel",
                "title": "activeChannel",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">The active Channel</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">activeChannel: <a href=\"/reference/graphql-api/shop/object-types#channel\">Channel</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "activecustomer",
                "title": "activeCustomer",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">The active Customer</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">activeCustomer: <a href=\"/reference/graphql-api/shop/object-types#customer\">Customer</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "activeorder",
                "title": "activeOrder",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">The active Order. Will be <code>null</code> until an Order is created via `addItemToOrder`. Once an Order reaches the</div>\n\n<div class=\"graphql-code-line top-level comment\">state of <code>PaymentAuthorized</code> or `PaymentSettled`, then that Order is no longer considered \"active\" and this</div>\n\n<div class=\"graphql-code-line top-level comment\">query will once again return `null`.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">activeOrder: <a href=\"/reference/graphql-api/shop/object-types#order\">Order</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "availablecountries",
                "title": "availableCountries",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">An array of supported Countries</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">availableCountries: [<a href=\"/reference/graphql-api/shop/object-types#country\">Country</a>!]!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "collection",
                "title": "collection",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Returns a Collection either by its id or slug. If neither 'id' nor 'slug' is specified, an error will result.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">collection(id: <a href=\"/reference/graphql-api/shop/object-types#id\">ID</a>, slug: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>): <a href=\"/reference/graphql-api/shop/object-types#collection\">Collection</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "collections",
                "title": "collections",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">A list of Collections available to the shop</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">collections(options: <a href=\"/reference/graphql-api/shop/input-types#collectionlistoptions\">CollectionListOptions</a>): <a href=\"/reference/graphql-api/shop/object-types#collectionlist\">CollectionList</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "eligiblepaymentmethods",
                "title": "eligiblePaymentMethods",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Returns a list of payment methods and their eligibility based on the current active Order</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">eligiblePaymentMethods: [<a href=\"/reference/graphql-api/shop/object-types#paymentmethodquote\">PaymentMethodQuote</a>!]!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "eligibleshippingmethods",
                "title": "eligibleShippingMethods",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Returns a list of eligible shipping methods based on the current active Order</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">eligibleShippingMethods: [<a href=\"/reference/graphql-api/shop/object-types#shippingmethodquote\">ShippingMethodQuote</a>!]!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "facet",
                "title": "facet",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Returns a Facet by its id</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">facet(id: <a href=\"/reference/graphql-api/shop/object-types#id\">ID</a>!): <a href=\"/reference/graphql-api/shop/object-types#facet\">Facet</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "facets",
                "title": "facets",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">A list of Facets available to the shop</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">facets(options: <a href=\"/reference/graphql-api/shop/input-types#facetlistoptions\">FacetListOptions</a>): <a href=\"/reference/graphql-api/shop/object-types#facetlist\">FacetList</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "me",
                "title": "me",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Returns information about the current authenticated User</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">me: <a href=\"/reference/graphql-api/shop/object-types#currentuser\">CurrentUser</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "nextorderstates",
                "title": "nextOrderStates",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Returns the possible next states that the activeOrder can transition to</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">nextOrderStates: [<a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!]!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "order",
                "title": "order",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Returns an Order based on the id. Note that in the Shop API, only orders belonging to the</div>\n\n<div class=\"graphql-code-line top-level comment\">currently-authenticated User may be queried.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">order(id: <a href=\"/reference/graphql-api/shop/object-types#id\">ID</a>!): <a href=\"/reference/graphql-api/shop/object-types#order\">Order</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "orderbycode",
                "title": "orderByCode",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Returns an Order based on the order `code`. For guest Orders (i.e. Orders placed by non-authenticated Customers)</div>\n\n<div class=\"graphql-code-line top-level comment\">this query will only return the Order within 2 hours of the Order being placed. This allows an Order confirmation</div>\n\n<div class=\"graphql-code-line top-level comment\">screen to be shown immediately after completion of a guest checkout, yet prevents security risks of allowing</div>\n\n<div class=\"graphql-code-line top-level comment\">general anonymous access to Order data.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">orderByCode(code: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>!): <a href=\"/reference/graphql-api/shop/object-types#order\">Order</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "product",
                "title": "product",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Get a Product either by id or slug. If neither 'id' nor 'slug' is specified, an error will result.</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">product(id: <a href=\"/reference/graphql-api/shop/object-types#id\">ID</a>, slug: <a href=\"/reference/graphql-api/shop/object-types#string\">String</a>): <a href=\"/reference/graphql-api/shop/object-types#product\">Product</a></div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "products",
                "title": "products",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Get a list of Products</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">products(options: <a href=\"/reference/graphql-api/shop/input-types#productlistoptions\">ProductListOptions</a>): <a href=\"/reference/graphql-api/shop/object-types#productlist\">ProductList</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "search",
                "title": "search",
                "content": "<div class=\"graphql-code-block\">\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level comment\">Search Products based on the criteria set by the `SearchInput`</div>\n<div class=\"graphql-code-line top-level comment\">\"\"\"</div>\n<div class=\"graphql-code-line top-level\">type <span class=\"graphql-code-identifier\">Query</span>\n &#123;</div>\n<div class=\"graphql-code-line \">search(input: <a href=\"/reference/graphql-api/shop/input-types#searchinput\">SearchInput</a>!): <a href=\"/reference/graphql-api/shop/object-types#searchresponse\">SearchResponse</a>!</div>\n\n\n<div class=\"graphql-code-line top-level\">&#125;</div>\n</div>\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "react-components",
        "metadata": {
            "title": "React Components",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "react-extensions",
        "metadata": {
            "title": "React Extensions",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "react-hooks",
        "metadata": {
            "title": "React Hooks",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "reactcustomdetailcomponentconfig",
        "metadata": {
            "title": "ReactCustomDetailComponentConfig",
            "keywords": [
                "reactcustomdetailcomponentconfig",
                "locationid",
                "component",
                "props"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-custom-detail-component.ts\" sourceLine=\"15\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "reactcustomdetailcomponentconfig",
                "title": "ReactCustomDetailComponentConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-custom-detail-component.ts\" sourceLine=\"15\" packageName=\"@vendure/admin-ui\" />\n\nConfigures a React-based component to be placed in a detail page in the given location.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "locationid",
                        "title": "locationId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/custom-detail-components/custom-detail-component-location-id#customdetailcomponentlocationid'>CustomDetailComponentLocationId</a>`}   />\n\nThe id of the detail page location in which to place the component.\n"
                    },
                    {
                        "id": "component",
                        "title": "component",
                        "content": "\n<MemberInfo kind=\"property\" type={`ElementType`}   />\n\nThe React component to render.\n"
                    },
                    {
                        "id": "props",
                        "title": "props",
                        "content": "\n<MemberInfo kind=\"property\" type={`Record&#60;string, any&#62;`}   />\n\nOptional props to pass to the React component.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ReactCustomDetailComponentConfig {",
                    "    locationId: CustomDetailComponentLocationId;",
                    "    component: ElementType;",
                    "    props?: Record<string, any>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "reactdatatablecomponentconfig",
        "metadata": {
            "title": "ReactDataTableComponentConfig",
            "keywords": [
                "reactdatatablecomponentconfig",
                "tableid",
                "columnid",
                "component",
                "props"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-data-table-component.ts\" sourceLine=\"19\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "reactdatatablecomponentconfig",
                "title": "ReactDataTableComponentConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-data-table-component.ts\" sourceLine=\"19\" packageName=\"@vendure/admin-ui\" />\n\nConfigures a <a href='/reference/admin-ui-api/custom-detail-components/custom-detail-component#customdetailcomponent'>CustomDetailComponent</a> to be placed in the given location.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "tableid",
                        "title": "tableId",
                        "content": "\n<MemberInfo kind=\"property\" type={`DataTableLocationId`}   />\n\nThe location in the UI where the custom component should be placed.\n"
                    },
                    {
                        "id": "columnid",
                        "title": "columnId",
                        "content": "\n<MemberInfo kind=\"property\" type={`DataTableColumnId`}   />\n\nThe column in the table where the custom component should be placed.\n"
                    },
                    {
                        "id": "component",
                        "title": "component",
                        "content": "\n<MemberInfo kind=\"property\" type={`ElementType`}   />\n\nThe component to render in the table cell. This component will receive the `rowItem` prop\nwhich is the data object for the row, e.g. the `Product` object if used in the `product-list` table.\n"
                    },
                    {
                        "id": "props",
                        "title": "props",
                        "content": "\n<MemberInfo kind=\"property\" type={`Record&#60;string, any&#62;`}   />\n\nOptional props to pass to the React component.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ReactDataTableComponentConfig {",
                    "    tableId: DataTableLocationId;",
                    "    columnId: DataTableColumnId;",
                    "    component: ElementType;",
                    "    props?: Record<string, any>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "refundstate",
        "metadata": {
            "title": "RefundState",
            "keywords": [
                "refundstate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/refund-state-machine/refund-state.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "refundstate",
                "title": "RefundState",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/refund-state-machine/refund-state.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nThese are the default states of the refund process.\n\n\n",
                "subsections": [],
                "code": [
                    "type RefundState = 'Pending' | 'Settled' | 'Failed'"
                ]
            }
        ]
    },
    {
        "id": "refundtransitiondata",
        "metadata": {
            "title": "RefundTransitionData",
            "keywords": [
                "refundtransitiondata",
                "ctx",
                "order",
                "refund"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/refund-state-machine/refund-state.ts\" sourceLine=\"33\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "refundtransitiondata",
                "title": "RefundTransitionData",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/refund-state-machine/refund-state.ts\" sourceLine=\"33\" packageName=\"@vendure/core\" />\n\nThe data which is passed to the state transition handlers of the RefundStateMachine.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "ctx",
                        "title": "ctx",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>`}   />\n\n\n"
                    },
                    {
                        "id": "order",
                        "title": "order",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>`}   />\n\n\n"
                    },
                    {
                        "id": "refund",
                        "title": "refund",
                        "content": "\n<MemberInfo kind=\"property\" type={`Refund`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface RefundTransitionData {",
                    "    ctx: RequestContext;",
                    "    order: Order;",
                    "    refund: Refund;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "region",
        "metadata": {
            "title": "Region",
            "keywords": [
                "region",
                "code",
                "type",
                "name",
                "parent",
                "parentid",
                "enabled",
                "translations",
                "customfields"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/region/region.entity.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "region",
                "title": "Region",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/region/region.entity.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />\n\nA Region represents a geographical administrative unit, such as a Country, Province, State, Prefecture etc.\nThis is an abstract class which is extended by the <a href='/reference/typescript-api/entities/country#country'>Country</a> and <a href='/reference/typescript-api/entities/province#province'>Province</a> entities.\nRegions can be grouped into <a href='/reference/typescript-api/entities/zone#zone'>Zone</a>s which are in turn used to determine applicable shipping and taxes for an <a href='/reference/typescript-api/entities/order#order'>Order</a>.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#translatable'>Translatable</a></code>, <code>HasCustomFields</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nA code representing the region. The code format will depend on the type of region. For\nexample, a Country code will be a 2-letter ISO code, whereas a Province code could use\na format relevant to the type of province, e.g. a US state code like \"CA\".\n"
                    },
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`RegionType`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "parent",
                        "title": "parent",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/region#region'>Region</a>`}   />\n\n\n"
                    },
                    {
                        "id": "parentid",
                        "title": "parentId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "enabled",
                        "title": "enabled",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Translation&#60;<a href='/reference/typescript-api/entities/region#region'>Region</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomRegionFields`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Region extends VendureEntity implements Translatable, HasCustomFields {",
                    "    @Column() code: string;",
                    "    @Column({ nullable: false, type: 'varchar' })",
                    "    readonly type: RegionType;",
                    "    name: LocaleString;",
                    "    @Index()",
                    "    @ManyToOne(type => Region, { nullable: true, onDelete: 'SET NULL' })",
                    "    parent?: Region;",
                    "    @EntityId({ nullable: true })",
                    "    parentId?: ID;",
                    "    @Column() enabled: boolean;",
                    "    @OneToMany(type => RegionTranslation, translation => translation.base, { eager: true })",
                    "    translations: Array<Translation<Region>>;",
                    "    @Column(type => CustomRegionFields)",
                    "    customFields: CustomRegionFields;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "registerbulkaction",
        "metadata": {
            "title": "RegisterBulkAction",
            "keywords": [
                "registerbulkaction",
                "bulkaction"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-bulk-action.ts\" sourceLine=\"52\" packageName=\"@vendure/admin-ui\" since=\"1.8.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerbulkaction",
                "title": "registerBulkAction",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-bulk-action.ts\" sourceLine=\"52\" packageName=\"@vendure/admin-ui\" since=\"1.8.0\" />\n\nRegisters a custom <a href='/reference/admin-ui-api/bulk-actions/bulk-action#bulkaction'>BulkAction</a> which can be invoked from the bulk action menu\nof any supported list view.\n\nThis allows you to provide custom functionality that can operate on any of the selected\nitems in the list view.\n\nIn this example, imagine we have an integration with a 3rd-party text translation service. This\nbulk action allows us to select multiple products from the product list view, and send them for\ntranslation via a custom service which integrates with the translation service's API.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "bulkaction",
                        "title": "bulkAction",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/bulk-actions/bulk-action#bulkaction'>BulkAction</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { ModalService, registerBulkAction, SharedModule } from '@vendure/admin-ui/core';",
                    "import { ProductDataTranslationService } from './product-data-translation.service';",
                    "",
                    "export default [",
                    "    ProductDataTranslationService,",
                    "    registerBulkAction({",
                    "        location: 'product-list',",
                    "        label: 'Send to translation service',",
                    "        icon: 'language',",
                    "        onClick: ({ injector, selection }) => {",
                    "            const modalService = injector.get(ModalService);",
                    "            const translationService = injector.get(ProductDataTranslationService);",
                    "            modalService",
                    "                .dialog({",
                    "                    title: `Send ${selection.length} products for translation?`,",
                    "                    buttons: [",
                    "                        { type: 'secondary', label: 'cancel' },",
                    "                        { type: 'primary', label: 'send', returnValue: true },",
                    "                    ],",
                    "                })",
                    "                .subscribe(response => {",
                    "                    if (response) {",
                    "                        translationService.sendForTranslation(selection.map(item => item.productId));",
                    "                    }",
                    "                });",
                    "        },",
                    "    }),",
                    "];",
                    "function registerBulkAction(bulkAction: BulkAction): FactoryProvider"
                ]
            }
        ]
    },
    {
        "id": "registercustomdetailcomponent",
        "metadata": {
            "title": "RegisterCustomDetailComponent",
            "keywords": [
                "registercustomdetailcomponent",
                "config"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-custom-detail-component.ts\" sourceLine=\"57\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registercustomdetailcomponent",
                "title": "registerCustomDetailComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-custom-detail-component.ts\" sourceLine=\"57\" packageName=\"@vendure/admin-ui\" />\n\nRegisters a <a href='/reference/admin-ui-api/custom-detail-components/custom-detail-component#customdetailcomponent'>CustomDetailComponent</a> to be placed in a given location. This allows you\nto embed any type of custom Angular component in the entity detail pages of the Admin UI.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/custom-detail-components/custom-detail-component-config#customdetailcomponentconfig'>CustomDetailComponentConfig</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { Component, OnInit } from '@angular/core';",
                    "import { switchMap } from 'rxjs';",
                    "import { FormGroup } from '@angular/forms';",
                    "import { CustomFieldConfig } from '@vendure/common/lib/generated-types';",
                    "import {",
                    "    DataService,",
                    "    SharedModule,",
                    "    CustomDetailComponent,",
                    "    registerCustomDetailComponent,",
                    "    GetProductWithVariants",
                    "} from '@vendure/admin-ui/core';",
                    "",
                    "@Component({",
                    "    template: `{{ extraInfo$ | async | json }}`,",
                    "    standalone: true,",
                    "    imports: [SharedModule],",
                    "})",
                    "export class ProductInfoComponent implements CustomDetailComponent, OnInit {",
                    "    // These two properties are provided by Vendure and will vary",
                    "    // depending on the particular detail page you are embedding this",
                    "    // component into.",
                    "    entity$: Observable<GetProductWithVariants.Product>",
                    "    detailForm: FormGroup;",
                    "",
                    "    extraInfo$: Observable<any>;",
                    "",
                    "    constructor(private cmsDataService: CmsDataService) {}",
                    "",
                    "    ngOnInit() {",
                    "        this.extraInfo$ = this.entity$.pipe(",
                    "            switchMap(entity => this.cmsDataService.getDataFor(entity.id))",
                    "        );",
                    "    }",
                    "}",
                    "",
                    "export default [",
                    "    registerCustomDetailComponent({",
                    "        locationId: 'product-detail',",
                    "        component: ProductInfoComponent,",
                    "    }),",
                    "];",
                    "function registerCustomDetailComponent(config: CustomDetailComponentConfig): Provider"
                ]
            }
        ]
    },
    {
        "id": "registerdashboardwidget",
        "metadata": {
            "title": "RegisterDashboardWidget",
            "keywords": [
                "registerdashboardwidget",
                "id",
                "config"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-dashboard-widget.ts\" sourceLine=\"16\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerdashboardwidget",
                "title": "registerDashboardWidget",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-dashboard-widget.ts\" sourceLine=\"16\" packageName=\"@vendure/admin-ui\" />\n\nRegisters a dashboard widget. Once registered, the widget can be set as part of the default\n(using <a href='/reference/admin-ui-api/dashboard-widgets/set-dashboard-widget-layout#setdashboardwidgetlayout'>setDashboardWidgetLayout</a>).\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`string`} />\n\n"
                    },
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/dashboard-widgets/dashboard-widget-config#dashboardwidgetconfig'>DashboardWidgetConfig</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "function registerDashboardWidget(id: string, config: DashboardWidgetConfig): FactoryProvider"
                ]
            }
        ]
    },
    {
        "id": "registerdatatablecomponent",
        "metadata": {
            "title": "RegisterDataTableComponent",
            "keywords": [
                "registerdatatablecomponent",
                "config"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-data-table-component.ts\" sourceLine=\"45\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerdatatablecomponent",
                "title": "registerDataTableComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-data-table-component.ts\" sourceLine=\"45\" packageName=\"@vendure/admin-ui\" />\n\nAllows you to override the default component used to render the data of a particular column in a DataTable.\nThe component should implement the {@link CustomDataTableColumnComponent} interface. The tableId and columnId can\nbe determined by pressing `ctrl + u` when running the Admin UI in dev mode.\n\n*Example*\n\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/custom-table-components/data-table-component-config#datatablecomponentconfig'>DataTableComponentConfig</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { Component, Input } from '@angular/core';",
                    "import { CustomColumnComponent } from '@vendure/admin-ui/core';",
                    "",
                    "@Component({",
                    "    selector: 'custom-slug-component',",
                    "    template: `",
                    "        <a [href]=\"'https://example.com/products/' + rowItem.slug\" target=\"_blank\">{{ rowItem.slug }}</a>",
                    "    `,",
                    "    standalone: true,",
                    "})",
                    "export class CustomTableComponent implements CustomColumnComponent {",
                    "    @Input() rowItem: any;",
                    "}",
                    "import { registerDataTableComponent } from '@vendure/admin-ui/core';",
                    "import { CustomTableComponent } from './components/custom-table.component';",
                    "",
                    "export default [",
                    "    registerDataTableComponent({",
                    "        component: CustomTableComponent,",
                    "        tableId: 'product-list',",
                    "        columnId: 'slug',",
                    "    }),",
                    "];",
                    "function registerDataTableComponent(config: DataTableComponentConfig): void"
                ]
            }
        ]
    },
    {
        "id": "registerforminputcomponent",
        "metadata": {
            "title": "RegisterFormInputComponent",
            "keywords": [
                "registerforminputcomponent",
                "id",
                "component"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-form-input-component.ts\" sourceLine=\"53\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerforminputcomponent",
                "title": "registerFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-form-input-component.ts\" sourceLine=\"53\" packageName=\"@vendure/admin-ui\" />\n\nRegisters a custom FormInputComponent which can be used to control the argument inputs\nof a <a href='/reference/typescript-api/configurable-operation-def/#configurableoperationdef'>ConfigurableOperationDef</a> (e.g. CollectionFilter, ShippingMethod etc.) or for\na custom field.\n\n*Example*\n\n\nThis input component can then be used in a custom field:\n\n*Example*\n\n\nor with an argument of a <a href='/reference/typescript-api/configurable-operation-def/#configurableoperationdef'>ConfigurableOperationDef</a>:\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`string`} />\n\n"
                    },
                    {
                        "id": "component",
                        "title": "component",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`Type&#60;<a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a>&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { registerFormInputComponent } from '@vendure/admin-ui/core';",
                    "",
                    "export default [",
                    "    // highlight-next-line",
                    "    registerFormInputComponent('my-custom-input', MyCustomFieldControl),",
                    "];",
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "const config: VendureConfig = {",
                    "  // ...",
                    "  customFields: {",
                    "    ProductVariant: [",
                    "      {",
                    "        name: 'rrp',",
                    "        type: 'int',",
                    "        // highlight-next-line",
                    "        ui: { component: 'my-custom-input' },",
                    "      },",
                    "    ]",
                    "  }",
                    "}",
                    "args: {",
                    "  rrp: { type: 'int', ui: { component: 'my-custom-input' } },",
                    "}",
                    "function registerFormInputComponent(id: string, component: Type<FormInputComponent>): FactoryProvider"
                ]
            }
        ]
    },
    {
        "id": "registerhistoryentrycomponent",
        "metadata": {
            "title": "RegisterHistoryEntryComponent",
            "keywords": [
                "registerhistoryentrycomponent",
                "config"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-history-entry-component.ts\" sourceLine=\"68\" packageName=\"@vendure/admin-ui\" since=\"1.9.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerhistoryentrycomponent",
                "title": "registerHistoryEntryComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-history-entry-component.ts\" sourceLine=\"68\" packageName=\"@vendure/admin-ui\" since=\"1.9.0\" />\n\nRegisters a <a href='/reference/admin-ui-api/custom-history-entry-components/history-entry-component#historyentrycomponent'>HistoryEntryComponent</a> for displaying history entries in the Order/Customer\nhistory timeline.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/custom-history-entry-components/history-entry-config#historyentryconfig'>HistoryEntryConfig</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { Component } from '@angular/core';",
                    "import {",
                    "    CustomerFragment,",
                    "    CustomerHistoryEntryComponent,",
                    "    registerHistoryEntryComponent,",
                    "    SharedModule,",
                    "    TimelineDisplayType,",
                    "    TimelineHistoryEntry,",
                    "} from '@vendure/admin-ui/core';",
                    "",
                    "@Component({",
                    "    selector: 'tax-id-verification-component',",
                    "    template: `",
                    "        <div *ngIf=\"entry.data.valid\">",
                    "          Tax ID <strong>{{ entry.data.taxId }}</strong> was verified",
                    "          <vdr-history-entry-detail *ngIf=\"entry.data\">",
                    "            <vdr-object-tree [value]=\"entry.data\"></vdr-object-tree>",
                    "          </vdr-history-entry-detail>",
                    "        </div>",
                    "        <div *ngIf=\"entry.data.valid\">Tax ID {{ entry.data.taxId }} could not be verified</div>",
                    "    `,",
                    "    standalone: true,",
                    "    imports: [SharedModule],",
                    "})",
                    "class TaxIdHistoryEntryComponent implements CustomerHistoryEntryComponent {",
                    "    entry: TimelineHistoryEntry;",
                    "    customer: CustomerFragment;",
                    "",
                    "    getDisplayType(entry: TimelineHistoryEntry): TimelineDisplayType {",
                    "        return entry.data.valid ? 'success' : 'error';",
                    "    }",
                    "",
                    "    getName(entry: TimelineHistoryEntry): string {",
                    "        return 'Tax ID Verification Plugin';",
                    "    }",
                    "",
                    "    isFeatured(entry: TimelineHistoryEntry): boolean {",
                    "        return true;",
                    "    }",
                    "",
                    "    getIconShape(entry: TimelineHistoryEntry) {",
                    "        return entry.data.valid ? 'check-circle' : 'exclamation-circle';",
                    "    }",
                    "}",
                    "",
                    "export default [",
                    "    registerHistoryEntryComponent({",
                    "        type: 'CUSTOMER_TAX_ID_VERIFICATION',",
                    "        component: TaxIdHistoryEntryComponent,",
                    "    }),",
                    "];",
                    "function registerHistoryEntryComponent(config: HistoryEntryConfig): Provider"
                ]
            }
        ]
    },
    {
        "id": "registerinitializer",
        "metadata": {
            "title": "RegisterInitializer",
            "keywords": [
                "registerinitializer",
                "type",
                "initializer"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/testing/src/initializers/initializers.ts\" sourceLine=\"16\" packageName=\"@vendure/testing\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerinitializer",
                "title": "registerInitializer",
                "content": "\n<GenerationInfo sourceFile=\"packages/testing/src/initializers/initializers.ts\" sourceLine=\"16\" packageName=\"@vendure/testing\" />\n\nRegisters a <a href='/reference/typescript-api/testing/test-db-initializer#testdbinitializer'>TestDbInitializer</a> for the given database type. Should be called before invoking\n<a href='/reference/typescript-api/testing/create-test-environment#createtestenvironment'>createTestEnvironment</a>.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`DataSourceOptions['type']`} />\n\n"
                    },
                    {
                        "id": "initializer",
                        "title": "initializer",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/typescript-api/testing/test-db-initializer#testdbinitializer'>TestDbInitializer</a>&#60;any&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "function registerInitializer(type: DataSourceOptions['type'], initializer: TestDbInitializer<any>): void"
                ]
            }
        ]
    },
    {
        "id": "registerpagetab",
        "metadata": {
            "title": "RegisterPageTab",
            "keywords": [
                "registerpagetab",
                "config"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-page-tab.ts\" sourceLine=\"24\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerpagetab",
                "title": "registerPageTab",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-page-tab.ts\" sourceLine=\"24\" packageName=\"@vendure/admin-ui\" />\n\nAdd a tab to an existing list or detail page.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/tabs/page-tab-config#pagetabconfig'>PageTabConfig</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { registerPageTab } from '@vendure/admin-ui/core';",
                    "import { DeletedProductListComponent } from './components/deleted-product-list/deleted-product-list.component';",
                    "",
                    "export default [",
                    "    registerPageTab({",
                    "        location: 'product-list',",
                    "        tab: 'Deleted Products',",
                    "        route: 'deleted',",
                    "        component: DeletedProductListComponent,",
                    "    }),",
                    "];",
                    "function registerPageTab(config: PageTabConfig): Provider"
                ]
            }
        ]
    },
    {
        "id": "registerreactcustomdetailcomponent",
        "metadata": {
            "title": "RegisterReactCustomDetailComponent",
            "keywords": [
                "registerreactcustomdetailcomponent",
                "config"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-custom-detail-component.ts\" sourceLine=\"40\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerreactcustomdetailcomponent",
                "title": "registerReactCustomDetailComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-custom-detail-component.ts\" sourceLine=\"40\" packageName=\"@vendure/admin-ui\" />\n\nRegisters a React component to be rendered in a detail page in the given location.\nComponents used as custom detail components can make use of the <a href='/reference/admin-ui-api/react-hooks/use-detail-component-data#usedetailcomponentdata'>useDetailComponentData</a> hook.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/react-extensions/react-custom-detail-component-config#reactcustomdetailcomponentconfig'>ReactCustomDetailComponentConfig</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "function registerReactCustomDetailComponent(config: ReactCustomDetailComponentConfig): void"
                ]
            }
        ]
    },
    {
        "id": "registerreactdatatablecomponent",
        "metadata": {
            "title": "RegisterReactDataTableComponent",
            "keywords": [
                "registerreactdatatablecomponent",
                "config"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-data-table-component.ts\" sourceLine=\"90\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerreactdatatablecomponent",
                "title": "registerReactDataTableComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-data-table-component.ts\" sourceLine=\"90\" packageName=\"@vendure/admin-ui\" />\n\nRegisters a React component to be rendered in a data table in the given location.\nThe component will receive the `rowItem` prop which is the data object for the row,\ne.g. the `Product` object if used in the `product-list` table.\n\n*Example*\n\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "config",
                        "title": "config",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/react-extensions/react-data-table-component-config#reactdatatablecomponentconfig'>ReactDataTableComponentConfig</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { ReactDataTableComponentProps } from '@vendure/admin-ui/react';",
                    "import React from 'react';",
                    "",
                    "export function SlugWithLink({ rowItem }: ReactDataTableComponentProps<{ slug: string }>) {",
                    "    return (",
                    "        <a href={`https://example.com/products/${rowItem.slug}`} target=\"_blank\">",
                    "            {rowItem.slug}",
                    "        </a>",
                    "    );",
                    "}",
                    "import { registerReactDataTableComponent } from '@vendure/admin-ui/react';",
                    "import { SlugWithLink } from './components/SlugWithLink';",
                    "",
                    "export default [",
                    "    registerReactDataTableComponent({",
                    "        component: SlugWithLink,",
                    "        tableId: 'product-list',",
                    "        columnId: 'slug',",
                    "        props: {",
                    "          foo: 'bar',",
                    "        },",
                    "    }),",
                    "];",
                    "function registerReactDataTableComponent(config: ReactDataTableComponentConfig): void"
                ]
            }
        ]
    },
    {
        "id": "registerreactforminputcomponent",
        "metadata": {
            "title": "RegisterReactFormInputComponent",
            "keywords": [
                "registerreactforminputcomponent",
                "id",
                "component"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-form-input-component.ts\" sourceLine=\"15\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerreactforminputcomponent",
                "title": "registerReactFormInputComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-form-input-component.ts\" sourceLine=\"15\" packageName=\"@vendure/admin-ui\" />\n\nRegisters a React component to be used as a <a href='/reference/admin-ui-api/custom-input-components/form-input-component#forminputcomponent'>FormInputComponent</a>.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`string`} />\n\n"
                    },
                    {
                        "id": "component",
                        "title": "component",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`ElementType`} />\n\n\n"
                    }
                ],
                "code": [
                    "function registerReactFormInputComponent(id: string, component: ElementType): FactoryProvider"
                ]
            }
        ]
    },
    {
        "id": "registerreactroutecomponent",
        "metadata": {
            "title": "RegisterReactRouteComponent",
            "keywords": [
                "registerreactroutecomponent",
                "options"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-route-component.ts\" sourceLine=\"30\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerreactroutecomponent",
                "title": "registerReactRouteComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-route-component.ts\" sourceLine=\"30\" packageName=\"@vendure/admin-ui\" />\n\nRegisters a React component to be used as a route component.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/react-extensions/register-react-route-component-options#registerreactroutecomponentoptions'>RegisterReactRouteComponentOptions</a>&#60;Entity, T, Field, R&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "function registerReactRouteComponent<Entity extends { id: string; updatedAt?: string }, T extends DocumentNode | TypedDocumentNode<any, { id: string }>, Field extends keyof ResultOf<T>, R extends Field>(options: RegisterReactRouteComponentOptions<Entity, T, Field, R>): Route"
                ]
            }
        ]
    },
    {
        "id": "registerreactroutecomponentoptions",
        "metadata": {
            "title": "RegisterReactRouteComponentOptions",
            "keywords": [
                "registerreactroutecomponentoptions"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-route-component.ts\" sourceLine=\"15\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerreactroutecomponentoptions",
                "title": "RegisterReactRouteComponentOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/register-react-route-component.ts\" sourceLine=\"15\" packageName=\"@vendure/admin-ui\" />\n\nConfiguration for a React-based route component.\n\n\n",
                "subsections": [],
                "code": [
                    "type RegisterReactRouteComponentOptions<Entity extends { id: string; updatedAt?: string }, T extends DocumentNode | TypedDocumentNode<any, { id: string }>, Field extends keyof ResultOf<T>, R extends Field> = RegisterRouteComponentOptions<ElementType, Entity, T, Field, R> & {",
                    "    props?: Record<string, any>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "registerroutecomponent",
        "metadata": {
            "title": "RegisterRouteComponent",
            "keywords": [
                "registerroutecomponent",
                "options"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-route-component.ts\" sourceLine=\"77\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerroutecomponent",
                "title": "registerRouteComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-route-component.ts\" sourceLine=\"77\" packageName=\"@vendure/admin-ui\" />\n\nRegisters an Angular standalone component to be rendered in a route.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/routes/register-route-component-options#registerroutecomponentoptions'>RegisterRouteComponentOptions</a>&#60;Component, Entity, T, Field, R&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { registerRouteComponent } from '@vendure/admin-ui/core';",
                    "import { registerReactRouteComponent } from '@vendure/admin-ui/react';",
                    "",
                    "import { ProductReviewDetailComponent } from './components/product-review-detail/product-review-detail.component';",
                    "import { AllProductReviewsList } from './components/all-product-reviews-list/all-product-reviews-list.component';",
                    "import { GetReviewDetailDocument } from './generated-types';",
                    "",
                    "export default [",
                    "    registerRouteComponent({",
                    "        path: '',",
                    "        component: AllProductReviewsList,",
                    "        breadcrumb: 'Product reviews',",
                    "    }),",
                    "    registerRouteComponent({",
                    "        path: ':id',",
                    "        component: ProductReviewDetailComponent,",
                    "        query: GetReviewDetailDocument,",
                    "        entityKey: 'productReview',",
                    "        getBreadcrumbs: entity => [",
                    "            {",
                    "                label: 'Product reviews',",
                    "                link: ['/extensions', 'product-reviews'],",
                    "            },",
                    "            {",
                    "                label: `#${entity?.id} (${entity?.product.name})`,",
                    "                link: [],",
                    "            },",
                    "        ],",
                    "    }),",
                    "];",
                    "function registerRouteComponent<Component extends any | BaseDetailComponent<Entity>, Entity extends { id: string; updatedAt?: string }, T extends DocumentNode | TypedDocumentNode<any, { id: string }>, Field extends keyof ResultOf<T>, R extends Field>(options: RegisterRouteComponentOptions<Component, Entity, T, Field, R>): void"
                ]
            }
        ]
    },
    {
        "id": "registerroutecomponentoptions",
        "metadata": {
            "title": "RegisterRouteComponentOptions",
            "keywords": [
                "registerroutecomponentoptions"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-route-component.ts\" sourceLine=\"19\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "registerroutecomponentoptions",
                "title": "RegisterRouteComponentOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-route-component.ts\" sourceLine=\"19\" packageName=\"@vendure/admin-ui\" />\n\nConfiguration for a route component.\n\n\n",
                "subsections": [],
                "code": [
                    "type RegisterRouteComponentOptions<Component extends any | BaseDetailComponent<Entity>, Entity extends { id: string; updatedAt?: string }, T extends DocumentNode | TypedDocumentNode<any, { id: string }>, Field extends keyof ResultOf<T>, R extends Field> = {",
                    "    component: Type<Component> | Component;",
                    "    title?: string;",
                    "    breadcrumb?: BreadcrumbValue;",
                    "    path?: string;",
                    "    query?: T;",
                    "    getBreadcrumbs?: (entity: Exclude<ResultOf<T>[R], 'Query'>) => BreadcrumbValue;",
                    "    entityKey?: Component extends BaseDetailComponent<any> ? R : undefined;",
                    "    variables?: T extends TypedDocumentNode<any, infer V> ? Omit<V, 'id'> : never;",
                    "    routeConfig?: Route;",
                    "} & (Component extends BaseDetailComponent<any> ? { entityKey: R } : unknown)"
                ]
            }
        ]
    },
    {
        "id": "relations-decorator",
        "metadata": {
            "title": "Relations Decorator",
            "keywords": [
                "relations",
                "depth",
                "omit"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/api/decorators/relations.decorator.ts\" sourceLine=\"134\" packageName=\"@vendure/core\" since=\"1.6.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "relations",
                "title": "Relations",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/api/decorators/relations.decorator.ts\" sourceLine=\"134\" packageName=\"@vendure/core\" since=\"1.6.0\" />\n\nResolver param decorator which returns an array of relation paths which can be passed through\nto the TypeORM data layer in order to join only the required relations. This works by inspecting\nthe GraphQL `info` object, examining the field selection, and then comparing this with information\nabout the return type's relations.\n\nIn addition to analyzing the field selection, this decorator also checks for any `@Calculated()`\nproperties on the entity, and additionally includes relations from the `relations` array of the calculated\nmetadata, if defined.\n\nSo if, for example, the query only selects the `id` field of an Order, then no other relations need\nbe joined in the resulting SQL query. This can massively speed up execution time for queries which do\nnot include many deep nested relations.\n\n*Example*\n\n\nIn the above example, given the following query:\n\n*Example*\n\nthen the value of `relations` will be\n\nThe `'customer'` comes from the fact that the query is nesting the \"customer\" object, and the `'lines'` is taken\nfrom the `Order` entity's `totalQuantity` property, which uses <a href='/reference/typescript-api/data-access/calculated#calculated'>Calculated</a> decorator and defines those relations as dependencies\nfor deriving the calculated value.\n\n",
                "subsections": [],
                "code": [
                    "@Query()",
                    "@Allow(Permission.ReadOrder)",
                    "orders(",
                    "    @Ctx() ctx: RequestContext,",
                    "    @Args() args: QueryOrdersArgs,",
                    "    @Relations(Order) relations: RelationPaths<Order>,",
                    "): Promise<PaginatedList<Order>> {",
                    "    return this.orderService.findAll(ctx, args.options || undefined, relations);",
                    "}",
                    "{",
                    "  orders(options: { take: 10 }) {",
                    "    items {",
                    "      id",
                    "      customer {",
                    "        id",
                    "        firstName",
                    "        lastName",
                    "      }",
                    "      totalQuantity",
                    "      totalWithTax",
                    "    }",
                    "  }",
                    "}",
                    "['customer', 'lines'']"
                ]
            },
            {
                "id": "depth",
                "title": "Depth",
                "content": "\nBy default, when inspecting the GraphQL query, the Relations decorator will look 3 levels deep in any nested fields. So, e.g. if\nthe above `orders` query were changed to:\n\n*Example*\n\nthen the `relations` array would include `'lines'`, `'lines.productVariant'`, & `'lines.productVariant.product'` - 3 levels deep - but it would\n_not_ include `'lines.productVariant.product.featuredAsset'` since that exceeds the default depth. To specify a custom depth, you would\nuse the decorator like this:\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "{",
                    "  orders(options: { take: 10 }) {",
                    "    items {",
                    "      id",
                    "      lines {",
                    "        productVariant {",
                    "          product {",
                    "            featuredAsset {",
                    "              preview",
                    "            }",
                    "          }",
                    "        }",
                    "      }",
                    "    }",
                    "  }",
                    "}",
                    "@Relations({ entity: Order, depth: 2 }) relations: RelationPaths<Order>,"
                ]
            },
            {
                "id": "omit",
                "title": "Omit",
                "content": "\nThe `omit` option is used to explicitly omit certain relations from the calculated relations array. This is useful in certain\ncases where we know for sure that we need to run the field resolver _anyway_. A good example is the `Collection.productVariants` relation.\nWhen a GraphQL query comes in for a Collection and also requests its `productVariants` field, there is no point using a lookahead to eagerly\njoin that relation, because we will throw that data away anyway when the `productVariants` field resolver executes, since it returns a\nPaginatedList query rather than a simple array.\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    "@Relations({ entity: Collection, omit: ['productVariant'] }) relations: RelationPaths<Collection>,"
                ]
            }
        ]
    },
    {
        "id": "request",
        "metadata": {
            "title": "Request",
            "keywords": [
                "request"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "requestcontext",
        "metadata": {
            "title": "RequestContext",
            "keywords": [
                "requestcontext",
                "empty",
                "deserialize",
                "userhaspermissions",
                "serialize",
                "copy",
                "req",
                "apitype",
                "channel",
                "channelid",
                "languagecode",
                "currencycode",
                "session",
                "activeuserid",
                "isauthorized",
                "authorizedasowneronly",
                "translate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/api/common/request-context.ts\" sourceLine=\"44\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "requestcontext",
                "title": "RequestContext",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/api/common/request-context.ts\" sourceLine=\"44\" packageName=\"@vendure/core\" />\n\nThe RequestContext holds information relevant to the current request, which may be\nrequired at various points of the stack.\n\nIt is a good practice to inject the RequestContext (using the <a href='/reference/typescript-api/request/ctx-decorator#ctx'>Ctx</a> decorator) into\n_all_ resolvers & REST handlers, and then pass it through to the service layer.\n\nThis allows the service layer to access information about the current user, the active language,\nthe active Channel, and so on. In addition, the <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a> relies on the\npresence of the RequestContext object in order to correctly handle per-request database transactions.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "empty",
                        "title": "empty",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>`}   />\n\nCreates an \"empty\" RequestContext object. This is only intended to be used\nwhen a service method must be called outside the normal request-response\ncycle, e.g. when programmatically populating data. Usually a better alternative\nis to use the <a href='/reference/typescript-api/request/request-context-service#requestcontextservice'>RequestContextService</a> `create()` method, which allows more control\nover the resulting RequestContext object.\n"
                    },
                    {
                        "id": "deserialize",
                        "title": "deserialize",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctxObject: SerializedRequestContext) => <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>`}   />\n\nCreates a new RequestContext object from a serialized object created by the\n`serialize()` method.\n"
                    },
                    {
                        "id": "userhaspermissions",
                        "title": "userHasPermissions",
                        "content": "\n<MemberInfo kind=\"method\" type={`(permissions: <a href='/reference/typescript-api/common/permission#permission'>Permission</a>[]) => boolean`}   />\n\nReturns `true` if there is an active Session & User associated with this request,\nand that User has the specified permissions on the active Channel.\n"
                    },
                    {
                        "id": "serialize",
                        "title": "serialize",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => SerializedRequestContext`}   />\n\nSerializes the RequestContext object into a JSON-compatible simple object.\nThis is useful when you need to send a RequestContext object to another\nprocess, e.g. to pass it to the Job Queue via the <a href='/reference/typescript-api/job-queue/job-queue-service#jobqueueservice'>JobQueueService</a>.\n"
                    },
                    {
                        "id": "copy",
                        "title": "copy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>`}   />\n\nCreates a shallow copy of the RequestContext instance. This means that\nmutations to the copy itself will not affect the original, but deep mutations\n(e.g. copy.channel.code = 'new') *will* also affect the original.\n"
                    },
                    {
                        "id": "req",
                        "title": "req",
                        "content": "\n<MemberInfo kind=\"property\" type={`Request | undefined`}   />\n\nThe raw Express request object.\n"
                    },
                    {
                        "id": "apitype",
                        "title": "apiType",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/request/api-type#apitype'>ApiType</a>`}   />\n\nSignals which API this request was received by, e.g. `admin` or `shop`.\n"
                    },
                    {
                        "id": "channel",
                        "title": "channel",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>`}   />\n\nThe active <a href='/reference/typescript-api/entities/channel#channel'>Channel</a> of this request.\n"
                    },
                    {
                        "id": "channelid",
                        "title": "channelId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "languagecode",
                        "title": "languageCode",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>`}   />\n\n\n"
                    },
                    {
                        "id": "currencycode",
                        "title": "currencyCode",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/currency-code#currencycode'>CurrencyCode</a>`}   />\n\n\n"
                    },
                    {
                        "id": "session",
                        "title": "session",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a> | undefined`}   />\n\n\n"
                    },
                    {
                        "id": "activeuserid",
                        "title": "activeUserId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a> | undefined`}   />\n\n\n"
                    },
                    {
                        "id": "isauthorized",
                        "title": "isAuthorized",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\nTrue if the current session is authorized to access the current resolver method.\n"
                    },
                    {
                        "id": "authorizedasowneronly",
                        "title": "authorizedAsOwnerOnly",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\nTrue if the current anonymous session is only authorized to operate on entities that\nare owned by the current session.\n"
                    },
                    {
                        "id": "translate",
                        "title": "translate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(key: string, variables?: { [k: string]: any }) => string`}   />\n\nTranslate the given i18n key\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "@Query()",
                    "myQuery(@Ctx() ctx: RequestContext) {",
                    "  return this.myService.getData(ctx);",
                    "}",
                    "class RequestContext {",
                    "    empty() => RequestContext;",
                    "    deserialize(ctxObject: SerializedRequestContext) => RequestContext;",
                    "    userHasPermissions(permissions: Permission[]) => boolean;",
                    "    serialize() => SerializedRequestContext;",
                    "    copy() => RequestContext;",
                    "    req: Request | undefined",
                    "    apiType: ApiType",
                    "    channel: Channel",
                    "    channelId: ID",
                    "    languageCode: LanguageCode",
                    "    currencyCode: CurrencyCode",
                    "    session: CachedSession | undefined",
                    "    activeUserId: ID | undefined",
                    "    isAuthorized: boolean",
                    "    authorizedAsOwnerOnly: boolean",
                    "    translate(key: string, variables?: { [k: string]: any }) => string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "requestcontextservice",
        "metadata": {
            "title": "RequestContextService",
            "keywords": [
                "requestcontextservice",
                "create",
                "fromrequest"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/request-context/request-context.service.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "requestcontextservice",
                "title": "RequestContextService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/request-context/request-context.service.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />\n\nCreates new <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> instances.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: {\n         req?: Request;\n         apiType: <a href='/reference/typescript-api/request/api-type#apitype'>ApiType</a>;\n         channelOrToken?: <a href='/reference/typescript-api/entities/channel#channel'>Channel</a> | string;\n         languageCode?: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>;\n         currencyCode?: <a href='/reference/typescript-api/common/currency-code#currencycode'>CurrencyCode</a>;\n         user?: <a href='/reference/typescript-api/entities/user#user'>User</a>;\n         activeOrderId?: <a href='/reference/typescript-api/common/id#id'>ID</a>;\n     }) => Promise&#60;<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>&#62;`}  since=\"1.5.0\"  />\n\nCreates a RequestContext based on the config provided. This can be useful when interacting\nwith services outside the request-response cycle, for example in stand-alone scripts or in\nworker jobs.\n"
                    },
                    {
                        "id": "fromrequest",
                        "title": "fromRequest",
                        "content": "\n<MemberInfo kind=\"method\" type={`(req: Request, info?: GraphQLResolveInfo, requiredPermissions?: <a href='/reference/typescript-api/common/permission#permission'>Permission</a>[], session?: <a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a>) => Promise&#60;<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>&#62;`}   />\n\nCreates a new RequestContext based on an Express request object. This is used internally\nin the API layer by the AuthGuard, and creates the RequestContext which is then passed\nto all resolvers & controllers.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class RequestContextService {",
                    "    create(config: {",
                    "        req?: Request;",
                    "        apiType: ApiType;",
                    "        channelOrToken?: Channel | string;",
                    "        languageCode?: LanguageCode;",
                    "        currencyCode?: CurrencyCode;",
                    "        user?: User;",
                    "        activeOrderId?: ID;",
                    "    }) => Promise<RequestContext>;",
                    "    fromRequest(req: Request, info?: GraphQLResolveInfo, requiredPermissions?: Permission[], session?: CachedSession) => Promise<RequestContext>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "revertlastmigration",
        "metadata": {
            "title": "RevertLastMigration",
            "keywords": [
                "revertlastmigration",
                "userconfig"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/migrate.ts\" sourceLine=\"82\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "revertlastmigration",
                "title": "revertLastMigration",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/migrate.ts\" sourceLine=\"82\" packageName=\"@vendure/core\" />\n\nReverts the last applied database migration. See [TypeORM migration docs](https://typeorm.io/#/migrations)\nfor more information about the underlying migration mechanism.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "userconfig",
                        "title": "userConfig",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`Partial&#60;<a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a>&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "function revertLastMigration(userConfig: Partial<VendureConfig>): void"
                ]
            }
        ]
    },
    {
        "id": "richtexteditorcomponent",
        "metadata": {
            "title": "RichTextEditorComponent",
            "keywords": [
                "richtexteditorcomponent",
                "label",
                "_readonly",
                "onchange",
                "ontouch",
                "constructor",
                "menuelement",
                "ngafterviewinit",
                "ngondestroy",
                "registeronchange",
                "registerontouched",
                "setdisabledstate",
                "writevalue"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/rich-text-editor/rich-text-editor.component.ts\" sourceLine=\"32\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "richtexteditorcomponent",
                "title": "RichTextEditorComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/rich-text-editor/rich-text-editor.component.ts\" sourceLine=\"32\" packageName=\"@vendure/admin-ui\" />\n\nA rich text (HTML) editor based on Prosemirror (https://prosemirror.net/)\n\n*Example*\n\n\n* Implements: <code>ControlValueAccessor</code>, <code>AfterViewInit</code>, <code>OnDestroy</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "label",
                        "title": "label",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "_readonly",
                        "title": "_readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "onchange",
                        "title": "onChange",
                        "content": "\n<MemberInfo kind=\"property\" type={`(val: any) =&#62; void`}   />\n\n\n"
                    },
                    {
                        "id": "ontouch",
                        "title": "onTouch",
                        "content": "\n<MemberInfo kind=\"property\" type={`() =&#62; void`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(changeDetector: ChangeDetectorRef, prosemirrorService: ProsemirrorService, viewContainerRef: ViewContainerRef, contextMenuService: ContextMenuService) => RichTextEditorComponent`}   />\n\n\n"
                    },
                    {
                        "id": "menuelement",
                        "title": "menuElement",
                        "content": "\n<MemberInfo kind=\"property\" type={`HTMLDivElement | null`}   />\n\n\n"
                    },
                    {
                        "id": "ngafterviewinit",
                        "title": "ngAfterViewInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "ngondestroy",
                        "title": "ngOnDestroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "registeronchange",
                        "title": "registerOnChange",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fn: any) => `}   />\n\n\n"
                    },
                    {
                        "id": "registerontouched",
                        "title": "registerOnTouched",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fn: any) => `}   />\n\n\n"
                    },
                    {
                        "id": "setdisabledstate",
                        "title": "setDisabledState",
                        "content": "\n<MemberInfo kind=\"method\" type={`(isDisabled: boolean) => `}   />\n\n\n"
                    },
                    {
                        "id": "writevalue",
                        "title": "writeValue",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: any) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "<vdr-rich-text-editor",
                    "    [(ngModel)]=\"description\"",
                    "    label=\"Description\"",
                    "></vdr-rich-text-editor>",
                    "class RichTextEditorComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {",
                    "    @Input() label: string;",
                    "    @HostBinding('class.readonly')",
                    "    _readonly = false;",
                    "    onChange: (val: any) => void;",
                    "    onTouch: () => void;",
                    "    constructor(changeDetector: ChangeDetectorRef, prosemirrorService: ProsemirrorService, viewContainerRef: ViewContainerRef, contextMenuService: ContextMenuService)",
                    "    menuElement: HTMLDivElement | null",
                    "    ngAfterViewInit() => ;",
                    "    ngOnDestroy() => ;",
                    "    registerOnChange(fn: any) => ;",
                    "    registerOnTouched(fn: any) => ;",
                    "    setDisabledState(isDisabled: boolean) => ;",
                    "    writeValue(value: any) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "role",
        "metadata": {
            "title": "Role",
            "keywords": [
                "role",
                "constructor",
                "code",
                "description",
                "permissions",
                "channels"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/role/role.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "role",
                "title": "Role",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/role/role.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />\n\nA Role represents a collection of permissions which determine the authorization\nlevel of a <a href='/reference/typescript-api/entities/user#user'>User</a> on a given set of <a href='/reference/typescript-api/entities/channel#channel'>Channel</a>s.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/role#role'>Role</a>&#62;) => Role`}   />\n\n\n"
                    },
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "description",
                        "title": "description",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "permissions",
                        "title": "permissions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/permission#permission'>Permission</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Role extends VendureEntity implements ChannelAware {",
                    "    constructor(input?: DeepPartial<Role>)",
                    "    @Column() code: string;",
                    "    @Column() description: string;",
                    "    @Column('simple-array') permissions: Permission[];",
                    "    @ManyToMany(type => Channel)",
                    "    @JoinTable()",
                    "    channels: Channel[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "roleservice",
        "metadata": {
            "title": "RoleService",
            "keywords": [
                "roleservice",
                "constructor",
                "initroles",
                "findall",
                "findone",
                "getchannelsforrole",
                "getsuperadminrole",
                "getcustomerrole",
                "getallpermissions",
                "userhaspermissiononchannel",
                "userhasanypermissionsonchannel",
                "userhasallpermissionsonchannel",
                "create",
                "update",
                "delete",
                "assignroletochannel"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/role.service.ts\" sourceLine=\"51\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "roleservice",
                "title": "RoleService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/role.service.ts\" sourceLine=\"51\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/role#role'>Role</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, channelService: <a href='/reference/typescript-api/services/channel-service#channelservice'>ChannelService</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, configService: ConfigService, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>) => RoleService`}   />\n\n\n"
                    },
                    {
                        "id": "initroles",
                        "title": "initRoles",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/role#role'>Role</a>&#62;, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/role#role'>Role</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/role#role'>Role</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, roleId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/role#role'>Role</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/entities/role#role'>Role</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getchannelsforrole",
                        "title": "getChannelsForRole",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, roleId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getsuperadminrole",
                        "title": "getSuperAdminRole",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx?: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;<a href='/reference/typescript-api/entities/role#role'>Role</a>&#62;`}   />\n\nReturns the special SuperAdmin Role, which always exists in Vendure.\n"
                    },
                    {
                        "id": "getcustomerrole",
                        "title": "getCustomerRole",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx?: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;<a href='/reference/typescript-api/entities/role#role'>Role</a>&#62;`}   />\n\nReturns the special Customer Role, which always exists in Vendure.\n"
                    },
                    {
                        "id": "getallpermissions",
                        "title": "getAllPermissions",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => string[]`}   />\n\nReturns all the valid Permission values\n"
                    },
                    {
                        "id": "userhaspermissiononchannel",
                        "title": "userHasPermissionOnChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, channelId: <a href='/reference/typescript-api/common/id#id'>ID</a>, permission: <a href='/reference/typescript-api/common/permission#permission'>Permission</a>) => Promise&#60;boolean&#62;`}   />\n\nReturns true if the User has the specified permission on that Channel\n"
                    },
                    {
                        "id": "userhasanypermissionsonchannel",
                        "title": "userHasAnyPermissionsOnChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, channelId: <a href='/reference/typescript-api/common/id#id'>ID</a>, permissions: <a href='/reference/typescript-api/common/permission#permission'>Permission</a>[]) => Promise&#60;boolean&#62;`}   />\n\nReturns true if the User has any of the specified permissions on that Channel\n"
                    },
                    {
                        "id": "userhasallpermissionsonchannel",
                        "title": "userHasAllPermissionsOnChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, channelId: <a href='/reference/typescript-api/common/id#id'>ID</a>, permissions: <a href='/reference/typescript-api/common/permission#permission'>Permission</a>[]) => Promise&#60;boolean&#62;`}   />\n\nReturns true if the User has all the specified permissions on that Channel\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateRoleInput) => Promise&#60;<a href='/reference/typescript-api/entities/role#role'>Role</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateRoleInput) => Promise&#60;<a href='/reference/typescript-api/entities/role#role'>Role</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "assignroletochannel",
                        "title": "assignRoleToChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, roleId: <a href='/reference/typescript-api/common/id#id'>ID</a>, channelId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class RoleService {",
                    "    constructor(connection: TransactionalConnection, channelService: ChannelService, listQueryBuilder: ListQueryBuilder, configService: ConfigService, eventBus: EventBus)",
                    "    initRoles() => ;",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<Role>, relations?: RelationPaths<Role>) => Promise<PaginatedList<Role>>;",
                    "    findOne(ctx: RequestContext, roleId: ID, relations?: RelationPaths<Role>) => Promise<Role | undefined>;",
                    "    getChannelsForRole(ctx: RequestContext, roleId: ID) => Promise<Channel[]>;",
                    "    getSuperAdminRole(ctx?: RequestContext) => Promise<Role>;",
                    "    getCustomerRole(ctx?: RequestContext) => Promise<Role>;",
                    "    getAllPermissions() => string[];",
                    "    userHasPermissionOnChannel(ctx: RequestContext, channelId: ID, permission: Permission) => Promise<boolean>;",
                    "    userHasAnyPermissionsOnChannel(ctx: RequestContext, channelId: ID, permissions: Permission[]) => Promise<boolean>;",
                    "    userHasAllPermissionsOnChannel(ctx: RequestContext, channelId: ID, permissions: Permission[]) => Promise<boolean>;",
                    "    create(ctx: RequestContext, input: CreateRoleInput) => Promise<Role>;",
                    "    update(ctx: RequestContext, input: UpdateRoleInput) => Promise<Role>;",
                    "    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "    assignRoleToChannel(ctx: RequestContext, roleId: ID, channelId: ID) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "roundmoney",
        "metadata": {
            "title": "RoundMoney",
            "keywords": [
                "roundmoney",
                "value",
                "quantity"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/round-money.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "roundmoney",
                "title": "roundMoney",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/round-money.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nRounds a monetary value according to the configured <a href='/reference/typescript-api/money/money-strategy#moneystrategy'>MoneyStrategy</a>.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "value",
                        "title": "value",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`number`} />\n\n"
                    },
                    {
                        "id": "quantity",
                        "title": "quantity",
                        "content": "\n<MemberInfo kind=\"parameter\" type={``} />\n\n\n"
                    }
                ],
                "code": [
                    "function roundMoney(value: number, quantity:  = 1): number"
                ]
            }
        ]
    },
    {
        "id": "routerlinkdefinition",
        "metadata": {
            "title": "RouterLinkDefinition",
            "keywords": [
                "routerlinkdefinition"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"154\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "routerlinkdefinition",
                "title": "RouterLinkDefinition",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/nav-builder/nav-builder-types.ts\" sourceLine=\"154\" packageName=\"@vendure/admin-ui\" />\n\nA function which returns the router link for an <a href='/reference/admin-ui-api/action-bar/action-bar-item#actionbaritem'>ActionBarItem</a> or <a href='/reference/admin-ui-api/nav-menu/nav-menu-item#navmenuitem'>NavMenuItem</a>.\n\n\n",
                "subsections": [],
                "code": [
                    "type RouterLinkDefinition = ((route: ActivatedRoute, context: ActionBarContext) => any[]) | any[]"
                ]
            }
        ]
    },
    {
        "id": "routes",
        "metadata": {
            "title": "Routes",
            "keywords": [],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; import DocCardList from '@theme/DocCardList';"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "runmigrations",
        "metadata": {
            "title": "RunMigrations",
            "keywords": [
                "runmigrations",
                "userconfig"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/migrate.ts\" sourceLine=\"40\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "runmigrations",
                "title": "runMigrations",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/migrate.ts\" sourceLine=\"40\" packageName=\"@vendure/core\" />\n\nRuns any pending database migrations. See [TypeORM migration docs](https://typeorm.io/#/migrations)\nfor more information about the underlying migration mechanism.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "userconfig",
                        "title": "userConfig",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`Partial&#60;<a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a>&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "function runMigrations(userConfig: Partial<VendureConfig>): void"
                ]
            }
        ]
    },
    {
        "id": "runtimevendureconfig",
        "metadata": {
            "title": "RuntimeVendureConfig",
            "keywords": [
                "runtimevendureconfig",
                "apioptions",
                "assetoptions",
                "authoptions",
                "catalogoptions",
                "customfields",
                "entityoptions",
                "importexportoptions",
                "jobqueueoptions",
                "orderoptions",
                "promotionoptions",
                "shippingoptions",
                "taxoptions",
                "systemoptions"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"1143\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "runtimevendureconfig",
                "title": "RuntimeVendureConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"1143\" packageName=\"@vendure/core\" />\n\nThis interface represents the VendureConfig object available at run-time, i.e. the user-supplied\nconfig values have been merged with the <a href='/reference/typescript-api/configuration/default-config#defaultconfig'>defaultConfig</a> values.\n\n* Extends: <code>Required&#60;<a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a>&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "apioptions",
                        "title": "apiOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Required&#60;<a href='/reference/typescript-api/configuration/api-options#apioptions'>ApiOptions</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "assetoptions",
                        "title": "assetOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Required&#60;<a href='/reference/typescript-api/assets/asset-options#assetoptions'>AssetOptions</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "authoptions",
                        "title": "authOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Required&#60;<a href='/reference/typescript-api/auth/auth-options#authoptions'>AuthOptions</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "catalogoptions",
                        "title": "catalogOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Required&#60;<a href='/reference/typescript-api/products-stock/catalog-options#catalogoptions'>CatalogOptions</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`Required&#60;<a href='/reference/typescript-api/custom-fields/#customfields'>CustomFields</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "entityoptions",
                        "title": "entityOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Required&#60;Omit&#60;<a href='/reference/typescript-api/configuration/entity-options#entityoptions'>EntityOptions</a>, 'entityIdStrategy'&#62;&#62; &#38; <a href='/reference/typescript-api/configuration/entity-options#entityoptions'>EntityOptions</a>`}   />\n\n\n"
                    },
                    {
                        "id": "importexportoptions",
                        "title": "importExportOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Required&#60;<a href='/reference/typescript-api/import-export/import-export-options#importexportoptions'>ImportExportOptions</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "jobqueueoptions",
                        "title": "jobQueueOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Required&#60;<a href='/reference/typescript-api/job-queue/job-queue-options#jobqueueoptions'>JobQueueOptions</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "orderoptions",
                        "title": "orderOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Required&#60;<a href='/reference/typescript-api/orders/order-options#orderoptions'>OrderOptions</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "promotionoptions",
                        "title": "promotionOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Required&#60;<a href='/reference/typescript-api/promotions/promotion-options#promotionoptions'>PromotionOptions</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "shippingoptions",
                        "title": "shippingOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Required&#60;<a href='/reference/typescript-api/shipping/shipping-options#shippingoptions'>ShippingOptions</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "taxoptions",
                        "title": "taxOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Required&#60;<a href='/reference/typescript-api/tax/tax-options#taxoptions'>TaxOptions</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "systemoptions",
                        "title": "systemOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Required&#60;<a href='/reference/typescript-api/configuration/system-options#systemoptions'>SystemOptions</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface RuntimeVendureConfig extends Required<VendureConfig> {",
                    "    apiOptions: Required<ApiOptions>;",
                    "    assetOptions: Required<AssetOptions>;",
                    "    authOptions: Required<AuthOptions>;",
                    "    catalogOptions: Required<CatalogOptions>;",
                    "    customFields: Required<CustomFields>;",
                    "    entityOptions: Required<Omit<EntityOptions, 'entityIdStrategy'>> & EntityOptions;",
                    "    importExportOptions: Required<ImportExportOptions>;",
                    "    jobQueueOptions: Required<JobQueueOptions>;",
                    "    orderOptions: Required<OrderOptions>;",
                    "    promotionOptions: Required<PromotionOptions>;",
                    "    shippingOptions: Required<ShippingOptions>;",
                    "    taxOptions: Required<TaxOptions>;",
                    "    systemOptions: Required<SystemOptions>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "s3assetstoragestrategy",
        "metadata": {
            "title": "S3AssetStorageStrategy",
            "keywords": [
                "s3assetstoragestrategy",
                "use with s3-compatible services (minio)",
                "constructor",
                "init",
                "destroy",
                "writefilefrombuffer",
                "writefilefromstream",
                "readfiletobuffer",
                "readfiletostream",
                "deletefile",
                "fileexists",
                "s3config",
                "credentials",
                "bucket",
                "natives3configuration",
                "natives3uploadconfiguration",
                "configures3assetstorage",
                "usage with minio"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/asset-server-plugin/src/s3-asset-storage-strategy.ts\" sourceLine=\"155\" packageName=\"@vendure/asset-server-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "s3assetstoragestrategy",
                "title": "S3AssetStorageStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/asset-server-plugin/src/s3-asset-storage-strategy.ts\" sourceLine=\"155\" packageName=\"@vendure/asset-server-plugin\" />\n\nAn <a href='/reference/typescript-api/assets/asset-storage-strategy#assetstoragestrategy'>AssetStorageStrategy</a> which uses [Amazon S3](https://aws.amazon.com/s3/) object storage service.\nTo us this strategy you must first have access to an AWS account.\nSee their [getting started guide](https://aws.amazon.com/s3/getting-started/) for how to get set up.\n\nBefore using this strategy, make sure you have the `@aws-sdk/client-s3` and `@aws-sdk/lib-storage` package installed:\n\n\n**Note:** Rather than instantiating this manually, use the <a href='/reference/core-plugins/asset-server-plugin/s3asset-storage-strategy#configures3assetstorage'>configureS3AssetStorage</a> function.\n\n",
                "subsections": [],
                "code": [
                    "npm install @aws-sdk/client-s3 @aws-sdk/lib-storage"
                ]
            },
            {
                "id": "use-with-s3-compatible-services-(minio)",
                "title": "Use with S3-compatible services (MinIO)",
                "content": "This strategy will also work with any S3-compatible object storage solutions, such as [MinIO](https://min.io/).\nSee the <a href='/reference/core-plugins/asset-server-plugin/s3asset-storage-strategy#configures3assetstorage'>configureS3AssetStorage</a> for an example with MinIO.\n\n* Implements: <code><a href='/reference/typescript-api/assets/asset-storage-strategy#assetstoragestrategy'>AssetStorageStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(s3Config: <a href='/reference/core-plugins/asset-server-plugin/s3asset-storage-strategy#s3config'>S3Config</a>, toAbsoluteUrl: (request: Request, identifier: string) =&#62; string) => S3AssetStorageStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "destroy",
                        "title": "destroy",
                        "content": "\n<MemberInfo kind=\"property\" type={`(() =&#62; void | Promise&#60;void&#62;) | undefined`}   />\n\n\n"
                    },
                    {
                        "id": "writefilefrombuffer",
                        "title": "writeFileFromBuffer",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fileName: string, data: Buffer) => `}   />\n\n\n"
                    },
                    {
                        "id": "writefilefromstream",
                        "title": "writeFileFromStream",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fileName: string, data: Readable) => `}   />\n\n\n"
                    },
                    {
                        "id": "readfiletobuffer",
                        "title": "readFileToBuffer",
                        "content": "\n<MemberInfo kind=\"method\" type={`(identifier: string) => `}   />\n\n\n"
                    },
                    {
                        "id": "readfiletostream",
                        "title": "readFileToStream",
                        "content": "\n<MemberInfo kind=\"method\" type={`(identifier: string) => `}   />\n\n\n"
                    },
                    {
                        "id": "deletefile",
                        "title": "deleteFile",
                        "content": "\n<MemberInfo kind=\"method\" type={`(identifier: string) => `}   />\n\n\n"
                    },
                    {
                        "id": "fileexists",
                        "title": "fileExists",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fileName: string) => `}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class S3AssetStorageStrategy implements AssetStorageStrategy {",
                    "    constructor(s3Config: S3Config, toAbsoluteUrl: (request: Request, identifier: string) => string)",
                    "    init() => ;",
                    "    destroy?: (() => void | Promise<void>) | undefined;",
                    "    writeFileFromBuffer(fileName: string, data: Buffer) => ;",
                    "    writeFileFromStream(fileName: string, data: Readable) => ;",
                    "    readFileToBuffer(identifier: string) => ;",
                    "    readFileToStream(identifier: string) => ;",
                    "    deleteFile(identifier: string) => ;",
                    "    fileExists(fileName: string) => ;",
                    "}"
                ]
            },
            {
                "id": "s3config",
                "title": "S3Config",
                "content": "\n<GenerationInfo sourceFile=\"packages/asset-server-plugin/src/s3-asset-storage-strategy.ts\" sourceLine=\"19\" packageName=\"@vendure/asset-server-plugin\" />\n\nConfiguration for connecting to AWS S3.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "credentials",
                        "title": "credentials",
                        "content": "\n<MemberInfo kind=\"property\" type={`AwsCredentialIdentity | AwsCredentialIdentityProvider`}   />\n\nThe credentials used to access your s3 account. You can supply either the access key ID & secret, or you can make use of a\n[shared credentials file](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-shared.html)\nTo use a shared credentials file, import the `fromIni()` function from the \"@aws-sdk/credential-provider-ini\" or \"@aws-sdk/credential-providers\" package and supply\nthe profile name (e.g. `{ profile: 'default' }`) as its argument.\n"
                    },
                    {
                        "id": "bucket",
                        "title": "bucket",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe S3 bucket in which to store the assets. If it does not exist, it will be created on startup.\n"
                    },
                    {
                        "id": "natives3configuration",
                        "title": "nativeS3Configuration",
                        "content": "\n<MemberInfo kind=\"property\" type={`any`}   />\n\nConfiguration object passed directly to the AWS SDK.\nS3.Types.ClientConfiguration can be used after importing aws-sdk.\nUsing type `any` in order to avoid the need to include `aws-sdk` dependency in general.\n"
                    },
                    {
                        "id": "natives3uploadconfiguration",
                        "title": "nativeS3UploadConfiguration",
                        "content": "\n<MemberInfo kind=\"property\" type={`any`}   />\n\nConfiguration object passed directly to the AWS SDK.\nManagedUpload.ManagedUploadOptions can be used after importing aws-sdk.\nUsing type `any` in order to avoid the need to include `aws-sdk` dependency in general.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface S3Config {",
                    "    credentials: AwsCredentialIdentity | AwsCredentialIdentityProvider;",
                    "    bucket: string;",
                    "    nativeS3Configuration?: any;",
                    "    nativeS3UploadConfiguration?: any;",
                    "}"
                ]
            },
            {
                "id": "configures3assetstorage",
                "title": "configureS3AssetStorage",
                "content": "\n<GenerationInfo sourceFile=\"packages/asset-server-plugin/src/s3-asset-storage-strategy.ts\" sourceLine=\"119\" packageName=\"@vendure/asset-server-plugin\" />\n\nReturns a configured instance of the <a href='/reference/core-plugins/asset-server-plugin/s3asset-storage-strategy#s3assetstoragestrategy'>S3AssetStorageStrategy</a> which can then be passed to the <a href='/reference/core-plugins/asset-server-plugin/asset-server-options#assetserveroptions'>AssetServerOptions</a>\n`storageStrategyFactory` property.\n\nBefore using this strategy, make sure you have the `@aws-sdk/client-s3` and `@aws-sdk/lib-storage` package installed:\n\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "npm install @aws-sdk/client-s3 @aws-sdk/lib-storage",
                    "import { AssetServerPlugin, configureS3AssetStorage } from '@vendure/asset-server-plugin';",
                    "import { DefaultAssetNamingStrategy } from '@vendure/core';",
                    "import { fromEnv } from '@aws-sdk/credential-providers';",
                    "",
                    "// ...",
                    "",
                    "plugins: [",
                    "  AssetServerPlugin.init({",
                    "    route: 'assets',",
                    "    assetUploadDir: path.join(__dirname, 'assets'),",
                    "    namingStrategy: new DefaultAssetNamingStrategy(),",
                    "    storageStrategyFactory: configureS3AssetStorage({",
                    "      bucket: 'my-s3-bucket',",
                    "      credentials: fromEnv(), // or any other credential provider",
                    "      nativeS3Configuration: {",
                    "        region: process.env.AWS_REGION,",
                    "      },",
                    "    }),",
                    "}),"
                ]
            },
            {
                "id": "usage-with-minio",
                "title": "Usage with MinIO",
                "content": "\nReference: [How to use AWS SDK for Javascript with MinIO Server](https://docs.min.io/docs/how-to-use-aws-sdk-for-javascript-with-minio-server.html)\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "s3config",
                        "title": "s3Config",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/core-plugins/asset-server-plugin/s3asset-storage-strategy#s3config'>S3Config</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { AssetServerPlugin, configureS3AssetStorage } from '@vendure/asset-server-plugin';",
                    "import { DefaultAssetNamingStrategy } from '@vendure/core';",
                    "",
                    "// ...",
                    "",
                    "plugins: [",
                    "  AssetServerPlugin.init({",
                    "    route: 'assets',",
                    "    assetUploadDir: path.join(__dirname, 'assets'),",
                    "    namingStrategy: new DefaultAssetNamingStrategy(),",
                    "    storageStrategyFactory: configureS3AssetStorage({",
                    "      bucket: 'my-minio-bucket',",
                    "      credentials: {",
                    "        accessKeyId: process.env.MINIO_ACCESS_KEY_ID,",
                    "        secretAccessKey: process.env.MINIO_SECRET_ACCESS_KEY,",
                    "      },",
                    "      nativeS3Configuration: {",
                    "        endpoint: process.env.MINIO_ENDPOINT ?? 'http://localhost:9000',",
                    "        forcePathStyle: true,",
                    "        signatureVersion: 'v4',",
                    "        // The `region` is required by the AWS SDK even when using MinIO,",
                    "        // so we just use a dummy value here.",
                    "        region: 'eu-west-1',",
                    "      },",
                    "    }),",
                    "}),",
                    "function configureS3AssetStorage(s3Config: S3Config): void"
                ]
            }
        ]
    },
    {
        "id": "searchservice",
        "metadata": {
            "title": "SearchService",
            "keywords": [
                "searchservice",
                "adopt",
                "reindex"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/search.service.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "searchservice",
                "title": "SearchService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/search.service.ts\" sourceLine=\"15\" packageName=\"@vendure/core\" />\n\nThis service allows a concrete search service to override its behaviour\nby passing itself to the `adopt()` method.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "adopt",
                        "title": "adopt",
                        "content": "\n<MemberInfo kind=\"method\" type={`(override: Pick&#60;<a href='/reference/typescript-api/services/search-service#searchservice'>SearchService</a>, 'reindex'&#62;) => `}   />\n\nAdopt a concrete search service implementation to pass through the\ncalls to.\n"
                    },
                    {
                        "id": "reindex",
                        "title": "reindex",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class SearchService {",
                    "    adopt(override: Pick<SearchService, 'reindex'>) => ;",
                    "    reindex(ctx: RequestContext) => Promise<Job>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "seller",
        "metadata": {
            "title": "Seller",
            "keywords": [
                "seller",
                "constructor",
                "deletedat",
                "name",
                "customfields"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/seller/seller.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "seller",
                "title": "Seller",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/seller/seller.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />\n\nA Seller represents the person or organization who is selling the goods on a given <a href='/reference/typescript-api/entities/channel#channel'>Channel</a>.\nBy default, a single-channel Vendure installation will have a single default Seller.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#softdeletable'>SoftDeletable</a></code>, <code>HasCustomFields</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/seller#seller'>Seller</a>&#62;) => Seller`}   />\n\n\n"
                    },
                    {
                        "id": "deletedat",
                        "title": "deletedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomSellerFields`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Seller extends VendureEntity implements SoftDeletable, HasCustomFields {",
                    "    constructor(input?: DeepPartial<Seller>)",
                    "    @Column({ type: Date, nullable: true })",
                    "    deletedAt: Date | null;",
                    "    @Column() name: string;",
                    "    @Column(type => CustomSellerFields)",
                    "    customFields: CustomSellerFields;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "sellerservice",
        "metadata": {
            "title": "SellerService",
            "keywords": [
                "sellerservice",
                "constructor",
                "initsellers",
                "findall",
                "findone",
                "create",
                "update",
                "delete"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/seller.service.ts\" sourceLine=\"26\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "sellerservice",
                "title": "SellerService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/seller.service.ts\" sourceLine=\"26\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/seller#seller'>Seller</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, customFieldRelationService: CustomFieldRelationService) => SellerService`}   />\n\n\n"
                    },
                    {
                        "id": "initsellers",
                        "title": "initSellers",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/seller#seller'>Seller</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/seller#seller'>Seller</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, sellerId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/seller#seller'>Seller</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateSellerInput) => `}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateSellerInput) => `}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class SellerService {",
                    "    constructor(connection: TransactionalConnection, listQueryBuilder: ListQueryBuilder, eventBus: EventBus, customFieldRelationService: CustomFieldRelationService)",
                    "    initSellers() => ;",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<Seller>) => Promise<PaginatedList<Seller>>;",
                    "    findOne(ctx: RequestContext, sellerId: ID) => Promise<Seller | undefined>;",
                    "    create(ctx: RequestContext, input: CreateSellerInput) => ;",
                    "    update(ctx: RequestContext, input: UpdateSellerInput) => ;",
                    "    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "sentryplugin",
        "metadata": {
            "title": "SentryPlugin",
            "keywords": [
                "sentryplugin",
                "pre-requisites",
                "installation",
                "configuration",
                "tracing",
                "instrumenting your own code",
                "error test mutation",
                "options",
                "configure",
                "init"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/sentry-plugin/src/sentry-plugin.ts\" sourceLine=\"109\" packageName=\"@vendure/sentry-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "sentryplugin",
                "title": "SentryPlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/sentry-plugin/src/sentry-plugin.ts\" sourceLine=\"109\" packageName=\"@vendure/sentry-plugin\" />\n\nThis plugin integrates the [Sentry](https://sentry.io) error tracking & performance monitoring\nservice with your Vendure server. In addition to capturing errors, it also provides built-in\nsupport for [tracing](https://docs.sentry.io/product/sentry-basics/concepts/tracing/) as well as\nenriching your Sentry events with additional context about the request.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "pre-requisites",
                "title": "Pre-requisites",
                "content": "\nThis plugin depends on access to Sentry, which can be self-hosted or used as a cloud service.\n\nIf using the hosted SaaS option, you must have a Sentry account and a project set up ([sign up here](https://sentry.io/signup/)). When setting up your project,\nselect the \"Node.js\" platform and no framework.\n\nOnce set up, you will be given a [Data Source Name (DSN)](https://docs.sentry.io/product/sentry-basics/concepts/dsn-explainer/)\nwhich you will need to provide to the plugin.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "installation",
                "title": "Installation",
                "content": "\nInstall this plugin as well as the `@sentry/node` package:\n\n\n",
                "subsections": [],
                "code": [
                    "npm install --save @vendure/sentry-plugin @sentry/node"
                ]
            },
            {
                "id": "configuration",
                "title": "Configuration",
                "content": "\nBefore using the plugin, you must configure it with the DSN provided by Sentry:\n\n\n",
                "subsections": [],
                "code": [
                    "import { VendureConfig } from '@vendure/core';",
                    "import { SentryPlugin } from '@vendure/sentry-plugin';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        // ...",
                    "        // highlight-start",
                    "        SentryPlugin.init({",
                    "            dsn: process.env.SENTRY_DSN,",
                    "            // Optional configuration",
                    "            includeErrorTestMutation: true,",
                    "            enableTracing: true,",
                    "            // you can also pass in any of the options from @sentry/node",
                    "            // for instance:",
                    "            tracesSampleRate: 1.0,",
                    "        }),",
                    "        // highlight-end",
                    "    ],",
                    "};"
                ]
            },
            {
                "id": "tracing",
                "title": "Tracing",
                "content": "\nThis plugin includes built-in support for [tracing](https://docs.sentry.io/product/sentry-basics/concepts/tracing/), which allows you to see the performance of your\nGraphQL resolvers in the Sentry dashboard. To enable tracing, set the `enableTracing` option to `true` as shown above.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "instrumenting-your-own-code",
                "title": "Instrumenting your own code",
                "content": "\nYou may want to add your own custom spans to your code. To do so, you can use the `Sentry` object\njust as you would in any Node application. For example:\n\n\n",
                "subsections": [],
                "code": [
                    "import * as Sentry from \"@sentry/node\";",
                    "",
                    "export class MyService {",
                    "    async myMethod() {",
                    "         Sentry.setContext('My Custom Context,{",
                    "             key: 'value',",
                    "         });",
                    "    }",
                    "}"
                ]
            },
            {
                "id": "error-test-mutation",
                "title": "Error test mutation",
                "content": "\nTo test whether your Sentry configuration is working correctly, you can set the `includeErrorTestMutation` option to `true`. This will add a mutation to the Admin API\nwhich will throw an error of the type specified in the `errorType` argument. For example:\n\n\nYou should then be able to see the error in your Sentry dashboard (it may take a couple of minutes to appear).\n\n* Implements: <code>NestModule</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/sentry-plugin/sentry-plugin-options#sentrypluginoptions'>SentryPluginOptions</a>`}   />\n\n\n"
                    },
                    {
                        "id": "configure",
                        "title": "configure",
                        "content": "\n<MemberInfo kind=\"method\" type={`(consumer: MiddlewareConsumer) => any`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/sentry-plugin/sentry-plugin-options#sentrypluginoptions'>SentryPluginOptions</a>) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "mutation CreateTestError {",
                    "    createTestError(errorType: DATABASE_ERROR)",
                    "}",
                    "class SentryPlugin implements NestModule {",
                    "    static options: SentryPluginOptions = {} as any;",
                    "    configure(consumer: MiddlewareConsumer) => any;",
                    "    init(options: SentryPluginOptions) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "sentrypluginoptions",
        "metadata": {
            "title": "SentryPluginOptions",
            "keywords": [
                "sentrypluginoptions",
                "dsn",
                "enabletracing",
                "includeerrortestmutation"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/sentry-plugin/src/types.ts\" sourceLine=\"12\" packageName=\"@vendure/sentry-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "sentrypluginoptions",
                "title": "SentryPluginOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/sentry-plugin/src/types.ts\" sourceLine=\"12\" packageName=\"@vendure/sentry-plugin\" />\n\nConfiguration options for the <a href='/reference/core-plugins/sentry-plugin/#sentryplugin'>SentryPlugin</a>.\n\n* Extends: <code>NodeOptions</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "dsn",
                        "title": "dsn",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe [Data Source Name](https://docs.sentry.io/product/sentry-basics/concepts/dsn-explainer/) for your Sentry instance.\n"
                    },
                    {
                        "id": "enabletracing",
                        "title": "enableTracing",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "includeerrortestmutation",
                        "title": "includeErrorTestMutation",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface SentryPluginOptions extends NodeOptions {",
                    "    dsn: string;",
                    "    enableTracing?: boolean;",
                    "    includeErrorTestMutation?: boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "server-resource-requirements",
        "metadata": {
            "title": "Server resource requirements",
            "keywords": [
                "server resource requirements",
                "ram",
                "cpu",
                "load testing"
            ],
            "description": "The Vendure server and worker process each use around 200-300MB of RAM when idle. This figure will increase under load. The total RAM required by a single instance of the server depends on your project size (the number of products, variants, customers, orders etc.) as well as expected load (the number of concurrent users you expect). As a rule, 512MB per process would be a practical minimum for a smaller project with low expected load. CPU resources are generally measured in \"cores\" or \"vCPUs\" (virtual CPUs) depending on the type of hosting. The exact relationship between vCPUs and physical CPU cores is out of the scope of this guide, but for our purposes we will use \"CPU\" to refer to both physical and virtual CPU resources. Because Node.js is single-threaded, a single instance of the Vendure server or worker will not be able to take advantage of multiple CPUs. For example, if you set up a server instance running with 4 CPUs, the server will only use 1 of those CPUs and the other 3 will be wasted. Therefore, when looking to optimize performance (for example, the number of requests that can be serviced per second), it makes sense to scale horizontally by running multiple instances of the Vendure server. See the [Horizontal Scaling guide](/guides/deployment/horizontal-scaling)."
        },
        "content": "",
        "sections": [
            {
                "id": "server-resource-requirements",
                "title": "Server resource requirements",
                "content": "\n",
                "subsections": [
                    {
                        "id": "ram",
                        "title": "RAM",
                        "content": "\nThe Vendure server and worker process each use around 200-300MB of RAM when idle. This figure will increase under load.\n\nThe total RAM required by a single instance of the server depends on your project size (the number of products, variants, customers, orders etc.) as well as expected load (the number of concurrent users you expect). As a rule, 512MB per process would be a practical minimum for a smaller project with low expected load.\n\n"
                    },
                    {
                        "id": "cpu",
                        "title": "CPU",
                        "content": "\nCPU resources are generally measured in \"cores\" or \"vCPUs\" (virtual CPUs) depending on the type of hosting. The exact relationship between vCPUs and physical CPU cores is out of the scope of this guide, but for our purposes we will use \"CPU\" to refer to both physical and virtual CPU resources.\n\nBecause Node.js is single-threaded, a single instance of the Vendure server or worker will not be able to take advantage of multiple CPUs. For example, if you set up a server instance running with 4 CPUs, the server will only use 1 of those CPUs and the other 3 will be wasted.\n\nTherefore, when looking to optimize performance (for example, the number of requests that can be serviced per second), it makes sense to scale horizontally by running multiple instances of the Vendure server. See the [Horizontal Scaling guide](/guides/deployment/horizontal-scaling).\n\n"
                    }
                ],
                "code": []
            },
            {
                "id": "load-testing",
                "title": "Load testing",
                "content": "\nIt is important to test whether your current server configuration will be able to handle the loads you expect when you go into production. There are numerous tools out there to help you load test your application, such as:\n\n- [k6](https://k6.io/)\n- [Artillery](https://www.artillery.io/)\n- [jMeter](https://jmeter.apache.org/)\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "service-helpers",
        "metadata": {
            "title": "Service Helpers",
            "keywords": [
                "service-helpers"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "services",
        "metadata": {
            "title": "Services",
            "keywords": [
                "services"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "session",
        "metadata": {
            "title": "Session",
            "keywords": [
                "session",
                "token",
                "expires",
                "invalidated",
                "activeorderid",
                "activeorder",
                "activechannelid",
                "activechannel"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/session/session.entity.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "session",
                "title": "Session",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/session/session.entity.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" />\n\nA Session is created when a user makes a request to restricted API operations. A Session can be an <a href='/reference/typescript-api/entities/anonymous-session#anonymoussession'>AnonymousSession</a>\nin the case of un-authenticated users, otherwise it is an <a href='/reference/typescript-api/entities/authenticated-session#authenticatedsession'>AuthenticatedSession</a>.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "token",
                        "title": "token",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "expires",
                        "title": "expires",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date`}   />\n\n\n"
                    },
                    {
                        "id": "invalidated",
                        "title": "invalidated",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "activeorderid",
                        "title": "activeOrderId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "activeorder",
                        "title": "activeOrder",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a> | null`}   />\n\n\n"
                    },
                    {
                        "id": "activechannelid",
                        "title": "activeChannelId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "activechannel",
                        "title": "activeChannel",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a> | null`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Session extends VendureEntity {",
                    "    @Index({ unique: true })",
                    "    @Column()",
                    "    token: string;",
                    "    @Column() expires: Date;",
                    "    @Column() invalidated: boolean;",
                    "    @EntityId({ nullable: true })",
                    "    activeOrderId?: ID;",
                    "    @Index()",
                    "    @ManyToOne(type => Order)",
                    "    activeOrder: Order | null;",
                    "    @EntityId({ nullable: true })",
                    "    activeChannelId?: ID;",
                    "    @Index()",
                    "    @ManyToOne(type => Channel)",
                    "    activeChannel: Channel | null;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "sessioncachestrategy",
        "metadata": {
            "title": "SessionCacheStrategy",
            "keywords": [
                "sessioncachestrategy",
                "set",
                "get",
                "delete",
                "clear",
                "cachedsessionuser",
                "id",
                "identifier",
                "verified",
                "channelpermissions",
                "cachedsession",
                "cacheexpiry",
                "token",
                "expires",
                "activeorderid",
                "authenticationstrategy",
                "user",
                "activechannelid"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/session-cache/session-cache-strategy.ts\" sourceLine=\"155\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "sessioncachestrategy",
                "title": "SessionCacheStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/session-cache/session-cache-strategy.ts\" sourceLine=\"155\" packageName=\"@vendure/core\" />\n\nThis strategy defines how sessions get cached. Since most requests will need the Session\nobject for permissions data, it can become a bottleneck to go to the database and do a multi-join\nSQL query each time. Therefore, we cache the session data only perform the SQL query once and upon\ninvalidation of the cache.\n\nThe Vendure default is to use a the <a href='/reference/typescript-api/auth/in-memory-session-cache-strategy#inmemorysessioncachestrategy'>InMemorySessionCacheStrategy</a>, which is fast and suitable for\nsingle-instance deployments. However, for multi-instance deployments (horizontally scaled, serverless etc.),\nyou will need to define a custom strategy that stores the session cache in a shared data store, such as in the\nDB or in Redis.\n\n:::info\n\nThis is configured via the `authOptions.sessionCacheStrategy` property of\nyour VendureConfig.\n\n:::\n\nHere's an example implementation using Redis. To use this, you need to add the\n[ioredis package](https://www.npmjs.com/package/ioredis) as a dependency.\n\n*Example*\n\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "set",
                        "title": "set",
                        "content": "\n<MemberInfo kind=\"method\" type={`(session: <a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a>) => void | Promise&#60;void&#62;`}   />\n\nStore the session in the cache. When caching a session, the data\nshould not be modified apart from performing any transforms needed to\nget it into a state to be stored, e.g. JSON.stringify().\n"
                    },
                    {
                        "id": "get",
                        "title": "get",
                        "content": "\n<MemberInfo kind=\"method\" type={`(sessionToken: string) => <a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a> | undefined | Promise&#60;<a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a> | undefined&#62;`}   />\n\nRetrieve the session from the cache\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(sessionToken: string) => void | Promise&#60;void&#62;`}   />\n\nDelete a session from the cache\n"
                    },
                    {
                        "id": "clear",
                        "title": "clear",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => void | Promise&#60;void&#62;`}   />\n\nClear the entire cache\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "import { CachedSession, Logger, SessionCacheStrategy, VendurePlugin } from '@vendure/core';",
                    "import { Redis, RedisOptions } from 'ioredis';",
                    "",
                    "export interface RedisSessionCachePluginOptions {",
                    "  namespace?: string;",
                    "  redisOptions?: RedisOptions;",
                    "}",
                    "const loggerCtx = 'RedisSessionCacheStrategy';",
                    "const DEFAULT_NAMESPACE = 'vendure-session-cache';",
                    "const DEFAULT_TTL = 86400;",
                    "",
                    "export class RedisSessionCacheStrategy implements SessionCacheStrategy {",
                    "  private client: Redis;",
                    "  constructor(private options: RedisSessionCachePluginOptions) {}",
                    "",
                    "  init() {",
                    "    this.client = new Redis(this.options.redisOptions as RedisOptions);",
                    "    this.client.on('error', err => Logger.error(err.message, loggerCtx, err.stack));",
                    "  }",
                    "",
                    "  async destroy() {",
                    "    await this.client.quit();",
                    "  }",
                    "",
                    "  async get(sessionToken: string): Promise<CachedSession | undefined> {",
                    "    try {",
                    "      const retrieved = await this.client.get(this.namespace(sessionToken));",
                    "      if (retrieved) {",
                    "        try {",
                    "          return JSON.parse(retrieved);",
                    "        } catch (e: any) {",
                    "          Logger.error(`Could not parse cached session data: ${e.message}`, loggerCtx);",
                    "        }",
                    "      }",
                    "    } catch (e: any) {",
                    "      Logger.error(`Could not get cached session: ${e.message}`, loggerCtx);",
                    "    }",
                    "  }",
                    "",
                    "  async set(session: CachedSession) {",
                    "    try {",
                    "      await this.client.set(this.namespace(session.token), JSON.stringify(session), 'EX', DEFAULT_TTL);",
                    "    } catch (e: any) {",
                    "      Logger.error(`Could not set cached session: ${e.message}`, loggerCtx);",
                    "    }",
                    "  }",
                    "",
                    "  async delete(sessionToken: string) {",
                    "    try {",
                    "      await this.client.del(this.namespace(sessionToken));",
                    "    } catch (e: any) {",
                    "      Logger.error(`Could not delete cached session: ${e.message}`, loggerCtx);",
                    "    }",
                    "  }",
                    "",
                    "  clear() {",
                    "    // not implemented",
                    "  }",
                    "",
                    "  private namespace(key: string) {",
                    "    return `${this.options.namespace ?? DEFAULT_NAMESPACE}:${key}`;",
                    "  }",
                    "}",
                    "",
                    "@VendurePlugin({",
                    "  configuration: config => {",
                    "    config.authOptions.sessionCacheStrategy = new RedisSessionCacheStrategy(",
                    "      RedisSessionCachePlugin.options,",
                    "    );",
                    "    return config;",
                    "  },",
                    "})",
                    "export class RedisSessionCachePlugin {",
                    "  static options: RedisSessionCachePluginOptions;",
                    "  static init(options: RedisSessionCachePluginOptions) {",
                    "    this.options = options;",
                    "    return this;",
                    "  }",
                    "}",
                    "interface SessionCacheStrategy extends InjectableStrategy {",
                    "    set(session: CachedSession): void | Promise<void>;",
                    "    get(sessionToken: string): CachedSession | undefined | Promise<CachedSession | undefined>;",
                    "    delete(sessionToken: string): void | Promise<void>;",
                    "    clear(): void | Promise<void>;",
                    "}"
                ]
            },
            {
                "id": "cachedsessionuser",
                "title": "CachedSessionUser",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/session-cache/session-cache-strategy.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nA simplified representation of the User associated with the\ncurrent Session.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "identifier",
                        "title": "identifier",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "verified",
                        "title": "verified",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "channelpermissions",
                        "title": "channelPermissions",
                        "content": "\n<MemberInfo kind=\"property\" type={`UserChannelPermissions[]`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "type CachedSessionUser = {",
                    "    id: ID;",
                    "    identifier: string;",
                    "    verified: boolean;",
                    "    channelPermissions: UserChannelPermissions[];",
                    "}"
                ]
            },
            {
                "id": "cachedsession",
                "title": "CachedSession",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/session-cache/session-cache-strategy.ts\" sourceLine=\"29\" packageName=\"@vendure/core\" />\n\nA simplified representation of a Session which is easy to\nstore.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "cacheexpiry",
                        "title": "cacheExpiry",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe timestamp after which this cache entry is considered stale and\na fresh copy of the data will be set. Based on the `sessionCacheTTL`\noption.\n"
                    },
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "token",
                        "title": "token",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "expires",
                        "title": "expires",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date`}   />\n\n\n"
                    },
                    {
                        "id": "activeorderid",
                        "title": "activeOrderId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "authenticationstrategy",
                        "title": "authenticationStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "user",
                        "title": "user",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/auth/session-cache-strategy#cachedsessionuser'>CachedSessionUser</a>`}   />\n\n\n"
                    },
                    {
                        "id": "activechannelid",
                        "title": "activeChannelId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "type CachedSession = {",
                    "    cacheExpiry: number;",
                    "    id: ID;",
                    "    token: string;",
                    "    expires: Date;",
                    "    activeOrderId?: ID;",
                    "    authenticationStrategy?: string;",
                    "    user?: CachedSessionUser;",
                    "    activeChannelId?: ID;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "sessionservice",
        "metadata": {
            "title": "SessionService",
            "keywords": [
                "sessionservice",
                "constructor",
                "createnewauthenticatedsession",
                "createanonymoussession",
                "getsessionfromtoken",
                "serializesession",
                "setactiveorder",
                "unsetactiveorder",
                "setactivechannel",
                "deletesessionsbyuser",
                "deletesessionsbyactiveorderid"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/session.service.ts\" sourceLine=\"28\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "sessionservice",
                "title": "SessionService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/session.service.ts\" sourceLine=\"28\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/session#session'>Session</a> entities.\n\n* Implements: <code>EntitySubscriberInterface</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, orderService: <a href='/reference/typescript-api/services/order-service#orderservice'>OrderService</a>) => SessionService`}   />\n\n\n"
                    },
                    {
                        "id": "createnewauthenticatedsession",
                        "title": "createNewAuthenticatedSession",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>, authenticationStrategyName: string) => Promise&#60;<a href='/reference/typescript-api/entities/authenticated-session#authenticatedsession'>AuthenticatedSession</a>&#62;`}   />\n\nCreates a new <a href='/reference/typescript-api/entities/authenticated-session#authenticatedsession'>AuthenticatedSession</a>. To be used after successful authentication.\n"
                    },
                    {
                        "id": "createanonymoussession",
                        "title": "createAnonymousSession",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => Promise&#60;<a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a>&#62;`}   />\n\nCreate an <a href='/reference/typescript-api/entities/anonymous-session#anonymoussession'>AnonymousSession</a> and caches it using the configured <a href='/reference/typescript-api/auth/session-cache-strategy#sessioncachestrategy'>SessionCacheStrategy</a>,\nand returns the cached session object.\n"
                    },
                    {
                        "id": "getsessionfromtoken",
                        "title": "getSessionFromToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`(sessionToken: string) => Promise&#60;<a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a> | undefined&#62;`}   />\n\nReturns the cached session object matching the given session token.\n"
                    },
                    {
                        "id": "serializesession",
                        "title": "serializeSession",
                        "content": "\n<MemberInfo kind=\"method\" type={`(session: <a href='/reference/typescript-api/entities/authenticated-session#authenticatedsession'>AuthenticatedSession</a> | <a href='/reference/typescript-api/entities/anonymous-session#anonymoussession'>AnonymousSession</a>) => <a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a>`}   />\n\nSerializes a <a href='/reference/typescript-api/entities/session#session'>Session</a> instance into a simplified plain object suitable for caching.\n"
                    },
                    {
                        "id": "setactiveorder",
                        "title": "setActiveOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, serializedSession: <a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;<a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a>&#62;`}   />\n\nSets the `activeOrder` on the given cached session object and updates the cache.\n"
                    },
                    {
                        "id": "unsetactiveorder",
                        "title": "unsetActiveOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, serializedSession: <a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a>) => Promise&#60;<a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a>&#62;`}   />\n\nClears the `activeOrder` on the given cached session object and updates the cache.\n"
                    },
                    {
                        "id": "setactivechannel",
                        "title": "setActiveChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(serializedSession: <a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a>, channel: <a href='/reference/typescript-api/entities/channel#channel'>Channel</a>) => Promise&#60;<a href='/reference/typescript-api/auth/session-cache-strategy#cachedsession'>CachedSession</a>&#62;`}   />\n\nSets the `activeChannel` on the given cached session object and updates the cache.\n"
                    },
                    {
                        "id": "deletesessionsbyuser",
                        "title": "deleteSessionsByUser",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>) => Promise&#60;void&#62;`}   />\n\nDeletes all existing sessions for the given user.\n"
                    },
                    {
                        "id": "deletesessionsbyactiveorderid",
                        "title": "deleteSessionsByActiveOrderId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, activeOrderId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;void&#62;`}   />\n\nDeletes all existing sessions with the given activeOrder.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class SessionService implements EntitySubscriberInterface {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, orderService: OrderService)",
                    "    createNewAuthenticatedSession(ctx: RequestContext, user: User, authenticationStrategyName: string) => Promise<AuthenticatedSession>;",
                    "    createAnonymousSession() => Promise<CachedSession>;",
                    "    getSessionFromToken(sessionToken: string) => Promise<CachedSession | undefined>;",
                    "    serializeSession(session: AuthenticatedSession | AnonymousSession) => CachedSession;",
                    "    setActiveOrder(ctx: RequestContext, serializedSession: CachedSession, order: Order) => Promise<CachedSession>;",
                    "    unsetActiveOrder(ctx: RequestContext, serializedSession: CachedSession) => Promise<CachedSession>;",
                    "    setActiveChannel(serializedSession: CachedSession, channel: Channel) => Promise<CachedSession>;",
                    "    deleteSessionsByUser(ctx: RequestContext, user: User) => Promise<void>;",
                    "    deleteSessionsByActiveOrderId(ctx: RequestContext, activeOrderId: ID) => Promise<void>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "setdashboardwidgetlayout",
        "metadata": {
            "title": "SetDashboardWidgetLayout",
            "keywords": [
                "setdashboardwidgetlayout",
                "layoutdef"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-dashboard-widget.ts\" sourceLine=\"33\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "setdashboardwidgetlayout",
                "title": "setDashboardWidgetLayout",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/extension/register-dashboard-widget.ts\" sourceLine=\"33\" packageName=\"@vendure/admin-ui\" />\n\nSets the default widget layout for the Admin UI dashboard.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "layoutdef",
                        "title": "layoutDef",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/admin-ui-api/dashboard-widgets/widget-layout-definition#widgetlayoutdefinition'>WidgetLayoutDefinition</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "function setDashboardWidgetLayout(layoutDef: WidgetLayoutDefinition): FactoryProvider"
                ]
            }
        ]
    },
    {
        "id": "settings",
        "metadata": {
            "title": "Settings",
            "keywords": [],
            "description": ""
        },
        "content": "",
        "sections": []
    },
    {
        "id": "sharpassetpreviewstrategy",
        "metadata": {
            "title": "SharpAssetPreviewStrategy",
            "keywords": [
                "sharpassetpreviewstrategy",
                "constructor",
                "generatepreviewimage",
                "sharpassetpreviewconfig",
                "maxheight",
                "maxwidth",
                "jpegoptions",
                "pngoptions",
                "webpoptions",
                "gifoptions",
                "avifoptions"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/asset-server-plugin/src/sharp-asset-preview-strategy.ts\" sourceLine=\"95\" packageName=\"@vendure/asset-server-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "sharpassetpreviewstrategy",
                "title": "SharpAssetPreviewStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/asset-server-plugin/src/sharp-asset-preview-strategy.ts\" sourceLine=\"95\" packageName=\"@vendure/asset-server-plugin\" />\n\nThis <a href='/reference/typescript-api/assets/asset-preview-strategy#assetpreviewstrategy'>AssetPreviewStrategy</a> uses the [Sharp library](https://sharp.pixelplumbing.com/) to generate\npreview images of uploaded binary files. For non-image binaries, a generic \"file\" icon with the mime type\noverlay will be generated.\n\nBy default, this strategy will produce previews up to maximum dimensions of 1600 x 1600 pixels. The created\npreview images will match the input format - so a source file in jpeg format will output a jpeg preview,\na webp source file will output a webp preview, and so on.\n\nThe settings for the outputs will default to Sharp's defaults (https://sharp.pixelplumbing.com/api-output).\nHowever, it is possible to pass your own configurations to control the output of each format:\n\n\n* Implements: <code><a href='/reference/typescript-api/assets/asset-preview-strategy#assetpreviewstrategy'>AssetPreviewStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config?: <a href='/reference/core-plugins/asset-server-plugin/sharp-asset-preview-strategy#sharpassetpreviewconfig'>SharpAssetPreviewConfig</a>) => SharpAssetPreviewStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "generatepreviewimage",
                        "title": "generatePreviewImage",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, mimeType: string, data: Buffer) => Promise&#60;Buffer&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "AssetServerPlugin.init({",
                    "  previewStrategy: new SharpAssetPreviewStrategy({",
                    "    jpegOptions: { quality: 95 },",
                    "    webpOptions: { quality: 95 },",
                    "  }),",
                    "}),",
                    "class SharpAssetPreviewStrategy implements AssetPreviewStrategy {",
                    "    constructor(config?: SharpAssetPreviewConfig)",
                    "    generatePreviewImage(ctx: RequestContext, mimeType: string, data: Buffer) => Promise<Buffer>;",
                    "}"
                ]
            },
            {
                "id": "sharpassetpreviewconfig",
                "title": "SharpAssetPreviewConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/asset-server-plugin/src/sharp-asset-preview-strategy.ts\" sourceLine=\"17\" packageName=\"@vendure/asset-server-plugin\" />\n\nThis <a href='/reference/typescript-api/assets/asset-preview-strategy#assetpreviewstrategy'>AssetPreviewStrategy</a> uses the [Sharp library](https://sharp.pixelplumbing.com/) to generate\npreview images of uploaded binary files. For non-image binaries, a generic \"file\" icon with the mime type\noverlay will be generated.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "maxheight",
                        "title": "maxHeight",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"1600\"   />\n\nThe max height in pixels of a generated preview image.\n"
                    },
                    {
                        "id": "maxwidth",
                        "title": "maxWidth",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"1600\"   />\n\nThe max width in pixels of a generated preview image.\n"
                    },
                    {
                        "id": "jpegoptions",
                        "title": "jpegOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`sharp.JpegOptions`}  since=\"1.7.0\"  />\n\nSet Sharp's options for encoding jpeg files: https://sharp.pixelplumbing.com/api-output#jpeg\n"
                    },
                    {
                        "id": "pngoptions",
                        "title": "pngOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`sharp.PngOptions`}  since=\"1.7.0\"  />\n\nSet Sharp's options for encoding png files: https://sharp.pixelplumbing.com/api-output#png\n"
                    },
                    {
                        "id": "webpoptions",
                        "title": "webpOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`sharp.WebpOptions`}  since=\"1.7.0\"  />\n\nSet Sharp's options for encoding webp files: https://sharp.pixelplumbing.com/api-output#webp\n"
                    },
                    {
                        "id": "gifoptions",
                        "title": "gifOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`sharp.GifOptions`}  since=\"1.7.0\"  />\n\nSet Sharp's options for encoding gif files: https://sharp.pixelplumbing.com/api-output#gif\n"
                    },
                    {
                        "id": "avifoptions",
                        "title": "avifOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`sharp.AvifOptions`}  since=\"1.7.0\"  />\n\nSet Sharp's options for encoding avif files: https://sharp.pixelplumbing.com/api-output#avif\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface SharpAssetPreviewConfig {",
                    "    maxHeight?: number;",
                    "    maxWidth?: number;",
                    "    jpegOptions?: sharp.JpegOptions;",
                    "    pngOptions?: sharp.PngOptions;",
                    "    webpOptions?: sharp.WebpOptions;",
                    "    gifOptions?: sharp.GifOptions;",
                    "    avifOptions?: sharp.AvifOptions;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "shipping-&-fulfillment",
        "metadata": {
            "title": "Shipping & Fulfillment",
            "keywords": [
                "creating a custom checker",
                "creating a custom calculator",
                "fulfillments",
                "fulfillmenthandlers",
                "fulfillment state machine"
            ],
            "description": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; Shipping in Vendure is handled by [ShippingMethods](/reference/typescript-api/entities/shipping-method/). A ShippingMethod is composed of a **checker** and a **calculator**. * The [`ShippingEligibilityChecker`](/reference/typescript-api/shipping/shipping-eligibility-checker/) determines whether the order is eligible for the ShippingMethod. It can contain custom logic such as checking the total weight of the order, or whether the order is being shipped to a particular country."
        },
        "content": "",
        "sections": [
            {
                "id": "creating-a-custom-checker",
                "title": "Creating a custom checker",
                "content": "\nCustom checkers can be created by defining a [`ShippingEligibilityChecker` object](/reference/typescript-api/shipping/shipping-eligibility-checker/).\n\nFor example, you could create a checker which works with a custom \"weight\" field to only apply to orders below a certain weight:\n\n\nCustom checkers are then passed into the VendureConfig [ShippingOptions](/reference/typescript-api/shipping/shipping-options/#shippingeligibilitycheckers) to make them available when setting up new ShippingMethods:\n\n\n",
                "subsections": [],
                "code": [
                    "import { LanguageCode, ShippingEligibilityChecker } from '@vendure/core';",
                    "",
                    "export const maxWeightChecker = new ShippingEligibilityChecker({",
                    "    code: 'max-weight-checker',",
                    "    description: [",
                    "        {languageCode: LanguageCode.en, value: 'Max Weight Checker'}",
                    "    ],",
                    "    args: {",
                    "        maxWeight: {",
                    "            type: 'int',",
                    "            ui: {component: 'number-form-input', suffix: 'grams'},",
                    "            label: [{languageCode: LanguageCode.en, value: 'Maximum order weight'}],",
                    "            description: [",
                    "                {",
                    "                    languageCode: LanguageCode.en,",
                    "                    value: 'Order is eligible only if its total weight is less than the specified value',",
                    "                },",
                    "            ],",
                    "        },",
                    "    },",
                    "",
                    "    /**",
                    "     * Must resolve to a boolean value, where `true` means that the order is",
                    "     * eligible for this ShippingMethod.",
                    "     *",
                    "     * (This example assumes a custom field \"weight\" is defined on the",
                    "     * ProductVariant entity)",
                    "     */",
                    "    check: (ctx, order, args) => {",
                    "        const totalWeight = order.lines",
                    "            .map(l => l.productVariant.customFields.weight ?? 0 * l.quantity)",
                    "            .reduce((total, lineWeight) => total + lineWeight, 0);",
                    "",
                    "        return totalWeight <= args.maxWeight;",
                    "    },",
                    "});",
                    "import { defaultShippingEligibilityChecker, VendureConfig } from '@vendure/core';",
                    "import { maxWeightChecker } from './shipping-methods/max-weight-checker';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    shippingOptions: {",
                    "        shippingEligibilityCheckers: [",
                    "            defaultShippingEligibilityChecker,",
                    "            maxWeightChecker,",
                    "        ],",
                    "    }",
                    "}"
                ]
            },
            {
                "id": "creating-a-custom-calculator",
                "title": "Creating a custom calculator",
                "content": "\nCustom calculators can be created by defining a [`ShippingCalculator` object](/reference/typescript-api/shipping/shipping-calculator/).\n\nFor example, you could create a calculator which consults an external data source (e.g. a spreadsheet, database or 3rd-party API) to find out the cost and estimated delivery time for the order.\n\n\nCustom calculators are then passed into the VendureConfig [ShippingOptions](/reference/typescript-api/shipping/shipping-options/#shippingcalculators) to make them available when setting up new ShippingMethods:\n\n\n:::info\nIf your ShippingEligibilityChecker or ShippingCalculator needs access to the database or other providers, see the [configurable operation dependency injection guide](/guides/developer-guide/strategies-configurable-operations/#injecting-dependencies).\n:::\n\n",
                "subsections": [],
                "code": [
                    "import { LanguageCode, ShippingCalculator } from '@vendure/core';",
                    "import { shippingDataSource } from './shipping-data-source';",
                    "",
                    "export const externalShippingCalculator = new ShippingCalculator({",
                    "    code: 'external-shipping-calculator',",
                    "    description: [{languageCode: LanguageCode.en, value: 'Calculates cost from external source'}],",
                    "    args: {",
                    "        taxRate: {",
                    "            type: 'int',",
                    "            ui: {component: 'number-form-input', suffix: '%'},",
                    "            label: [{languageCode: LanguageCode.en, value: 'Tax rate'}],",
                    "        },",
                    "    },",
                    "    calculate: async (ctx, order, args) => {",
                    "        // `shippingDataSource` is assumed to fetch the data from some",
                    "        // external data source.",
                    "        const { rate, deliveryDate, courier } = await shippingDataSource.getRate({",
                    "            destination: order.shippingAddress,",
                    "            contents: order.lines,",
                    "        });",
                    "",
                    "        return {",
                    "            price: rate,",
                    "            priceIncludesTax: ctx.channel.pricesIncludeTax,",
                    "            taxRate: args.taxRate,",
                    "            // metadata is optional but can be used to pass arbitrary",
                    "            // data about the shipping estimate to the storefront.",
                    "            metadata: { courier, deliveryDate },",
                    "        };",
                    "    },",
                    "});",
                    "import { defaultShippingCalculator, VendureConfig } from '@vendure/core';",
                    "import { externalShippingCalculator } from './external-shipping-calculator';",
                    "",
                    "export const config: VendureConfig = {",
                    "  // ...",
                    "  shippingOptions: {",
                    "    shippingCalculators: [",
                    "      defaultShippingCalculator,",
                    "      externalShippingCalculator,",
                    "    ],",
                    "  }",
                    "}"
                ]
            },
            {
                "id": "fulfillments",
                "title": "Fulfillments",
                "content": "\nFulfillments represent the actual shipping status of items in an order. When an order is placed and payment has been settled, the order items are then delivered to the customer in one or more Fulfillments.\n\n* **Physical goods:** A fulfillment would represent the actual boxes or packages which are shipped to the customer. When the package leaves the warehouse, the fulfillment is marked as `Shipped`. When the package arrives with the customer, the fulfillment is marked as `Delivered`.\n* **Digital goods:** A fulfillment would represent the means of delivering the digital goods to the customer, e.g. a download link or a license key. For example, when the link is sent to the customer, the fulfillment can be marked as `Shipped` and then `Delivered`.\n\n",
                "subsections": [
                    {
                        "id": "fulfillmenthandlers",
                        "title": "FulfillmentHandlers",
                        "content": "\nIt is often required to integrate your fulfillment process, e.g. with an external shipping API which provides shipping labels or tracking codes. This is done by defining [FulfillmentHandlers](/reference/typescript-api/fulfillment/fulfillment-handler/) (click the link for full documentation) and passing them in to the `shippingOptions.fulfillmentHandlers` array in your config.\n\nBy default, Vendure uses a manual fulfillment handler, which requires the Administrator to manually enter the method and tracking code of the Fulfillment.\n\n"
                    },
                    {
                        "id": "fulfillment-state-machine",
                        "title": "Fulfillment state machine",
                        "content": "\nLike Orders, Fulfillments are governed by a [finite state machine](/reference/typescript-api/state-machine/fsm/) and by default, a Fulfillment can be in one of the [following states](/reference/typescript-api/fulfillment/fulfillment-state#fulfillmentstate):\n\n* `Pending` The Fulfillment has been created\n* `Shipped` The Fulfillment has been shipped\n* `Delivered` The Fulfillment has arrived with the customer\n* `Cancelled` The Fulfillment has been cancelled \n\nThese states cover the typical workflow for fulfilling orders. However, it is possible to customize the fulfillment workflow by defining a [FulfillmentProcess](/reference/typescript-api/fulfillment/fulfillment-process) and passing it to your VendureConfig:\n\n\n:::info\nFor a more detailed look at how custom processes are used, see the [custom order processes guide](/guides/core-concepts/orders/#custom-order-processes).\n:::\n\n"
                    }
                ],
                "code": [
                    "import { FulfillmentProcess, VendureConfig } from '@vendure/core';",
                    "import { myCustomFulfillmentProcess } from './my-custom-fulfillment-process';",
                    "",
                    "export const config: VendureConfig = {",
                    "  // ...",
                    "  shippingOptions: {",
                    "    process: [myCustomFulfillmentProcess],",
                    "  },",
                    "};"
                ]
            }
        ]
    },
    {
        "id": "shipping-methods",
        "metadata": {
            "title": "Shipping Methods",
            "keywords": [
                "shipping methods",
                "shipping eligibility checker",
                "shipping calculator",
                "fulfillment handler",
                "testing a shipping method"
            ],
            "description": "Shipping methods define: * Whether an order is eligible for a particular shipping method * How much the shipping should cost for a given order * How the order will be fulfilled Let's take a closer look at each of these parts:"
        },
        "content": "",
        "sections": [
            {
                "id": "shipping-eligibility-checker",
                "title": "Shipping eligibility checker",
                "content": "\nThis is how we decide whether a particular shipping method may be applied to an order. This allows you to limit a particular shipping method based on things like:\n\n* Minimum order amount\n* Order weight\n* Shipping destination\n* Particular contents of the order\n* etc.\n\nBy default, Vendure comes with a checker which can impose a minimum order amount. To implement more complex checks, your developers are able to create custom checkers to suit your requirements.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "shipping-calculator",
                "title": "Shipping calculator",
                "content": "\nThe calculator is used to determine how much to charge for shipping an order. Calculators can be written to implement things like:\n\n* Determining shipping based on a 3rd-party service such as Shippo\n* Looking up prices from data supplied by couriers\n* Flat-rate shipping\n\nBy default, Vendure comes with a simple flat-rate shipping calculator. Your developers can create more sophisticated integrations according to your business requirements.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "fulfillment-handler",
                "title": "Fulfillment handler",
                "content": "\nBy \"fulfillment\" we mean how we physically get the goods into the hands of the customer. Common fulfillment methods include:\n\n* Courier services such as FedEx, DPD, DHL, etc.\n* Collection by customer\n* Delivery via email for digital goods or licenses\n\nBy default, Vendure comes with a \"manual fulfillment handler\", which allows you to manually enter the details of whatever actual method is used. For example, if you send the order by courier, you can enter the courier name and parcel number manually when creating an order.\n\nYour developers can however create much more sophisticated fulfillment handlers, which can enable things like automated calls to courier APIs, automated label generation, and so on.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "testing-a-shipping-method",
                "title": "Testing a Shipping Method",
                "content": "\nAt the bottom of the shipping method **detail page** you can test the current method by creating a fake order and shipping address and testing a) whether this method would be eligible, and b) how much it would cost.\n\n![./screen-shipping-test.webp](./screen-shipping-test.webp)\n\nAdditionally, on the shipping method **list page** you can test _all_ shipping methods at once.\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "shipping",
        "metadata": {
            "title": "Shipping",
            "keywords": [
                "shipping"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "shippingcalculator",
        "metadata": {
            "title": "ShippingCalculator",
            "keywords": [
                "shippingcalculator",
                "constructor",
                "shippingcalculationresult",
                "price",
                "priceincludestax",
                "taxrate",
                "metadata",
                "calculateshippingfn"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-calculator.ts\" sourceLine=\"48\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "shippingcalculator",
                "title": "ShippingCalculator",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-calculator.ts\" sourceLine=\"48\" packageName=\"@vendure/core\" />\n\nThe ShippingCalculator is used by a <a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a> to calculate the price of shipping on a given <a href='/reference/typescript-api/entities/order#order'>Order</a>.\n\n*Example*\n\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/#configurableoperationdef'>ConfigurableOperationDef</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: ShippingCalculatorConfig&#60;T&#62;) => ShippingCalculator`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "const flatRateCalculator = new ShippingCalculator({",
                    "  code: 'flat-rate-calculator',",
                    "  description: [{ languageCode: LanguageCode.en, value: 'Default Flat-Rate Shipping Calculator' }],",
                    "  args: {",
                    "    rate: {",
                    "      type: 'int',",
                    "      ui: { component: 'currency-form-input' },",
                    "    },",
                    "    taxRate: {",
                    "      type: 'int',",
                    "      ui: { component: 'number-form-input', suffix: '%' },",
                    "    },",
                    "  },",
                    "  calculate: (ctx, order, args) => {",
                    "    return {",
                    "      price: args.rate,",
                    "      taxRate: args.taxRate,",
                    "      priceIncludesTax: ctx.channel.pricesIncludeTax,",
                    "    };",
                    "  },",
                    "});",
                    "class ShippingCalculator<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {",
                    "    constructor(config: ShippingCalculatorConfig<T>)",
                    "}"
                ]
            },
            {
                "id": "shippingcalculationresult",
                "title": "ShippingCalculationResult",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-calculator.ts\" sourceLine=\"79\" packageName=\"@vendure/core\" />\n\nThe return value of the <a href='/reference/typescript-api/shipping/shipping-calculator#calculateshippingfn'>CalculateShippingFn</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "price",
                        "title": "price",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe shipping price without any taxes.\n"
                    },
                    {
                        "id": "priceincludestax",
                        "title": "priceIncludesTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\nWhether or not the given price already includes taxes.\n"
                    },
                    {
                        "id": "taxrate",
                        "title": "taxRate",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe tax rate applied to the shipping price.\n"
                    },
                    {
                        "id": "metadata",
                        "title": "metadata",
                        "content": "\n<MemberInfo kind=\"property\" type={`Record&#60;string, any&#62;`}   />\n\nArbitrary metadata may be returned from the calculation function. This can be used\ne.g. to return data on estimated delivery times or any other data which may be\nneeded in the storefront application when listing eligible shipping methods.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface ShippingCalculationResult {",
                    "    price: number;",
                    "    priceIncludesTax: boolean;",
                    "    taxRate: number;",
                    "    metadata?: Record<string, any>;",
                    "}"
                ]
            },
            {
                "id": "calculateshippingfn",
                "title": "CalculateShippingFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-calculator.ts\" sourceLine=\"119\" packageName=\"@vendure/core\" />\n\nA function which implements the specific shipping calculation logic. It takes an <a href='/reference/typescript-api/entities/order#order'>Order</a> and\nan arguments object and should return the shipping price as an integer in cents.\n\nShould return a <a href='/reference/typescript-api/shipping/shipping-calculator#shippingcalculationresult'>ShippingCalculationResult</a> object.\n\n\n",
                "subsections": [],
                "code": [
                    "type CalculateShippingFn<T extends ConfigArgs> = (",
                    "    ctx: RequestContext,",
                    "    order: Order,",
                    "    args: ConfigArgValues<T>,",
                    "    method: ShippingMethod,",
                    ") => CalculateShippingFnResult"
                ]
            }
        ]
    },
    {
        "id": "shippingeligibilitychecker",
        "metadata": {
            "title": "ShippingEligibilityChecker",
            "keywords": [
                "shippingeligibilitychecker",
                "constructor"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-eligibility-checker.ts\" sourceLine=\"49\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "shippingeligibilitychecker",
                "title": "ShippingEligibilityChecker",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-eligibility-checker.ts\" sourceLine=\"49\" packageName=\"@vendure/core\" />\n\nThe ShippingEligibilityChecker class is used to check whether an order qualifies for a\ngiven <a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>.\n\n*Example*\n\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/#configurableoperationdef'>ConfigurableOperationDef</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: <a href='/reference/typescript-api/shipping/shipping-eligibility-checker-config#shippingeligibilitycheckerconfig'>ShippingEligibilityCheckerConfig</a>&#60;T&#62;) => ShippingEligibilityChecker`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "const minOrderTotalEligibilityChecker = new ShippingEligibilityChecker({",
                    "    code: 'min-order-total-eligibility-checker',",
                    "    description: [{ languageCode: LanguageCode.en, value: 'Checks that the order total is above some minimum value' }],",
                    "    args: {",
                    "        orderMinimum: { type: 'int', ui: { component: 'currency-form-input' } },",
                    "    },",
                    "    check: (ctx, order, args) => {",
                    "        return order.totalWithTax >= args.orderMinimum;",
                    "    },",
                    "});",
                    "class ShippingEligibilityChecker<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {",
                    "    constructor(config: ShippingEligibilityCheckerConfig<T>)",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "shippingeligibilitycheckerconfig",
        "metadata": {
            "title": "ShippingEligibilityCheckerConfig",
            "keywords": [
                "shippingeligibilitycheckerconfig",
                "check",
                "shouldruncheck"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-eligibility-checker.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "shippingeligibilitycheckerconfig",
                "title": "ShippingEligibilityCheckerConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-eligibility-checker.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />\n\nConfiguration passed into the constructor of a <a href='/reference/typescript-api/shipping/shipping-eligibility-checker#shippingeligibilitychecker'>ShippingEligibilityChecker</a> to\nconfigure its behavior.\n\n* Extends: <code><a href='/reference/typescript-api/configurable-operation-def/configurable-operation-def-options#configurableoperationdefoptions'>ConfigurableOperationDefOptions</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "check",
                        "title": "check",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/shipping/check-shipping-eligibility-checker-fn#checkshippingeligibilitycheckerfn'>CheckShippingEligibilityCheckerFn</a>&#60;T&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "shouldruncheck",
                        "title": "shouldRunCheck",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/shipping/should-run-check-fn#shouldruncheckfn'>ShouldRunCheckFn</a>&#60;T&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ShippingEligibilityCheckerConfig<T extends ConfigArgs> extends ConfigurableOperationDefOptions<T> {",
                    "    check: CheckShippingEligibilityCheckerFn<T>;",
                    "    shouldRunCheck?: ShouldRunCheckFn<T>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "shippingline",
        "metadata": {
            "title": "ShippingLine",
            "keywords": [
                "shippingline",
                "constructor",
                "shippingmethodid",
                "shippingmethod",
                "order",
                "listprice",
                "listpriceincludestax",
                "adjustments",
                "taxlines",
                "price",
                "pricewithtax",
                "discountedprice",
                "discountedpricewithtax",
                "taxrate",
                "discounts",
                "addadjustment",
                "clearadjustments"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/shipping-line/shipping-line.entity.ts\" sourceLine=\"23\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "shippingline",
                "title": "ShippingLine",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/shipping-line/shipping-line.entity.ts\" sourceLine=\"23\" packageName=\"@vendure/core\" />\n\nA ShippingLine is created when a <a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a> is applied to an <a href='/reference/typescript-api/entities/order#order'>Order</a>.\nIt contains information about the price of the shipping method, any discounts that were\napplied, and the resulting tax on the shipping method.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/shipping-line#shippingline'>ShippingLine</a>&#62;) => ShippingLine`}   />\n\n\n"
                    },
                    {
                        "id": "shippingmethodid",
                        "title": "shippingMethodId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a> | null`}   />\n\n\n"
                    },
                    {
                        "id": "shippingmethod",
                        "title": "shippingMethod",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>`}   />\n\n\n"
                    },
                    {
                        "id": "order",
                        "title": "order",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>`}   />\n\n\n"
                    },
                    {
                        "id": "listprice",
                        "title": "listPrice",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "listpriceincludestax",
                        "title": "listPriceIncludesTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "adjustments",
                        "title": "adjustments",
                        "content": "\n<MemberInfo kind=\"property\" type={`Adjustment[]`}   />\n\n\n"
                    },
                    {
                        "id": "taxlines",
                        "title": "taxLines",
                        "content": "\n<MemberInfo kind=\"property\" type={`TaxLine[]`}   />\n\n\n"
                    },
                    {
                        "id": "price",
                        "title": "price",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "pricewithtax",
                        "title": "priceWithTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "discountedprice",
                        "title": "discountedPrice",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "discountedpricewithtax",
                        "title": "discountedPriceWithTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "taxrate",
                        "title": "taxRate",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "discounts",
                        "title": "discounts",
                        "content": "\n<MemberInfo kind=\"property\" type={`Discount[]`}   />\n\n\n"
                    },
                    {
                        "id": "addadjustment",
                        "title": "addAdjustment",
                        "content": "\n<MemberInfo kind=\"method\" type={`(adjustment: Adjustment) => `}   />\n\n\n"
                    },
                    {
                        "id": "clearadjustments",
                        "title": "clearAdjustments",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ShippingLine extends VendureEntity {",
                    "    constructor(input?: DeepPartial<ShippingLine>)",
                    "    @EntityId()",
                    "    shippingMethodId: ID | null;",
                    "    @Index()",
                    "    @ManyToOne(type => ShippingMethod)",
                    "    shippingMethod: ShippingMethod;",
                    "    @Index()",
                    "    @ManyToOne(type => Order, order => order.shippingLines, { onDelete: 'CASCADE' })",
                    "    order: Order;",
                    "    @Money()",
                    "    listPrice: number;",
                    "    @Column()",
                    "    listPriceIncludesTax: boolean;",
                    "    @Column('simple-json')",
                    "    adjustments: Adjustment[];",
                    "    @Column('simple-json')",
                    "    taxLines: TaxLine[];",
                    "    price: number",
                    "    priceWithTax: number",
                    "    discountedPrice: number",
                    "    discountedPriceWithTax: number",
                    "    taxRate: number",
                    "    discounts: Discount[]",
                    "    addAdjustment(adjustment: Adjustment) => ;",
                    "    clearAdjustments() => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "shippinglineassignmentstrategy",
        "metadata": {
            "title": "ShippingLineAssignmentStrategy",
            "keywords": [
                "shippinglineassignmentstrategy",
                "assignshippinglinetoorderlines"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-line-assignment-strategy.ts\" sourceLine=\"52\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "shippinglineassignmentstrategy",
                "title": "ShippingLineAssignmentStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-line-assignment-strategy.ts\" sourceLine=\"52\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThis strategy is used to assign a given <a href='/reference/typescript-api/entities/shipping-line#shippingline'>ShippingLine</a> to one or more <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>s of the Order.\nThis allows you to set multiple shipping methods for a single order, each assigned a different subset of\nOrderLines.\n\nThe <a href='/reference/typescript-api/shipping/default-shipping-line-assignment-strategy#defaultshippinglineassignmentstrategy'>DefaultShippingLineAssignmentStrategy</a> simply assigns _all_ OrderLines, so is suitable for the\nmost common scenario of a single shipping method per Order.\n\n:::info\n\nThis is configured via the `shippingOptions.shippingLineAssignmentStrategy` property of\nyour VendureConfig.\n\n:::\n\nHere's an example of a custom ShippingLineAssignmentStrategy which assigns digital products to a\ndifferent ShippingLine to physical products:\n\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "assignshippinglinetoorderlines",
                        "title": "assignShippingLineToOrderLines",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, shippingLine: <a href='/reference/typescript-api/entities/shipping-line#shippingline'>ShippingLine</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>[] | Promise&#60;<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>[]&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import {",
                    "    Order,",
                    "    OrderLine,",
                    "    RequestContext,",
                    "    ShippingLine,",
                    "    ShippingLineAssignmentStrategy,",
                    "} from '@vendure/core';",
                    "",
                    "export class DigitalShippingLineAssignmentStrategy implements ShippingLineAssignmentStrategy {",
                    "    assignShippingLineToOrderLines(",
                    "        ctx: RequestContext,",
                    "        shippingLine: ShippingLine,",
                    "        order: Order,",
                    "    ): OrderLine[] | Promise<OrderLine[]> {",
                    "        if (shippingLine.shippingMethod.customFields.isDigital) {",
                    "            return order.lines.filter(l => l.productVariant.customFields.isDigital);",
                    "        } else {",
                    "            return order.lines.filter(l => !l.productVariant.customFields.isDigital);",
                    "        }",
                    "    }",
                    "}",
                    "interface ShippingLineAssignmentStrategy extends InjectableStrategy {",
                    "    assignShippingLineToOrderLines(",
                    "        ctx: RequestContext,",
                    "        shippingLine: ShippingLine,",
                    "        order: Order,",
                    "    ): OrderLine[] | Promise<OrderLine[]>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "shippingmethod",
        "metadata": {
            "title": "ShippingMethod",
            "keywords": [
                "shippingmethod",
                "constructor",
                "deletedat",
                "code",
                "name",
                "description",
                "checker",
                "calculator",
                "fulfillmenthandlercode",
                "channels",
                "translations",
                "customfields",
                "apply",
                "test"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/shipping-method/shipping-method.entity.ts\" sourceLine=\"33\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "shippingmethod",
                "title": "ShippingMethod",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/shipping-method/shipping-method.entity.ts\" sourceLine=\"33\" packageName=\"@vendure/core\" />\n\nA ShippingMethod is used to apply a shipping price to an <a href='/reference/typescript-api/entities/order#order'>Order</a>. It is composed of a\n<a href='/reference/typescript-api/shipping/shipping-eligibility-checker#shippingeligibilitychecker'>ShippingEligibilityChecker</a> and a <a href='/reference/typescript-api/shipping/shipping-calculator#shippingcalculator'>ShippingCalculator</a>. For a given Order,\nthe `checker` is used to determine whether this ShippingMethod can be used. If yes, then\nthe ShippingMethod can be applied and the `calculator` is used to determine the price of\nshipping.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a></code>, <code><a href='/reference/typescript-api/entities/interfaces#softdeletable'>SoftDeletable</a></code>, <code>HasCustomFields</code>, <code><a href='/reference/typescript-api/entities/interfaces#translatable'>Translatable</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>&#62;) => ShippingMethod`}   />\n\n\n"
                    },
                    {
                        "id": "deletedat",
                        "title": "deletedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n"
                    },
                    {
                        "id": "code",
                        "title": "code",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "description",
                        "title": "description",
                        "content": "\n<MemberInfo kind=\"property\" type={`LocaleString`}   />\n\n\n"
                    },
                    {
                        "id": "checker",
                        "title": "checker",
                        "content": "\n<MemberInfo kind=\"property\" type={`ConfigurableOperation`}   />\n\n\n"
                    },
                    {
                        "id": "calculator",
                        "title": "calculator",
                        "content": "\n<MemberInfo kind=\"property\" type={`ConfigurableOperation`}   />\n\n\n"
                    },
                    {
                        "id": "fulfillmenthandlercode",
                        "title": "fulfillmentHandlerCode",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Translation&#60;<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomShippingMethodFields`}   />\n\n\n"
                    },
                    {
                        "id": "apply",
                        "title": "apply",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;<a href='/reference/typescript-api/shipping/shipping-calculator#shippingcalculationresult'>ShippingCalculationResult</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "test",
                        "title": "test",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;boolean&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ShippingMethod extends VendureEntity implements ChannelAware, SoftDeletable, HasCustomFields, Translatable {",
                    "    constructor(input?: DeepPartial<ShippingMethod>)",
                    "    @Column({ type: Date, nullable: true })",
                    "    deletedAt: Date | null;",
                    "    @Column() code: string;",
                    "    name: LocaleString;",
                    "    description: LocaleString;",
                    "    @Column('simple-json') checker: ConfigurableOperation;",
                    "    @Column('simple-json') calculator: ConfigurableOperation;",
                    "    @Column()",
                    "    fulfillmentHandlerCode: string;",
                    "    @ManyToMany(type => Channel)",
                    "    @JoinTable()",
                    "    channels: Channel[];",
                    "    @OneToMany(type => ShippingMethodTranslation, translation => translation.base, { eager: true })",
                    "    translations: Array<Translation<ShippingMethod>>;",
                    "    @Column(type => CustomShippingMethodFields)",
                    "    customFields: CustomShippingMethodFields;",
                    "    apply(ctx: RequestContext, order: Order) => Promise<ShippingCalculationResult | undefined>;",
                    "    test(ctx: RequestContext, order: Order) => Promise<boolean>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "shippingmethodservice",
        "metadata": {
            "title": "ShippingMethodService",
            "keywords": [
                "shippingmethodservice",
                "constructor",
                "findall",
                "findone",
                "create",
                "update",
                "softdelete",
                "assignshippingmethodstochannel",
                "removeshippingmethodsfromchannel",
                "getshippingeligibilitycheckers",
                "getshippingcalculators",
                "getfulfillmenthandlers",
                "getactiveshippingmethods"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/shipping-method.service.ts\" sourceLine=\"44\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "shippingmethodservice",
                "title": "ShippingMethodService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/shipping-method.service.ts\" sourceLine=\"44\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, roleService: <a href='/reference/typescript-api/services/role-service#roleservice'>RoleService</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, channelService: <a href='/reference/typescript-api/services/channel-service#channelservice'>ChannelService</a>, configArgService: ConfigArgService, translatableSaver: <a href='/reference/typescript-api/service-helpers/translatable-saver#translatablesaver'>TranslatableSaver</a>, customFieldRelationService: CustomFieldRelationService, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>) => ShippingMethodService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>&#62;, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>&#62; = []) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;Translated&#60;<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, shippingMethodId: <a href='/reference/typescript-api/common/id#id'>ID</a>, includeDeleted:  = false, relations: RelationPaths&#60;<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>&#62; = []) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>&#62; | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateShippingMethodInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateShippingMethodInput) => Promise&#60;Translated&#60;<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "softdelete",
                        "title": "softDelete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "assignshippingmethodstochannel",
                        "title": "assignShippingMethodsToChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: AssignShippingMethodsToChannelInput) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "removeshippingmethodsfromchannel",
                        "title": "removeShippingMethodsFromChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: RemoveShippingMethodsFromChannelInput) => Promise&#60;Array&#60;Translated&#60;<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>&#62;&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getshippingeligibilitycheckers",
                        "title": "getShippingEligibilityCheckers",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => ConfigurableOperationDefinition[]`}   />\n\n\n"
                    },
                    {
                        "id": "getshippingcalculators",
                        "title": "getShippingCalculators",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => ConfigurableOperationDefinition[]`}   />\n\n\n"
                    },
                    {
                        "id": "getfulfillmenthandlers",
                        "title": "getFulfillmentHandlers",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => ConfigurableOperationDefinition[]`}   />\n\n\n"
                    },
                    {
                        "id": "getactiveshippingmethods",
                        "title": "getActiveShippingMethods",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;<a href='/reference/typescript-api/entities/shipping-method#shippingmethod'>ShippingMethod</a>[]&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ShippingMethodService {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, roleService: RoleService, listQueryBuilder: ListQueryBuilder, channelService: ChannelService, configArgService: ConfigArgService, translatableSaver: TranslatableSaver, customFieldRelationService: CustomFieldRelationService, eventBus: EventBus, translator: TranslatorService)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<ShippingMethod>, relations: RelationPaths<ShippingMethod> = []) => Promise<PaginatedList<Translated<ShippingMethod>>>;",
                    "    findOne(ctx: RequestContext, shippingMethodId: ID, includeDeleted:  = false, relations: RelationPaths<ShippingMethod> = []) => Promise<Translated<ShippingMethod> | undefined>;",
                    "    create(ctx: RequestContext, input: CreateShippingMethodInput) => Promise<Translated<ShippingMethod>>;",
                    "    update(ctx: RequestContext, input: UpdateShippingMethodInput) => Promise<Translated<ShippingMethod>>;",
                    "    softDelete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "    assignShippingMethodsToChannel(ctx: RequestContext, input: AssignShippingMethodsToChannelInput) => Promise<Array<Translated<ShippingMethod>>>;",
                    "    removeShippingMethodsFromChannel(ctx: RequestContext, input: RemoveShippingMethodsFromChannelInput) => Promise<Array<Translated<ShippingMethod>>>;",
                    "    getShippingEligibilityCheckers(ctx: RequestContext) => ConfigurableOperationDefinition[];",
                    "    getShippingCalculators(ctx: RequestContext) => ConfigurableOperationDefinition[];",
                    "    getFulfillmentHandlers(ctx: RequestContext) => ConfigurableOperationDefinition[];",
                    "    getActiveShippingMethods(ctx: RequestContext) => Promise<ShippingMethod[]>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "shippingoptions",
        "metadata": {
            "title": "ShippingOptions",
            "keywords": [
                "shippingoptions",
                "shippingeligibilitycheckers",
                "shippingcalculators",
                "shippinglineassignmentstrategy",
                "customfulfillmentprocess",
                "process",
                "fulfillmenthandlers"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"721\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "shippingoptions",
                "title": "ShippingOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"721\" packageName=\"@vendure/core\" />\n\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "shippingeligibilitycheckers",
                        "title": "shippingEligibilityCheckers",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/shipping/shipping-eligibility-checker#shippingeligibilitychecker'>ShippingEligibilityChecker</a>&#60;any&#62;&#62;`}   />\n\nAn array of available ShippingEligibilityCheckers for use in configuring ShippingMethods\n"
                    },
                    {
                        "id": "shippingcalculators",
                        "title": "shippingCalculators",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/shipping/shipping-calculator#shippingcalculator'>ShippingCalculator</a>&#60;any&#62;&#62;`}   />\n\nAn array of available ShippingCalculators for use in configuring ShippingMethods\n"
                    },
                    {
                        "id": "shippinglineassignmentstrategy",
                        "title": "shippingLineAssignmentStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/shipping/shipping-line-assignment-strategy#shippinglineassignmentstrategy'>ShippingLineAssignmentStrategy</a>`}  since=\"2.0.0\"  />\n\nThis strategy is used to assign a given <a href='/reference/typescript-api/entities/shipping-line#shippingline'>ShippingLine</a> to one or more <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>s of the Order.\nThis allows you to set multiple shipping methods for a single order, each assigned a different subset of\nOrderLines.\n"
                    },
                    {
                        "id": "customfulfillmentprocess",
                        "title": "customFulfillmentProcess",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/fulfillment/fulfillment-process#fulfillmentprocess'>FulfillmentProcess</a>&#60;any&#62;&#62;`}   />\n\nAllows the definition of custom states and transition logic for the fulfillment process state machine.\nTakes an array of objects implementing the <a href='/reference/typescript-api/fulfillment/fulfillment-process#fulfillmentprocess'>FulfillmentProcess</a> interface.\n"
                    },
                    {
                        "id": "process",
                        "title": "process",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/fulfillment/fulfillment-process#fulfillmentprocess'>FulfillmentProcess</a>&#60;any&#62;&#62;`} default=\"<a href='/reference/typescript-api/fulfillment/fulfillment-process#defaultfulfillmentprocess'>defaultFulfillmentProcess</a>\"  since=\"2.0.0\"  />\n\nAllows the definition of custom states and transition logic for the fulfillment process state machine.\nTakes an array of objects implementing the <a href='/reference/typescript-api/fulfillment/fulfillment-process#fulfillmentprocess'>FulfillmentProcess</a> interface.\n"
                    },
                    {
                        "id": "fulfillmenthandlers",
                        "title": "fulfillmentHandlers",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;<a href='/reference/typescript-api/fulfillment/fulfillment-handler#fulfillmenthandler'>FulfillmentHandler</a>&#60;any&#62;&#62;`}   />\n\nAn array of available FulfillmentHandlers.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface ShippingOptions {",
                    "    shippingEligibilityCheckers?: Array<ShippingEligibilityChecker<any>>;",
                    "    shippingCalculators?: Array<ShippingCalculator<any>>;",
                    "    shippingLineAssignmentStrategy?: ShippingLineAssignmentStrategy;",
                    "    customFulfillmentProcess?: Array<FulfillmentProcess<any>>;",
                    "    process?: Array<FulfillmentProcess<any>>;",
                    "    fulfillmentHandlers?: Array<FulfillmentHandler<any>>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "shop-api",
        "metadata": {
            "title": "Shop API",
            "keywords": [
                "graphql shop api"
            ],
            "description": "The Shop API is used by storefront applications. It provides all the necessary queries and mutations for finding and viewing products, creating and updating orders, checking out, managing a customer account etc. {{% alert %}} Explore the interactive GraphQL Shop API at [demo.vendure.io/shop-api](https://demo.vendure.io/shop-api) {{< /alert >}}"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "shouldruncheckfn",
        "metadata": {
            "title": "ShouldRunCheckFn",
            "keywords": [
                "shouldruncheckfn"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-eligibility-checker.ts\" sourceLine=\"158\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "shouldruncheckfn",
                "title": "ShouldRunCheckFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/shipping-method/shipping-eligibility-checker.ts\" sourceLine=\"158\" packageName=\"@vendure/core\" />\n\nAn optional method which is used to decide whether to run the `check()` function.\nReturns a JSON-compatible object which is cached and compared between calls.\nIf the value is the same, then the `check()` function is not called.\n\nUse of this function is an optimization technique which can be useful when\nthe `check()` function is expensive and should be kept to an absolute minimum.\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    "const optimizedChecker = new ShippingEligibilityChecker({",
                    "  code: 'example',",
                    "  description: [],",
                    "  args: {},",
                    "  check: async (ctx, order) => {",
                    "    // some slow, expensive function here",
                    "  },",
                    "  shouldRunCheck: (ctx, order) => {",
                    "    // Will only run the `check()` function any time",
                    "    // the shippingAddress object has changed.",
                    "    return order.shippingAddress;",
                    "  },",
                    "});",
                    "type ShouldRunCheckFn<T extends ConfigArgs> = (",
                    "    ctx: RequestContext,",
                    "    order: Order,",
                    "    args: ConfigArgValues<T>,",
                    "    method: ShippingMethod,",
                    ") => Json | Promise<Json>"
                ]
            }
        ]
    },
    {
        "id": "simplegraphqlclient",
        "metadata": {
            "title": "SimpleGraphQLClient",
            "keywords": [
                "simplegraphqlclient",
                "constructor",
                "setauthtoken",
                "setchanneltoken",
                "getauthtoken",
                "query",
                "fetch",
                "querystatus",
                "asuserwithcredentials",
                "assuperadmin",
                "asanonymoususer",
                "fileuploadmutation"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/testing/src/simple-graphql-client.ts\" sourceLine=\"40\" packageName=\"@vendure/testing\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "simplegraphqlclient",
                "title": "SimpleGraphQLClient",
                "content": "\n<GenerationInfo sourceFile=\"packages/testing/src/simple-graphql-client.ts\" sourceLine=\"40\" packageName=\"@vendure/testing\" />\n\nA minimalistic GraphQL client for populating and querying test data.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(vendureConfig: Required&#60;<a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a>&#62;, apiUrl: string = '') => SimpleGraphQLClient`}   />\n\n\n"
                    },
                    {
                        "id": "setauthtoken",
                        "title": "setAuthToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`(token: string) => `}   />\n\nSets the authToken to be used in each GraphQL request.\n"
                    },
                    {
                        "id": "setchanneltoken",
                        "title": "setChannelToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`(token: string | null) => `}   />\n\nSets the authToken to be used in each GraphQL request.\n"
                    },
                    {
                        "id": "getauthtoken",
                        "title": "getAuthToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => string`}   />\n\nReturns the authToken currently being used.\n"
                    },
                    {
                        "id": "query",
                        "title": "query",
                        "content": "\n<MemberInfo kind=\"method\" type={`(query: DocumentNode | TypedDocumentNode&#60;T, V&#62;, variables?: V, queryParams?: QueryParams) => Promise&#60;T&#62;`}   />\n\nPerforms both query and mutation operations.\n"
                    },
                    {
                        "id": "fetch",
                        "title": "fetch",
                        "content": "\n<MemberInfo kind=\"method\" type={`(url: string, options: RequestInit = {}) => Promise&#60;Response&#62;`}   />\n\nPerforms a raw HTTP request to the given URL, but also includes the authToken & channelToken\nheaders if they have been set. Useful for testing non-GraphQL endpoints, e.g. for plugins\nwhich make use of REST controllers.\n"
                    },
                    {
                        "id": "querystatus",
                        "title": "queryStatus",
                        "content": "\n<MemberInfo kind=\"method\" type={`(query: DocumentNode, variables?: V) => Promise&#60;number&#62;`}   />\n\nPerforms a query or mutation and returns the resulting status code.\n"
                    },
                    {
                        "id": "asuserwithcredentials",
                        "title": "asUserWithCredentials",
                        "content": "\n<MemberInfo kind=\"method\" type={`(username: string, password: string) => `}   />\n\nAttempts to log in with the specified credentials.\n"
                    },
                    {
                        "id": "assuperadmin",
                        "title": "asSuperAdmin",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\nLogs in as the SuperAdmin user.\n"
                    },
                    {
                        "id": "asanonymoususer",
                        "title": "asAnonymousUser",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\nLogs out so that the client is then treated as an anonymous user.\n"
                    },
                    {
                        "id": "fileuploadmutation",
                        "title": "fileUploadMutation",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: {\n         mutation: DocumentNode;\n         filePaths: string[];\n         mapVariables: (filePaths: string[]) =&#62; any;\n     }) => Promise&#60;any&#62;`}   />\n\nPerform a file upload mutation.\n\nUpload spec: https://github.com/jaydenseric/graphql-multipart-request-spec\nDiscussion of issue: https://github.com/jaydenseric/apollo-upload-client/issues/32\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class SimpleGraphQLClient {",
                    "    constructor(vendureConfig: Required<VendureConfig>, apiUrl: string = '')",
                    "    setAuthToken(token: string) => ;",
                    "    setChannelToken(token: string | null) => ;",
                    "    getAuthToken() => string;",
                    "    query(query: DocumentNode | TypedDocumentNode<T, V>, variables?: V, queryParams?: QueryParams) => Promise<T>;",
                    "    fetch(url: string, options: RequestInit = {}) => Promise<Response>;",
                    "    queryStatus(query: DocumentNode, variables?: V) => Promise<number>;",
                    "    asUserWithCredentials(username: string, password: string) => ;",
                    "    asSuperAdmin() => ;",
                    "    asAnonymousUser() => ;",
                    "    fileUploadMutation(options: {",
                    "        mutation: DocumentNode;",
                    "        filePaths: string[];",
                    "        mapVariables: (filePaths: string[]) => any;",
                    "    }) => Promise<any>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "slugvalidator",
        "metadata": {
            "title": "SlugValidator",
            "keywords": [
                "slugvalidator",
                "constructor",
                "validateslugs",
                "inputwithslug",
                "id",
                "translations",
                "translationentity"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/slug-validator/slug-validator.ts\" sourceLine=\"44\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "slugvalidator",
                "title": "SlugValidator",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/slug-validator/slug-validator.ts\" sourceLine=\"44\" packageName=\"@vendure/core\" />\n\nUsed to validate slugs to ensure they are URL-safe and unique. Designed to be used with translatable\nentities such as <a href='/reference/typescript-api/entities/product#product'>Product</a> and <a href='/reference/typescript-api/entities/collection#collection'>Collection</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>) => SlugValidator`}   />\n\n\n"
                    },
                    {
                        "id": "validateslugs",
                        "title": "validateSlugs",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: T, translationEntity: Type&#60;E&#62;) => Promise&#60;T&#62;`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class SlugValidator {",
                    "    constructor(connection: TransactionalConnection)",
                    "    validateSlugs(ctx: RequestContext, input: T, translationEntity: Type<E>) => Promise<T>;",
                    "}"
                ]
            },
            {
                "id": "inputwithslug",
                "title": "InputWithSlug",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/slug-validator/slug-validator.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />\n\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a> | null`}   />\n\n\n"
                    },
                    {
                        "id": "translations",
                        "title": "translations",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;{\n         id?: <a href='/reference/typescript-api/common/id#id'>ID</a> | null;\n         languageCode: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>;\n         slug?: string | null;\n     }&#62; | null`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "type InputWithSlug = {",
                    "    id?: ID | null;",
                    "    translations?: Array<{",
                    "        id?: ID | null;",
                    "        languageCode: LanguageCode;",
                    "        slug?: string | null;",
                    "    }> | null;",
                    "}"
                ]
            },
            {
                "id": "translationentity",
                "title": "TranslationEntity",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/slug-validator/slug-validator.ts\" sourceLine=\"29\" packageName=\"@vendure/core\" />\n\n\n\n\n",
                "subsections": [],
                "code": [
                    "type TranslationEntity = VendureEntity & {",
                    "    id: ID;",
                    "    languageCode: LanguageCode;",
                    "    slug: string;",
                    "    base: any;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "sqljobqueuestrategy",
        "metadata": {
            "title": "SqlJobQueueStrategy",
            "keywords": [
                "sqljobqueuestrategy",
                "init",
                "destroy",
                "add",
                "next",
                "update",
                "findmany",
                "findone",
                "findmanybyid",
                "removesettledjobs"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/plugin/default-job-queue-plugin/sql-job-queue-strategy.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "sqljobqueuestrategy",
                "title": "SqlJobQueueStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/plugin/default-job-queue-plugin/sql-job-queue-strategy.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />\n\nA <a href='/reference/typescript-api/job-queue/job-queue-strategy#jobqueuestrategy'>JobQueueStrategy</a> which uses the configured SQL database to persist jobs in the queue.\nThis strategy is used by the <a href='/reference/typescript-api/job-queue/default-job-queue-plugin#defaultjobqueueplugin'>DefaultJobQueuePlugin</a>.\n\n* Extends: <code><a href='/reference/typescript-api/job-queue/polling-job-queue-strategy#pollingjobqueuestrategy'>PollingJobQueueStrategy</a></code>\n\n\n* Implements: <code><a href='/reference/typescript-api/job-queue/inspectable-job-queue-strategy#inspectablejobqueuestrategy'>InspectableJobQueueStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "destroy",
                        "title": "destroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "add",
                        "title": "add",
                        "content": "\n<MemberInfo kind=\"method\" type={`(job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;Data&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "next",
                        "title": "next",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queueName: string) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;any&#62;) => Promise&#60;void&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findmany",
                        "title": "findMany",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options?: JobListOptions) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findmanybyid",
                        "title": "findManyById",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ids: <a href='/reference/typescript-api/common/id#id'>ID</a>[]) => Promise&#60;<a href='/reference/typescript-api/job-queue/job#job'>Job</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "removesettledjobs",
                        "title": "removeSettledJobs",
                        "content": "\n<MemberInfo kind=\"method\" type={`(queueNames: string[] = [], olderThan?: Date) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class SqlJobQueueStrategy extends PollingJobQueueStrategy implements InspectableJobQueueStrategy {",
                    "    init(injector: Injector) => ;",
                    "    destroy() => ;",
                    "    add(job: Job<Data>) => Promise<Job<Data>>;",
                    "    next(queueName: string) => Promise<Job | undefined>;",
                    "    update(job: Job<any>) => Promise<void>;",
                    "    findMany(options?: JobListOptions) => Promise<PaginatedList<Job>>;",
                    "    findOne(id: ID) => Promise<Job | undefined>;",
                    "    findManyById(ids: ID[]) => Promise<Job[]>;",
                    "    removeSettledJobs(queueNames: string[] = [], olderThan?: Date) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "stand-alone-cli-scripts",
        "metadata": {
            "title": "Stand-alone CLI Scripts",
            "keywords": [
                "stand-alone cli scripts",
                "minimal example",
                "or",
                "the `app` object",
                "creating a requestcontext"
            ],
            "description": "It is possible to create stand-alone scripts that can be run from the command-line by using the [bootstrapWorker function](/reference/typescript-api/worker/bootstrap-worker/). This can be useful for a variety of use-cases such as running cron jobs or importing data. Here's a minimal example of a script which will bootstrap the Vendure Worker and then log the number of products in the database: ```ts title=\"src/get-product-count.ts\" import { bootstrapWorker, Logger, ProductService, RequestContextService } from '@vendure/core'; import { config } from './vendure-config';"
        },
        "content": "",
        "sections": [
            {
                "id": "minimal-example",
                "title": "Minimal example",
                "content": "\nHere's a minimal example of a script which will bootstrap the Vendure Worker and then log the number of products in the database:\n\n\nThis script can then be run from the command-line:\n\n\nresulting in the following output:\n\n\n",
                "subsections": [],
                "code": [
                    "import { bootstrapWorker, Logger, ProductService, RequestContextService } from '@vendure/core';",
                    "",
                    "import { config } from './vendure-config';",
                    "",
                    "if (require.main === module) {",
                    "    getProductCount()",
                    "        .then(() => process.exit(0))",
                    "        .catch(err => {",
                    "            Logger.error(err);",
                    "            process.exit(1);",
                    "        });",
                    "}",
                    "",
                    "async function getProductCount() {",
                    "    // This will bootstrap an instance of the Vendure Worker, providing",
                    "    // us access to all of the services defined in the Vendure core.",
                    "    // (but without the unnecessary overhead of the API layer).",
                    "    const { app } = await bootstrapWorker(config);",
                    "",
                    "    // Using `app.get()` we can grab an instance of _any_ provider defined in the",
                    "    // Vendure core as well as by our plugins.",
                    "    const productService = app.get(ProductService);",
                    "",
                    "    // For most service methods, we'll need to pass a RequestContext object.",
                    "    // We can use the RequestContextService to create one.",
                    "    const ctx = await app.get(RequestContextService).create({",
                    "        apiType: 'admin',",
                    "    });",
                    "",
                    "    // We use the `findAll()` method to get the total count. Since we aren't",
                    "    // interested in the actual product objects, we can set the `take` option to 0.",
                    "    const { totalItems } = await productService.findAll(ctx, {take: 0});",
                    "",
                    "    Logger.info(",
                    "        [",
                    "            '\\n-----------------------------',",
                    "            `There are ${totalItems} products`,",
                    "            '------------------------------',",
                    "        ].join('\\n'),",
                    "    )",
                    "}",
                    "npx ts-node src/get-product-count.ts",
                    "",
                    "# or",
                    "",
                    "yarn ts-node src/get-product-count.ts",
                    "info 01/08/23, 11:50 - [Vendure Worker] Bootstrapping Vendure Worker (pid: 4428)...",
                    "info 01/08/23, 11:50 - [Vendure Worker] Vendure Worker is ready",
                    "info 01/08/23, 11:50 - [Vendure Worker]",
                    "-----------------------------------------",
                    "There are 56 products in the database",
                    "-----------------------------------------"
                ]
            },
            {
                "id": "the-`app`-object",
                "title": "The `app` object",
                "content": "\nThe `app` object returned by the `bootstrapWorker()` function is an instance of the [NestJS Application Context](https://docs.nestjs.com/standalone-applications). It has full access to the NestJS dependency injection container, which means that you can use the `app.get()` method to retrieve any of the services defined in the Vendure core or by any plugins.\n\n\n",
                "subsections": [],
                "code": [
                    "import { bootstrapWorker, CustomerService } from '@vendure/core';",
                    "import { config } from './vendure-config';",
                    "",
                    "// ...",
                    "",
                    "async function importCustomerData() {",
                    "    const { app } = await bootstrapWorker(config);",
                    "    ",
                    "    // highlight-start",
                    "    const customerService = app.get(CustomerService);",
                    "    // highlight-end",
                    "}"
                ]
            },
            {
                "id": "creating-a-requestcontext",
                "title": "Creating a RequestContext",
                "content": "\nAlmost all the methods exposed by Vendure's core services take a `RequestContext` object as the first argument. Usually, this object is created in the [API Layer](/guides/developer-guide/the-api-layer/#resolvers) by the `@Ctx()` decorator, and contains information related to the current API request.\n\nWhen running a stand-alone script, we aren't making any API requests, so we need to create a `RequestContext` object manually. This can be done using the [`RequestContextService`](/reference/typescript-api/request/request-context-service/):\n\n\n",
                "subsections": [],
                "code": [
                    "// ...",
                    "import { RequestContextService } from '@vendure/core';",
                    "",
                    "async function getProductCount() {",
                    "    const { app } = await bootstrapWorker(config);",
                    "    const productService = app.get(ProductService);",
                    "    ",
                    "    // highlight-start",
                    "    const ctx = await app.get(RequestContextService).create({",
                    "        apiType: 'admin',",
                    "    });",
                    "    // highlight-end",
                    "    ",
                    "    const { totalItems } = await productService.findAll(ctx, {take: 0});",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "state-machine",
        "metadata": {
            "title": "State Machine",
            "keywords": [
                "state-machine"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "statemachineconfig",
        "metadata": {
            "title": "StateMachineConfig",
            "keywords": [
                "statemachineconfig",
                "transitions",
                "ontransitionstart",
                "ontransitionend",
                "onerror",
                "ontransitionstartfn",
                "ontransitionerrorfn",
                "ontransitionendfn"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/finite-state-machine/types.ts\" sourceLine=\"89\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "statemachineconfig",
                "title": "StateMachineConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/finite-state-machine/types.ts\" sourceLine=\"89\" packageName=\"@vendure/core\" />\n\nThe config object used to instantiate a new <a href='/reference/typescript-api/state-machine/fsm#fsm'>FSM</a> instance.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "transitions",
                        "title": "transitions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/transitions#transitions'>Transitions</a>&#60;T&#62;`}   />\n\nDefines the available states of the state machine as well as the permitted\ntransitions from one state to another.\n"
                    },
                    {
                        "id": "ontransitionstart",
                        "title": "onTransitionStart",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionstartfn'>OnTransitionStartFn</a>&#60;T, Data&#62;`}   />\n\nCalled before a transition takes place. If the function resolves to `false` or a string, then the transition\nwill be cancelled. In the case of a string, the string (error message) will be forwarded to the onError handler.\n\nIf this function returns a value resolving to `true` or `void` (no return value), then the transition\nwill be permitted.\n"
                    },
                    {
                        "id": "ontransitionend",
                        "title": "onTransitionEnd",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionendfn'>OnTransitionEndFn</a>&#60;T, Data&#62;`}   />\n\nCalled after a transition has taken place.\n"
                    },
                    {
                        "id": "onerror",
                        "title": "onError",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/state-machine/state-machine-config#ontransitionerrorfn'>OnTransitionErrorFn</a>&#60;T&#62;`}   />\n\nCalled when a transition is prevented and the `onTransitionStart` handler has returned an\nerror message.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface StateMachineConfig<T extends string, Data = undefined> {",
                    "    readonly transitions: Transitions<T>;",
                    "    onTransitionStart?: OnTransitionStartFn<T, Data>;",
                    "    onTransitionEnd?: OnTransitionEndFn<T, Data>;",
                    "    onError?: OnTransitionErrorFn<T>;",
                    "}"
                ]
            },
            {
                "id": "ontransitionstartfn",
                "title": "OnTransitionStartFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/finite-state-machine/types.ts\" sourceLine=\"48\" packageName=\"@vendure/core\" />\n\nCalled before a transition takes place. If the function resolves to `false` or a string, then the transition\nwill be cancelled. In the case of a string, the string (error message) will be forwarded to the onError handler.\n\nIf this function returns a value resolving to `true` or `void` (no return value), then the transition\nwill be permitted.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type OnTransitionStartFn<T extends string, Data> = (",
                    "    fromState: T,",
                    "    toState: T,",
                    "    data: Data,",
                    ") => boolean | string | void | Promise<boolean | string | void> | Observable<boolean | string | void>"
                ]
            },
            {
                "id": "ontransitionerrorfn",
                "title": "OnTransitionErrorFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/finite-state-machine/types.ts\" sourceLine=\"62\" packageName=\"@vendure/core\" />\n\nCalled when a transition is prevented and the `onTransitionStart` handler has returned an\nerror message.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type OnTransitionErrorFn<T extends string> = (",
                    "    fromState: T,",
                    "    toState: T,",
                    "    message?: string,",
                    ") => void | Promise<void> | Observable<void>"
                ]
            },
            {
                "id": "ontransitionendfn",
                "title": "OnTransitionEndFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/finite-state-machine/types.ts\" sourceLine=\"75\" packageName=\"@vendure/core\" />\n\nCalled after a transition has taken place.\n\n\n",
                "subsections": [],
                "code": [
                    "type OnTransitionEndFn<T extends string, Data> = (",
                    "    fromState: T,",
                    "    toState: T,",
                    "    data: Data,",
                    ") => void | Promise<void> | Observable<void>"
                ]
            }
        ]
    },
    {
        "id": "stellateplugin",
        "metadata": {
            "title": "StellatePlugin",
            "keywords": [
                "stellateplugin",
                "pre-requisites",
                "installation",
                "configuration",
                "storefront setup",
                "custom purgerules",
                "devmode & debug logging",
                "options",
                "init",
                "constructor",
                "onapplicationbootstrap"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/stellate-plugin/src/stellate-plugin.ts\" sourceLine=\"246\" packageName=\"@vendure/stellate-plugin\" since=\"2.1.5\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "stellateplugin",
                "title": "StellatePlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/stellate-plugin/src/stellate-plugin.ts\" sourceLine=\"246\" packageName=\"@vendure/stellate-plugin\" since=\"2.1.5\" />\n\nA plugin to integrate the [Stellate](https://stellate.co/) GraphQL caching service with your Vendure server.\nThe main purpose of this plugin is to ensure that cached data gets correctly purged in\nresponse to events inside Vendure. For example, changes to a Product's description should\npurge any associated record for that Product in Stellate's cache.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "pre-requisites",
                "title": "Pre-requisites",
                "content": "\nYou will first need to [set up a free Stellate account](https://stellate.co/signup).\n\nYou will also need to generate an **API token** for the Stellate Purging API. For instructions on how to generate the token,\nsee the [Stellate Purging API docs](https://docs.stellate.co/docs/purging-api#authentication).\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "installation",
                "title": "Installation",
                "content": "\n\n",
                "subsections": [],
                "code": [
                    "npm install @vendure/stellate-plugin"
                ]
            },
            {
                "id": "configuration",
                "title": "Configuration",
                "content": "\nThe plugin is configured via the `StellatePlugin.init()` method. This method accepts an options object\nwhich defines the Stellate service name and API token, as well as an array of <a href='/reference/core-plugins/stellate-plugin/purge-rule#purgerule'>PurgeRule</a>s which\ndefine how the plugin will respond to Vendure events in order to trigger calls to the\nStellate [Purging API](https://stellate.co/docs/graphql-edge-cache/purging-api).\n\n*Example*\n\n\nIn your Stellate dashboard, you can use the following configuration example as a sensible default for a\nVendure application:\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "import { StellatePlugin, defaultPurgeRules } from '@vendure/stellate-plugin';",
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "   // ...",
                    "   plugins: [",
                    "       StellatePlugin.init({",
                    "           // The Stellate service name, i.e. `<serviceName>.stellate.sh`",
                    "           serviceName: 'my-service',",
                    "           // The API token for the Stellate Purging API. See the \"pre-requisites\" section above.",
                    "           apiToken: process.env.STELLATE_PURGE_API_TOKEN,",
                    "           devMode: !isProd || process.env.STELLATE_DEBUG_MODE ? true : false,",
                    "           debugLogging: process.env.STELLATE_DEBUG_MODE ? true : false,",
                    "           purgeRules: [",
                    "               ...defaultPurgeRules,",
                    "               // custom purge rules can be added here",
                    "           ],",
                    "       }),",
                    "   ],",
                    "};",
                    "import { Config } from \"stellate\";",
                    "",
                    "const config: Config = {",
                    "  config: {",
                    "    name: \"my-vendure-server\",",
                    "    originUrl: \"https://my-vendure-server.com/shop-api\",",
                    "    ignoreOriginCacheControl: true,",
                    "    passThroughOnly: false,",
                    "    scopes: {",
                    "      SESSION_BOUND: \"header:authorization|cookie:session\",",
                    "    },",
                    "    headers: {",
                    "      \"access-control-expose-headers\": \"vendure-auth-token\",",
                    "    },",
                    "    rootTypeNames: {",
                    "      query: \"Query\",",
                    "      mutation: \"Mutation\",",
                    "    },",
                    "    keyFields: {",
                    "      types: {",
                    "        SearchResult: [\"productId\"],",
                    "        SearchResponseCacheIdentifier: [\"collectionSlug\"],",
                    "      },",
                    "    },",
                    "    rules: [",
                    "      {",
                    "        types: [",
                    "          \"Product\",",
                    "          \"Collection\",",
                    "          \"ProductVariant\",",
                    "          \"SearchResponse\",",
                    "        ],",
                    "        maxAge: 900,",
                    "        swr: 900,",
                    "        description: \"Cache Products & Collections\",",
                    "      },",
                    "      {",
                    "        types: [\"Channel\"],",
                    "        maxAge: 9000,",
                    "        swr: 9000,",
                    "        description: \"Cache active channel\",",
                    "      },",
                    "      {",
                    "        types: [\"Order\", \"Customer\", \"User\"],",
                    "        maxAge: 0,",
                    "        swr: 0,",
                    "        description: \"Do not cache user data\",",
                    "      },",
                    "    ],",
                    "  },",
                    "};",
                    "export default config;"
                ]
            },
            {
                "id": "storefront-setup",
                "title": "Storefront setup",
                "content": "\nIn your storefront, you should point your GraphQL client to the Stellate GraphQL API endpoint, which is\n`https://<service-name>.stellate.sh`.\n\nWherever you are using the `search` query (typically in product listing & search pages), you should also add the\n`cacheIdentifier` field to the query. This will ensure that the Stellate cache is correctly purged when\na Product or Collection is updated.\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "import { graphql } from '../generated/gql';",
                    "",
                    "export const searchProductsDocument = graphql(`",
                    "    query SearchProducts($input: SearchInput!) {",
                    "        search(input: $input) {",
                    "            // highlight-start",
                    "            cacheIdentifier {",
                    "                collectionSlug",
                    "            }",
                    "            // highlight-end",
                    "            items {",
                    "               # ...",
                    "            }",
                    "        }",
                    "    }",
                    "}`);"
                ]
            },
            {
                "id": "custom-purgerules",
                "title": "Custom PurgeRules",
                "content": "\nThe configuration above only accounts for caching of some of the built-in Vendure entity types. If you have\ncustom entity types, you may well want to add them to the Stellate cache. In this case, you'll also need a way to\npurge those entities from the cache when they are updated. This is where the <a href='/reference/core-plugins/stellate-plugin/purge-rule#purgerule'>PurgeRule</a> comes in.\n\nLet's imagine that you have built a simple CMS plugin for Vendure which exposes an `Article` entity in your Shop API, and\nyou have added this to your Stellate configuration:\n\n*Example*\n\n\nYou can then add a custom <a href='/reference/core-plugins/stellate-plugin/purge-rule#purgerule'>PurgeRule</a> to the StellatePlugin configuration:\n\n*Example*\n\n\n",
                "subsections": [],
                "code": [
                    "import { Config } from \"stellate\";",
                    "",
                    "const config: Config = {",
                    "    config: {",
                    "        // ...",
                    "        rules: [",
                    "            // ...",
                    "            {",
                    "                types: [\"Article\"],",
                    "                maxAge: 900,",
                    "                swr: 900,",
                    "                description: \"Cache Articles\",",
                    "            },",
                    "        ],",
                    "    },",
                    "    // ...",
                    "};",
                    "export default config;",
                    "import { StellatePlugin, defaultPurgeRules } from \"@vendure/stellate-plugin\";",
                    "import { VendureConfig } from \"@vendure/core\";",
                    "import { ArticleEvent } from \"./plugins/cms/events/article-event\";",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        StellatePlugin.init({",
                    "            // ...",
                    "            purgeRules: [",
                    "                ...defaultPurgeRules,",
                    "                new PurgeRule({",
                    "                    eventType: ArticleEvent,",
                    "                    handler: async ({ events, stellateService }) => {",
                    "                        const articleIds = events.map((e) => e.article.id);",
                    "                        stellateService.purge(\"Article\", articleIds);",
                    "                    },",
                    "                }),",
                    "            ],",
                    "        }),",
                    "    ],",
                    "};"
                ]
            },
            {
                "id": "devmode-&-debug-logging",
                "title": "DevMode & Debug Logging",
                "content": "\nIn development, you can set `devMode: true`, which will prevent any calls being made to the Stellate Purging API.\n\nIf you want to log the calls that _would_ be made to the Stellate Purge API when in devMode, you can set `debugLogging: true`.\nNote that debugLogging generates a lot of debug-level logging, so it is recommended to only enable this when needed.\n\n*Example*\n\n\n* Implements: <code>OnApplicationBootstrap</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/stellate-plugin/stellate-plugin-options#stellatepluginoptions'>StellatePluginOptions</a>`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/stellate-plugin/stellate-plugin-options#stellatepluginoptions'>StellatePluginOptions</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/stellate-plugin/stellate-plugin-options#stellatepluginoptions'>StellatePluginOptions</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, stellateService: <a href='/reference/core-plugins/stellate-plugin/stellate-service#stellateservice'>StellateService</a>, moduleRef: ModuleRef) => StellatePlugin`}   />\n\n\n"
                    },
                    {
                        "id": "onapplicationbootstrap",
                        "title": "onApplicationBootstrap",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { StellatePlugin, defaultPurgeRules } from '@vendure/stellate-plugin';",
                    "import { VendureConfig } from '@vendure/core';",
                    "",
                    "export const config: VendureConfig = {",
                    "   // ...",
                    "   plugins: [",
                    "       StellatePlugin.init({",
                    "           // ...",
                    "           devMode: !process.env.PRODUCTION,",
                    "           debugLogging: process.env.STELLATE_DEBUG_MODE ? true : false,",
                    "           purgeRules: [",
                    "               ...defaultPurgeRules,",
                    "           ],",
                    "       }),",
                    "   ],",
                    "};",
                    "class StellatePlugin implements OnApplicationBootstrap {",
                    "    static options: StellatePluginOptions;",
                    "    init(options: StellatePluginOptions) => ;",
                    "    constructor(options: StellatePluginOptions, eventBus: EventBus, stellateService: StellateService, moduleRef: ModuleRef)",
                    "    onApplicationBootstrap() => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "stellatepluginoptions",
        "metadata": {
            "title": "StellatePluginOptions",
            "keywords": [
                "stellatepluginoptions",
                "servicename",
                "apitoken",
                "purgerules",
                "defaultbuffertimems",
                "devmode",
                "debuglogging"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/stellate-plugin/src/types.ts\" sourceLine=\"9\" packageName=\"@vendure/stellate-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "stellatepluginoptions",
                "title": "StellatePluginOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/stellate-plugin/src/types.ts\" sourceLine=\"9\" packageName=\"@vendure/stellate-plugin\" />\n\nConfiguration options for the StellatePlugin.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "servicename",
                        "title": "serviceName",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe Stellate service name, i.e. `<service-name>.stellate.sh`\n"
                    },
                    {
                        "id": "apitoken",
                        "title": "apiToken",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe Stellate Purging API token. For instructions on how to generate the token,\nsee the [Stellate docs](https://docs.stellate.co/docs/purging-api#authentication)\n"
                    },
                    {
                        "id": "purgerules",
                        "title": "purgeRules",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/stellate-plugin/purge-rule#purgerule'>PurgeRule</a>[]`}   />\n\nAn array of <a href='/reference/core-plugins/stellate-plugin/purge-rule#purgerule'>PurgeRule</a> instances which are used to define how the plugin will\nrespond to Vendure events in order to trigger calls to the Stellate Purging API.\n"
                    },
                    {
                        "id": "defaultbuffertimems",
                        "title": "defaultBufferTimeMs",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"2000\"   />\n\nWhen events are published, the PurgeRules will buffer those events in order to efficiently\nbatch requests to the Stellate Purging API. You may wish to change the default, e.g. if you are\nrunning in a serverless environment and cannot introduce pauses after the main request has completed.\n"
                    },
                    {
                        "id": "devmode",
                        "title": "devMode",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nWhen set to `true`, calls will not be made to the Stellate Purge API.\n"
                    },
                    {
                        "id": "debuglogging",
                        "title": "debugLogging",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nIf set to true, the plugin will log the calls that would be made\nto the Stellate Purge API. Note, this generates a\nlot of debug-level logging.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface StellatePluginOptions {",
                    "    serviceName: string;",
                    "    apiToken: string;",
                    "    purgeRules: PurgeRule[];",
                    "    defaultBufferTimeMs?: number;",
                    "    devMode?: boolean;",
                    "    debugLogging?: boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "stellateservice",
        "metadata": {
            "title": "StellateService",
            "keywords": [
                "stellateservice",
                "constructor",
                "purgeproducts",
                "purgeproductvariants",
                "purgesearchresults",
                "purgealloftype",
                "purgecollections",
                "purgesearchresponsecacheidentifiers",
                "purge"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/stellate-plugin/src/service/stellate.service.ts\" sourceLine=\"23\" packageName=\"@vendure/stellate-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "stellateservice",
                "title": "StellateService",
                "content": "\n<GenerationInfo sourceFile=\"packages/stellate-plugin/src/service/stellate.service.ts\" sourceLine=\"23\" packageName=\"@vendure/stellate-plugin\" />\n\nThe StellateService is used to purge the Stellate cache when certain events occur.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/stellate-plugin/stellate-plugin-options#stellatepluginoptions'>StellatePluginOptions</a>) => StellateService`}   />\n\n\n"
                    },
                    {
                        "id": "purgeproducts",
                        "title": "purgeProducts",
                        "content": "\n<MemberInfo kind=\"method\" type={`(products: <a href='/reference/typescript-api/entities/product#product'>Product</a>[]) => `}   />\n\nPurges the cache for the given Products.\n"
                    },
                    {
                        "id": "purgeproductvariants",
                        "title": "purgeProductVariants",
                        "content": "\n<MemberInfo kind=\"method\" type={`(productVariants: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>[]) => `}   />\n\nPurges the cache for the given ProductVariants.\n"
                    },
                    {
                        "id": "purgesearchresults",
                        "title": "purgeSearchResults",
                        "content": "\n<MemberInfo kind=\"method\" type={`(items: Array&#60;<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a> | <a href='/reference/typescript-api/entities/product#product'>Product</a>&#62;) => `}   />\n\nPurges the cache for SearchResults which contain the given Products or ProductVariants.\n"
                    },
                    {
                        "id": "purgealloftype",
                        "title": "purgeAllOfType",
                        "content": "\n<MemberInfo kind=\"method\" type={`(type: CachedType) => `}   />\n\nPurges the entire cache for the given type.\n"
                    },
                    {
                        "id": "purgecollections",
                        "title": "purgeCollections",
                        "content": "\n<MemberInfo kind=\"method\" type={`(collections: <a href='/reference/typescript-api/entities/collection#collection'>Collection</a>[]) => `}   />\n\nPurges the cache for the given Collections.\n"
                    },
                    {
                        "id": "purgesearchresponsecacheidentifiers",
                        "title": "purgeSearchResponseCacheIdentifiers",
                        "content": "\n<MemberInfo kind=\"method\" type={`(collections: <a href='/reference/typescript-api/entities/collection#collection'>Collection</a>[]) => `}   />\n\nPurges the cache of SearchResults for the given Collections based on slug.\n"
                    },
                    {
                        "id": "purge",
                        "title": "purge",
                        "content": "\n<MemberInfo kind=\"method\" type={`(type: CachedType, keys?: <a href='/reference/typescript-api/common/id#id'>ID</a>[], keyName:  = 'id') => `}   />\n\nPurges the cache for the given type and keys.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class StellateService {",
                    "    constructor(options: StellatePluginOptions)",
                    "    purgeProducts(products: Product[]) => ;",
                    "    purgeProductVariants(productVariants: ProductVariant[]) => ;",
                    "    purgeSearchResults(items: Array<ProductVariant | Product>) => ;",
                    "    purgeAllOfType(type: CachedType) => ;",
                    "    purgeCollections(collections: Collection[]) => ;",
                    "    purgeSearchResponseCacheIdentifiers(collections: Collection[]) => ;",
                    "    purge(type: CachedType, keys?: ID[], keyName:  = 'id') => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "stock-control",
        "metadata": {
            "title": "Stock Control",
            "keywords": [
                "stock locations",
                "selecting a stock location",
                "displaying stock levels in the storefront",
                "stock control concepts",
                "stock allocation",
                "back orders",
                "stock movements"
            ],
            "description": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; Vendure includes features to help manage your stock levels, stock allocations and back orders. The basic purpose is to help you keep track of how many of a given ProductVariant you have available to sell. Stock control is enabled globally via the Global Settings: ![./global-stock-control.webp](./global-stock-control.webp)"
        },
        "content": "",
        "sections": [
            {
                "id": "stock-locations",
                "title": "Stock Locations",
                "content": "\nVendure uses the concept of [`StockLocations`](/reference/typescript-api/entities/stock-location/) to represent the physical locations where stock is stored. This could be a warehouse, a retail store, or any other location. If you do not have multiple stock locations, then you can simply use the default location which is created automatically.\n\n![Stock levels](./stock-levels.webp)\n\n",
                "subsections": [
                    {
                        "id": "selecting-a-stock-location",
                        "title": "Selecting a stock location",
                        "content": "\nWhen you have multiple stock locations set up, you need a way to determine which location to use when querying stock levels and when allocating stock to orders. This is handled by the [`StockLocationStrategy`](/reference/typescript-api/products-stock/stock-location-strategy/). This strategy exposes a number of methods which are used to determine which location (or locations) to use when:\n\n- querying stock levels (`getAvailableStock`)\n- allocating stock to orders (`forAllocation`)\n- releasing stock from orders (`forRelease`)\n- creating sales upon fulfillment (`forSale`)\n- returning items to stock upon cancellation (`forCancellation`)\n\nThe default strategy is the [`DefaultStockLocationStrategy`](/reference/typescript-api/products-stock/default-stock-location-strategy), which simply uses the default location for all of the above methods. This is suitable for all cases where there is just a single stock location.\n\nIf you have multiple stock locations, you'll need to implement a custom strategy which uses custom logic to determine which stock location to use. For instance, you could:\n\n- Use the location with the most stock available\n- Use the location closest to the customer\n- Use the location which has the cheapest shipping cost\n\n"
                    },
                    {
                        "id": "displaying-stock-levels-in-the-storefront",
                        "title": "Displaying stock levels in the storefront",
                        "content": "\nThe [`StockDisplayStrategy`](/reference/typescript-api/products-stock/stock-display-strategy/) is used to determine how stock levels are displayed in the storefront. The default strategy is the [`DefaultStockDisplayStrategy`](/reference/typescript-api/products-stock/default-stock-display-strategy), which will only display one of three states: `'IN_STOCK'`, `'OUT_OF_STOCK'` or `'LOW_STOCK'`. This is to avoid exposing your exact stock levels to the public, which can sometimes be undesirable.\n\nYou can implement a custom strategy to display stock levels in a different way. Here's how you would implement a custom strategy to display exact stock levels:\n\n\nThis strategy is then used in your config:\n\n\n"
                    }
                ],
                "code": [
                    "import { RequestContext, StockDisplayStrategy, ProductVariant } from '@vendure/core';",
                    "",
                    "export class ExactStockDisplayStrategy implements StockDisplayStrategy {",
                    "    getStockLevel(ctx: RequestContext, productVariant: ProductVariant, saleableStockLevel: number): string {",
                    "        return saleableStockLevel.toString();",
                    "    }",
                    "}",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { ExactStockDisplayStrategy } from './exact-stock-display-strategy';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    catalogOptions: {",
                    "        stockDisplayStrategy: new ExactStockDisplayStrategy(),",
                    "    },",
                    "};"
                ]
            },
            {
                "id": "stock-control-concepts",
                "title": "Stock Control Concepts",
                "content": "\n* **Stock on hand:** This refers to the number of physical units of a particular variant which you have in stock right now. This can be zero or more, but not negative.\n* **Allocated:** This refers to the number of units which have been assigned to Orders, but which have not yet been fulfilled.\n* **Out-of-stock threshold:** This value determines the stock level at which the variant is considered \"out of stock\". This value is set globally, but can be overridden for specific variants. It defaults to `0`.\n* **Saleable:** This means the number of units that can be sold right now. The formula is:\n    `saleable = stockOnHand - allocated - outOfStockThreshold`\n\nHere's a table to better illustrate the relationship between these concepts:\n\nStock on hand | Allocated | Out-of-stock threshold | Saleable\n--------------|-----------|------------------------|----------\n10            | 0         | 0                      | 10\n10            | 0         | 3                      | 7\n10            | 5         | 0                      | 5\n10            | 5         | 3                      | 2\n10            | 10        | 0                      | 0\n10            | 10        | -5                     | 5\n\nThe saleable value is what determines whether the customer is able to add a variant to an order. If there is 0 saleable stock, then any attempt to add to the order will result in an [`InsufficientStockError`](/reference/graphql-api/admin/object-types/#insufficientstockerror).\n\n\n<Tabs>\n<TabItem value=\"Request\" label=\"Request\" default>\n\n\n</TabItem>\n<TabItem value=\"Response\" label=\"Response\">\n\n\n</TabItem>\n</Tabs>\n\n",
                "subsections": [
                    {
                        "id": "stock-allocation",
                        "title": "Stock allocation",
                        "content": "\nAllocation mean we are setting stock aside because it has been purchased but not yet shipped. It prevents us from selling more of a particular item than we are able to deliver. \n\nBy default, stock gets allocated to an order once the order transitions to the `PaymentAuthorized` or `PaymentSettled` state. This is defined by the [`DefaultStockAllocationStrategy`](/reference/typescript-api/orders/default-stock-allocation-strategy). Using a custom [`StockAllocationStrategy`](/reference/typescript-api/orders/stock-allocation-strategy/) you can define your own rules for when stock is allocated.\n\nWith the [`defaultFulfillmentProcess`](/reference/typescript-api/fulfillment/fulfillment-process/#defaultfulfillmentprocess), allocated stock will be converted to **sales** and minused from the `stockOnHand` value when a Fulfillment is created.\n\n\n"
                    },
                    {
                        "id": "back-orders",
                        "title": "Back orders",
                        "content": "\nYou may have noticed that the `outOfStockThreshold` value can be set to a negative number. This allows you to sell variants even when you don't physically have them in stock. This is known as a \"back order\". \n\nBack orders can be really useful to allow orders to keep flowing even when stockOnHand temporarily drops to zero. For many businesses with predictable re-supply schedules they make a lot of sense.\n\nOnce a customer completes checkout, those variants in the order are marked as `allocated`. When a Fulfillment is created, those allocations are converted to Sales and the `stockOnHand` of each variant is adjusted. Fulfillments may only be created if there is sufficient stock on hand.\n\n"
                    },
                    {
                        "id": "stock-movements",
                        "title": "Stock movements",
                        "content": "\nThere is a [`StockMovement`](/reference/typescript-api/entities/stock-movement/) entity which records the history of stock changes. `StockMovement` is actually an abstract class, with the following concrete implementations:\n\n- [`Allocation`](/reference/typescript-api/entities/stock-movement/#allocation): When stock is allocated to an order, before the order is fulfilled. Adds stock to `allocated`, which reduces the saleable stock.\n- [`Sale`](/reference/typescript-api/entities/stock-movement/#sale): When allocated stock gets fulfilled. Removes stock from `allocated` as well as `stockOnHand`.\n- [`Cancellation`](/reference/typescript-api/entities/stock-movement/#cancellation): When items from a fulfilled order are cancelled, the stock is returned to `stockOnHand`. Adds stock to `stockOnHand`.\n- [`Release`](/reference/typescript-api/entities/stock-movement/#release): When items which have been allocated (but not yet converted to sales via the creation of a Fulfillment) are cancelled. Removes stock from `allocated`.\n- [`StockAdjustment`](/reference/typescript-api/entities/stock-movement/#stockadjustment): A general-purpose stock adjustment. Adds or removes stock from `stockOnHand`. Used when manually setting stock levels via the Admin UI, for example.\n\nStock movements can be queried via the `ProductVariant.stockMovements`. Here's an example where we query the stock levels and stock movements of a particular variant:\n\n\n<Tabs>\n<TabItem value=\"Request\" label=\"Request\" default>\n\n\n</TabItem>\n<TabItem value=\"Response\" label=\"Response\">\n\n\n</TabItem>\n</Tabs>\n\n"
                    }
                ],
                "code": [
                    "query AddItemToOrder {",
                    "    addItemToOrder(productVariantId: 123, quantity: 150) {",
                    "        ...on Order {",
                    "            id",
                    "            code",
                    "            totalQuantity",
                    "        }",
                    "        ...on ErrorResult {",
                    "            errorCode",
                    "            message",
                    "        }",
                    "        ...on InsufficientStockError {",
                    "            errorCode",
                    "            message",
                    "            quantityAvailable",
                    "            order {",
                    "                id",
                    "                totalQuantity",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "{",
                    "  \"data\": {",
                    "    \"addItemToOrder\": {",
                    "      \"errorCode\": \"INSUFFICIENT_STOCK_ERROR\",",
                    "      \"message\": \"Only 105 items were added to the order due to insufficient stock\",",
                    "      \"quantityAvailable\": 105,",
                    "      \"order\": {",
                    "        \"id\": \"2\",",
                    "        \"totalQuantity\": 106",
                    "      }",
                    "    }",
                    "  }",
                    "}",
                    "query GetStockMovements {",
                    "    productVariant(id: 1) {",
                    "        id",
                    "        name",
                    "        stockLevels {",
                    "            stockLocation {",
                    "                name",
                    "            }",
                    "            stockOnHand",
                    "            stockAllocated",
                    "        }",
                    "        stockMovements {",
                    "            items {",
                    "                ...on StockMovement {",
                    "                    createdAt",
                    "                    type",
                    "                    quantity",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "{",
                    "  \"data\": {",
                    "    \"productVariant\": {",
                    "      \"id\": \"1\",",
                    "      \"name\": \"Laptop 13 inch 8GB\",",
                    "      \"stockLevels\": [",
                    "        {",
                    "          \"stockLocation\": {",
                    "            \"name\": \"Default Stock Location\"",
                    "          },",
                    "          \"stockOnHand\": 100,",
                    "          \"stockAllocated\": 0",
                    "        }",
                    "      ],",
                    "      \"stockMovements\": {",
                    "        \"items\": [",
                    "          {",
                    "            \"createdAt\": \"2023-07-13T13:21:10.000Z\",",
                    "            \"type\": \"ADJUSTMENT\",",
                    "            \"quantity\": 100",
                    "          }",
                    "        ]",
                    "      }",
                    "    }",
                    "  }",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "stockallocationstrategy",
        "metadata": {
            "title": "StockAllocationStrategy",
            "keywords": [
                "stockallocationstrategy",
                "shouldallocatestock"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/order/stock-allocation-strategy.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "stockallocationstrategy",
                "title": "StockAllocationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/order/stock-allocation-strategy.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" />\n\nThis strategy is responsible for deciding at which stage in the order process\nstock will be allocated.\n\n:::info\n\nThis is configured via the `orderOptions.stockAllocationStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "shouldallocatestock",
                        "title": "shouldAllocateStock",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, fromState: <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, toState: <a href='/reference/typescript-api/orders/order-process#orderstate'>OrderState</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => boolean | Promise&#60;boolean&#62;`}   />\n\nThis method is called whenever an Order transitions from one state to another.\nIf it resolves to `true`, then stock will be allocated for this order.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface StockAllocationStrategy extends InjectableStrategy {",
                    "    shouldAllocateStock(",
                    "        ctx: RequestContext,",
                    "        fromState: OrderState,",
                    "        toState: OrderState,",
                    "        order: Order,",
                    "    ): boolean | Promise<boolean>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "stockdisplaystrategy",
        "metadata": {
            "title": "StockDisplayStrategy",
            "keywords": [
                "stockdisplaystrategy",
                "getstocklevel"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/catalog/stock-display-strategy.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "stockdisplaystrategy",
                "title": "StockDisplayStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/catalog/stock-display-strategy.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />\n\nDefines how the `ProductVariant.stockLevel` value is obtained. It is usually not desirable\nto directly expose stock levels over a public API, as this could be considered a leak of\nsensitive information. However, the storefront will usually want to display _some_ indication\nof whether a given ProductVariant is in stock.\n\n:::info\n\nThis is configured via the `catalogOptions.stockDisplayStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "getstocklevel",
                        "title": "getStockLevel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariant: <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>, saleableStockLevel: number) => string | Promise&#60;string&#62;`}   />\n\nReturns a string representing the stock level, which will be used directly\nin the GraphQL `ProductVariant.stockLevel` field.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface StockDisplayStrategy extends InjectableStrategy {",
                    "    getStockLevel(",
                    "        ctx: RequestContext,",
                    "        productVariant: ProductVariant,",
                    "        saleableStockLevel: number,",
                    "    ): string | Promise<string>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "stocklevel",
        "metadata": {
            "title": "StockLevel",
            "keywords": [
                "stocklevel",
                "constructor",
                "productvariant",
                "productvariantid",
                "stocklocation",
                "stocklocationid",
                "stockonhand",
                "stockallocated"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/stock-level/stock-level.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "stocklevel",
                "title": "StockLevel",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/stock-level/stock-level.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />\n\nA StockLevel represents the number of a particular <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a> which are available\nat a particular <a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: DeepPartial&#60;<a href='/reference/typescript-api/entities/stock-level#stocklevel'>StockLevel</a>&#62;) => StockLevel`}   />\n\n\n"
                    },
                    {
                        "id": "productvariant",
                        "title": "productVariant",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>`}   />\n\n\n"
                    },
                    {
                        "id": "productvariantid",
                        "title": "productVariantId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "stocklocation",
                        "title": "stockLocation",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>`}   />\n\n\n"
                    },
                    {
                        "id": "stocklocationid",
                        "title": "stockLocationId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "stockonhand",
                        "title": "stockOnHand",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "stockallocated",
                        "title": "stockAllocated",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class StockLevel extends VendureEntity {",
                    "    constructor(input: DeepPartial<StockLevel>)",
                    "    @Index()",
                    "    @ManyToOne(type => ProductVariant, productVariant => productVariant.stockLevels, { onDelete: 'CASCADE' })",
                    "    productVariant: ProductVariant;",
                    "    @EntityId()",
                    "    productVariantId: ID;",
                    "    @Index()",
                    "    @ManyToOne(type => StockLocation, { onDelete: 'CASCADE' })",
                    "    stockLocation: StockLocation;",
                    "    @EntityId()",
                    "    stockLocationId: ID;",
                    "    @Column()",
                    "    stockOnHand: number;",
                    "    @Column()",
                    "    stockAllocated: number;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "stocklevelservice",
        "metadata": {
            "title": "StockLevelService",
            "keywords": [
                "stocklevelservice",
                "constructor",
                "getstocklevel",
                "getstocklevelsforvariant",
                "getavailablestock",
                "updatestockonhandforlocation",
                "updatestockallocatedforlocation"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/stock-level.service.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "stocklevelservice",
                "title": "StockLevelService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/stock-level.service.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThe StockLevelService is responsible for managing the stock levels of ProductVariants.\nWhenever you need to adjust the `stockOnHand` or `stockAllocated` for a ProductVariant,\nyou should use this service.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, stockLocationService: StockLocationService, configService: ConfigService) => StockLevelService`}   />\n\n\n"
                    },
                    {
                        "id": "getstocklevel",
                        "title": "getStockLevel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>, stockLocationId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/stock-level#stocklevel'>StockLevel</a>&#62;`}   />\n\nReturns the StockLevel for the given <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a> and <a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>.\n"
                    },
                    {
                        "id": "getstocklevelsforvariant",
                        "title": "getStockLevelsForVariant",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/stock-level#stocklevel'>StockLevel</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getavailablestock",
                        "title": "getAvailableStock",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/products-stock/stock-location-strategy#availablestock'>AvailableStock</a>&#62;`}   />\n\nReturns the available stock (on hand and allocated) for the given <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>. This is determined\nby the configured <a href='/reference/typescript-api/products-stock/stock-location-strategy#stocklocationstrategy'>StockLocationStrategy</a>.\n"
                    },
                    {
                        "id": "updatestockonhandforlocation",
                        "title": "updateStockOnHandForLocation",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>, stockLocationId: <a href='/reference/typescript-api/common/id#id'>ID</a>, change: number) => `}   />\n\nUpdates the `stockOnHand` for the given <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a> and <a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>.\n"
                    },
                    {
                        "id": "updatestockallocatedforlocation",
                        "title": "updateStockAllocatedForLocation",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>, stockLocationId: <a href='/reference/typescript-api/common/id#id'>ID</a>, change: number) => `}   />\n\nUpdates the `stockAllocated` for the given <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a> and <a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class StockLevelService {",
                    "    constructor(connection: TransactionalConnection, stockLocationService: StockLocationService, configService: ConfigService)",
                    "    getStockLevel(ctx: RequestContext, productVariantId: ID, stockLocationId: ID) => Promise<StockLevel>;",
                    "    getStockLevelsForVariant(ctx: RequestContext, productVariantId: ID) => Promise<StockLevel[]>;",
                    "    getAvailableStock(ctx: RequestContext, productVariantId: ID) => Promise<AvailableStock>;",
                    "    updateStockOnHandForLocation(ctx: RequestContext, productVariantId: ID, stockLocationId: ID, change: number) => ;",
                    "    updateStockAllocatedForLocation(ctx: RequestContext, productVariantId: ID, stockLocationId: ID, change: number) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "stocklocation",
        "metadata": {
            "title": "StockLocation",
            "keywords": [
                "stocklocation",
                "constructor",
                "name",
                "description",
                "customfields",
                "channels"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/stock-location/stock-location.entity.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "stocklocation",
                "title": "StockLocation",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/stock-location/stock-location.entity.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />\n\nA StockLocation represents a physical location where stock is held. For example, a warehouse or a shop.\n\nWhen the stock of a <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a> is adjusted, the adjustment is applied to a specific StockLocation,\nand the stockOnHand of that ProductVariant is updated accordingly. When there are multiple StockLocations\nconfigured, the <a href='/reference/typescript-api/products-stock/stock-location-strategy#stocklocationstrategy'>StockLocationStrategy</a> is used to determine which StockLocation should be used for\na given operation.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code>HasCustomFields</code>, <code><a href='/reference/typescript-api/entities/interfaces#channelaware'>ChannelAware</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: DeepPartial&#60;<a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>&#62;) => StockLocation`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "description",
                        "title": "description",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomStockLocationFields`}   />\n\n\n"
                    },
                    {
                        "id": "channels",
                        "title": "channels",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/channel#channel'>Channel</a>[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class StockLocation extends VendureEntity implements HasCustomFields, ChannelAware {",
                    "    constructor(input: DeepPartial<StockLocation>)",
                    "    @Column()",
                    "    name: string;",
                    "    @Column()",
                    "    description: string;",
                    "    @Column(type => CustomStockLocationFields)",
                    "    customFields: CustomStockLocationFields;",
                    "    @ManyToMany(type => Channel)",
                    "    @JoinTable()",
                    "    channels: Channel[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "stocklocationstrategy",
        "metadata": {
            "title": "StockLocationStrategy",
            "keywords": [
                "stocklocationstrategy",
                "getavailablestock",
                "forallocation",
                "forrelease",
                "forsale",
                "forcancellation",
                "availablestock",
                "stockonhand",
                "stockallocated",
                "locationwithquantity",
                "location",
                "quantity"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/catalog/stock-location-strategy.ts\" sourceLine=\"55\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "stocklocationstrategy",
                "title": "StockLocationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/catalog/stock-location-strategy.ts\" sourceLine=\"55\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThe StockLocationStrategy is responsible for determining which <a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>s\nshould be used to fulfill an <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a> and how much stock should be allocated\nfrom each location. It is also used to determine the available stock for a given\n<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>.\n\n:::info\n\nThis is configured via the `catalogOptions.stockLocationStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "getavailablestock",
                        "title": "getAvailableStock",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>, stockLevels: <a href='/reference/typescript-api/entities/stock-level#stocklevel'>StockLevel</a>[]) => <a href='/reference/typescript-api/products-stock/stock-location-strategy#availablestock'>AvailableStock</a> | Promise&#60;<a href='/reference/typescript-api/products-stock/stock-location-strategy#availablestock'>AvailableStock</a>&#62;`}   />\n\nReturns the available stock for the given ProductVariant, taking into account\nthe stock levels at each StockLocation.\n"
                    },
                    {
                        "id": "forallocation",
                        "title": "forAllocation",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, stockLocations: <a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>[], orderLine: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>, quantity: number) => <a href='/reference/typescript-api/products-stock/stock-location-strategy#locationwithquantity'>LocationWithQuantity</a>[] | Promise&#60;<a href='/reference/typescript-api/products-stock/stock-location-strategy#locationwithquantity'>LocationWithQuantity</a>[]&#62;`}   />\n\nDetermines which StockLocations should be used to when allocating stock when\nand Order is placed.\n"
                    },
                    {
                        "id": "forrelease",
                        "title": "forRelease",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, stockLocations: <a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>[], orderLine: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>, quantity: number) => <a href='/reference/typescript-api/products-stock/stock-location-strategy#locationwithquantity'>LocationWithQuantity</a>[] | Promise&#60;<a href='/reference/typescript-api/products-stock/stock-location-strategy#locationwithquantity'>LocationWithQuantity</a>[]&#62;`}   />\n\nDetermines which StockLocations should be used to when releasing allocated\nstock when an OrderLine is cancelled before being fulfilled.\n"
                    },
                    {
                        "id": "forsale",
                        "title": "forSale",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, stockLocations: <a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>[], orderLine: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>, quantity: number) => <a href='/reference/typescript-api/products-stock/stock-location-strategy#locationwithquantity'>LocationWithQuantity</a>[] | Promise&#60;<a href='/reference/typescript-api/products-stock/stock-location-strategy#locationwithquantity'>LocationWithQuantity</a>[]&#62;`}   />\n\nDetermines which StockLocations should be used to when creating a Sale\nand reducing the stockOnHand upon fulfillment.\n"
                    },
                    {
                        "id": "forcancellation",
                        "title": "forCancellation",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, stockLocations: <a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>[], orderLine: <a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>, quantity: number) => <a href='/reference/typescript-api/products-stock/stock-location-strategy#locationwithquantity'>LocationWithQuantity</a>[] | Promise&#60;<a href='/reference/typescript-api/products-stock/stock-location-strategy#locationwithquantity'>LocationWithQuantity</a>[]&#62;`}   />\n\nDetermines which StockLocations should be used to when creating a Cancellation\nof an OrderLine which has already been fulfilled.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface StockLocationStrategy extends InjectableStrategy {",
                    "    getAvailableStock(",
                    "        ctx: RequestContext,",
                    "        productVariantId: ID,",
                    "        stockLevels: StockLevel[],",
                    "    ): AvailableStock | Promise<AvailableStock>;",
                    "    forAllocation(",
                    "        ctx: RequestContext,",
                    "        stockLocations: StockLocation[],",
                    "        orderLine: OrderLine,",
                    "        quantity: number,",
                    "    ): LocationWithQuantity[] | Promise<LocationWithQuantity[]>;",
                    "    forRelease(",
                    "        ctx: RequestContext,",
                    "        stockLocations: StockLocation[],",
                    "        orderLine: OrderLine,",
                    "        quantity: number,",
                    "    ): LocationWithQuantity[] | Promise<LocationWithQuantity[]>;",
                    "    forSale(",
                    "        ctx: RequestContext,",
                    "        stockLocations: StockLocation[],",
                    "        orderLine: OrderLine,",
                    "        quantity: number,",
                    "    ): LocationWithQuantity[] | Promise<LocationWithQuantity[]>;",
                    "    forCancellation(",
                    "        ctx: RequestContext,",
                    "        stockLocations: StockLocation[],",
                    "        orderLine: OrderLine,",
                    "        quantity: number,",
                    "    ): LocationWithQuantity[] | Promise<LocationWithQuantity[]>;",
                    "}"
                ]
            },
            {
                "id": "availablestock",
                "title": "AvailableStock",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/catalog/stock-location-strategy.ts\" sourceLine=\"18\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nThe overall available stock for a ProductVariant as determined by the logic of the\n<a href='/reference/typescript-api/products-stock/stock-location-strategy#stocklocationstrategy'>StockLocationStrategy</a>'s `getAvailableStock` method.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "stockonhand",
                        "title": "stockOnHand",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "stockallocated",
                        "title": "stockAllocated",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface AvailableStock {",
                    "    stockOnHand: number;",
                    "    stockAllocated: number;",
                    "}"
                ]
            },
            {
                "id": "locationwithquantity",
                "title": "LocationWithQuantity",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/catalog/stock-location-strategy.ts\" sourceLine=\"32\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nReturned by the `StockLocationStrategy` methods to indicate how much stock from each\nlocation should be used in the allocation/sale/release/cancellation of an OrderLine.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "location",
                        "title": "location",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>`}   />\n\n\n"
                    },
                    {
                        "id": "quantity",
                        "title": "quantity",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface LocationWithQuantity {",
                    "    location: StockLocation;",
                    "    quantity: number;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "stockmovement",
        "metadata": {
            "title": "StockMovement",
            "keywords": [
                "stockmovement",
                "type",
                "productvariant",
                "stocklocation",
                "stocklocationid",
                "quantity",
                "allocation",
                "constructor",
                "orderline",
                "cancellation",
                "release",
                "sale",
                "stockadjustment"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/stock-movement/stock-movement.entity.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "stockmovement",
                "title": "StockMovement",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/stock-movement/stock-movement.entity.ts\" sourceLine=\"19\" packageName=\"@vendure/core\" />\n\nA StockMovement is created whenever stock of a particular ProductVariant goes in\nor out.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`StockMovementType`}   />\n\n\n"
                    },
                    {
                        "id": "productvariant",
                        "title": "productVariant",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>`}   />\n\n\n"
                    },
                    {
                        "id": "stocklocation",
                        "title": "stockLocation",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/stock-location#stocklocation'>StockLocation</a>`}   />\n\n\n"
                    },
                    {
                        "id": "stocklocationid",
                        "title": "stockLocationId",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "quantity",
                        "title": "quantity",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class StockMovement extends VendureEntity {",
                    "    @Column({ nullable: false, type: 'varchar' })",
                    "    readonly type: StockMovementType;",
                    "    @Index()",
                    "    @ManyToOne(type => ProductVariant, variant => variant.stockMovements)",
                    "    productVariant: ProductVariant;",
                    "    @Index()",
                    "    @ManyToOne(type => StockLocation, { onDelete: 'CASCADE' })",
                    "    stockLocation: StockLocation;",
                    "    @EntityId()",
                    "    stockLocationId: ID;",
                    "    @Column()",
                    "    quantity: number;",
                    "}"
                ]
            },
            {
                "id": "allocation",
                "title": "Allocation",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/stock-movement/allocation.entity.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" />\n\nAn Allocation is created for each ProductVariant in an Order when the checkout is completed\n(as configured by the <a href='/reference/typescript-api/orders/stock-allocation-strategy#stockallocationstrategy'>StockAllocationStrategy</a>. This prevents stock being sold twice.\n\n* Extends: <code><a href='/reference/typescript-api/entities/stock-movement#stockmovement'>StockMovement</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: DeepPartial&#60;<a href='/reference/typescript-api/entities/stock-movement#allocation'>Allocation</a>&#62;) => Allocation`}   />\n\n\n"
                    },
                    {
                        "id": "orderline",
                        "title": "orderLine",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class Allocation extends StockMovement {",
                    "    readonly type = StockMovementType.ALLOCATION;",
                    "    constructor(input: DeepPartial<Allocation>)",
                    "    @Index()",
                    "    @ManyToOne(type => OrderLine)",
                    "    orderLine: OrderLine;",
                    "}"
                ]
            },
            {
                "id": "cancellation",
                "title": "Cancellation",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/stock-movement/cancellation.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />\n\nA Cancellation is created when OrderItems from a fulfilled Order are cancelled.\n\n* Extends: <code><a href='/reference/typescript-api/entities/stock-movement#stockmovement'>StockMovement</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: DeepPartial&#60;<a href='/reference/typescript-api/entities/stock-movement#cancellation'>Cancellation</a>&#62;) => Cancellation`}   />\n\n\n"
                    },
                    {
                        "id": "orderline",
                        "title": "orderLine",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class Cancellation extends StockMovement {",
                    "    readonly type = StockMovementType.CANCELLATION;",
                    "    constructor(input: DeepPartial<Cancellation>)",
                    "    @ManyToOne(type => OrderLine)",
                    "    orderLine: OrderLine;",
                    "}"
                ]
            },
            {
                "id": "release",
                "title": "Release",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/stock-movement/release.entity.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" />\n\nA Release is created when OrderItems which have been allocated (but not yet fulfilled)\nare cancelled.\n\n* Extends: <code><a href='/reference/typescript-api/entities/stock-movement#stockmovement'>StockMovement</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: DeepPartial&#60;<a href='/reference/typescript-api/entities/stock-movement#release'>Release</a>&#62;) => Release`}   />\n\n\n"
                    },
                    {
                        "id": "orderline",
                        "title": "orderLine",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class Release extends StockMovement {",
                    "    readonly type = StockMovementType.RELEASE;",
                    "    constructor(input: DeepPartial<Release>)",
                    "    @ManyToOne(type => OrderLine)",
                    "    orderLine: OrderLine;",
                    "}"
                ]
            },
            {
                "id": "sale",
                "title": "Sale",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/stock-movement/sale.entity.ts\" sourceLine=\"16\" packageName=\"@vendure/core\" />\n\nA Sale is created when OrderItems are fulfilled.\n\n* Extends: <code><a href='/reference/typescript-api/entities/stock-movement#stockmovement'>StockMovement</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: DeepPartial&#60;<a href='/reference/typescript-api/entities/stock-movement#sale'>Sale</a>&#62;) => Sale`}   />\n\n\n"
                    },
                    {
                        "id": "orderline",
                        "title": "orderLine",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class Sale extends StockMovement {",
                    "    readonly type = StockMovementType.SALE;",
                    "    constructor(input: DeepPartial<Sale>)",
                    "    @ManyToOne(type => OrderLine)",
                    "    orderLine: OrderLine;",
                    "}"
                ]
            },
            {
                "id": "stockadjustment",
                "title": "StockAdjustment",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/stock-movement/stock-adjustment.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nA StockAdjustment is created when the `stockOnHand` level of a ProductVariant is manually adjusted.\n\n* Extends: <code><a href='/reference/typescript-api/entities/stock-movement#stockmovement'>StockMovement</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input: DeepPartial&#60;<a href='/reference/typescript-api/entities/stock-movement#stockadjustment'>StockAdjustment</a>&#62;) => StockAdjustment`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class StockAdjustment extends StockMovement {",
                    "    readonly type = StockMovementType.ADJUSTMENT;",
                    "    constructor(input: DeepPartial<StockAdjustment>)",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "stockmovementservice",
        "metadata": {
            "title": "StockMovementService",
            "keywords": [
                "stockmovementservice",
                "shippingeligibilitycheckers",
                "shippingcalculators",
                "constructor",
                "getstockmovementsbyproductvariantid",
                "adjustproductvariantstock",
                "createallocationsfororder",
                "createallocationsfororderlines",
                "createsalesfororder",
                "createcancellationsfororderlines",
                "createreleasesfororderlines"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/stock-movement.service.ts\" sourceLine=\"43\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "stockmovementservice",
                "title": "StockMovementService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/stock-movement.service.ts\" sourceLine=\"43\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/stock-movement#stockmovement'>StockMovement</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "shippingeligibilitycheckers",
                        "title": "shippingEligibilityCheckers",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/shipping/shipping-eligibility-checker#shippingeligibilitychecker'>ShippingEligibilityChecker</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "shippingcalculators",
                        "title": "shippingCalculators",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/shipping/shipping-calculator#shippingcalculator'>ShippingCalculator</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, globalSettingsService: <a href='/reference/typescript-api/services/global-settings-service#globalsettingsservice'>GlobalSettingsService</a>, stockLevelService: <a href='/reference/typescript-api/services/stock-level-service#stocklevelservice'>StockLevelService</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, stockLocationService: StockLocationService, configService: ConfigService) => StockMovementService`}   />\n\n\n"
                    },
                    {
                        "id": "getstockmovementsbyproductvariantid",
                        "title": "getStockMovementsByProductVariantId",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>, options: StockMovementListOptions) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/stock-movement#stockmovement'>StockMovement</a>&#62;&#62;`}   />\n\nReturns a <a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a> of all StockMovements associated with the specified ProductVariant.\n"
                    },
                    {
                        "id": "adjustproductvariantstock",
                        "title": "adjustProductVariantStock",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, productVariantId: <a href='/reference/typescript-api/common/id#id'>ID</a>, stockOnHandNumberOrInput: number | StockLevelInput[]) => Promise&#60;<a href='/reference/typescript-api/entities/stock-movement#stockadjustment'>StockAdjustment</a>[]&#62;`}   />\n\nAdjusts the stock level of the ProductVariant, creating a new <a href='/reference/typescript-api/entities/stock-movement#stockadjustment'>StockAdjustment</a> entity\nin the process.\n"
                    },
                    {
                        "id": "createallocationsfororder",
                        "title": "createAllocationsForOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, order: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => Promise&#60;<a href='/reference/typescript-api/entities/stock-movement#allocation'>Allocation</a>[]&#62;`}   />\n\nCreates a new <a href='/reference/typescript-api/entities/stock-movement#allocation'>Allocation</a> for each OrderLine in the Order. For ProductVariants\nwhich are configured to track stock levels, the `ProductVariant.stockAllocated` value is\nincreased, indicating that this quantity of stock is allocated and cannot be sold.\n"
                    },
                    {
                        "id": "createallocationsfororderlines",
                        "title": "createAllocationsForOrderLines",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, lines: OrderLineInput[]) => Promise&#60;<a href='/reference/typescript-api/entities/stock-movement#allocation'>Allocation</a>[]&#62;`}   />\n\nCreates a new <a href='/reference/typescript-api/entities/stock-movement#allocation'>Allocation</a> for each of the given OrderLines. For ProductVariants\nwhich are configured to track stock levels, the `ProductVariant.stockAllocated` value is\nincreased, indicating that this quantity of stock is allocated and cannot be sold.\n"
                    },
                    {
                        "id": "createsalesfororder",
                        "title": "createSalesForOrder",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, lines: OrderLineInput[]) => Promise&#60;<a href='/reference/typescript-api/entities/stock-movement#sale'>Sale</a>[]&#62;`}   />\n\nCreates <a href='/reference/typescript-api/entities/stock-movement#sale'>Sale</a>s for each OrderLine in the Order. For ProductVariants\nwhich are configured to track stock levels, the `ProductVariant.stockAllocated` value is\nreduced and the `stockOnHand` value is also reduced by the OrderLine quantity, indicating\nthat the stock is no longer allocated, but is actually sold and no longer available.\n"
                    },
                    {
                        "id": "createcancellationsfororderlines",
                        "title": "createCancellationsForOrderLines",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, lineInputs: OrderLineInput[]) => Promise&#60;<a href='/reference/typescript-api/entities/stock-movement#cancellation'>Cancellation</a>[]&#62;`}   />\n\nCreates a <a href='/reference/typescript-api/entities/stock-movement#cancellation'>Cancellation</a> for each of the specified OrderItems. For ProductVariants\nwhich are configured to track stock levels, the `ProductVariant.stockOnHand` value is\nincreased for each Cancellation, allowing that stock to be sold again.\n"
                    },
                    {
                        "id": "createreleasesfororderlines",
                        "title": "createReleasesForOrderLines",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, lineInputs: OrderLineInput[]) => Promise&#60;<a href='/reference/typescript-api/entities/stock-movement#release'>Release</a>[]&#62;`}   />\n\nCreates a <a href='/reference/typescript-api/entities/stock-movement#release'>Release</a> for each of the specified OrderItems. For ProductVariants\nwhich are configured to track stock levels, the `ProductVariant.stockAllocated` value is\nreduced, indicating that this stock is once again available to buy.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class StockMovementService {",
                    "    shippingEligibilityCheckers: ShippingEligibilityChecker[];",
                    "    shippingCalculators: ShippingCalculator[];",
                    "    constructor(connection: TransactionalConnection, listQueryBuilder: ListQueryBuilder, globalSettingsService: GlobalSettingsService, stockLevelService: StockLevelService, eventBus: EventBus, stockLocationService: StockLocationService, configService: ConfigService)",
                    "    getStockMovementsByProductVariantId(ctx: RequestContext, productVariantId: ID, options: StockMovementListOptions) => Promise<PaginatedList<StockMovement>>;",
                    "    adjustProductVariantStock(ctx: RequestContext, productVariantId: ID, stockOnHandNumberOrInput: number | StockLevelInput[]) => Promise<StockAdjustment[]>;",
                    "    createAllocationsForOrder(ctx: RequestContext, order: Order) => Promise<Allocation[]>;",
                    "    createAllocationsForOrderLines(ctx: RequestContext, lines: OrderLineInput[]) => Promise<Allocation[]>;",
                    "    createSalesForOrder(ctx: RequestContext, lines: OrderLineInput[]) => Promise<Sale[]>;",
                    "    createCancellationsForOrderLines(ctx: RequestContext, lineInputs: OrderLineInput[]) => Promise<Cancellation[]>;",
                    "    createReleasesForOrderLines(ctx: RequestContext, lineInputs: OrderLineInput[]) => Promise<Release[]>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "storefront-migration",
        "metadata": {
            "title": "Storefront Migration",
            "keywords": [
                "storefront migration"
            ],
            "description": "There are relatively few breaking changes that will affect the storefront. - The `setOrderShippingMethod` mutation now takes an array of shipping method IDs rather than just a single one. This is so we can support multiple shipping methods per Order. ```diff -mutation setOrderShippingMethod($shippingMethodId: ID!) { +mutation setOrderShippingMethod($shippingMethodId: [ID!]!) {"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "stripeplugin",
        "metadata": {
            "title": "StripePlugin",
            "keywords": [
                "stripeplugin",
                "requirements",
                "setup",
                "storefront usage",
                "or",
                "local development",
                "options",
                "init",
                "stripepluginoptions",
                "storecustomersinstripe",
                "metadata",
                "paymentintentcreateparams",
                "customercreateparams"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/payments-plugin/src/stripe/stripe.plugin.ts\" sourceLine=\"161\" packageName=\"@vendure/payments-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "stripeplugin",
                "title": "StripePlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/payments-plugin/src/stripe/stripe.plugin.ts\" sourceLine=\"161\" packageName=\"@vendure/payments-plugin\" />\n\nPlugin to enable payments through [Stripe](https://stripe.com/docs) via the Payment Intents API.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "requirements",
                "title": "Requirements",
                "content": "\n1. You will need to create a Stripe account and get your secret key in the dashboard.\n2. Create a webhook endpoint in the Stripe dashboard (Developers -> Webhooks, \"Add an endpoint\") which listens to the `payment_intent.succeeded`\nand `payment_intent.payment_failed` events. The URL should be `https://my-server.com/payments/stripe`, where\n`my-server.com` is the host of your Vendure server. *Note:* for local development, you'll need to use\nthe Stripe CLI to test your webhook locally. See the _local development_ section below.\n3. Get the signing secret for the newly created webhook.\n4. Install the Payments plugin and the Stripe Node library:\n\n    `yarn add @vendure/payments-plugin stripe`\n\n    or\n\n    `npm install @vendure/payments-plugin stripe`\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "setup",
                "title": "Setup",
                "content": "\n1. Add the plugin to your VendureConfig `plugins` array:\n    ```ts\n    import { StripePlugin } from '@vendure/payments-plugin/package/stripe';\n\n    // ...\n\n    plugins: [\n      StripePlugin.init({\n        // This prevents different customers from using the same PaymentIntent\n        storeCustomersInStripe: true,\n      }),\n    ]\n    ````\n    For all the plugin options, see the <a href='/reference/core-plugins/payments-plugin/stripe-plugin#stripepluginoptions'>StripePluginOptions</a> type.\n2. Create a new PaymentMethod in the Admin UI, and select \"Stripe payments\" as the handler.\n3. Set the webhook secret and API key in the PaymentMethod form.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "storefront-usage",
                "title": "Storefront usage",
                "content": "\nThe plugin is designed to work with the [Custom payment flow](https://stripe.com/docs/payments/accept-a-payment?platform=web&ui=elements).\nIn this flow, Stripe provides libraries which handle the payment UI and confirmation for you. You can install it in your storefront project\nwith:\n\n\nIf you are using React, you should also consider installing `@stripe/react-stripe-js`, which is a wrapper around Stripe Elements.\n\nThe high-level workflow is:\n1. Create a \"payment intent\" on the server by executing the `createStripePaymentIntent` mutation which is exposed by this plugin.\n2. Use the returned client secret to instantiate the Stripe Payment Element:\n   ```ts\n   import { Elements } from '@stripe/react-stripe-js';\n   import { loadStripe, Stripe } from '@stripe/stripe-js';\n   import { CheckoutForm } from './CheckoutForm';\n\n   const stripePromise = getStripe('pk_test_....wr83u');\n\n   type StripePaymentsProps = {\n     clientSecret: string;\n     orderCode: string;\n   }\n\n   export function StripePayments({ clientSecret, orderCode }: StripePaymentsProps) {\n     const options = {\n       // passing the client secret obtained from the server\n       clientSecret,\n     }\n     return (\n       <Elements stripe={stripePromise} options={options}>\n         <CheckoutForm orderCode={orderCode} />\n       </Elements>\n     );\n   }\n   ```\n   ```ts\n   // CheckoutForm.tsx\n   import { useStripe, useElements, PaymentElement } from '@stripe/react-stripe-js';\n   import { FormEvent } from 'react';\n\n   export const CheckoutForm = ({ orderCode }: { orderCode: string }) => {\n     const stripe = useStripe();\n     const elements = useElements();\n\n     const handleSubmit = async (event: FormEvent) => {\n       // We don't want to let default form submission happen here,\n       // which would refresh the page.\n       event.preventDefault();\n\n       if (!stripe || !elements) {\n         // Stripe.js has not yet loaded.\n         // Make sure to disable form submission until Stripe.js has loaded.\n         return;\n       }\n\n       const result = await stripe.confirmPayment({\n         //`Elements` instance that was used to create the Payment Element\n         elements,\n         confirmParams: {\n           return_url: location.origin + `/checkout/confirmation/${orderCode}`,\n         },\n       });\n\n       if (result.error) {\n         // Show error to your customer (for example, payment details incomplete)\n         console.log(result.error.message);\n       } else {\n         // Your customer will be redirected to your `return_url`. For some payment\n         // methods like iDEAL, your customer will be redirected to an intermediate\n         // site first to authorize the payment, then redirected to the `return_url`.\n       }\n     };\n\n     return (\n       <form onSubmit={handleSubmit}>\n         <PaymentElement />\n         <button disabled={!stripe}>Submit</button>\n       </form>\n     );\n   };\n   ```\n3. Once the form is submitted and Stripe processes the payment, the webhook takes care of updating the order without additional action\nin the storefront. As in the code above, the customer will be redirected to `/checkout/confirmation/${orderCode}`.\n\n:::info\nA full working storefront example of the Stripe integration can be found in the\n[Remix Starter repo](https://github.com/vendure-ecommerce/storefront-remix-starter/tree/master/app/components/checkout/stripe)\n:::\n\n",
                "subsections": [],
                "code": [
                    "yarn add @stripe/stripe-js",
                    "# or",
                    "npm install @stripe/stripe-js"
                ]
            },
            {
                "id": "local-development",
                "title": "Local development",
                "content": "\n1. Download & install the Stripe CLI: https://stripe.com/docs/stripe-cli\n2. From your Stripe dashboard, go to Developers -> Webhooks and click \"Add an endpoint\" and follow the instructions\nunder \"Test in a local environment\".\n3. The Stripe CLI command will look like\n   ```shell\n   stripe listen --forward-to localhost:3000/payments/stripe\n   ```\n4. The Stripe CLI will create a webhook signing secret you can then use in your config of the StripePlugin.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/core-plugins/payments-plugin/stripe-plugin#stripepluginoptions'>StripePluginOptions</a>`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/core-plugins/payments-plugin/stripe-plugin#stripepluginoptions'>StripePluginOptions</a>) => Type&#60;<a href='/reference/core-plugins/payments-plugin/stripe-plugin#stripeplugin'>StripePlugin</a>&#62;`}   />\n\nInitialize the Stripe payment plugin\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "class StripePlugin {",
                    "    static options: StripePluginOptions;",
                    "    init(options: StripePluginOptions) => Type<StripePlugin>;",
                    "}"
                ]
            },
            {
                "id": "stripepluginoptions",
                "title": "StripePluginOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/payments-plugin/src/stripe/types.ts\" sourceLine=\"27\" packageName=\"@vendure/payments-plugin\" />\n\nConfiguration options for the Stripe payments plugin.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "storecustomersinstripe",
                        "title": "storeCustomersInStripe",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nIf set to `true`, a [Customer](https://stripe.com/docs/api/customers) object will be created in Stripe - if\nit doesn't already exist - for authenticated users, which prevents payment methods attached to other Customers\nto be used with the same PaymentIntent. This is done by adding a custom field to the Customer entity to store\nthe Stripe customer ID, so switching this on will require a database migration / synchronization.\n"
                    },
                    {
                        "id": "metadata",
                        "title": "metadata",
                        "content": "\n<MemberInfo kind=\"property\" type={`(\n         injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>,\n         ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>,\n         order: <a href='/reference/typescript-api/entities/order#order'>Order</a>,\n     ) =&#62; Stripe.MetadataParam | Promise&#60;Stripe.MetadataParam&#62;`}  since=\"1.9.7\"  />\n\nAttach extra metadata to Stripe payment intent creation call.\n\n*Example*\n\n"
                    },
                    {
                        "id": "paymentintentcreateparams",
                        "title": "paymentIntentCreateParams",
                        "content": "import { VendureConfig } from '@vendure/core';\nimport { StripePlugin } from '@vendure/payments-plugin/package/stripe';\n\nexport const config: VendureConfig = {\n  // ...\n  plugins: [\n    StripePlugin.init({\n      paymentIntentCreateParams: (injector, ctx, order) => {\n        return {\n          description: `Order #${order.code} for ${order.customer?.emailAddress}`\n        },\n      }\n    }),\n  ],\n};\n"
                    },
                    {
                        "id": "customercreateparams",
                        "title": "customerCreateParams",
                        "content": "import { EntityHydrator, VendureConfig } from '@vendure/core';\nimport { StripePlugin } from '@vendure/payments-plugin/package/stripe';\n\nexport const config: VendureConfig = {\n  // ...\n  plugins: [\n    StripePlugin.init({\n      storeCustomersInStripe: true,\n      customerCreateParams: async (injector, ctx, order) => {\n        const entityHydrator = injector.get(EntityHydrator);\n        const customer = order.customer;\n        await entityHydrator.hydrate(ctx, customer, { relations: ['addresses'] });\n        const defaultBillingAddress = customer.addresses.find(a => a.defaultBillingAddress) ?? customer.addresses[0];\n        return {\n          address: {\n              line1: defaultBillingAddress.streetLine1 || order.shippingAddress?.streetLine1,\n              postal_code: defaultBillingAddress.postalCode || order.shippingAddress?.postalCode,\n              city: defaultBillingAddress.city || order.shippingAddress?.city,\n              state: defaultBillingAddress.province || order.shippingAddress?.province,\n              country: defaultBillingAddress.country.code || order.shippingAddress?.countryCode,\n          },\n        },\n      }\n    }),\n  ],\n};\n"
                    }
                ],
                "code": [
                    "interface StripePluginOptions {",
                    "    storeCustomersInStripe?: boolean;",
                    "    metadata?: (",
                    "        injector: Injector,",
                    "        ctx: RequestContext,",
                    "        order: Order,",
                    "    ) => Stripe.MetadataParam | Promise<Stripe.MetadataParam>;",
                    "    paymentIntentCreateParams?: (",
                    "        injector: Injector,",
                    "        ctx: RequestContext,",
                    "        order: Order,",
                    "    ) => AdditionalPaymentIntentCreateParams | Promise<AdditionalPaymentIntentCreateParams>;",
                    "    customerCreateParams?: (",
                    "        injector: Injector,",
                    "        ctx: RequestContext,",
                    "        order: Order,",
                    "    ) => AdditionalCustomerCreateParams | Promise<AdditionalCustomerCreateParams>;",
                    "}",
                    "import { EntityHydrator, VendureConfig } from '@vendure/core';",
                    "import { StripePlugin } from '@vendure/payments-plugin/package/stripe';",
                    "",
                    "export const config: VendureConfig = {",
                    "  // ...",
                    "  plugins: [",
                    "    StripePlugin.init({",
                    "      metadata: async (injector, ctx, order) => {",
                    "        const hydrator = injector.get(EntityHydrator);",
                    "        await hydrator.hydrate(ctx, order, { relations: ['customer'] });",
                    "        return {",
                    "          description: `Order #${order.code} for ${order.customer!.emailAddress}`",
                    "        },",
                    "      }",
                    "    }),",
                    "  ],",
                    "};",
                    "",
                    "Note: If the `paymentIntentCreateParams` is also used and returns a `metadata` key, then the values",
                    "returned by both functions will be merged.",
                    "",
                    "<MemberInfo kind=\"property\" type={`(",
                    "         injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>,",
                    "         ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>,",
                    "         order: <a href='/reference/typescript-api/entities/order#order'>Order</a>,",
                    "     ) =&#62; AdditionalPaymentIntentCreateParams | Promise&#60;AdditionalPaymentIntentCreateParams&#62;`}  since=\"2.1.0\"  />",
                    "",
                    "Provide additional parameters to the Stripe payment intent creation. By default,",
                    "the plugin will already pass the `amount`, `currency`, `customer` and `automatic_payment_methods: { enabled: true }` parameters.",
                    "",
                    "For example, if you want to provide a `description` for the payment intent, you can do so like this:",
                    "",
                    "*Example*",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`(",
                    "         injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>,",
                    "         ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>,",
                    "         order: <a href='/reference/typescript-api/entities/order#order'>Order</a>,",
                    "     ) =&#62; AdditionalCustomerCreateParams | Promise&#60;AdditionalCustomerCreateParams&#62;`}  since=\"2.1.0\"  />",
                    "",
                    "Provide additional parameters to the Stripe customer creation. By default,",
                    "the plugin will already pass the `email` and `name` parameters.",
                    "",
                    "For example, if you want to provide an address for the customer:",
                    "",
                    "*Example*",
                    "",
                    "",
                    "",
                    "</div>",
                    ""
                ]
            }
        ]
    },
    {
        "id": "subscribablejob",
        "metadata": {
            "title": "SubscribableJob",
            "keywords": [
                "subscribablejob",
                "constructor",
                "updates"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/job-queue/subscribable-job.ts\" sourceLine=\"58\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "subscribablejob",
                "title": "SubscribableJob",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/subscribable-job.ts\" sourceLine=\"58\" packageName=\"@vendure/core\" />\n\nThis is a type of Job object that allows you to subscribe to updates to the Job. It is returned\nby the <a href='/reference/typescript-api/job-queue/#jobqueue'>JobQueue</a>'s `add()` method. Note that the subscription capability is only supported\nif the <a href='/reference/typescript-api/job-queue/job-queue-strategy#jobqueuestrategy'>JobQueueStrategy</a> implements the <a href='/reference/typescript-api/job-queue/inspectable-job-queue-strategy#inspectablejobqueuestrategy'>InspectableJobQueueStrategy</a> interface (e.g.\nthe <a href='/reference/typescript-api/job-queue/sql-job-queue-strategy#sqljobqueuestrategy'>SqlJobQueueStrategy</a> does support this).\n\n* Extends: <code><a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;T&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;T&#62;, jobQueueStrategy: <a href='/reference/typescript-api/job-queue/job-queue-strategy#jobqueuestrategy'>JobQueueStrategy</a>) => SubscribableJob`}   />\n\n\n"
                    },
                    {
                        "id": "updates",
                        "title": "updates",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options?: <a href='/reference/typescript-api/job-queue/types#jobupdateoptions'>JobUpdateOptions</a>) => Observable&#60;<a href='/reference/typescript-api/job-queue/types#jobupdate'>JobUpdate</a>&#60;T&#62;&#62;`}   />\n\nReturns an Observable stream of updates to the Job. Works by polling the current JobQueueStrategy's `findOne()` method\nto obtain updates. If this updates are not subscribed to, then no polling occurs.\n\nPolling interval, timeout and other options may be configured with an options arguments <a href='/reference/typescript-api/job-queue/types#jobupdateoptions'>JobUpdateOptions</a>.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class SubscribableJob<T extends JobData<T> = any> extends Job<T> {",
                    "    constructor(job: Job<T>, jobQueueStrategy: JobQueueStrategy)",
                    "    updates(options?: JobUpdateOptions) => Observable<JobUpdate<T>>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "superadmincredentials",
        "metadata": {
            "title": "SuperadminCredentials",
            "keywords": [
                "superadmincredentials",
                "identifier",
                "password"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"772\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "superadmincredentials",
                "title": "SuperadminCredentials",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"772\" packageName=\"@vendure/core\" />\n\nThese credentials will be used to create the Superadmin user & administrator\nwhen Vendure first bootstraps.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "identifier",
                        "title": "identifier",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'superadmin'\"   />\n\nThe identifier to be used to create a superadmin account\n"
                    },
                    {
                        "id": "password",
                        "title": "password",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'superadmin'\"   />\n\nThe password to be used to create a superadmin account\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface SuperadminCredentials {",
                    "    identifier: string;",
                    "    password: string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "surcharge",
        "metadata": {
            "title": "Surcharge",
            "keywords": [
                "surcharge",
                "constructor",
                "description",
                "listprice",
                "listpriceincludestax",
                "sku",
                "taxlines",
                "order",
                "ordermodification",
                "price",
                "pricewithtax",
                "taxrate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/surcharge/surcharge.entity.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "surcharge",
                "title": "Surcharge",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/surcharge/surcharge.entity.ts\" sourceLine=\"21\" packageName=\"@vendure/core\" />\n\nA Surcharge represents an arbitrary extra item on an <a href='/reference/typescript-api/entities/order#order'>Order</a> which is not\na ProductVariant. It can be used to e.g. represent payment-related surcharges.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/surcharge#surcharge'>Surcharge</a>&#62;) => Surcharge`}   />\n\n\n"
                    },
                    {
                        "id": "description",
                        "title": "description",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "listprice",
                        "title": "listPrice",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "listpriceincludestax",
                        "title": "listPriceIncludesTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "sku",
                        "title": "sku",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "taxlines",
                        "title": "taxLines",
                        "content": "\n<MemberInfo kind=\"property\" type={`TaxLine[]`}   />\n\n\n"
                    },
                    {
                        "id": "order",
                        "title": "order",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>`}   />\n\n\n"
                    },
                    {
                        "id": "ordermodification",
                        "title": "orderModification",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order-modification#ordermodification'>OrderModification</a>`}   />\n\n\n"
                    },
                    {
                        "id": "price",
                        "title": "price",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "pricewithtax",
                        "title": "priceWithTax",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "taxrate",
                        "title": "taxRate",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Surcharge extends VendureEntity {",
                    "    constructor(input?: DeepPartial<Surcharge>)",
                    "    @Column()",
                    "    description: string;",
                    "    @Money()",
                    "    listPrice: number;",
                    "    @Column()",
                    "    listPriceIncludesTax: boolean;",
                    "    @Column()",
                    "    sku: string;",
                    "    @Column('simple-json')",
                    "    taxLines: TaxLine[];",
                    "    @Index()",
                    "    @ManyToOne(type => Order, order => order.surcharges, { onDelete: 'CASCADE' })",
                    "    order: Order;",
                    "    @Index()",
                    "    @ManyToOne(type => OrderModification, orderModification => orderModification.surcharges)",
                    "    orderModification: OrderModification;",
                    "    price: number",
                    "    priceWithTax: number",
                    "    taxRate: number",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "systemoptions",
        "metadata": {
            "title": "SystemOptions",
            "keywords": [
                "systemoptions",
                "healthchecks"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"994\" packageName=\"@vendure/core\" since=\"1.6.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "systemoptions",
                "title": "SystemOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"994\" packageName=\"@vendure/core\" since=\"1.6.0\" />\n\nOptions relating to system functions.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "healthchecks",
                        "title": "healthChecks",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/health-check/health-check-strategy#healthcheckstrategy'>HealthCheckStrategy</a>[]`} default=\"[<a href='/reference/typescript-api/health-check/type-ormhealth-check-strategy#typeormhealthcheckstrategy'>TypeORMHealthCheckStrategy</a>]\"  since=\"1.6.0\"  />\n\nDefines an array of <a href='/reference/typescript-api/health-check/health-check-strategy#healthcheckstrategy'>HealthCheckStrategy</a> instances which are used by the `/health` endpoint to verify\nthat any critical systems which the Vendure server depends on are also healthy.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface SystemOptions {",
                    "    healthChecks?: HealthCheckStrategy[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "tabs",
        "metadata": {
            "title": "Tabs",
            "keywords": [
                "tabs"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "tag",
        "metadata": {
            "title": "Tag",
            "keywords": [
                "tag",
                "constructor",
                "value"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/tag/tag.entity.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "tag",
                "title": "Tag",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/tag/tag.entity.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nA tag is an arbitrary label which can be applied to certain entities.\nIt is used to help organize and filter those entities.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/tag#tag'>Tag</a>&#62;) => Tag`}   />\n\n\n"
                    },
                    {
                        "id": "value",
                        "title": "value",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Tag extends VendureEntity {",
                    "    constructor(input?: DeepPartial<Tag>)",
                    "    @Column()",
                    "    value: string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "tagservice",
        "metadata": {
            "title": "TagService",
            "keywords": [
                "tagservice",
                "constructor",
                "findall",
                "findone",
                "create",
                "update",
                "delete",
                "valuestotags",
                "gettagsforentity"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/tag.service.ts\" sourceLine=\"24\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "tagservice",
                "title": "TagService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/tag.service.ts\" sourceLine=\"24\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/tag#tag'>Tag</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>) => TagService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/tag#tag'>Tag</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/tag#tag'>Tag</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, tagId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/tag#tag'>Tag</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateTagInput) => `}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateTagInput) => `}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "valuestotags",
                        "title": "valuesToTags",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, values: string[]) => Promise&#60;<a href='/reference/typescript-api/entities/tag#tag'>Tag</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "gettagsforentity",
                        "title": "getTagsForEntity",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: Type&#60;<a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a> &#38; <a href='/reference/typescript-api/entities/interfaces#taggable'>Taggable</a>&#62;, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/tag#tag'>Tag</a>[]&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class TagService {",
                    "    constructor(connection: TransactionalConnection, listQueryBuilder: ListQueryBuilder)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<Tag>) => Promise<PaginatedList<Tag>>;",
                    "    findOne(ctx: RequestContext, tagId: ID) => Promise<Tag | undefined>;",
                    "    create(ctx: RequestContext, input: CreateTagInput) => ;",
                    "    update(ctx: RequestContext, input: UpdateTagInput) => ;",
                    "    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "    valuesToTags(ctx: RequestContext, values: string[]) => Promise<Tag[]>;",
                    "    getTagsForEntity(ctx: RequestContext, entity: Type<VendureEntity & Taggable>, id: ID) => Promise<Tag[]>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "tax",
        "metadata": {
            "title": "Tax",
            "keywords": [
                "tax"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "taxcategory",
        "metadata": {
            "title": "TaxCategory",
            "keywords": [
                "taxcategory",
                "constructor",
                "name",
                "isdefault",
                "customfields"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/tax-category/tax-category.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "taxcategory",
                "title": "TaxCategory",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/tax-category/tax-category.entity.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" />\n\nA TaxCategory defines what type of taxes to apply to a <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a>.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code>HasCustomFields</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>&#62;) => TaxCategory`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "isdefault",
                        "title": "isDefault",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomTaxCategoryFields`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class TaxCategory extends VendureEntity implements HasCustomFields {",
                    "    constructor(input?: DeepPartial<TaxCategory>)",
                    "    @Column() name: string;",
                    "    @Column({ default: false }) isDefault: boolean;",
                    "    @Column(type => CustomTaxCategoryFields)",
                    "    customFields: CustomTaxCategoryFields;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "taxcategoryservice",
        "metadata": {
            "title": "TaxCategoryService",
            "keywords": [
                "taxcategoryservice",
                "constructor",
                "findall",
                "findone",
                "create",
                "update",
                "delete"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/tax-category.service.ts\" sourceLine=\"29\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "taxcategoryservice",
                "title": "TaxCategoryService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/tax-category.service.ts\" sourceLine=\"29\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>) => TaxCategoryService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, taxCategoryId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateTaxCategoryInput) => Promise&#60;<a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateTaxCategoryInput) => Promise&#60;<a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class TaxCategoryService {",
                    "    constructor(connection: TransactionalConnection, eventBus: EventBus, listQueryBuilder: ListQueryBuilder)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<TaxCategory>) => Promise<PaginatedList<TaxCategory>>;",
                    "    findOne(ctx: RequestContext, taxCategoryId: ID) => Promise<TaxCategory | undefined>;",
                    "    create(ctx: RequestContext, input: CreateTaxCategoryInput) => Promise<TaxCategory>;",
                    "    update(ctx: RequestContext, input: UpdateTaxCategoryInput) => Promise<TaxCategory>;",
                    "    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "taxes",
        "metadata": {
            "title": "Taxes",
            "keywords": [
                "taxes",
                "tax category",
                "tax rate",
                "tax compliance"
            ],
            "description": "Taxes represent extra charges on top of the base price of a product. There are various forms of taxes that might be applicable, depending on local laws and the laws of the regions that your business serves. Common forms of applicable taxes are: * Value added tax (VAT) * Goods and services tax (GST) * Sales taxes (as in the USA) In Vendure every product variant is assigned a **tax category**. In many countries, different rates of tax apply depending on the type of product being sold."
        },
        "content": "",
        "sections": [
            {
                "id": "tax-category",
                "title": "Tax Category",
                "content": "\nIn Vendure every product variant is assigned a **tax category**. In many countries, different rates of tax apply depending on the type of product being sold.\n\nFor example, in the UK there are three rates of VAT:\n\n* Standard rate (20%)\n* Reduced rate (5%)\n* Zero rate (0%)\n\nMost types of products would fall into the \"standard rate\" category, but for instance books are classified as \"zero rate\".\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "tax-rate",
                "title": "Tax Rate",
                "content": "\nTax rates set the rate of tax for a given **tax category** destined for a particular **zone**. They are used by default in Vendure when calculating all taxes.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "tax-compliance",
                "title": "Tax Compliance",
                "content": "\nPlease note that tax compliance is a complex topic that varies significantly between countries. Vendure does not (and cannot) offer a complete out-of-the-box tax solution which is guaranteed to be compliant with your use-case. What we strive to do is to provide a very flexible set of tools that your developers can use to tailor tax calculations exactly to your needs. These are covered in the [Developer's guide to taxes]({{< relref \"/guides/developer-guide/taxes\" >}}). \n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "taxlinecalculationstrategy",
        "metadata": {
            "title": "TaxLineCalculationStrategy",
            "keywords": [
                "taxlinecalculationstrategy",
                "calculate",
                "calculatetaxlinesargs",
                "ctx",
                "order",
                "orderline",
                "applicabletaxrate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/tax/tax-line-calculation-strategy.ts\" sourceLine=\"29\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "taxlinecalculationstrategy",
                "title": "TaxLineCalculationStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/tax/tax-line-calculation-strategy.ts\" sourceLine=\"29\" packageName=\"@vendure/core\" />\n\nThis strategy defines how the TaxLines on OrderItems are calculated. By default,\nthe <a href='/reference/typescript-api/tax/default-tax-line-calculation-strategy#defaulttaxlinecalculationstrategy'>DefaultTaxLineCalculationStrategy</a> is used, which directly applies\na single TaxLine based on the applicable <a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>.\n\nHowever, custom strategies may use any suitable method for calculating TaxLines.\nFor example, a third-party tax API or a lookup of a custom tax table may be used.\n\n:::info\n\nThis is configured via the `taxOptions.taxLineCalculationStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "calculate",
                        "title": "calculate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(args: <a href='/reference/typescript-api/tax/tax-line-calculation-strategy#calculatetaxlinesargs'>CalculateTaxLinesArgs</a>) => TaxLine[] | Promise&#60;TaxLine[]&#62;`}   />\n\nThis method is called when calculating the Order prices. Since it will be called\nwhenever an Order is modified in some way (adding/removing items, applying promotions,\nsetting ShippingMethod etc), care should be taken so that calling the function does\nnot adversely impact overall performance. For example, by using caching and only\ncalling external APIs when absolutely necessary.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface TaxLineCalculationStrategy extends InjectableStrategy {",
                    "    calculate(args: CalculateTaxLinesArgs): TaxLine[] | Promise<TaxLine[]>;",
                    "}"
                ]
            },
            {
                "id": "calculatetaxlinesargs",
                "title": "CalculateTaxLinesArgs",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/tax/tax-line-calculation-strategy.ts\" sourceLine=\"47\" packageName=\"@vendure/core\" />\n\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "ctx",
                        "title": "ctx",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>`}   />\n\n\n"
                    },
                    {
                        "id": "order",
                        "title": "order",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order#order'>Order</a>`}   />\n\n\n"
                    },
                    {
                        "id": "orderline",
                        "title": "orderLine",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/order-line#orderline'>OrderLine</a>`}   />\n\n\n"
                    },
                    {
                        "id": "applicabletaxrate",
                        "title": "applicableTaxRate",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface CalculateTaxLinesArgs {",
                    "    ctx: RequestContext;",
                    "    order: Order;",
                    "    orderLine: OrderLine;",
                    "    applicableTaxRate: TaxRate;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "taxoptions",
        "metadata": {
            "title": "TaxOptions",
            "keywords": [
                "taxoptions",
                "taxzonestrategy",
                "taxlinecalculationstrategy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"826\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "taxoptions",
                "title": "TaxOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"826\" packageName=\"@vendure/core\" />\n\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "taxzonestrategy",
                        "title": "taxZoneStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/tax/tax-zone-strategy#taxzonestrategy'>TaxZoneStrategy</a>`} default=\"<a href='/reference/typescript-api/tax/default-tax-zone-strategy#defaulttaxzonestrategy'>DefaultTaxZoneStrategy</a>\"   />\n\nDefines the strategy used to determine the applicable Zone used in tax calculations.\n"
                    },
                    {
                        "id": "taxlinecalculationstrategy",
                        "title": "taxLineCalculationStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/tax/tax-line-calculation-strategy#taxlinecalculationstrategy'>TaxLineCalculationStrategy</a>`} default=\"<a href='/reference/typescript-api/tax/default-tax-line-calculation-strategy#defaulttaxlinecalculationstrategy'>DefaultTaxLineCalculationStrategy</a>\"   />\n\nDefines the strategy used to calculate the TaxLines added to OrderItems.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface TaxOptions {",
                    "    taxZoneStrategy?: TaxZoneStrategy;",
                    "    taxLineCalculationStrategy?: TaxLineCalculationStrategy;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "taxrate",
        "metadata": {
            "title": "TaxRate",
            "keywords": [
                "taxrate",
                "constructor",
                "name",
                "enabled",
                "value",
                "category",
                "zone",
                "customergroup",
                "customfields",
                "taxcomponentof",
                "netpriceof",
                "taxpayableon",
                "grosspriceof",
                "apply",
                "test"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/tax-rate/tax-rate.entity.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "taxrate",
                "title": "TaxRate",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/tax-rate/tax-rate.entity.ts\" sourceLine=\"25\" packageName=\"@vendure/core\" />\n\nA TaxRate defines the rate of tax to apply to a <a href='/reference/typescript-api/entities/product-variant#productvariant'>ProductVariant</a> based on three factors:\n\n1. the ProductVariant's <a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>\n2. the applicable <a href='/reference/typescript-api/entities/zone#zone'>Zone</a> (\"applicable\" being defined by the configured <a href='/reference/typescript-api/tax/tax-zone-strategy#taxzonestrategy'>TaxZoneStrategy</a>)\n3. the <a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a> of the current Customer\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code>HasCustomFields</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>&#62;) => TaxRate`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "enabled",
                        "title": "enabled",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "value",
                        "title": "value",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "category",
                        "title": "category",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>`}   />\n\n\n"
                    },
                    {
                        "id": "zone",
                        "title": "zone",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>`}   />\n\n\n"
                    },
                    {
                        "id": "customergroup",
                        "title": "customerGroup",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/customer-group#customergroup'>CustomerGroup</a>`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomTaxRateFields`}   />\n\n\n"
                    },
                    {
                        "id": "taxcomponentof",
                        "title": "taxComponentOf",
                        "content": "\n<MemberInfo kind=\"method\" type={`(grossPrice: number) => number`}   />\n\n\n"
                    },
                    {
                        "id": "netpriceof",
                        "title": "netPriceOf",
                        "content": "\n<MemberInfo kind=\"method\" type={`(grossPrice: number) => number`}   />\n\n\n"
                    },
                    {
                        "id": "taxpayableon",
                        "title": "taxPayableOn",
                        "content": "\n<MemberInfo kind=\"method\" type={`(netPrice: number) => number`}   />\n\n\n"
                    },
                    {
                        "id": "grosspriceof",
                        "title": "grossPriceOf",
                        "content": "\n<MemberInfo kind=\"method\" type={`(netPrice: number) => number`}   />\n\n\n"
                    },
                    {
                        "id": "apply",
                        "title": "apply",
                        "content": "\n<MemberInfo kind=\"method\" type={`(price: number) => TaxLine`}   />\n\n\n"
                    },
                    {
                        "id": "test",
                        "title": "test",
                        "content": "\n<MemberInfo kind=\"method\" type={`(zone: <a href='/reference/typescript-api/entities/zone#zone'>Zone</a>, taxCategory: <a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>) => boolean`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class TaxRate extends VendureEntity implements HasCustomFields {",
                    "    constructor(input?: DeepPartial<TaxRate>)",
                    "    @Column() name: string;",
                    "    @Column() enabled: boolean;",
                    "    @Column({ type: 'decimal', precision: 5, scale: 2, transformer: new DecimalTransformer() }) value: number;",
                    "    @Index()",
                    "    @ManyToOne(type => TaxCategory)",
                    "    category: TaxCategory;",
                    "    @Index()",
                    "    @ManyToOne(type => Zone)",
                    "    zone: Zone;",
                    "    @Index()",
                    "    @ManyToOne(type => CustomerGroup, { nullable: true })",
                    "    customerGroup?: CustomerGroup;",
                    "    @Column(type => CustomTaxRateFields)",
                    "    customFields: CustomTaxRateFields;",
                    "    taxComponentOf(grossPrice: number) => number;",
                    "    netPriceOf(grossPrice: number) => number;",
                    "    taxPayableOn(netPrice: number) => number;",
                    "    grossPriceOf(netPrice: number) => number;",
                    "    apply(price: number) => TaxLine;",
                    "    test(zone: Zone, taxCategory: TaxCategory) => boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "taxrateservice",
        "metadata": {
            "title": "TaxRateService",
            "keywords": [
                "taxrateservice",
                "constructor",
                "findall",
                "findone",
                "create",
                "update",
                "delete",
                "getapplicabletaxrate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/tax-rate.service.ts\" sourceLine=\"34\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "taxrateservice",
                "title": "TaxRateService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/tax-rate.service.ts\" sourceLine=\"34\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>, configService: ConfigService) => TaxRateService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>&#62;, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, taxRateId: <a href='/reference/typescript-api/common/id#id'>ID</a>, relations?: RelationPaths&#60;<a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateTaxRateInput) => Promise&#60;<a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateTaxRateInput) => Promise&#60;<a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getapplicabletaxrate",
                        "title": "getApplicableTaxRate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, zone: <a href='/reference/typescript-api/entities/zone#zone'>Zone</a>, taxCategory: <a href='/reference/typescript-api/entities/tax-category#taxcategory'>TaxCategory</a>) => Promise&#60;<a href='/reference/typescript-api/entities/tax-rate#taxrate'>TaxRate</a>&#62;`}   />\n\nReturns the applicable TaxRate based on the specified Zone and TaxCategory. Used when calculating Order\nprices.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class TaxRateService {",
                    "    constructor(connection: TransactionalConnection, eventBus: EventBus, listQueryBuilder: ListQueryBuilder, configService: ConfigService)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<TaxRate>, relations?: RelationPaths<TaxRate>) => Promise<PaginatedList<TaxRate>>;",
                    "    findOne(ctx: RequestContext, taxRateId: ID, relations?: RelationPaths<TaxRate>) => Promise<TaxRate | undefined>;",
                    "    create(ctx: RequestContext, input: CreateTaxRateInput) => Promise<TaxRate>;",
                    "    update(ctx: RequestContext, input: UpdateTaxRateInput) => Promise<TaxRate>;",
                    "    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "    getApplicableTaxRate(ctx: RequestContext, zone: Zone, taxCategory: TaxCategory) => Promise<TaxRate>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "taxzonestrategy",
        "metadata": {
            "title": "TaxZoneStrategy",
            "keywords": [
                "taxzonestrategy",
                "determinetaxzone"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/tax/tax-zone-strategy.ts\" sourceLine=\"28\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "taxzonestrategy",
                "title": "TaxZoneStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/tax/tax-zone-strategy.ts\" sourceLine=\"28\" packageName=\"@vendure/core\" />\n\nDefines how the active <a href='/reference/typescript-api/entities/zone#zone'>Zone</a> is determined for the purposes of calculating taxes.\n\nThis strategy is used in 2 scenarios:\n\n1. To determine the applicable Zone when calculating the taxRate to apply when displaying ProductVariants. In this case the\n`order` argument will be undefined, as the request is not related to a specific Order.\n2. To determine the applicable Zone when calculating the taxRate on the contents of a specific Order. In this case the\n`order` argument _will_ be defined, and can be used in the logic. For example, the shipping address can be taken into account.\n\nNote that this method is called very often in a typical user session, so any work it performs should be designed with as little\nperformance impact as possible.\n\n:::info\n\nThis is configured via the `taxOptions.taxZoneStrategy` property of\nyour VendureConfig.\n\n:::\n\n* Extends: <code><a href='/reference/typescript-api/common/injectable-strategy#injectablestrategy'>InjectableStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "determinetaxzone",
                        "title": "determineTaxZone",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, zones: <a href='/reference/typescript-api/entities/zone#zone'>Zone</a>[], channel: <a href='/reference/typescript-api/entities/channel#channel'>Channel</a>, order?: <a href='/reference/typescript-api/entities/order#order'>Order</a>) => <a href='/reference/typescript-api/entities/zone#zone'>Zone</a> | Promise&#60;<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>&#62; | undefined`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface TaxZoneStrategy extends InjectableStrategy {",
                    "    determineTaxZone(",
                    "        ctx: RequestContext,",
                    "        zones: Zone[],",
                    "        channel: Channel,",
                    "        order?: Order,",
                    "    ): Zone | Promise<Zone> | undefined;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "templateloader",
        "metadata": {
            "title": "TemplateLoader",
            "keywords": [
                "templateloader",
                "loadtemplate",
                "loadpartials",
                "filebasedtemplateloader",
                "constructor"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"392\" packageName=\"@vendure/email-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "templateloader",
                "title": "TemplateLoader",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"392\" packageName=\"@vendure/email-plugin\" />\n\nLoads email templates based on the given request context, type and template name\nand return the template as a string.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "loadtemplate",
                        "title": "loadTemplate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>, ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: LoadTemplateInput) => Promise&#60;string&#62;`}   />\n\nLoad template and return it's content as a string\n"
                    },
                    {
                        "id": "loadpartials",
                        "title": "loadPartials",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => Promise&#60;Partial[]&#62;`}   />\n\nLoad partials and return their contents.\nThis method is only called during initialization, i.e. during server startup.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "import { EmailPlugin, TemplateLoader } from '@vendure/email-plugin';",
                    "",
                    "class MyTemplateLoader implements TemplateLoader {",
                    "     loadTemplate(injector, ctx, { type, templateName }){",
                    "         return myCustomTemplateFunction(ctx);",
                    "     }",
                    "}",
                    "",
                    "// In vendure-config.ts:",
                    "...",
                    "EmailPlugin.init({",
                    "    templateLoader: new MyTemplateLoader()",
                    "    ...",
                    "})",
                    "interface TemplateLoader {",
                    "    loadTemplate(injector: Injector, ctx: RequestContext, input: LoadTemplateInput): Promise<string>;",
                    "    loadPartials?(): Promise<Partial[]>;",
                    "}"
                ]
            },
            {
                "id": "filebasedtemplateloader",
                "title": "FileBasedTemplateLoader",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/template-loader.ts\" sourceLine=\"15\" packageName=\"@vendure/email-plugin\" />\n\nLoads email templates from the local file system. This is the default\nloader used by the EmailPlugin.\n\n* Implements: <code><a href='/reference/core-plugins/email-plugin/template-loader#templateloader'>TemplateLoader</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(templatePath: string) => FileBasedTemplateLoader`}   />\n\n\n"
                    },
                    {
                        "id": "loadtemplate",
                        "title": "loadTemplate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(_injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>, _ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, { type, templateName }: LoadTemplateInput) => Promise&#60;string&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "loadpartials",
                        "title": "loadPartials",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => Promise&#60;Partial[]&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class FileBasedTemplateLoader implements TemplateLoader {",
                    "    constructor(templatePath: string)",
                    "    loadTemplate(_injector: Injector, _ctx: RequestContext, { type, templateName }: LoadTemplateInput) => Promise<string>;",
                    "    loadPartials() => Promise<Partial[]>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "testconfig",
        "metadata": {
            "title": "TestConfig",
            "keywords": [
                "testconfig",
                "logging"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/testing/src/config/test-config.ts\" sourceLine=\"42\" packageName=\"@vendure/testing\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "testconfig",
                "title": "testConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/testing/src/config/test-config.ts\" sourceLine=\"42\" packageName=\"@vendure/testing\" />\n\nA <a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a> object used for e2e tests. This configuration uses sqljs as the database\nand configures some special settings which are optimized for e2e tests:\n\n* `entityIdStrategy: new TestingEntityIdStrategy()` This ID strategy uses auto-increment IDs but encodes all IDs\nto be prepended with the string `'T_'`, so ID `1` becomes `'T_1'`.\n* `logger: new NoopLogger()` Do no output logs by default\n* `assetStorageStrategy: new TestingAssetStorageStrategy()` This strategy does not actually persist any binary data to disk.\n* `assetPreviewStrategy: new TestingAssetPreviewStrategy()` This strategy is a no-op.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "logging",
                "title": "Logging",
                "content": "By default, the testConfig does not output any log messages. This is most desirable to keep a clean CI output.\nHowever, for debugging purposes, it can make it hard to figure out why tests fail.\n\nYou can enable default logging behaviour with the environment variable `LOG`:\n\n\n\n",
                "subsections": [],
                "code": [
                    "LOG=true yarn e2e"
                ]
            }
        ]
    },
    {
        "id": "testdbinitializer",
        "metadata": {
            "title": "TestDbInitializer",
            "keywords": [
                "testdbinitializer",
                "init",
                "populate",
                "destroy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/testing/src/initializers/test-db-initializer.ts\" sourceLine=\"23\" packageName=\"@vendure/testing\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "testdbinitializer",
                "title": "TestDbInitializer",
                "content": "\n<GenerationInfo sourceFile=\"packages/testing/src/initializers/test-db-initializer.ts\" sourceLine=\"23\" packageName=\"@vendure/testing\" />\n\nDefines how the e2e TestService sets up a particular DB to run a single test suite.\nThe `@vendure/testing` package ships with initializers for sql.js, MySQL & Postgres.\n\nCustom initializers can be created by implementing this interface and registering\nit with the <a href='/reference/typescript-api/testing/register-initializer#registerinitializer'>registerInitializer</a> function:\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(testFileName: string, connectionOptions: T) => Promise&#60;T&#62;`}   />\n\nResponsible for creating a database for the current test suite.\nTypically, this method will:\n\n* use the testFileName parameter to derive a database name\n* create the database\n* mutate the `connetionOptions` object to point to that new database\n"
                    },
                    {
                        "id": "populate",
                        "title": "populate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(populateFn: () =&#62; Promise&#60;void&#62;) => Promise&#60;void&#62;`}   />\n\nExecute the populateFn to populate your database.\n"
                    },
                    {
                        "id": "destroy",
                        "title": "destroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => void | Promise&#60;void&#62;`}   />\n\nClean up any resources used during the init() phase (i.e. close open DB connections)\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "export class CockroachDbInitializer implements TestDbInitializer<CockroachConnectionOptions> {",
                    "    // database-specific implementation goes here",
                    "}",
                    "",
                    "registerInitializer('cockroachdb', new CockroachDbInitializer());",
                    "interface TestDbInitializer<T extends BaseConnectionOptions> {",
                    "    init(testFileName: string, connectionOptions: T): Promise<T>;",
                    "    populate(populateFn: () => Promise<void>): Promise<void>;",
                    "    destroy(): void | Promise<void>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "testenvironment",
        "metadata": {
            "title": "TestEnvironment",
            "keywords": [
                "testenvironment",
                "server",
                "adminclient",
                "shopclient"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/testing/src/create-test-environment.ts\" sourceLine=\"13\" packageName=\"@vendure/testing\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "testenvironment",
                "title": "TestEnvironment",
                "content": "\n<GenerationInfo sourceFile=\"packages/testing/src/create-test-environment.ts\" sourceLine=\"13\" packageName=\"@vendure/testing\" />\n\nThe return value of <a href='/reference/typescript-api/testing/create-test-environment#createtestenvironment'>createTestEnvironment</a>, containing the test server\nand clients for the Shop API and Admin API.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "server",
                        "title": "server",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/testing/test-server#testserver'>TestServer</a>`}   />\n\nA Vendure server instance against which GraphQL requests can be made.\n"
                    },
                    {
                        "id": "adminclient",
                        "title": "adminClient",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/testing/simple-graph-qlclient#simplegraphqlclient'>SimpleGraphQLClient</a>`}   />\n\nA GraphQL client configured for the Admin API.\n"
                    },
                    {
                        "id": "shopclient",
                        "title": "shopClient",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/testing/simple-graph-qlclient#simplegraphqlclient'>SimpleGraphQLClient</a>`}   />\n\nA GraphQL client configured for the Shop API.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface TestEnvironment {",
                    "    server: TestServer;",
                    "    adminClient: SimpleGraphQLClient;",
                    "    shopClient: SimpleGraphQLClient;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "testing",
        "metadata": {
            "title": "Testing",
            "keywords": [
                "testing"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "testinglogger",
        "metadata": {
            "title": "TestingLogger",
            "keywords": [
                "testinglogger",
                "constructor",
                "debugspy",
                "errorspy",
                "infospy",
                "verbosespy",
                "warnspy",
                "debug",
                "error",
                "info",
                "verbose",
                "warn"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/testing/src/testing-logger.ts\" sourceLine=\"55\" packageName=\"@vendure/testing\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "testinglogger",
                "title": "TestingLogger",
                "content": "\n<GenerationInfo sourceFile=\"packages/testing/src/testing-logger.ts\" sourceLine=\"55\" packageName=\"@vendure/testing\" />\n\nThe TestingLogger can be used in unit tests or e2e tests to make assertions on whether the various\nLogger methods have been called, and which arguments.\n\nHere's some examples of how to use it in e2e tests and unit tests. In both cases we are using\nthe Jest testing framework, but the TestingLogger should work with other similar frameworks\n(e.g. replacing `jest.fn()` with `jasmine.createSpy()`).\n\n*Example*\n\n\n*Example*\n\n\n* Implements: <code><a href='/reference/typescript-api/logger/vendure-logger#vendurelogger'>VendureLogger</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(createSpyFn: () =&#62; Spy) => TestingLogger`}   />\n\n\n"
                    },
                    {
                        "id": "debugspy",
                        "title": "debugSpy",
                        "content": "\n<MemberInfo kind=\"property\" type={`Spy`}   />\n\n\n"
                    },
                    {
                        "id": "errorspy",
                        "title": "errorSpy",
                        "content": "\n<MemberInfo kind=\"property\" type={`Spy`}   />\n\n\n"
                    },
                    {
                        "id": "infospy",
                        "title": "infoSpy",
                        "content": "\n<MemberInfo kind=\"property\" type={`Spy`}   />\n\n\n"
                    },
                    {
                        "id": "verbosespy",
                        "title": "verboseSpy",
                        "content": "\n<MemberInfo kind=\"property\" type={`Spy`}   />\n\n\n"
                    },
                    {
                        "id": "warnspy",
                        "title": "warnSpy",
                        "content": "\n<MemberInfo kind=\"property\" type={`Spy`}   />\n\n\n"
                    },
                    {
                        "id": "debug",
                        "title": "debug",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "error",
                        "title": "error",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string, trace?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "info",
                        "title": "info",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "verbose",
                        "title": "verbose",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "warn",
                        "title": "warn",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "// e2e test example",
                    "import { createTestEnvironment, TestingLogger } from '@vendure/testing';",
                    "",
                    "const testingLogger = new TestingLogger(() => jest.fn());",
                    "",
                    "const { server, adminClient, shopClient } = createTestEnvironment({",
                    "  ...testConfig,",
                    "  logger: testingLogger,",
                    "});",
                    "",
                    "// e2e testing setup omitted",
                    "",
                    "it('should log an error', async () => {",
                    "  // The `errorSpy` property exposes the Jest mock function",
                    "  testingLogger.errorSpy.mockClear();",
                    "",
                    "  await doSomethingThatErrors();",
                    "",
                    "  expect(testingLogger.errorSpy).toHaveBeenCalled();",
                    "});",
                    "// unit test example",
                    "import { Test } from '@nestjs/testing';",
                    "import { Logger } from '@vendure/core';",
                    "import { TestingLogger } from '@vendure/testing';",
                    "",
                    "beforeEach(async () => {",
                    "  const moduleRef = await Test.createTestingModule({",
                    "    // Nest testing setup omitted",
                    "  }).compile();",
                    "",
                    "  Logger.useLogger(testingLogger);",
                    "  moduleRef.useLogger(new Logger());",
                    "}",
                    "class TestingLogger<Spy extends (...args: any[]) => any> implements VendureLogger {",
                    "    constructor(createSpyFn: () => Spy)",
                    "    debugSpy: Spy;",
                    "    errorSpy: Spy;",
                    "    infoSpy: Spy;",
                    "    verboseSpy: Spy;",
                    "    warnSpy: Spy;",
                    "    debug(message: string, context?: string) => void;",
                    "    error(message: string, context?: string, trace?: string) => void;",
                    "    info(message: string, context?: string) => void;",
                    "    verbose(message: string, context?: string) => void;",
                    "    warn(message: string, context?: string) => void;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "testserver",
        "metadata": {
            "title": "TestServer",
            "keywords": [
                "testserver",
                "app",
                "constructor",
                "init",
                "bootstrap",
                "destroy"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/testing/src/test-server.ts\" sourceLine=\"18\" packageName=\"@vendure/testing\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "testserver",
                "title": "TestServer",
                "content": "\n<GenerationInfo sourceFile=\"packages/testing/src/test-server.ts\" sourceLine=\"18\" packageName=\"@vendure/testing\" />\n\nA real Vendure server against which the e2e tests should be run.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "app",
                        "title": "app",
                        "content": "\n<MemberInfo kind=\"property\" type={`INestApplication`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(vendureConfig: Required&#60;<a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a>&#62;) => TestServer`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: <a href='/reference/typescript-api/testing/test-server-options#testserveroptions'>TestServerOptions</a>) => Promise&#60;void&#62;`}   />\n\nBootstraps an instance of Vendure server and populates the database according to the options\npassed in. Should be called in the `beforeAll` function.\n\nThe populated data is saved into an .sqlite file for each test file. On subsequent runs, this file\nis loaded so that the populate step can be skipped, which speeds up the tests significantly.\n"
                    },
                    {
                        "id": "bootstrap",
                        "title": "bootstrap",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\nBootstraps a Vendure server instance. Generally the `.init()` method should be used, as that will also\npopulate the test data. However, the `bootstrap()` method is sometimes useful in tests which need to\nstart and stop a Vendure instance multiple times without re-populating data.\n"
                    },
                    {
                        "id": "destroy",
                        "title": "destroy",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\nDestroy the Vendure server instance and clean up all resources.\nShould be called after all tests have run, e.g. in an `afterAll` function.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class TestServer {",
                    "    public app: INestApplication;",
                    "    constructor(vendureConfig: Required<VendureConfig>)",
                    "    init(options: TestServerOptions) => Promise<void>;",
                    "    bootstrap() => ;",
                    "    destroy() => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "testserveroptions",
        "metadata": {
            "title": "TestServerOptions",
            "keywords": [
                "testserveroptions",
                "productscsvpath",
                "initialdata",
                "customercount",
                "logging"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/testing/src/types.ts\" sourceLine=\"14\" packageName=\"@vendure/testing\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "testserveroptions",
                "title": "TestServerOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/testing/src/types.ts\" sourceLine=\"14\" packageName=\"@vendure/testing\" />\n\nConfiguration options used to initialize an instance of the <a href='/reference/typescript-api/testing/test-server#testserver'>TestServer</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "productscsvpath",
                        "title": "productsCsvPath",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe path to an optional CSV file containing product data to import.\n"
                    },
                    {
                        "id": "initialdata",
                        "title": "initialData",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/import-export/initial-data#initialdata'>InitialData</a>`}   />\n\nAn object containing non-product data which is used to populate the database.\n"
                    },
                    {
                        "id": "customercount",
                        "title": "customerCount",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"10\"   />\n\nThe number of fake Customers to populate into the database.\n"
                    },
                    {
                        "id": "logging",
                        "title": "logging",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nSet this to `true` to log some information about the database population process.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface TestServerOptions {",
                    "    productsCsvPath?: string;",
                    "    initialData: InitialData;",
                    "    customerCount?: number;",
                    "    logging?: boolean;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "timeagopipe",
        "metadata": {
            "title": "TimeAgoPipe",
            "keywords": [
                "timeagopipe",
                "constructor",
                "transform"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/time-ago.pipe.ts\" sourceLine=\"18\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "timeagopipe",
                "title": "TimeAgoPipe",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/pipes/time-ago.pipe.ts\" sourceLine=\"18\" packageName=\"@vendure/admin-ui\" />\n\nConverts a date into the format \"3 minutes ago\", \"5 hours ago\" etc.\n\n*Example*\n\n\n* Implements: <code>PipeTransform</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(i18nService: <a href='/reference/typescript-api/common/i18n-service#i18nservice'>I18nService</a>) => TimeAgoPipe`}   />\n\n\n"
                    },
                    {
                        "id": "transform",
                        "title": "transform",
                        "content": "\n<MemberInfo kind=\"method\" type={`(value: string | Date, nowVal?: string | Date) => string`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "{{ order.orderPlacedAt | timeAgo }}",
                    "class TimeAgoPipe implements PipeTransform {",
                    "    constructor(i18nService: I18nService)",
                    "    transform(value: string | Date, nowVal?: string | Date) => string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "transaction-decorator",
        "metadata": {
            "title": "Transaction Decorator",
            "keywords": [
                "transaction",
                "transactionmode",
                "transactionisolationlevel"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/api/decorators/transaction.decorator.ts\" sourceLine=\"81\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "transaction",
                "title": "Transaction",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/api/decorators/transaction.decorator.ts\" sourceLine=\"81\" packageName=\"@vendure/core\" />\n\nRuns the decorated method in a TypeORM transaction. It works by creating a transactional\nQueryRunner which gets attached to the RequestContext object. When the RequestContext\nis the passed to the <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a> `getRepository()` method, this\nQueryRunner is used to execute the queries within this transaction.\n\nEssentially, the entire resolver function is wrapped in a try-catch block which commits the\ntransaction on successful completion of the method, or rolls back the transaction in an unhandled\nerror is thrown.\n\n*Example*\n\n\n\n\n",
                "subsections": [],
                "code": [
                    "// in a GraphQL resolver file",
                    "",
                    "@Transaction()",
                    "async myMutation(@Ctx() ctx: RequestContext) {",
                    "  // as long as the `ctx` object is passed in to",
                    "  // all database operations, the entire mutation",
                    "  // will be run as an atomic transaction, and rolled",
                    "  // back if an error is thrown.",
                    "  const result = this.myService.createThing(ctx);",
                    "  return this.myService.updateOtherThing(ctx, result.id);",
                    "}"
                ]
            },
            {
                "id": "transactionmode",
                "title": "TransactionMode",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/api/decorators/transaction.decorator.ts\" sourceLine=\"32\" packageName=\"@vendure/core\" />\n\nThe Transaction decorator can handle transactions automatically (which is the default) or be set to\n\"manual\" mode, where the <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a> `.startTransaction()` and `.commitOpenTransaction()`\nmethods must them be used.\n\n*Example*\n\nNote that even in manual mode, a rollback will be automatically performed in\nthe case that an uncaught error is thrown within the resolver.\n\n\n\n",
                "subsections": [],
                "code": [
                    "// in a GraphQL resolver file",
                    "",
                    "@Transaction('manual')",
                    "async myMutation(@Ctx() ctx: RequestContext) {",
                    "  await this.connection.startTransaction(ctx);",
                    "  const result = this.myService.createThing(ctx);",
                    "  const thing = this.myService.updateOtherThing(ctx, result.id);",
                    "  await this.connection.commitOpenTransaction(ctx);",
                    "  return thing;",
                    "}",
                    "type TransactionMode = 'auto' | 'manual'"
                ]
            },
            {
                "id": "transactionisolationlevel",
                "title": "TransactionIsolationLevel",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/api/decorators/transaction.decorator.ts\" sourceLine=\"45\" packageName=\"@vendure/core\" />\n\nTransactions can be run at different isolation levels. The default is undefined, which\nfalls back to the default of your database. See the documentation of your database for more\ninformation on available isolation levels.\n\n\n",
                "subsections": [],
                "code": [
                    "type TransactionIsolationLevel = | 'READ UNCOMMITTED'",
                    "    | 'READ COMMITTED'",
                    "    | 'REPEATABLE READ'",
                    "    | 'SERIALIZABLE'"
                ]
            }
        ]
    },
    {
        "id": "transactionalconnection",
        "metadata": {
            "title": "TransactionalConnection",
            "keywords": [
                "transactionalconnection",
                "constructor",
                "rawconnection",
                "getrepository",
                "withtransaction",
                "starttransaction",
                "commitopentransaction",
                "rollbacktransaction",
                "getentityorthrow",
                "findoneinchannel",
                "findbyidsinchannel"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/connection/transactional-connection.ts\" sourceLine=\"38\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "transactionalconnection",
                "title": "TransactionalConnection",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/connection/transactional-connection.ts\" sourceLine=\"38\" packageName=\"@vendure/core\" />\n\nThe TransactionalConnection is a wrapper around the TypeORM `Connection` object which works in conjunction\nwith the <a href='/reference/typescript-api/request/transaction-decorator#transaction'>Transaction</a> decorator to implement per-request transactions. All services which access the\ndatabase should use this class rather than the raw TypeORM connection, to ensure that db changes can be\neasily wrapped in transactions when required.\n\nThe service layer does not need to know about the scope of a transaction, as this is covered at the\nAPI by the use of the `Transaction` decorator.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: Connection, transactionWrapper: TransactionWrapper) => TransactionalConnection`}   />\n\n\n"
                    },
                    {
                        "id": "rawconnection",
                        "title": "rawConnection",
                        "content": "\n<MemberInfo kind=\"property\" type={`Connection`}   />\n\nThe plain TypeORM Connection object. Should be used carefully as any operations\nperformed with this connection will not be performed within any outer\ntransactions.\n"
                    },
                    {
                        "id": "getrepository",
                        "title": "getRepository",
                        "content": "\n<MemberInfo kind=\"method\" type={`(target: ObjectType&#60;Entity&#62; | EntitySchema&#60;Entity&#62; | string) => Repository&#60;Entity&#62;`}   />\n\nReturns a TypeORM repository. Note that when no RequestContext is supplied, the repository will not\nbe aware of any existing transaction. Therefore, calling this method without supplying a RequestContext\nis discouraged without a deliberate reason.\n"
                    },
                    {
                        "id": "getrepository",
                        "title": "getRepository",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> | undefined, target: ObjectType&#60;Entity&#62; | EntitySchema&#60;Entity&#62; | string) => Repository&#60;Entity&#62;`}   />\n\nReturns a TypeORM repository which is bound to any existing transactions. It is recommended to _always_ pass\nthe RequestContext argument when possible, otherwise the queries will be executed outside of any\nongoing transactions which have been started by the <a href='/reference/typescript-api/request/transaction-decorator#transaction'>Transaction</a> decorator.\n"
                    },
                    {
                        "id": "getrepository",
                        "title": "getRepository",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctxOrTarget: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> | ObjectType&#60;Entity&#62; | EntitySchema&#60;Entity&#62; | string | undefined, maybeTarget?: ObjectType&#60;Entity&#62; | EntitySchema&#60;Entity&#62; | string) => Repository&#60;Entity&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "withtransaction",
                        "title": "withTransaction",
                        "content": "\n<MemberInfo kind=\"method\" type={`(work: (ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) =&#62; Promise&#60;T&#62;) => Promise&#60;T&#62;`}  since=\"1.3.0\"  />\n\nAllows database operations to be wrapped in a transaction, ensuring that in the event of an error being\nthrown at any point, the entire transaction will be rolled back and no changes will be saved.\n\nIn the context of API requests, you should instead use the <a href='/reference/typescript-api/request/transaction-decorator#transaction'>Transaction</a> decorator on your resolver or\ncontroller method.\n\nOn the other hand, for code that does not run in the context of a GraphQL/REST request, this method\nshould be used to protect against non-atomic changes to the data which could leave your data in an\ninconsistent state.\n\nSuch situations include function processed by the JobQueue or stand-alone scripts which make use\nof Vendure internal services.\n\nIf there is already a <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> object available, you should pass it in as the first\nargument in order to create transactional context as the copy. If not, omit the first argument and an empty\nRequestContext object will be created, which is then used to propagate the transaction to\nall inner method calls.\n\n*Example*\n\n"
                    },
                    {
                        "id": "withtransaction",
                        "title": "withTransaction",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, work: (ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) =&#62; Promise&#60;T&#62;) => Promise&#60;T&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "withtransaction",
                        "title": "withTransaction",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctxOrWork: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a> | ((ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) =&#62; Promise&#60;T&#62;), maybeWork?: (ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) =&#62; Promise&#60;T&#62;) => Promise&#60;T&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "starttransaction",
                        "title": "startTransaction",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, isolationLevel?: <a href='/reference/typescript-api/request/transaction-decorator#transactionisolationlevel'>TransactionIsolationLevel</a>) => `}   />\n\nManually start a transaction if one is not already in progress. This method should be used in\nconjunction with the `'manual'` mode of the <a href='/reference/typescript-api/request/transaction-decorator#transaction'>Transaction</a> decorator.\n"
                    },
                    {
                        "id": "commitopentransaction",
                        "title": "commitOpenTransaction",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => `}   />\n\nManually commits any open transaction. Should be very rarely needed, since the <a href='/reference/typescript-api/request/transaction-decorator#transaction'>Transaction</a> decorator\nand the internal TransactionInterceptor take care of this automatically. Use-cases include situations\nin which the worker thread needs to access changes made in the current transaction, or when using the\nTransaction decorator in manual mode.\n"
                    },
                    {
                        "id": "rollbacktransaction",
                        "title": "rollBackTransaction",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => `}   />\n\nManually rolls back any open transaction. Should be very rarely needed, since the <a href='/reference/typescript-api/request/transaction-decorator#transaction'>Transaction</a> decorator\nand the internal TransactionInterceptor take care of this automatically. Use-cases include when using the\nTransaction decorator in manual mode.\n"
                    },
                    {
                        "id": "getentityorthrow",
                        "title": "getEntityOrThrow",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entityType: Type&#60;T&#62;, id: <a href='/reference/typescript-api/common/id#id'>ID</a>, options: <a href='/reference/typescript-api/data-access/get-entity-or-throw-options#getentityorthrowoptions'>GetEntityOrThrowOptions</a>&#60;T&#62; = {}) => Promise&#60;T&#62;`}   />\n\nFinds an entity of the given type by ID, or throws an `EntityNotFoundError` if none\nis found.\n"
                    },
                    {
                        "id": "findoneinchannel",
                        "title": "findOneInChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: Type&#60;T&#62;, id: <a href='/reference/typescript-api/common/id#id'>ID</a>, channelId: <a href='/reference/typescript-api/common/id#id'>ID</a>, options: FindOneOptions&#60;T&#62; = {}) => `}   />\n\nLike the TypeOrm `Repository.findOne()` method, but limits the results to\nthe given Channel.\n"
                    },
                    {
                        "id": "findbyidsinchannel",
                        "title": "findByIdsInChannel",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, entity: Type&#60;T&#62;, ids: <a href='/reference/typescript-api/common/id#id'>ID</a>[], channelId: <a href='/reference/typescript-api/common/id#id'>ID</a>, options: FindManyOptions&#60;T&#62;) => `}   />\n\nLike the TypeOrm `Repository.findByIds()` method, but limits the results to\nthe given Channel.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class TransactionalConnection {",
                    "    constructor(connection: Connection, transactionWrapper: TransactionWrapper)",
                    "    rawConnection: Connection",
                    "    getRepository(target: ObjectType<Entity> | EntitySchema<Entity> | string) => Repository<Entity>;",
                    "    getRepository(ctx: RequestContext | undefined, target: ObjectType<Entity> | EntitySchema<Entity> | string) => Repository<Entity>;",
                    "    getRepository(ctxOrTarget: RequestContext | ObjectType<Entity> | EntitySchema<Entity> | string | undefined, maybeTarget?: ObjectType<Entity> | EntitySchema<Entity> | string) => Repository<Entity>;",
                    "    withTransaction(work: (ctx: RequestContext) => Promise<T>) => Promise<T>;",
                    "    withTransaction(ctx: RequestContext, work: (ctx: RequestContext) => Promise<T>) => Promise<T>;",
                    "    withTransaction(ctxOrWork: RequestContext | ((ctx: RequestContext) => Promise<T>), maybeWork?: (ctx: RequestContext) => Promise<T>) => Promise<T>;",
                    "    startTransaction(ctx: RequestContext, isolationLevel?: TransactionIsolationLevel) => ;",
                    "    commitOpenTransaction(ctx: RequestContext) => ;",
                    "    rollBackTransaction(ctx: RequestContext) => ;",
                    "    getEntityOrThrow(ctx: RequestContext, entityType: Type<T>, id: ID, options: GetEntityOrThrowOptions<T> = {}) => Promise<T>;",
                    "    findOneInChannel(ctx: RequestContext, entity: Type<T>, id: ID, channelId: ID, options: FindOneOptions<T> = {}) => ;",
                    "    findByIdsInChannel(ctx: RequestContext, entity: Type<T>, ids: ID[], channelId: ID, options: FindManyOptions<T>) => ;",
                    "}",
                    "private async transferCredit(outerCtx: RequestContext, fromId: ID, toId: ID, amount: number) {",
                    "  await this.connection.withTransaction(outerCtx, async ctx => {",
                    "    // Note you must not use `outerCtx` here, instead use `ctx`. Otherwise, this query",
                    "    // will be executed outside of transaction",
                    "    await this.giftCardService.updateCustomerCredit(ctx, fromId, -amount);",
                    "",
                    "    await this.connection.getRepository(ctx, GiftCard).update(fromId, { transferred: true })",
                    "",
                    "    // If some intermediate logic here throws an Error,",
                    "    // then all DB transactions will be rolled back and neither Customer's",
                    "    // credit balance will have changed.",
                    "",
                    "    await this.giftCardService.updateCustomerCredit(ctx, toId, amount);",
                    "  })",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "transitions",
        "metadata": {
            "title": "Transitions",
            "keywords": [
                "transitions"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/common/finite-state-machine/types.ts\" sourceLine=\"30\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "transitions",
                "title": "Transitions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/common/finite-state-machine/types.ts\" sourceLine=\"30\" packageName=\"@vendure/core\" />\n\nA type which is used to define valid states and transitions for a state machine based\non <a href='/reference/typescript-api/state-machine/fsm#fsm'>FSM</a>.\n\n*Example*\n\n\nThe `mergeStrategy` property defines how to handle the merging of states when one set of\ntransitions is being merged with another (as in the case of defining a {@link CustomerOrderProcess})\n\n\n",
                "subsections": [],
                "code": [
                    "type LightColor = 'Green' | 'Amber' | 'Red';",
                    "",
                    "const trafficLightTransitions: Transitions<LightColor> = {",
                    "  Green: {",
                    "    to: ['Amber'],",
                    "  },",
                    "  Amber: {",
                    "    to: ['Red'],",
                    "  },",
                    "  Red: {",
                    "    to: ['Green'],",
                    "  },",
                    "};",
                    "type Transitions<State extends string, Target extends string = State> = {",
                    "    [S in State]: {",
                    "        to: Readonly<Target[]>;",
                    "        mergeStrategy?: 'merge' | 'replace';",
                    "    };",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "translatablesaver",
        "metadata": {
            "title": "TranslatableSaver",
            "keywords": [
                "translatablesaver",
                "constructor",
                "create",
                "update"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/translatable-saver/translatable-saver.ts\" sourceLine=\"57\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "translatablesaver",
                "title": "TranslatableSaver",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/translatable-saver/translatable-saver.ts\" sourceLine=\"57\" packageName=\"@vendure/core\" />\n\nA helper which contains methods for creating and updating entities which implement the <a href='/reference/typescript-api/entities/interfaces#translatable'>Translatable</a> interface.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>) => TranslatableSaver`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: CreateTranslatableOptions&#60;T&#62;) => Promise&#60;T&#62;`}   />\n\nCreate a translatable entity, including creating any translation entities according\nto the `translations` array.\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options: UpdateTranslatableOptions&#60;T&#62;) => Promise&#60;T&#62;`}   />\n\nUpdate a translatable entity. Performs a diff of the `translations` array in order to\nperform the correct operation on the translations.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "export class MyService {",
                    "  constructor(private translatableSaver: TranslatableSaver) {}",
                    "",
                    "  async create(ctx: RequestContext, input: CreateFacetInput): Promise<Translated<Facet>> {",
                    "    const facet = await this.translatableSaver.create({",
                    "      ctx,",
                    "      input,",
                    "      entityType: Facet,",
                    "      translationType: FacetTranslation,",
                    "      beforeSave: async f => {",
                    "          f.code = await this.ensureUniqueCode(ctx, f.code);",
                    "      },",
                    "    });",
                    "    return facet;",
                    "  }",
                    "",
                    "  // ...",
                    "}",
                    "class TranslatableSaver {",
                    "    constructor(connection: TransactionalConnection)",
                    "    create(options: CreateTranslatableOptions<T>) => Promise<T>;",
                    "    update(options: UpdateTranslatableOptions<T>) => Promise<T>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "translations",
        "metadata": {
            "title": "Translations",
            "keywords": [
                "translatable entities",
                "loading translatable entities",
                "admin ui translations",
                "server message translations",
                "translatable error",
                "use translations"
            ],
            "description": "The following items in Vendure can be translated: - Entities which implement the [`Translatable`](/reference/typescript-api/entities/interfaces/#translatable) interface. - Admin UI text labels and messages - Server error message The following entities implement the `Translatable` interface:"
        },
        "content": "",
        "sections": [
            {
                "id": "translatable-entities",
                "title": "Translatable entities",
                "content": "\nThe following entities implement the `Translatable` interface:\n\n- [Collection](/reference/typescript-api/entities/collection/)\n- [Country](/reference/typescript-api/entities/country/)\n- [Facet](/reference/typescript-api/entities/facet/)\n- [FacetValue](/reference/typescript-api/entities/facet-value/)\n- [PaymentMethod](/reference/typescript-api/entities/payment-method/)\n- [Product](/reference/typescript-api/entities/product/)\n- [ProductOption](/reference/typescript-api/entities/product-option/)\n- [ProductOptionGroup](/reference/typescript-api/entities/product-option-group/)\n- [ProductVariant](/reference/typescript-api/entities/product-variant/)\n- [Promotion](/reference/typescript-api/entities/promotion/)\n- [Province](/reference/typescript-api/entities/province/)\n- [Region](/reference/typescript-api/entities/region/)\n- [ShippingMethod](/reference/typescript-api/entities/shipping-method/)\n\nTo understand how translatable entities are implemented, let's take a look at a simplified version of the `Facet` entity:\n\n\nAll translatable entities have a `translations` field which is a relation to the translations. Any fields that are to be translated are of type `LocaleString`, and **do note have a `@Column()` decorator**. This is because the `name` field here does not in fact exist in the database in the `facet` table. Instead, it belongs to the `facet_translations` table, which brings us to the `FacetTranslation` entity (again simplified for clarity):\n\n\nThus there is a one-to-many relation between `Facet` and `FacetTranslation`, which allows Vendure to handle multiple translations of the same entity. The `FacetTranslation` entity also implements the `Translation` interface, which requires the `languageCode` field and a reference to the base entity.\n\n",
                "subsections": [
                    {
                        "id": "loading-translatable-entities",
                        "title": "Loading translatable entities",
                        "content": "\nIf your plugin needs to load a translatable entity, you will need to use the [`TranslatorService`](/reference/typescript-api/service-helpers/translator-service/) to hydrate all the `LocaleString` fields will the actual translated values from the correct translation.\n\nFor example, if you are loading a `Facet` entity, you would do the following:\n\n"
                    }
                ],
                "code": [
                    "@Entity()",
                    "export class Facet extends VendureEntity implements Translatable {",
                    "    ",
                    "    // highlight-next-line",
                    "    name: LocaleString;",
                    "",
                    "    @Column({ unique: true })",
                    "    code: string;",
                    "",
                    "    // highlight-next-line",
                    "    @OneToMany(type => FacetTranslation, translation => translation.base, { eager: true })",
                    "    // highlight-next-line",
                    "    translations: Array<Translation<Facet>>;",
                    "}",
                    "@Entity()",
                    "export class FacetTranslation extends VendureEntity implements Translation<Facet> {",
                    "",
                    "    @Column('varchar') languageCode: LanguageCode;",
                    "",
                    "    // highlight-next-line",
                    "    @Column() name: string;",
                    "",
                    "    @Index()",
                    "    @ManyToOne(type => Facet, base => base.translations, { onDelete: 'CASCADE' })",
                    "    base: Facet;",
                    "}",
                    "import { Facet } from '@vendure/core';",
                    "import { LanguageCode, RequestContext, TranslatorService, TransactionalConnection } from '@vendure/core';",
                    "",
                    "@Injectable()",
                    "export class MyService {",
                    "    ",
                    "    constructor(private connection: TransactionalConnection, private translator: TranslatorService) {}",
                    "",
                    "    async getFacet(ctx: RequestContext, id: ID): Promise<Facet | undefined> {",
                    "        const facet = await this.connection.getRepository(ctx, Facet).findOne(id);",
                    "        if (facet) {",
                    "            // highlight-next-line",
                    "            return this.translatorService.translate(facet, ctx);",
                    "        }",
                    "    }",
                    "    ",
                    "    async getFacets(ctx: RequestContext): Promise<Facet[]> {",
                    "        // highlight-next-line",
                    "        const facets = await this.connection.getRepository(ctx, Facet).find();",
                    "        // highlight-next-line",
                    "        return Promise.all(facets.map(facet => this.translatorService.translate(facet, ctx)));",
                    "    }",
                    "}"
                ]
            },
            {
                "id": "admin-ui-translations",
                "title": "Admin UI translations",
                "content": "\nSee the [Adding Admin UI Translations guide](/guides/extending-the-admin-ui/adding-ui-translations/).\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "server-message-translations",
                "title": "Server message translations",
                "content": "\nLet's say you've implemented some custom server-side functionality as part of a plugin. You may be returning custom errors or other messages. Here's how you can\nprovide these messages in multiple languages.\n\nUsing [`addTranslation`](/reference/typescript-api/common/i18n-service/#addtranslation) inside the `onApplicationBootstrap` ([Nestjs lifecycle hooks](https://docs.nestjs.com/fundamentals/lifecycle-events)) of a Plugin is the easiest way to add new translations.\nWhile Vendure is only using `error`, `errorResult` and `message` resource keys you are free to use your own.\n\n",
                "subsections": [
                    {
                        "id": "translatable-error",
                        "title": "Translatable Error",
                        "content": "This example shows how to create a custom translatable error\n\nTo receive an error in a specific language you need to use the `languageCode` query parameter\n`query(QUERY_WITH_ERROR_RESULT, { variables }, { languageCode: LanguageCode.de });`\n\n"
                    },
                    {
                        "id": "use-translations",
                        "title": "Use translations",
                        "content": "\nVendure uses the internationalization-framework [i18next](https://www.i18next.com/).\n\nTherefore you are free to use the i18next translate function to [access keys](https://www.i18next.com/translation-function/essentials#accessing-keys) \\\n`i18next.t('error.any-message');`\n\n"
                    }
                ],
                "code": [
                    "/**",
                    " * Custom error class",
                    " */",
                    "class CustomError extends ErrorResult {",
                    "    readonly __typename = 'CustomError';",
                    "    readonly errorCode = 'CUSTOM_ERROR';",
                    "    readonly message = 'CUSTOM_ERROR'; //< looks up errorResult.CUSTOM_ERROR",
                    "}",
                    "",
                    "@VendurePlugin({",
                    "    imports: [PluginCommonModule],",
                    "    providers: [I18nService],",
                    "    // ...",
                    "})",
                    "export class TranslationTestPlugin implements OnApplicationBootstrap {",
                    "",
                    "    constructor(private i18nService: I18nService) {",
                    "",
                    "    }",
                    "",
                    "    onApplicationBootstrap(): any {",
                    "        this.i18nService.addTranslation('en', {",
                    "            errorResult: {",
                    "                CUSTOM_ERROR: 'A custom error message',",
                    "            },",
                    "            anything: {",
                    "                foo: 'bar'",
                    "            }",
                    "        });",
                    "",
                    "        this.i18nService.addTranslation('de', {",
                    "            errorResult: {",
                    "                CUSTOM_ERROR: 'Eine eigene Fehlermeldung',",
                    "            },",
                    "            anything: {",
                    "                foo: 'bar'",
                    "            }",
                    "        });",
                    "",
                    "    }",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "translatorservice",
        "metadata": {
            "title": "TranslatorService",
            "keywords": [
                "translatorservice",
                "constructor",
                "translate"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/helpers/translator/translator.service.ts\" sourceLine=\"42\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "translatorservice",
                "title": "TranslatorService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/helpers/translator/translator.service.ts\" sourceLine=\"42\" packageName=\"@vendure/core\" />\n\nThe TranslatorService is used to translate entities into the current language.\n\n*Example*\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(configService: ConfigService) => TranslatorService`}   />\n\n\n"
                    },
                    {
                        "id": "translate",
                        "title": "translate",
                        "content": "\n<MemberInfo kind=\"method\" type={`(translatable: T, ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, translatableRelations: DeepTranslatableRelations&#60;T&#62; = []) => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { Injectable } from '@nestjs/common';",
                    "import { ID, Product, RequestContext, TransactionalConnection, TranslatorService } from '@vendure/core';",
                    "",
                    "@Injectable()",
                    "export class ProductService {",
                    "",
                    "    constructor(private connection: TransactionalConnection,",
                    "                private translator: TranslatorService){}",
                    "",
                    "    async findOne(ctx: RequestContext, productId: ID): Promise<Product | undefined> {",
                    "        const product = await this.connection.findOneInChannel(ctx, Product, productId, ctx.channelId, {",
                    "            relations: {",
                    "                 facetValues: {",
                    "                     facet: true,",
                    "                 }",
                    "            }",
                    "        });",
                    "        if (!product) {",
                    "            return;",
                    "        }",
                    "        return this.translator.translate(product, ctx, ['facetValues', ['facetValues', 'facet']]);",
                    "    }",
                    "}",
                    "class TranslatorService {",
                    "    constructor(configService: ConfigService)",
                    "    translate(translatable: T, ctx: RequestContext, translatableRelations: DeepTranslatableRelations<T> = []) => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "transport-options",
        "metadata": {
            "title": "Transport Options",
            "keywords": [
                "emailtransportoptions",
                "smtptransportoptions",
                "type",
                "logging",
                "sestransportoptions",
                "sendmailtransportoptions",
                "path",
                "newline",
                "filetransportoptions",
                "outputpath",
                "raw",
                "nooptransportoptions",
                "testingtransportoptions",
                "onsend"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"131\" packageName=\"@vendure/email-plugin\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "emailtransportoptions",
                "title": "EmailTransportOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"131\" packageName=\"@vendure/email-plugin\" />\n\nA union of all the possible transport options for sending emails.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type EmailTransportOptions = | SMTPTransportOptions",
                    "    | SendmailTransportOptions",
                    "    | FileTransportOptions",
                    "    | NoopTransportOptions",
                    "    | SESTransportOptions",
                    "    | TestingTransportOptions"
                ]
            },
            {
                "id": "smtptransportoptions",
                "title": "SMTPTransportOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"146\" packageName=\"@vendure/email-plugin\" />\n\nThe SMTP transport options of [Nodemailer](https://nodemailer.com/smtp/)\n\n* Extends: <code>SMTPTransport.Options</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`'smtp'`}   />\n\n\n"
                    },
                    {
                        "id": "logging",
                        "title": "logging",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nIf true, uses the configured <a href='/reference/typescript-api/logger/vendure-logger#vendurelogger'>VendureLogger</a> to log messages from Nodemailer as it interacts with\nthe SMTP server.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface SMTPTransportOptions extends SMTPTransport.Options {",
                    "    type: 'smtp';",
                    "    logging?: boolean;",
                    "}"
                ]
            },
            {
                "id": "sestransportoptions",
                "title": "SESTransportOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"195\" packageName=\"@vendure/email-plugin\" />\n\nThe SES transport options of [Nodemailer](https://nodemailer.com/transports/ses//)\n\nSee [Nodemailers's SES docs](https://nodemailer.com/transports/ses/) for more details\n\n*Example*\n\ninterface SESTransportOptions extends SESTransport.Options {\n    type: 'ses';\n}\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": ""
                    }
                ],
                "code": [
                    " import { SES, SendRawEmailCommand } from '@aws-sdk/client-ses'",
                    "",
                    " const ses = new SES({",
                    "    apiVersion: '2010-12-01',",
                    "    region: 'eu-central-1',",
                    "    credentials: {",
                    "        accessKeyId: process.env.SES_ACCESS_KEY || '',",
                    "        secretAccessKey: process.env.SES_SECRET_KEY || '',",
                    "    },",
                    " })",
                    "",
                    " const config: VendureConfig = {",
                    "  // Add an instance of the plugin to the plugins array",
                    "  plugins: [",
                    "    EmailPlugin.init({",
                    "      handlers: defaultEmailHandlers,",
                    "      templatePath: path.join(__dirname, 'static/email/templates'),",
                    "      transport: {",
                    "        type: 'ses',",
                    "        SES: { ses, aws: { SendRawEmailCommand } },",
                    "        sendingRate: 10, // optional messages per second sending rate",
                    "      },",
                    "    }),",
                    "  ],",
                    "};",
                    " ```",
                    "",
                    "* Extends: <code>SESTransport.Options</code>",
                    "",
                    "",
                    "",
                    "<div className=\"members-wrapper\">",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`'ses'`}   />",
                    "",
                    "",
                    "",
                    "",
                    "</div>",
                    "",
                    ""
                ]
            },
            {
                "id": "sendmailtransportoptions",
                "title": "SendmailTransportOptions",
                "content": "interface SendmailTransportOptions {\n    type: 'sendmail';\n    path?: string;\n    newline?: string;\n}\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": ""
                    },
                    {
                        "id": "path",
                        "title": "path",
                        "content": ""
                    },
                    {
                        "id": "newline",
                        "title": "newline",
                        "content": ""
                    }
                ],
                "code": [
                    "",
                    "<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"206\" packageName=\"@vendure/email-plugin\" />",
                    "",
                    "Uses the local Sendmail program to send the email.",
                    "",
                    "",
                    "<div className=\"members-wrapper\">",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`'sendmail'`}   />",
                    "",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`string`}   />",
                    "",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`string`}   />",
                    "",
                    "",
                    "",
                    "",
                    "</div>",
                    "",
                    ""
                ]
            },
            {
                "id": "filetransportoptions",
                "title": "FileTransportOptions",
                "content": "interface FileTransportOptions {\n    type: 'file';\n    outputPath: string;\n    raw?: boolean;\n}\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": ""
                    },
                    {
                        "id": "outputpath",
                        "title": "outputPath",
                        "content": ""
                    },
                    {
                        "id": "raw",
                        "title": "raw",
                        "content": ""
                    }
                ],
                "code": [
                    "",
                    "<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"221\" packageName=\"@vendure/email-plugin\" />",
                    "",
                    "Outputs the email as an HTML file for development purposes.",
                    "",
                    "",
                    "<div className=\"members-wrapper\">",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`'file'`}   />",
                    "",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`string`}   />",
                    "",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`boolean`}   />",
                    "",
                    "",
                    "",
                    "",
                    "</div>",
                    "",
                    ""
                ]
            },
            {
                "id": "nooptransportoptions",
                "title": "NoopTransportOptions",
                "content": "interface NoopTransportOptions {\n    type: 'none';\n}\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": ""
                    }
                ],
                "code": [
                    "",
                    "<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"237\" packageName=\"@vendure/email-plugin\" />",
                    "",
                    "Does nothing with the generated email. Intended for use in testing where we don't care about the email transport,",
                    "or when using a custom <a href='/reference/core-plugins/email-plugin/email-sender#emailsender'>EmailSender</a> which does not require transport options.",
                    "",
                    "",
                    "<div className=\"members-wrapper\">",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`'none'`}   />",
                    "",
                    "",
                    "",
                    "",
                    "</div>",
                    "",
                    ""
                ]
            },
            {
                "id": "testingtransportoptions",
                "title": "TestingTransportOptions",
                "content": "interface TestingTransportOptions {\n    type: 'testing';\n    onSend: (details: EmailDetails) => void;\n}\n",
                "subsections": [
                    {
                        "id": "type",
                        "title": "type",
                        "content": ""
                    },
                    {
                        "id": "onsend",
                        "title": "onSend",
                        "content": ""
                    }
                ],
                "code": [
                    "",
                    "<GenerationInfo sourceFile=\"packages/email-plugin/src/types.ts\" sourceLine=\"266\" packageName=\"@vendure/email-plugin\" />",
                    "",
                    "Forwards the raw GeneratedEmailContext object to a provided callback, for use in testing.",
                    "",
                    "",
                    "<div className=\"members-wrapper\">",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`'testing'`}   />",
                    "",
                    "",
                    "",
                    "<MemberInfo kind=\"property\" type={`(details: <a href='/reference/core-plugins/email-plugin/email-plugin-types#emaildetails'>EmailDetails</a>) =&#62; void`}   />",
                    "",
                    "Callback to be invoked when an email would be sent.",
                    "",
                    "",
                    "</div>",
                    ""
                ]
            }
        ]
    },
    {
        "id": "typedbasedetailcomponent",
        "metadata": {
            "title": "TypedBaseDetailComponent",
            "keywords": [
                "typedbasedetailcomponent",
                "result$",
                "entity",
                "constructor",
                "init"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/base-detail.component.ts\" sourceLine=\"179\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "typedbasedetailcomponent",
                "title": "TypedBaseDetailComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/base-detail.component.ts\" sourceLine=\"179\" packageName=\"@vendure/admin-ui\" />\n\nA version of the <a href='/reference/admin-ui-api/list-detail-views/base-detail-component#basedetailcomponent'>BaseDetailComponent</a> which is designed to be used with a\n[TypedDocumentNode](https://the-guild.dev/graphql/codegen/plugins/typescript/typed-document-node).\n\n* Extends: <code><a href='/reference/admin-ui-api/list-detail-views/base-detail-component#basedetailcomponent'>BaseDetailComponent</a>&#60;NonNullable&#60;ResultOf&#60;T&#62;[Field]&#62;&#62;</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "result$",
                        "title": "result$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;ResultOf&#60;T&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "entity",
                        "title": "entity",
                        "content": "\n<MemberInfo kind=\"property\" type={`ResultOf&#60;T&#62;[Field]`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => TypedBaseDetailComponent`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class TypedBaseDetailComponent<T extends TypedDocumentNode<any, any>, Field extends keyof ResultOf<T>> extends BaseDetailComponent<NonNullable<ResultOf<T>[Field]>> {",
                    "    protected result$: Observable<ResultOf<T>>;",
                    "    protected entity: ResultOf<T>[Field];",
                    "    constructor()",
                    "    init() => ;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "typedbaselistcomponent",
        "metadata": {
            "title": "TypedBaseListComponent",
            "keywords": [
                "typedbaselistcomponent",
                "availablelanguages$",
                "contentlanguage$",
                "dataservice",
                "router",
                "serverconfigservice",
                "constructor",
                "configure",
                "ngoninit",
                "createfiltercollection",
                "createsortcollection",
                "setlanguage",
                "getcustomfieldconfig"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/base-list.component.ts\" sourceLine=\"199\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "typedbaselistcomponent",
                "title": "TypedBaseListComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/common/base-list.component.ts\" sourceLine=\"199\" packageName=\"@vendure/admin-ui\" />\n\nA version of the <a href='/reference/admin-ui-api/list-detail-views/base-list-component#baselistcomponent'>BaseListComponent</a> which is designed to be used with a\n[TypedDocumentNode](https://the-guild.dev/graphql/codegen/plugins/typescript/typed-document-node).\n\n* Extends: <code><a href='/reference/admin-ui-api/list-detail-views/base-list-component#baselistcomponent'>BaseListComponent</a>&#60;ResultOf&#60;T&#62;, ItemOf&#60;ResultOf&#60;T&#62;, Field&#62;, VariablesOf&#60;T&#62;&#62;</code>\n\n\n* Implements: <code>OnInit</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "availablelanguages$",
                        "title": "availableLanguages$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "contentlanguage$",
                        "title": "contentLanguage$",
                        "content": "\n<MemberInfo kind=\"property\" type={`Observable&#60;<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "dataservice",
                        "title": "dataService",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "router",
                        "title": "router",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "serverconfigservice",
                        "title": "serverConfigService",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => TypedBaseListComponent`}   />\n\n\n"
                    },
                    {
                        "id": "configure",
                        "title": "configure",
                        "content": "\n<MemberInfo kind=\"method\" type={`(config: {\n         document: T;\n         getItems: (data: ResultOf&#60;T&#62;) =&#62; { items: Array&#60;ItemOf&#60;ResultOf&#60;T&#62;, Field&#62;&#62;; totalItems: number };\n         setVariables?: (skip: number, take: number) =&#62; VariablesOf&#60;T&#62;;\n         refreshListOnChanges?: Array&#60;Observable&#60;any&#62;&#62;;\n     }) => `}   />\n\n\n"
                    },
                    {
                        "id": "ngoninit",
                        "title": "ngOnInit",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "createfiltercollection",
                        "title": "createFilterCollection",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => DataTableFilterCollection&#60;NonNullable&#60;NonNullable&#60;Vars['options']&#62;['filter']&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "createsortcollection",
                        "title": "createSortCollection",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => DataTableSortCollection&#60;NonNullable&#60;NonNullable&#60;Vars['options']&#62;['sort']&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "setlanguage",
                        "title": "setLanguage",
                        "content": "\n<MemberInfo kind=\"method\" type={`(code: <a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "getcustomfieldconfig",
                        "title": "getCustomFieldConfig",
                        "content": "\n<MemberInfo kind=\"method\" type={`(key: Exclude&#60;keyof <a href='/reference/typescript-api/custom-fields/#customfields'>CustomFields</a>, '__typename'&#62;) => <a href='/reference/typescript-api/custom-fields/custom-field-config#customfieldconfig'>CustomFieldConfig</a>[]`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class TypedBaseListComponent<T extends TypedDocumentNode<any, Vars>, Field extends keyof ResultOf<T>, Vars extends { options: { filter: any; sort: any } } = VariablesOf<T>> extends BaseListComponent<ResultOf<T>, ItemOf<ResultOf<T>, Field>, VariablesOf<T>> implements OnInit {",
                    "    availableLanguages$: Observable<LanguageCode[]>;",
                    "    contentLanguage$: Observable<LanguageCode>;",
                    "    protected dataService = inject(DataService);",
                    "    protected router = inject(Router);",
                    "    protected serverConfigService = inject(ServerConfigService);",
                    "    constructor()",
                    "    configure(config: {",
                    "        document: T;",
                    "        getItems: (data: ResultOf<T>) => { items: Array<ItemOf<ResultOf<T>, Field>>; totalItems: number };",
                    "        setVariables?: (skip: number, take: number) => VariablesOf<T>;",
                    "        refreshListOnChanges?: Array<Observable<any>>;",
                    "    }) => ;",
                    "    ngOnInit() => ;",
                    "    createFilterCollection() => DataTableFilterCollection<NonNullable<NonNullable<Vars['options']>['filter']>>;",
                    "    createSortCollection() => DataTableSortCollection<NonNullable<NonNullable<Vars['options']>['sort']>>;",
                    "    setLanguage(code: LanguageCode) => ;",
                    "    getCustomFieldConfig(key: Exclude<keyof CustomFields, '__typename'>) => CustomFieldConfig[];",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "typedcustomsinglefieldconfig",
        "metadata": {
            "title": "TypedCustomSingleFieldConfig",
            "keywords": [
                "typedcustomsinglefieldconfig"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/custom-field/custom-field-types.ts\" sourceLine=\"55\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "typedcustomsinglefieldconfig",
                "title": "TypedCustomSingleFieldConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/custom-field/custom-field-types.ts\" sourceLine=\"55\" packageName=\"@vendure/core\" />\n\nConfigures a custom field on an entity in the <a href='/reference/typescript-api/custom-fields/#customfields'>CustomFields</a> config object.\n\n\n",
                "subsections": [],
                "code": [
                    "type TypedCustomSingleFieldConfig<T extends CustomFieldType, C extends CustomField> = BaseTypedCustomFieldConfig<T, C> & {",
                    "    list?: false;",
                    "    defaultValue?: DefaultValueType<T>;",
                    "    validate?: (",
                    "        value: DefaultValueType<T>,",
                    "        injector: Injector,",
                    "    ) => string | LocalizedString[] | void | Promise<string | LocalizedString[] | void>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "typeormhealthcheckstrategy",
        "metadata": {
            "title": "TypeORMHealthCheckStrategy",
            "keywords": [
                "typeormhealthcheckstrategy",
                "constructor",
                "init",
                "gethealthindicator"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/health-check/typeorm-health-check-strategy.ts\" sourceLine=\"36\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "typeormhealthcheckstrategy",
                "title": "TypeORMHealthCheckStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/health-check/typeorm-health-check-strategy.ts\" sourceLine=\"36\" packageName=\"@vendure/core\" />\n\nA <a href='/reference/typescript-api/health-check/health-check-strategy#healthcheckstrategy'>HealthCheckStrategy</a> used to check the health of the database. This health\ncheck is included by default, but can be customized by explicitly adding it to the\n`systemOptions.healthChecks` array:\n\n*Example*\n\n\n* Implements: <code><a href='/reference/typescript-api/health-check/health-check-strategy#healthcheckstrategy'>HealthCheckStrategy</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(options?: TypeORMHealthCheckOptions) => TypeORMHealthCheckStrategy`}   />\n\n\n"
                    },
                    {
                        "id": "init",
                        "title": "init",
                        "content": "\n<MemberInfo kind=\"method\" type={`(injector: <a href='/reference/typescript-api/common/injector#injector'>Injector</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "gethealthindicator",
                        "title": "getHealthIndicator",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => HealthIndicatorFunction`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "import { TypeORMHealthCheckStrategy } from '@vendure/core';",
                    "",
                    "export const config = {",
                    "  // ...",
                    "  systemOptions: [",
                    "    // The default key is \"database\" and the default timeout is 1000ms",
                    "    // Sometimes this is too short and leads to false negatives in the",
                    "    // /health endpoint.",
                    "    new TypeORMHealthCheckStrategy({ key: 'postgres-db', timeout: 5000 }),",
                    "  ]",
                    "}",
                    "class TypeORMHealthCheckStrategy implements HealthCheckStrategy {",
                    "    constructor(options?: TypeORMHealthCheckOptions)",
                    "    init(injector: Injector) => ;",
                    "    getHealthIndicator() => HealthIndicatorFunction;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "types",
        "metadata": {
            "title": "Types",
            "keywords": [
                "backoffstrategy",
                "jobupdate",
                "jobupdateoptions",
                "pollinterval",
                "timeoutms",
                "erroronfail",
                "createqueueoptions",
                "name",
                "process",
                "jobdata",
                "jobconfig",
                "queuename",
                "data",
                "retries",
                "attempts",
                "id",
                "state",
                "progress",
                "result",
                "error",
                "createdat",
                "startedat",
                "settledat"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/job-queue/polling-job-queue-strategy.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "backoffstrategy",
                "title": "BackoffStrategy",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/polling-job-queue-strategy.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />\n\nDefines the backoff strategy used when retrying failed jobs. Returns the delay in\nms that should pass before the failed job is retried.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type BackoffStrategy = (queueName: string, attemptsMade: number, job: Job) => number"
                ]
            },
            {
                "id": "jobupdate",
                "title": "JobUpdate",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/subscribable-job.ts\" sourceLine=\"22\" packageName=\"@vendure/core\" />\n\nJob update status as returned from the <a href='/reference/typescript-api/job-queue/subscribable-job#subscribablejob'>SubscribableJob</a>'s `update()` method.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type JobUpdate<T extends JobData<T>> = Pick<",
                    "    Job<T>,",
                    "    'id' | 'state' | 'progress' | 'result' | 'error' | 'data'",
                    ">"
                ]
            },
            {
                "id": "jobupdateoptions",
                "title": "JobUpdateOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/subscribable-job.ts\" sourceLine=\"34\" packageName=\"@vendure/core\" />\n\nJob update options, that you can specify by calling {@link SubscribableJob.updates updates()} method.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "pollinterval",
                        "title": "pollInterval",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "timeoutms",
                        "title": "timeoutMs",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "erroronfail",
                        "title": "errorOnFail",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "type JobUpdateOptions = {",
                    "    pollInterval?: number;",
                    "    timeoutMs?: number;",
                    "    errorOnFail?: boolean;",
                    "}"
                ]
            },
            {
                "id": "createqueueoptions",
                "title": "CreateQueueOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/types.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nUsed to configure a new <a href='/reference/typescript-api/job-queue/#jobqueue'>JobQueue</a> instance.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe name of the queue, e.g. \"image processing\", \"re-indexing\" etc.\n"
                    },
                    {
                        "id": "process",
                        "title": "process",
                        "content": "\n<MemberInfo kind=\"property\" type={`(job: <a href='/reference/typescript-api/job-queue/job#job'>Job</a>&#60;T&#62;) =&#62; Promise&#60;any&#62;`}   />\n\nDefines the work to be done for each job in the queue. The returned promise\nshould resolve when the job is complete, or be rejected in case of an error.\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface CreateQueueOptions<T extends JobData<T>> {",
                    "    name: string;",
                    "    process: (job: Job<T>) => Promise<any>;",
                    "}"
                ]
            },
            {
                "id": "jobdata",
                "title": "JobData",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/types.ts\" sourceLine=\"35\" packageName=\"@vendure/core\" />\n\nA JSON-serializable data type which provides a <a href='/reference/typescript-api/job-queue/job#job'>Job</a>\nwith the data it needs to be processed.\n\n\n\n",
                "subsections": [],
                "code": [
                    "type JobData<T> = JsonCompatible<T>"
                ]
            },
            {
                "id": "jobconfig",
                "title": "JobConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/job-queue/types.ts\" sourceLine=\"44\" packageName=\"@vendure/core\" />\n\nUsed to instantiate a new <a href='/reference/typescript-api/job-queue/job#job'>Job</a>\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "queuename",
                        "title": "queueName",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "data",
                        "title": "data",
                        "content": "\n<MemberInfo kind=\"property\" type={`T`}   />\n\n\n"
                    },
                    {
                        "id": "retries",
                        "title": "retries",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "attempts",
                        "title": "attempts",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "state",
                        "title": "state",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/job-state#jobstate'>JobState</a>`}   />\n\n\n"
                    },
                    {
                        "id": "progress",
                        "title": "progress",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\n\n"
                    },
                    {
                        "id": "result",
                        "title": "result",
                        "content": "\n<MemberInfo kind=\"property\" type={`any`}   />\n\n\n"
                    },
                    {
                        "id": "error",
                        "title": "error",
                        "content": "\n<MemberInfo kind=\"property\" type={`any`}   />\n\n\n"
                    },
                    {
                        "id": "createdat",
                        "title": "createdAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date`}   />\n\n\n"
                    },
                    {
                        "id": "startedat",
                        "title": "startedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date`}   />\n\n\n"
                    },
                    {
                        "id": "settledat",
                        "title": "settledAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface JobConfig<T extends JobData<T>> {",
                    "    queueName: string;",
                    "    data: T;",
                    "    retries?: number;",
                    "    attempts?: number;",
                    "    id?: ID;",
                    "    state?: JobState;",
                    "    progress?: number;",
                    "    result?: any;",
                    "    error?: any;",
                    "    createdAt?: Date;",
                    "    startedAt?: Date;",
                    "    settledAt?: Date;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "typescript-api",
        "metadata": {
            "title": "TypeScript API",
            "keywords": [
                "vendure typescript api docs"
            ],
            "description": "The Vendure TypeScript API is used when configuring the server (via the [`VendureConfig`]({{< ref \"configuration\" >}}#vendureconfig) object) and when writing plugins that extend the functionality of Vendure core. {{% alert %}} All documentation in this section is auto-generated from the TypeScript source of the Vendure server. {{< /alert >}}"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "ui-component-library",
        "metadata": {
            "title": "UI Component Library",
            "keywords": [
                "buttons",
                "icons",
                "form inputs",
                "cards",
                "layout"
            ],
            "description": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; The Admin UI is built on a customized version of the [Clarity Design System](https://clarity.design/documentation/get-started). This means that if you are writing Angular-based UI extensions, you can use the same components that are used in the rest of the Admin UI. If you are using React, we are gradually exporting the most-used components for use with React. ![Buttons](./buttons.webp) There are three types of button:"
        },
        "content": "",
        "sections": [
            {
                "id": "buttons",
                "title": "Buttons",
                "content": "\n![Buttons](./buttons.webp)\n\nThere are three types of button:\n\n- **Regular**: These are general-purpose buttons available in a number of styles. They are used in the action bar and as confirmation buttons for dialogs.\n- **Ghost**: This style is primarily used to indicate a column in a table which is a link to a detail view.\n- **Small**: This style is used for secondary actions of less prominence than a standard button, or when the button must fit in a small space.\n\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\n\n",
                "subsections": [],
                "code": [
                    "<button class=\"button primary\">Primary</button>",
                    "<button class=\"button secondary\">Secondary</button>",
                    "<button class=\"button success\">Success</button>",
                    "<button class=\"button warning\">Warning</button>",
                    "<button class=\"button danger\">Danger</button>",
                    "",
                    "<button class=\"button-ghost\">Ghost</button>",
                    "<a class=\"button-ghost\" [routerLink]=\"['/extensions/my-plugin/my-custom-route']\">",
                    "    <clr-icon shape=\"arrow\" dir=\"right\"></clr-icon>",
                    "    John Smith",
                    "</a>",
                    "",
                    "<button class=\"button-small\">Small</button>",
                    "<button class=\"button-small\">",
                    "    <clr-icon shape=\"layers\"></clr-icon>",
                    "    Assign to channel",
                    "</button>",
                    "import React from 'react';",
                    "import { CdsIcon, Link } from '@vendure/admin-ui/react';",
                    "",
                    "export function DemoComponent() {",
                    "    return (",
                    "        <>",
                    "            <button className=\"button primary\">Primary</button>",
                    "            <button className=\"button secondary\">Secondary</button>",
                    "            <button className=\"button success\">Success</button>",
                    "            <button className=\"button warning\">Warning</button>",
                    "            <button className=\"button danger\">Danger</button>",
                    "            ",
                    "            <button className=\"button-ghost\">Ghost</button>",
                    "            <Link className=\"button-ghost\" href=\"/extensions/my-plugin/my-custom-route\">",
                    "                <CdsIcon icon={arrowIcon} direction=\"right\" />",
                    "                John Smith",
                    "            </Link>",
                    "            ",
                    "            <button className=\"button-small\">Small</button>",
                    "            <button className=\"button-small\">",
                    "                <CdsIcon icon={layersIcon} />",
                    "                Assign to channel",
                    "            </button>",
                    "        </>",
                    "    );",
                    "}"
                ]
            },
            {
                "id": "icons",
                "title": "Icons",
                "content": "\nYou can use the built-in [Clarity Icons](https://core.clarity.design/foundation/icons/shapes/) for a consistent look-and-feel with the rest of the \nAdmin UI app.\n\n![Icons](./icons.webp)\n\n\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\n",
                "subsections": [],
                "code": [
                    "<clr-icon shape=\"star\" size=\"8\"></clr-icon>",
                    "<clr-icon shape=\"star\" size=\"16\"></clr-icon>",
                    "<clr-icon shape=\"star\" size=\"24\"></clr-icon>",
                    "<clr-icon shape=\"star\" size=\"36\"></clr-icon>",
                    "<clr-icon shape=\"star\" size=\"48\"></clr-icon>",
                    "<clr-icon shape=\"star\" size=\"56\"></clr-icon>",
                    "",
                    "<clr-icon shape=\"user\" class=\"has-badge--success\"></clr-icon>",
                    "<clr-icon shape=\"user\" class=\"has-alert\"></clr-icon>",
                    "<clr-icon shape=\"user\" class=\"has-badge--info\"></clr-icon>",
                    "<clr-icon shape=\"user\" class=\"has-badge--error\"></clr-icon>",
                    "",
                    "<clr-icon shape=\"user\" class=\"is-success\"></clr-icon>",
                    "<clr-icon shape=\"user\" class=\"is-info\"></clr-icon>",
                    "<clr-icon shape=\"user\" class=\"is-warning\"></clr-icon>",
                    "<clr-icon shape=\"user\" class=\"is-error\"></clr-icon>",
                    "import React from 'react';",
                    "import { starIcon, userIcon } from '@cds/core/icon';",
                    "import { CdsIcon } from '@vendure/admin-ui/react';",
                    "",
                    "export function DemoComponent() {",
                    "    return (",
                    "        <>",
                    "            <CdsIcon icon={starIcon} size=\"xs\" />",
                    "            <CdsIcon icon={starIcon} size=\"sm\" />",
                    "            <CdsIcon icon={starIcon} size=\"md\" />",
                    "            <CdsIcon icon={starIcon} size=\"lg\" />",
                    "            <CdsIcon icon={starIcon} size=\"xl\" />",
                    "            <CdsIcon icon={starIcon} size=\"xxl\" />",
                    "            ",
                    "            <CdsIcon icon={userIcon} badge=\"success\" />",
                    "            <CdsIcon icon={userIcon} badge=\"info\" />",
                    "            <CdsIcon icon={userIcon} badge=\"warning\" />",
                    "            <CdsIcon icon={userIcon} badge=\"danger\" />",
                    "            ",
                    "            <CdsIcon icon={userIcon} status=\"success\" />",
                    "            <CdsIcon icon={userIcon} status=\"info\" />",
                    "            <CdsIcon icon={userIcon} status=\"warning\" />",
                    "            <CdsIcon icon={userIcon} status=\"danger\" />",
                    "        </>",
                    "    );",
                    "}"
                ]
            },
            {
                "id": "form-inputs",
                "title": "Form inputs",
                "content": "\nForm inputs are styled globally, so you don't need to use special components for these. The label & tooltip styling is controlled by the\n\"form field\" wrapper component.\n\n![Form input](./form-inputs.webp)\n\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\nThe `form-grid` class is used to lay out the form fields into a 2-column grid on larger screens, and a single column on smaller screens.\nIf you want to force a particular field to always take up the full width (i.e. to span 2 columns at all screen sizes), you can add the\n`form-grid-span` class to that form field.\n\n\n",
                "subsections": [],
                "code": [
                    "<div class=\"form-grid\">",
                    "    <vdr-form-field label=\"Page title\">",
                    "        <input type=\"text\" />",
                    "    </vdr-form-field>",
                    "    <vdr-form-field label=\"Select input\">",
                    "        <select>",
                    "            <option>Option 1</option>",
                    "            <option>Option 2</option>",
                    "        </select>",
                    "    </vdr-form-field>",
                    "    <vdr-form-field label=\"Checkbox input\">",
                    "        <input type=\"checkbox\" />",
                    "    </vdr-form-field>",
                    "    <vdr-form-field label=\"Textarea input\">",
                    "        <textarea></textarea>",
                    "    </vdr-form-field>",
                    "    <vdr-form-field label=\"With tooltip\" tooltip=\"This is a tooltip for the form input\">",
                    "        <input type=\"text\" />",
                    "    </vdr-form-field>",
                    "    <vdr-form-field label=\"Invalid with error\">",
                    "        <input type=\"text\" [formControl]=\"invalidFormControl\" />",
                    "    </vdr-form-field>",
                    "</div>",
                    "import React from 'react';",
                    "import { starIcon, userIcon } from '@cds/core/icon';",
                    "import { FormField } from '@vendure/admin-ui/react';",
                    "",
                    "export function DemoComponent() {",
                    "    return (",
                    "        <div className=\"form-grid\">",
                    "            <FormField label=\"Page title\">",
                    "                <input type=\"text\" />",
                    "            </FormField>",
                    "            <FormField label=\"Select input\">",
                    "                <select>",
                    "                    <option>Option 1</option>",
                    "                    <option>Option 2</option>",
                    "                </select>",
                    "            </FormField>",
                    "            <FormField label=\"Checkbox input\">",
                    "                <input type=\"checkbox\" />",
                    "            </FormField>",
                    "            <FormField label=\"Textarea input\">",
                    "                <textarea />",
                    "            </FormField>",
                    "            <FormField label=\"With tooltip\" tooltip=\"This is a tooltip for the form input\">",
                    "                <input type=\"text\" />",
                    "            </FormField>",
                    "            <FormField label=\"Invalid with error\" invalid>",
                    "                <input type=\"text\" />",
                    "            </FormField>",
                    "        </div>",
                    "    );",
                    "}",
                    "<div class=\"form-grid\">",
                    "    // highlight-next-line",
                    "    <vdr-form-field label=\"Page title\" class=\"form-grid-span\">",
                    "        <input type=\"text\" />",
                    "    </vdr-form-field>",
                    "</div>"
                ]
            },
            {
                "id": "cards",
                "title": "Cards",
                "content": "\nCards are used as a general-purpose container for page content, as a way to visually group related sets of components.\n\n![Card](./card.webp)\n\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\n",
                "subsections": [],
                "code": [
                    "<vdr-card title=\"Card\">",
                    "    This is a card. On a detail page, content should usually be placed inside a card.",
                    "</vdr-card>",
                    "import React from 'react';",
                    "import { Card } from '@vendure/admin-ui/react';",
                    "",
                    "export function DemoComponent() {",
                    "    return (",
                    "        <Card title=\"Card\">",
                    "            This is a card. On a detail page, content should usually be placed inside a card.",
                    "        </Card>",
                    "    );",
                    "}"
                ]
            },
            {
                "id": "layout",
                "title": "Layout",
                "content": "\nThe following layout components are available:\n\n- Page block: This is a wrapper which applies consistent margins and max-width to the contents of the page. In general, the contents of a page should always be wrapped in this component except when using the DataTable2 component, which has its own styling for margins and width.\n- Action bar: This is a wrapper for the top area of the page, just below the header section. This is where the primary action buttons for the page should be located.\n- Page detail layout: For detail views, this wrapper provides a two-column layout with a main content area and a sidebar.\n\n![Layout](./layout.webp)\n\n\n<Tabs groupId=\"framework\">\n<TabItem value=\"Angular\" label=\"Angular\" default>\n\n\n\n</TabItem>\n<TabItem value=\"React\" label=\"React\">\n\n\n</TabItem>\n</Tabs>\n\n",
                "subsections": [],
                "code": [
                    "<vdr-page-block>",
                    "    <vdr-action-bar>",
                    "        <vdr-ab-left>Action bar left contents</vdr-ab-left>",
                    "        <vdr-ab-right>",
                    "            <button class=\"button primary\">Primary action</button>",
                    "        </vdr-ab-right>",
                    "    </vdr-action-bar>",
                    "</vdr-page-block>",
                    "<vdr-page-detail-layout>",
                    "    <vdr-page-detail-sidebar>",
                    "        <vdr-card>Sidebar content</vdr-card>",
                    "    </vdr-page-detail-sidebar>",
                    "    <vdr-page-block>",
                    "        <vdr-card title=\"Card\">",
                    "            This is a card. On a detail page, content should usually be placed inside a card.",
                    "        </vdr-card>",
                    "    </vdr-page-block>",
                    "</vdr-page-detail-layout>",
                    "import React from 'react';",
                    "import { ",
                    "    ActionBar,",
                    "    Card,",
                    "    PageBlock,",
                    "    PageDetailLayout,",
                    "} from '@vendure/admin-ui/react';",
                    "",
                    "export function DemoComponent() {",
                    "    return (",
                    "        <>",
                    "            <PageBlock>",
                    "                <ActionBar leftContent={<div>Action bar left contents</div>}>",
                    "                    <button className=\"button primary\">Primary action</button>",
                    "                </ActionBar>",
                    "            </PageBlock>",
                    "",
                    "            <PageDetailLayout",
                    "                sidebar={",
                    "                    <div>",
                    "                        <Card>Sidebar content</Card>",
                    "                    </div>",
                    "                }",
                    "            >",
                    "                <PageBlock>",
                    "                    <Card title=\"Card\">",
                    "                        This is a card. On a detail page, content should usually be placed inside a card.",
                    "                    </Card>",
                    "                </PageBlock>",
                    "            </PageDetailLayout>",
                    "        </>",
                    "    );",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "ui-devkit",
        "metadata": {
            "title": "Ui Devkit",
            "keywords": [
                "ui-devkit"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "uidevkitclient",
        "metadata": {
            "title": "UiDevkitClient",
            "keywords": [
                "settargetorigin",
                "value",
                "getactivatedroute",
                "graphqlquery",
                "document",
                "variables",
                "fetchpolicy",
                "graphqlmutation",
                "notify",
                "options"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/ui-devkit/src/client/devkit-client-api.ts\" sourceLine=\"24\" packageName=\"@vendure/ui-devkit\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "settargetorigin",
                "title": "setTargetOrigin",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/client/devkit-client-api.ts\" sourceLine=\"24\" packageName=\"@vendure/ui-devkit\" />\n\nSet the [window.postMessage API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n`targetOrigin`. The Vendure ui-devkit uses the postMessage API to\nenable cross-frame and cross-origin communication between the ui extension code and the Admin UI\napp. The `targetOrigin` is a security feature intended to provide control over where messages are sent.\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "value",
                        "title": "value",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`string`} />\n\n\n\n"
                    }
                ],
                "code": [
                    "function setTargetOrigin(value: string): void"
                ]
            },
            {
                "id": "getactivatedroute",
                "title": "getActivatedRoute",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/client/devkit-client-api.ts\" sourceLine=\"43\" packageName=\"@vendure/ui-devkit\" />\n\nRetrieves information about the current route of the host application, since it is not possible\nto otherwise get this information from within the child iframe.\n\n*Example*\n\n\n\n\n",
                "subsections": [],
                "code": [
                    "import { getActivatedRoute } from '@vendure/ui-devkit';",
                    "",
                    "const route = await getActivatedRoute();",
                    "const slug = route.params.slug;",
                    "function getActivatedRoute(): Promise<ActiveRouteData>"
                ]
            },
            {
                "id": "graphqlquery",
                "title": "graphQlQuery",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/client/devkit-client-api.ts\" sourceLine=\"70\" packageName=\"@vendure/ui-devkit\" />\n\nPerform a GraphQL query and returns either an Observable or a Promise of the result.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "document",
                        "title": "document",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`string`} />\n\n"
                    },
                    {
                        "id": "variables",
                        "title": "variables",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`{ [key: string]: any }`} />\n\n"
                    },
                    {
                        "id": "fetchpolicy",
                        "title": "fetchPolicy",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`WatchQueryFetchPolicy`} />\n\n\n\n"
                    }
                ],
                "code": [
                    "import { graphQlQuery } from '@vendure/ui-devkit';",
                    "",
                    "const productList = await graphQlQuery(`",
                    "  query GetProducts($skip: Int, $take: Int) {",
                    "      products(options: { skip: $skip, take: $take }) {",
                    "          items { id, name, enabled },",
                    "          totalItems",
                    "      }",
                    "  }`, {",
                    "    skip: 0,",
                    "    take: 10,",
                    "  }).then(data => data.products);",
                    "function graphQlQuery<T, V extends { [key: string]: any }>(document: string, variables?: { [key: string]: any }, fetchPolicy?: WatchQueryFetchPolicy): {",
                    "    then: Promise<T>['then'];",
                    "    stream: Observable<T>;",
                    "}"
                ]
            },
            {
                "id": "graphqlmutation",
                "title": "graphQlMutation",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/client/devkit-client-api.ts\" sourceLine=\"112\" packageName=\"@vendure/ui-devkit\" />\n\nPerform a GraphQL mutation and returns either an Observable or a Promise of the result.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "document",
                        "title": "document",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`string`} />\n\n"
                    },
                    {
                        "id": "variables",
                        "title": "variables",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`{ [key: string]: any }`} />\n\n\n\n"
                    }
                ],
                "code": [
                    "import { graphQlMutation } from '@vendure/ui-devkit';",
                    "",
                    "const disableProduct = (id: string) => {",
                    "  return graphQlMutation(`",
                    "    mutation DisableProduct($id: ID!) {",
                    "      updateProduct(input: { id: $id, enabled: false }) {",
                    "        id",
                    "        enabled",
                    "      }",
                    "    }`, { id })",
                    "    .then(data => data.updateProduct)",
                    "}",
                    "function graphQlMutation<T, V extends { [key: string]: any }>(document: string, variables?: { [key: string]: any }): {",
                    "    then: Promise<T>['then'];",
                    "    stream: Observable<T>;",
                    "}"
                ]
            },
            {
                "id": "notify",
                "title": "notify",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/client/devkit-client-api.ts\" sourceLine=\"147\" packageName=\"@vendure/ui-devkit\" />\n\nDisplay a toast notification.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "options",
                        "title": "options",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`NotificationMessage['data']`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { notify } from '@vendure/ui-devkit';",
                    "",
                    "notify({",
                    "  message: 'Updated Product',",
                    "  type: 'success'",
                    "});",
                    "function notify(options: NotificationMessage['data']): void"
                ]
            }
        ]
    },
    {
        "id": "uiextensioncompileroptions",
        "metadata": {
            "title": "UiExtensionCompilerOptions",
            "keywords": [
                "uiextensioncompileroptions",
                "outputpath",
                "extensions",
                "ngcompilerpath",
                "devmode",
                "basehref",
                "watchport",
                "command",
                "additionalprocessarguments"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/types.ts\" sourceLine=\"327\" packageName=\"@vendure/ui-devkit\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "uiextensioncompileroptions",
                "title": "UiExtensionCompilerOptions",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/types.ts\" sourceLine=\"327\" packageName=\"@vendure/ui-devkit\" />\n\nOptions to configure how the Admin UI should be compiled.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "outputpath",
                        "title": "outputPath",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\nThe directory into which the sources for the extended Admin UI will be copied.\n"
                    },
                    {
                        "id": "extensions",
                        "title": "extensions",
                        "content": "\n<MemberInfo kind=\"property\" type={`Extension[]`}   />\n\nAn array of objects which configure Angular modules and/or\ntranslations with which to extend the Admin UI.\n"
                    },
                    {
                        "id": "ngcompilerpath",
                        "title": "ngCompilerPath",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | undefined`}  since=\"2.1.0\"  />\n\nAllows you to manually specify the path to the Angular CLI compiler script. This can be useful in scenarios\nwhere for some reason the built-in start/build scripts are unable to locate the `ng` command.\n\nThis option should not usually be required.\n\n*Example*\n\n"
                    },
                    {
                        "id": "devmode",
                        "title": "devMode",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`} default=\"false\"   />\n\nSet to `true` in order to compile the Admin UI in development mode (using the Angular CLI\n[ng serve](https://angular.io/cli/serve) command). When in dev mode, any changes to\nUI extension files will be watched and trigger a rebuild of the Admin UI with live\nreloading.\n"
                    },
                    {
                        "id": "basehref",
                        "title": "baseHref",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'/admin/'\"   />\n\nAllows the baseHref of the compiled Admin UI app to be set. This determines the prefix\nof the app, for example with the default value of `'/admin/'`, the Admin UI app\nwill be configured to be served from `http://<host>/admin/`.\n\nNote: if you are using this in conjunction with the <a href='/reference/core-plugins/admin-ui-plugin/#adminuiplugin'>AdminUiPlugin</a> then you should\nalso set the `route` option to match this value.\n\n*Example*\n\n"
                    },
                    {
                        "id": "watchport",
                        "title": "watchPort",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`} default=\"4200 | undefined\"   />\n\nIn watch mode, allows the port of the dev server to be specified. Defaults to the Angular CLI default\nof `4200`.\n"
                    },
                    {
                        "id": "command",
                        "title": "command",
                        "content": "\n<MemberInfo kind=\"property\" type={`'yarn' | 'npm'`}  since=\"1.5.0\"  />\n\nInternally, the Angular CLI will be invoked as an npm script. By default, the compiler will use Yarn\nto run the script if it is detected, otherwise it will use npm. This setting allows you to explicitly\nset which command to use, rather than relying on the default behavior.\n"
                    },
                    {
                        "id": "additionalprocessarguments",
                        "title": "additionalProcessArguments",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/admin-ui-api/ui-devkit/ui-extension-compiler-process-argument#uiextensioncompilerprocessargument'>UiExtensionCompilerProcessArgument</a>[]`} default=\"undefined\"  since=\"1.5.0\"  />\n\nAdditional command-line arguments which will get passed to the [ng build](https://angular.io/cli/build)\ncommand (or [ng serve](https://angular.io/cli/serve) if `devMode = true`).\n\n*Example*\n\n['--disable-host-check'] // to disable host check\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface UiExtensionCompilerOptions {",
                    "    outputPath: string;",
                    "    extensions: Extension[];",
                    "    ngCompilerPath?: string | undefined;",
                    "    devMode?: boolean;",
                    "    baseHref?: string;",
                    "    watchPort?: number;",
                    "    command?: 'yarn' | 'npm';",
                    "    additionalProcessArguments?: UiExtensionCompilerProcessArgument[];",
                    "}",
                    "compileUiExtensions({",
                    "    ngCompilerPath: path.join(__dirname, '../../node_modules/@angular/cli/bin/ng.js'),",
                    "    outputPath: path.join(__dirname, '../admin-ui'),",
                    "    extensions: [",
                    "      // ...",
                    "    ],",
                    "})",
                    "AdminUiPlugin.init({",
                    "  route: 'my-route',",
                    "  port: 5001,",
                    "  app: compileUiExtensions({",
                    "    baseHref: '/my-route/',",
                    "    outputPath: path.join(__dirname, './custom-admin-ui'),",
                    "    extensions: [],",
                    "    devMode: true,",
                    "  }),",
                    "}),"
                ]
            }
        ]
    },
    {
        "id": "uiextensioncompilerprocessargument",
        "metadata": {
            "title": "UiExtensionCompilerProcessArgument",
            "keywords": [
                "uiextensioncompilerprocessargument"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/types.ts\" sourceLine=\"319\" packageName=\"@vendure/ui-devkit\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "uiextensioncompilerprocessargument",
                "title": "UiExtensionCompilerProcessArgument",
                "content": "\n<GenerationInfo sourceFile=\"packages/ui-devkit/src/compiler/types.ts\" sourceLine=\"319\" packageName=\"@vendure/ui-devkit\" />\n\nArgument to configure process (watch or compile)\n\n\n",
                "subsections": [],
                "code": [
                    "type UiExtensionCompilerProcessArgument = string | [string, any]"
                ]
            }
        ]
    },
    {
        "id": "updating-vendure",
        "metadata": {
            "title": "Updating Vendure",
            "keywords": [
                "updating vendure",
                "how to update",
                "admin ui changes",
                "versioning policy & breaking changes",
                "what kinds of breaking changes can be expected?",
                "database migrations",
                "graphql schema changes",
                "typescript api changes"
            ],
            "description": "This guide provides guidance for updating the Vendure core framework to a newer version. First, check the [changelog](https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG.md) for an overview of the changes and any breaking changes in the next version. In your project's `package.json` file, find all the `@vendure/...` packages and change the version to the latest. All the Vendure packages have the same version, and are all released together. ```diff"
        },
        "content": "",
        "sections": [
            {
                "id": "how-to-update",
                "title": "How to update",
                "content": "\nFirst, check the [changelog](https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG.md) for an overview of the changes and any breaking changes in the next version.\n\nIn your project's `package.json` file, find all the `@vendure/...` packages and change the version\nto the latest. All the Vendure packages have the same version, and are all released together.\n\n\nThen run `npm install` or `yarn install` depending on which package manager you prefer.\n\n",
                "subsections": [],
                "code": [
                    "{",
                    "  // ...",
                    "  \"dependencies\": {",
                    "-    \"@vendure/common\": \"1.1.5\",",
                    "+    \"@vendure/common\": \"1.2.0\",",
                    "-    \"@vendure/core\": \"1.1.5\",",
                    "+    \"@vendure/core\": \"1.2.0\",",
                    "     // etc.",
                    "  }",
                    "}"
                ]
            },
            {
                "id": "admin-ui-changes",
                "title": "Admin UI changes",
                "content": "\nIf you are using UI extensions to create your own custom Admin UI using the [`compileUiExtensions`](/reference/admin-ui-api/ui-devkit/compile-ui-extensions/) function, then you'll need to **delete and re-compile your admin-ui directory after upgrading** (this is the directory specified by the [`outputPath`](/reference/admin-ui-api/ui-devkit/ui-extension-compiler-options#outputpath) property).\n\nIf you also have an `.angular` directory in your project, you should delete this too after the update to ensure that any stale cached files are removed.\n\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "versioning-policy-&-breaking-changes",
                "title": "Versioning Policy & Breaking changes",
                "content": "\nVendure generally follows the [SemVer convention](https://semver.org/) for version numbering. This means that breaking API changes will only be introduced with changes to the major version (the first of the 3 digits in the version).\n\nHowever, there are some exceptions to this rule:\n\n- In minor versions, (e.g. v2.0 to v2.1) we may update underlying dependencies to new major versions, which may in turn introduce breaking changes. These will be clearly noted in the changelog.\n- In minor versions we may also occasionally introduce non-destructive changes to the database schema. For instance, we may add a new column which would then require a database migration. We will _not_ introduce database schema changes that could potentially result in data loss in a minor version.\n\nAny instances of these exceptions will be clearly indicated in the [Changelog](https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG.md). The reasoning for these exceptions is discussed in the [Versioning policy RFC](https://github.com/vendure-ecommerce/vendure/issues/1846).\n\n",
                "subsections": [
                    {
                        "id": "what-kinds-of-breaking-changes-can-be-expected?",
                        "title": "What kinds of breaking changes can be expected?",
                        "content": "\nMajor version upgrades (e.g. v1.x to v2.x) can include:\n\n* Changes to the database schema\n* Changes to the GraphQL schema\n* Updates of major underlying libraries, such as upgrading NestJS to a new major version\n\nEvery release will be accompanied by an entry in the [changelog](https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG.md), listing the changes in that release. And breaking changes are clearly listed under a **BREAKING CHANGE** heading.\n\n"
                    },
                    {
                        "id": "database-migrations",
                        "title": "Database migrations",
                        "content": "\nDatabase changes are one of the most common causes for breaking changes. In most cases, the changes are minor (such as the addition of a new column) and non-destructive (i.e. performing the migration has no risk of data loss).\n\nHowever, some more fundamental changes occasionally require a careful approach to database migration in order to preserve existing data.\n\nThe key rule is **never run your production instance with the `synchronize` option set to `true`**. Doing so can cause inadvertent data loss in rare cases.\n\nFor any database schema changes, it is advised to:\n\n1. Read the changelog breaking changes entries to see what changes to expect\n2. **Important:** Make a backup of your database!\n3. Create a new database migration as described in the [Migrations guide](/guides/developer-guide/migrations/)\n4. Manually check the migration script. In some cases manual action is needed to customize the script in order to correctly migrate your existing data.\n5. Test the migration script against non-production data.\n6. Only when you have verified that the migration works as expected, run it against your production database.\n\n"
                    },
                    {
                        "id": "graphql-schema-changes",
                        "title": "GraphQL schema changes",
                        "content": "\nIf you are using a code-generation tool (such as [graphql-code-generator](https://graphql-code-generator.com/)) for your custom plugins or storefront, it is a good idea to re-generate after upgrading, which will catch any errors caused by changes to the GraphQL schema.\n\n"
                    },
                    {
                        "id": "typescript-api-changes",
                        "title": "TypeScript API changes",
                        "content": "\nIf you are using Vendure providers (services, JobQueue, EventBus etc.) in your custom plugins, you should look out for breakages caused by changes to those services. Major changes will be listed in the changelog, but occasionally internal changes may also impact your code. \n\nThe best way to check whether this is the case is to build your entire project after upgrading, to see if any new TypeScript compiler errors emerge.\n\n\n"
                    }
                ],
                "code": []
            }
        ]
    },
    {
        "id": "uploading-files",
        "metadata": {
            "title": "Uploading Files",
            "keywords": [
                "uploading files",
                "upload clients",
                "the `createassets` mutation",
                "custom upload mutations",
                "configuration",
                "schema definition",
                "resolver",
                "complete customer avatar plugin",
                "uploading a customer avatar"
            ],
            "description": "Vendure handles file uploads with the [GraphQL multipart request specification](https://github.com/jaydenseric/graphql-multipart-request-spec). Internally, we use the [graphql-upload package](https://github.com/jaydenseric/graphql-upload). Once uploaded, a file is known as an [Asset](/guides/core-concepts/images-assets/). Assets are typically used for images, but can represent any kind of binary data such as PDF files or videos. Here is a [list of client implementations](https://github.com/jaydenseric/graphql-multipart-request-spec#client) that will allow you to upload files using the spec. If you are using Apollo Client, then you should install the [apollo-upload-client](https://github.com/jaydenseric/apollo-upload-client) npm package. For testing, it is even possible to use a [plain curl request](https://github.com/jaydenseric/graphql-multipart-request-spec#single-file). The [createAssets mutation](/reference/graphql-api/admin/mutations/#createassets) in the Admin API is the only means of uploading files by default. Here's an example of how a file upload would look using the `apollo-upload-client` package:"
        },
        "content": "",
        "sections": [
            {
                "id": "upload-clients",
                "title": "Upload clients",
                "content": "\nHere is a [list of client implementations](https://github.com/jaydenseric/graphql-multipart-request-spec#client) that will allow you to upload files using the spec. If you are using Apollo Client, then you should install the [apollo-upload-client](https://github.com/jaydenseric/apollo-upload-client) npm package.\n\nFor testing, it is even possible to use a [plain curl request](https://github.com/jaydenseric/graphql-multipart-request-spec#single-file).\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "the-`createassets`-mutation",
                "title": "The `createAssets` mutation",
                "content": "\nThe [createAssets mutation](/reference/graphql-api/admin/mutations/#createassets) in the Admin API is the only means of uploading files by default. \n\nHere's an example of how a file upload would look using the `apollo-upload-client` package:\n\n\n",
                "subsections": [],
                "code": [
                    "import { gql, useMutation } from \"@apollo/client\";",
                    "",
                    "const MUTATION = gql`",
                    "  mutation CreateAssets($input: [CreateAssetInput!]!) {",
                    "    createAssets(input: $input) {",
                    "      ... on Asset {",
                    "        id",
                    "        name",
                    "        fileSize",
                    "      }",
                    "      ... on ErrorResult {",
                    "        message",
                    "      }",
                    "    }",
                    "  }",
                    "`;",
                    "",
                    "function UploadFile() {",
                    "    const [mutate] = useMutation(MUTATION);",
                    "",
                    "    function onChange(event) {",
                    "        const {target} = event;",
                    "        if (target.validity.valid) {",
                    "            mutate({",
                    "                variables: {",
                    "                    input: Array.from(target.files).map((file) => ({file}));",
                    "                }",
                    "            });",
                    "        }",
                    "    }",
                    "",
                    "    return <input type=\"file\" required onChange={onChange}/>;",
                    "}"
                ]
            },
            {
                "id": "custom-upload-mutations",
                "title": "Custom upload mutations",
                "content": "\nHow about if you want to implement a custom mutation for file uploads? Let's take an example where we want to allow customers to set an avatar image. To do this, we'll add a [custom field](/guides/developer-guide/custom-fields/) to the Customer entity and then define a new mutation in the Shop API.\n\n",
                "subsections": [
                    {
                        "id": "configuration",
                        "title": "Configuration",
                        "content": "\nLet's define a custom field to associate the avatar `Asset` with the `Customer` entity. To keep everything encapsulated, we'll do all of this in a [plugin](/guides/developer-guide/plugins/)\n\n\n"
                    },
                    {
                        "id": "schema-definition",
                        "title": "Schema definition",
                        "content": "\nNext, we will define the schema for the mutation:\n\n\n"
                    },
                    {
                        "id": "resolver",
                        "title": "Resolver",
                        "content": "\nThe resolver will make use of the built-in [AssetService]({{< relref \"asset-service\" >}}) to handle the processing of the uploaded file into an Asset.\n\n\n"
                    },
                    {
                        "id": "complete-customer-avatar-plugin",
                        "title": "Complete Customer Avatar Plugin",
                        "content": "\nLet's put all these parts together into the plugin:\n\n\n"
                    },
                    {
                        "id": "uploading-a-customer-avatar",
                        "title": "Uploading a Customer Avatar",
                        "content": "\nIn our storefront, we would then upload a Customer's avatar like this:\n\n\n"
                    }
                ],
                "code": [
                    "import { Asset, LanguageCode, PluginCommonModule, VendurePlugin } from '@vendure/core';",
                    "",
                    "@VendurePlugin({",
                    "    imports: [PluginCommonModule],",
                    "    configure: config => {",
                    "        // highlight-start",
                    "        config.customFields.Customer.push({",
                    "            name: 'avatar',",
                    "            type: 'relation',",
                    "            label: [{languageCode: LanguageCode.en, value: 'Customer avatar'}],",
                    "            entity: Asset,",
                    "            nullable: true,",
                    "        });",
                    "        // highlight-end",
                    "        return config;",
                    "    },",
                    "})",
                    "export class CustomerAvatarPlugin {}",
                    "import gql from 'graphql-tag';",
                    "",
                    "export const shopApiExtensions = gql`",
                    "extend type Mutation {",
                    "  setCustomerAvatar(file: Upload!): Asset",
                    "}`",
                    "import { Args, Mutation, Resolver } from '@nestjs/graphql';",
                    "import { Asset } from '@vendure/common/lib/generated-types';",
                    "import {",
                    "    Allow, AssetService, Ctx, CustomerService, isGraphQlErrorResult,",
                    "    Permission, RequestContext, Transaction",
                    "} from '@vendure/core';",
                    "",
                    "@Resolver()",
                    "export class CustomerAvatarResolver {",
                    "    constructor(private assetService: AssetService, private customerService: CustomerService) {}",
                    "",
                    "    @Transaction()",
                    "    @Mutation()",
                    "    @Allow(Permission.Authenticated)",
                    "    async setCustomerAvatar(",
                    "        @Ctx() ctx: RequestContext,",
                    "        @Args() args: { file: any },",
                    "    ): Promise<Asset | undefined> {",
                    "        const userId = ctx.activeUserId;",
                    "        if (!userId) {",
                    "            return;",
                    "        }",
                    "        const customer = await this.customerService.findOneByUserId(ctx, userId);",
                    "        if (!customer) {",
                    "            return;",
                    "        }",
                    "        // Create an Asset from the uploaded file",
                    "        const asset = await this.assetService.create(ctx, {",
                    "            file: args.file,",
                    "            tags: ['avatar'],",
                    "        });",
                    "        // Check to make sure there was no error when",
                    "        // creating the Asset",
                    "        if (isGraphQlErrorResult(asset)) {",
                    "            // MimeTypeError",
                    "            throw asset;",
                    "        }",
                    "        // Asset created correctly, so assign it as the",
                    "        // avatar of the current Customer",
                    "        await this.customerService.update(ctx, {",
                    "            id: customer.id,",
                    "            customFields: {",
                    "                avatarId: asset.id,",
                    "            },",
                    "        });",
                    "",
                    "        return asset;",
                    "    }",
                    "}",
                    "import { Asset, PluginCommonModule, VendurePlugin } from '@vendure/core';",
                    "",
                    "import { shopApiExtensions } from './api/api-extensions';",
                    "import { CustomerAvatarResolver } from './api/customer-avatar.resolver';",
                    "",
                    "@VendurePlugin({",
                    "    imports: [PluginCommonModule],",
                    "    shopApiExtensions: {",
                    "        schema: shopApiExtensions,",
                    "        resolvers: [CustomerAvatarResolver],",
                    "    },",
                    "    configuration: config => {",
                    "        config.customFields.Customer.push({",
                    "            name: 'avatar',",
                    "            type: 'relation',",
                    "            label: [{languageCode: LanguageCode.en, value: 'Customer avatar'}],",
                    "            entity: Asset,",
                    "            nullable: true,",
                    "        });",
                    "        return config;",
                    "    },",
                    "})",
                    "export class CustomerAvatarPlugin {",
                    "}",
                    "import { gql, useMutation } from \"@apollo/client\";",
                    "",
                    "const MUTATION = gql`",
                    "  mutation SetCustomerAvatar($file: Upload!) {",
                    "    setCustomerAvatar(file: $file) {",
                    "      id",
                    "      name",
                    "      fileSize",
                    "    }",
                    "  }",
                    "`;",
                    "",
                    "function UploadAvatar() {",
                    "  const [mutate] = useMutation(MUTATION);",
                    "",
                    "  function onChange(event) {",
                    "    const { target } = event;  ",
                    "    if (target.validity.valid && target.files.length === 1) {",
                    "      mutate({ ",
                    "        variables: {",
                    "          file: target.files[0],",
                    "        }  ",
                    "      });",
                    "    }",
                    "  }",
                    "",
                    "  return <input type=\"file\" required onChange={onChange} />;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "usedetailcomponentdata",
        "metadata": {
            "title": "UseDetailComponentData",
            "keywords": [
                "usedetailcomponentdata"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-detail-component-data.ts\" sourceLine=\"34\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "usedetailcomponentdata",
                "title": "useDetailComponentData",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-detail-component-data.ts\" sourceLine=\"34\" packageName=\"@vendure/admin-ui\" />\n\nProvides the data available to React-based CustomDetailComponents.\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    "import { Card, useDetailComponentData } from '@vendure/admin-ui/react';",
                    "import React from 'react';",
                    "",
                    "export function CustomDetailComponent(props: any) {",
                    "    const { entity, detailForm } = useDetailComponentData();",
                    "    const updateName = () => {",
                    "        detailForm.get('name')?.setValue('New name');",
                    "        detailForm.markAsDirty();",
                    "    };",
                    "    return (",
                    "        <Card title={'Custom Detail Component'}>",
                    "            <button className=\"button\" onClick={updateName}>",
                    "                Update name",
                    "            </button>",
                    "            <pre>{JSON.stringify(entity, null, 2)}</pre>",
                    "        </Card>",
                    "    );",
                    "}",
                    "function useDetailComponentData<T = any>(): void"
                ]
            }
        ]
    },
    {
        "id": "useformcontrol",
        "metadata": {
            "title": "UseFormControl",
            "keywords": [
                "useformcontrol"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-form-control.ts\" sourceLine=\"31\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "useformcontrol",
                "title": "useFormControl",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-form-control.ts\" sourceLine=\"31\" packageName=\"@vendure/admin-ui\" />\n\nProvides access to the current FormControl value and a method to update the value.\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    "import { useFormControl, ReactFormInputProps } from '@vendure/admin-ui/react';",
                    "import React from 'react';",
                    "",
                    "export function ReactNumberInput({ readonly }: ReactFormInputProps) {",
                    "    const { value, setFormValue } = useFormControl();",
                    "",
                    "    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {",
                    "        setFormValue(val);",
                    "    };",
                    "    return (",
                    "        <div>",
                    "            <input readOnly={readonly} type=\"number\" onChange={handleChange} value={value} />",
                    "        </div>",
                    "    );",
                    "}",
                    "function useFormControl(): void"
                ]
            }
        ]
    },
    {
        "id": "useinjector",
        "metadata": {
            "title": "UseInjector",
            "keywords": [
                "useinjector",
                "token"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-injector.ts\" sourceLine=\"27\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "useinjector",
                "title": "useInjector",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-injector.ts\" sourceLine=\"27\" packageName=\"@vendure/admin-ui\" />\n\nExposes the Angular injector which allows the injection of services into React components.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "token",
                        "title": "token",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`ProviderToken&#60;T&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { useInjector } from '@vendure/admin-ui/react';",
                    "import { NotificationService } from '@vendure/admin-ui/core';",
                    "",
                    "export const MyComponent = () => {",
                    "    const notificationService = useInjector(NotificationService);",
                    "",
                    "    const handleClick = () => {",
                    "        notificationService.success('Hello world!');",
                    "    };",
                    "    // ...",
                    "    return <div>...</div>;",
                    "}",
                    "function useInjector<T = any>(token: ProviderToken<T>): T"
                ]
            }
        ]
    },
    {
        "id": "usemutation",
        "metadata": {
            "title": "UseMutation",
            "keywords": [
                "usemutation",
                "mutation"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-query.ts\" sourceLine=\"104\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "usemutation",
                "title": "useMutation",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-query.ts\" sourceLine=\"104\" packageName=\"@vendure/admin-ui\" />\n\nA React hook which allows you to execute a GraphQL mutation.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "mutation",
                        "title": "mutation",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`DocumentNode | TypedDocumentNode&#60;T, V&#62;`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { useMutation } from '@vendure/admin-ui/react';",
                    "import { gql } from 'graphql-tag';",
                    "",
                    "const UPDATE_PRODUCT = gql`",
                    "  mutation UpdateProduct($input: UpdateProductInput!) {",
                    "    updateProduct(input: $input) {",
                    "    id",
                    "    name",
                    "  }",
                    "}`;",
                    "",
                    "export const MyComponent = () => {",
                    "    const [updateProduct, { data, loading, error }] = useMutation(UPDATE_PRODUCT);",
                    "",
                    "    const handleClick = () => {",
                    "        updateProduct({",
                    "            input: {",
                    "                id: '1',",
                    "                name: 'New name',",
                    "            },",
                    "        }).then(result => {",
                    "            // do something with the result",
                    "        });",
                    "    };",
                    "",
                    "    if (loading) return <div>Loading...</div>;",
                    "    if (error) return <div>Error! { error }</div>;",
                    "",
                    "    return (",
                    "    <div>",
                    "        <button onClick={handleClick}>Update product</button>",
                    "        {data && <div>Product updated!</div>}",
                    "    </div>",
                    "    );",
                    "};",
                    "function useMutation<T, V extends Record<string, any> = Record<string, any>>(mutation: DocumentNode | TypedDocumentNode<T, V>): void"
                ]
            }
        ]
    },
    {
        "id": "usepagemetadata",
        "metadata": {
            "title": "UsePageMetadata",
            "keywords": [
                "usepagemetadata"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-page-metadata.ts\" sourceLine=\"31\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "usepagemetadata",
                "title": "usePageMetadata",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-page-metadata.ts\" sourceLine=\"31\" packageName=\"@vendure/admin-ui\" />\n\nProvides functions for setting the current page title and breadcrumb.\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    "import { usePageMetadata } from '@vendure/admin-ui/react';",
                    "import { useEffect } from 'react';",
                    "",
                    "export const MyComponent = () => {",
                    "    const { setTitle, setBreadcrumb } = usePageMetadata();",
                    "    useEffect(() => {",
                    "        setTitle('My Page');",
                    "        setBreadcrumb([",
                    "            { link: ['./parent'], label: 'Parent Page' },",
                    "            { link: ['./'], label: 'This Page' },",
                    "        ]);",
                    "    }, []);",
                    "    // ...",
                    "    return <div>...</div>;",
                    "}",
                    "function usePageMetadata(): void"
                ]
            }
        ]
    },
    {
        "id": "usequery",
        "metadata": {
            "title": "UseQuery",
            "keywords": [
                "usequery",
                "query",
                "variables"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-query.ts\" sourceLine=\"43\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "usequery",
                "title": "useQuery",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-query.ts\" sourceLine=\"43\" packageName=\"@vendure/admin-ui\" />\n\nA React hook which provides access to the results of a GraphQL query.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "query",
                        "title": "query",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`DocumentNode | TypedDocumentNode&#60;T, V&#62;`} />\n\n"
                    },
                    {
                        "id": "variables",
                        "title": "variables",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`V`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { useQuery } from '@vendure/admin-ui/react';",
                    "import { gql } from 'graphql-tag';",
                    "",
                    "const GET_PRODUCT = gql`",
                    "   query GetProduct($id: ID!) {",
                    "     product(id: $id) {",
                    "       id",
                    "       name",
                    "       description",
                    "     }",
                    "   }`;",
                    "",
                    "export const MyComponent = () => {",
                    "    const { data, loading, error } = useQuery(GET_PRODUCT, { id: '1' });",
                    "",
                    "    if (loading) return <div>Loading...</div>;",
                    "    if (error) return <div>Error! { error }</div>;",
                    "    return (",
                    "        <div>",
                    "            <h1>{data.product.name}</h1>",
                    "            <p>{data.product.description}</p>",
                    "        </div>",
                    "    );",
                    "};",
                    "function useQuery<T, V extends Record<string, any> = Record<string, any>>(query: DocumentNode | TypedDocumentNode<T, V>, variables?: V): void"
                ]
            }
        ]
    },
    {
        "id": "user",
        "metadata": {
            "title": "User",
            "keywords": [
                "user",
                "constructor",
                "deletedat",
                "identifier",
                "authenticationmethods",
                "verified",
                "roles",
                "lastlogin",
                "customfields",
                "getnativeauthenticationmethod"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/user/user.entity.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "user",
                "title": "User",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/user/user.entity.ts\" sourceLine=\"20\" packageName=\"@vendure/core\" />\n\nA User represents any authenticated user of the Vendure API. This includes both\n<a href='/reference/typescript-api/entities/administrator#administrator'>Administrator</a>s as well as registered <a href='/reference/typescript-api/entities/customer#customer'>Customer</a>s.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code>HasCustomFields</code>, <code><a href='/reference/typescript-api/entities/interfaces#softdeletable'>SoftDeletable</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/user#user'>User</a>&#62;) => User`}   />\n\n\n"
                    },
                    {
                        "id": "deletedat",
                        "title": "deletedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n"
                    },
                    {
                        "id": "identifier",
                        "title": "identifier",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "authenticationmethods",
                        "title": "authenticationMethods",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/authentication-method#authenticationmethod'>AuthenticationMethod</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "verified",
                        "title": "verified",
                        "content": "\n<MemberInfo kind=\"property\" type={`boolean`}   />\n\n\n"
                    },
                    {
                        "id": "roles",
                        "title": "roles",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/role#role'>Role</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "lastlogin",
                        "title": "lastLogin",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date | null`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomUserFields`}   />\n\n\n"
                    },
                    {
                        "id": "getnativeauthenticationmethod",
                        "title": "getNativeAuthenticationMethod",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => <a href='/reference/typescript-api/entities/authentication-method#nativeauthenticationmethod'>NativeAuthenticationMethod</a>`}   />\n\n\n"
                    },
                    {
                        "id": "getnativeauthenticationmethod",
                        "title": "getNativeAuthenticationMethod",
                        "content": "\n<MemberInfo kind=\"method\" type={`(strict?: boolean) => <a href='/reference/typescript-api/entities/authentication-method#nativeauthenticationmethod'>NativeAuthenticationMethod</a> | undefined`}   />\n\n\n"
                    },
                    {
                        "id": "getnativeauthenticationmethod",
                        "title": "getNativeAuthenticationMethod",
                        "content": "\n<MemberInfo kind=\"method\" type={`(strict?: boolean) => <a href='/reference/typescript-api/entities/authentication-method#nativeauthenticationmethod'>NativeAuthenticationMethod</a> | undefined`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class User extends VendureEntity implements HasCustomFields, SoftDeletable {",
                    "    constructor(input?: DeepPartial<User>)",
                    "    @Column({ type: Date, nullable: true })",
                    "    deletedAt: Date | null;",
                    "    @Column()",
                    "    identifier: string;",
                    "    @OneToMany(type => AuthenticationMethod, method => method.user)",
                    "    authenticationMethods: AuthenticationMethod[];",
                    "    @Column({ default: false })",
                    "    verified: boolean;",
                    "    @ManyToMany(type => Role)",
                    "    @JoinTable()",
                    "    roles: Role[];",
                    "    @Column({ type: Date, nullable: true })",
                    "    lastLogin: Date | null;",
                    "    @Column(type => CustomUserFields)",
                    "    customFields: CustomUserFields;",
                    "    getNativeAuthenticationMethod() => NativeAuthenticationMethod;",
                    "    getNativeAuthenticationMethod(strict?: boolean) => NativeAuthenticationMethod | undefined;",
                    "    getNativeAuthenticationMethod(strict?: boolean) => NativeAuthenticationMethod | undefined;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "userouteparams",
        "metadata": {
            "title": "UseRouteParams",
            "keywords": [
                "userouteparams"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-route-params.ts\" sourceLine=\"23\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "userouteparams",
                "title": "useRouteParams",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/react/src/react-hooks/use-route-params.ts\" sourceLine=\"23\" packageName=\"@vendure/admin-ui\" />\n\nProvides access to the current route params and query params.\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    "import { useRouteParams } from '@vendure/admin-ui/react';",
                    "import React from 'react';",
                    "",
                    "export function MyComponent() {",
                    "    const { params, queryParams } = useRouteParams();",
                    "    // ...",
                    "    return <div>{ params.id }</div>;",
                    "}",
                    "function useRouteParams(): void"
                ]
            }
        ]
    },
    {
        "id": "userservice",
        "metadata": {
            "title": "UserService",
            "keywords": [
                "userservice",
                "constructor",
                "getuserbyid",
                "getuserbyemailaddress",
                "createcustomeruser",
                "addnativeauthenticationmethod",
                "createadminuser",
                "softdelete",
                "setverificationtoken",
                "verifyuserbytoken",
                "setpasswordresettoken",
                "resetpasswordbytoken",
                "changeuserandnativeidentifier",
                "setidentifierchangetoken",
                "changeidentifierbytoken",
                "updatepassword"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/user.service.ts\" sourceLine=\"37\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "userservice",
                "title": "UserService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/user.service.ts\" sourceLine=\"37\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/user#user'>User</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, roleService: <a href='/reference/typescript-api/services/role-service#roleservice'>RoleService</a>, passwordCipher: PasswordCipher, verificationTokenGenerator: VerificationTokenGenerator, moduleRef: ModuleRef) => UserService`}   />\n\n\n"
                    },
                    {
                        "id": "getuserbyid",
                        "title": "getUserById",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, userId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getuserbyemailaddress",
                        "title": "getUserByEmailAddress",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, emailAddress: string, userType?: 'administrator' | 'customer') => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "createcustomeruser",
                        "title": "createCustomerUser",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, identifier: string, password?: string) => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a> | PasswordValidationError&#62;`}   />\n\nCreates a new User with the special `customer` Role and using the <a href='/reference/typescript-api/auth/native-authentication-strategy#nativeauthenticationstrategy'>NativeAuthenticationStrategy</a>.\n"
                    },
                    {
                        "id": "addnativeauthenticationmethod",
                        "title": "addNativeAuthenticationMethod",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>, identifier: string, password?: string) => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a> | PasswordValidationError&#62;`}   />\n\nAdds a new <a href='/reference/typescript-api/entities/authentication-method#nativeauthenticationmethod'>NativeAuthenticationMethod</a> to the User. If the <a href='/reference/typescript-api/auth/auth-options#authoptions'>AuthOptions</a> `requireVerification`\nis set to `true` (as is the default), the User will be marked as unverified until the email verification\nflow is completed.\n"
                    },
                    {
                        "id": "createadminuser",
                        "title": "createAdminUser",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, identifier: string, password: string) => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a>&#62;`}   />\n\nCreates a new verified User using the <a href='/reference/typescript-api/auth/native-authentication-strategy#nativeauthenticationstrategy'>NativeAuthenticationStrategy</a>.\n"
                    },
                    {
                        "id": "softdelete",
                        "title": "softDelete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, userId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "setverificationtoken",
                        "title": "setVerificationToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>) => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a>&#62;`}   />\n\nSets the <a href='/reference/typescript-api/entities/authentication-method#nativeauthenticationmethod'>NativeAuthenticationMethod</a> `verificationToken` as part of the User email verification\nflow.\n"
                    },
                    {
                        "id": "verifyuserbytoken",
                        "title": "verifyUserByToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, verificationToken: string, password?: string) => Promise&#60;<a href='/reference/typescript-api/errors/error-result-union#errorresultunion'>ErrorResultUnion</a>&#60;VerifyCustomerAccountResult, <a href='/reference/typescript-api/entities/user#user'>User</a>&#62;&#62;`}   />\n\nVerifies a verificationToken by looking for a User which has previously had it set using the\n`setVerificationToken()` method, and checks that the token is valid and has not expired.\n\nIf valid, the User will be set to `verified: true`.\n"
                    },
                    {
                        "id": "setpasswordresettoken",
                        "title": "setPasswordResetToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, emailAddress: string) => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a> | undefined&#62;`}   />\n\nSets the <a href='/reference/typescript-api/entities/authentication-method#nativeauthenticationmethod'>NativeAuthenticationMethod</a> `passwordResetToken` as part of the User password reset\nflow.\n"
                    },
                    {
                        "id": "resetpasswordbytoken",
                        "title": "resetPasswordByToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, passwordResetToken: string, password: string) => Promise&#60;\n         <a href='/reference/typescript-api/entities/user#user'>User</a> | PasswordResetTokenExpiredError | PasswordResetTokenInvalidError | PasswordValidationError\n     &#62;`}   />\n\nVerifies a passwordResetToken by looking for a User which has previously had it set using the\n`setPasswordResetToken()` method, and checks that the token is valid and has not expired.\n\nIf valid, the User's credentials will be updated with the new password.\n"
                    },
                    {
                        "id": "changeuserandnativeidentifier",
                        "title": "changeUserAndNativeIdentifier",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, userId: <a href='/reference/typescript-api/common/id#id'>ID</a>, newIdentifier: string) => `}   />\n\nChanges the User identifier without an email verification step, so this should be only used when\nan Administrator is setting a new email address.\n"
                    },
                    {
                        "id": "setidentifierchangetoken",
                        "title": "setIdentifierChangeToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, user: <a href='/reference/typescript-api/entities/user#user'>User</a>) => Promise&#60;<a href='/reference/typescript-api/entities/user#user'>User</a>&#62;`}   />\n\nSets the <a href='/reference/typescript-api/entities/authentication-method#nativeauthenticationmethod'>NativeAuthenticationMethod</a> `identifierChangeToken` as part of the User email address change\nflow.\n"
                    },
                    {
                        "id": "changeidentifierbytoken",
                        "title": "changeIdentifierByToken",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, token: string) => Promise&#60;\n         | { user: <a href='/reference/typescript-api/entities/user#user'>User</a>; oldIdentifier: string }\n         | IdentifierChangeTokenInvalidError\n         | IdentifierChangeTokenExpiredError\n     &#62;`}   />\n\nChanges the User identifier as part of the storefront flow used by Customers to set a\nnew email address, with the token previously set using the `setIdentifierChangeToken()` method.\n"
                    },
                    {
                        "id": "updatepassword",
                        "title": "updatePassword",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, userId: <a href='/reference/typescript-api/common/id#id'>ID</a>, currentPassword: string, newPassword: string) => Promise&#60;boolean | InvalidCredentialsError | PasswordValidationError&#62;`}   />\n\nUpdates the password for a User with the <a href='/reference/typescript-api/entities/authentication-method#nativeauthenticationmethod'>NativeAuthenticationMethod</a>.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class UserService {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, roleService: RoleService, passwordCipher: PasswordCipher, verificationTokenGenerator: VerificationTokenGenerator, moduleRef: ModuleRef)",
                    "    getUserById(ctx: RequestContext, userId: ID) => Promise<User | undefined>;",
                    "    getUserByEmailAddress(ctx: RequestContext, emailAddress: string, userType?: 'administrator' | 'customer') => Promise<User | undefined>;",
                    "    createCustomerUser(ctx: RequestContext, identifier: string, password?: string) => Promise<User | PasswordValidationError>;",
                    "    addNativeAuthenticationMethod(ctx: RequestContext, user: User, identifier: string, password?: string) => Promise<User | PasswordValidationError>;",
                    "    createAdminUser(ctx: RequestContext, identifier: string, password: string) => Promise<User>;",
                    "    softDelete(ctx: RequestContext, userId: ID) => ;",
                    "    setVerificationToken(ctx: RequestContext, user: User) => Promise<User>;",
                    "    verifyUserByToken(ctx: RequestContext, verificationToken: string, password?: string) => Promise<ErrorResultUnion<VerifyCustomerAccountResult, User>>;",
                    "    setPasswordResetToken(ctx: RequestContext, emailAddress: string) => Promise<User | undefined>;",
                    "    resetPasswordByToken(ctx: RequestContext, passwordResetToken: string, password: string) => Promise<",
                    "        User | PasswordResetTokenExpiredError | PasswordResetTokenInvalidError | PasswordValidationError",
                    "    >;",
                    "    changeUserAndNativeIdentifier(ctx: RequestContext, userId: ID, newIdentifier: string) => ;",
                    "    setIdentifierChangeToken(ctx: RequestContext, user: User) => Promise<User>;",
                    "    changeIdentifierByToken(ctx: RequestContext, token: string) => Promise<",
                    "        | { user: User; oldIdentifier: string }",
                    "        | IdentifierChangeTokenInvalidError",
                    "        | IdentifierChangeTokenExpiredError",
                    "    >;",
                    "    updatePassword(ctx: RequestContext, userId: ID, currentPassword: string, newPassword: string) => Promise<boolean | InvalidCredentialsError | PasswordValidationError>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "using-docker",
        "metadata": {
            "title": "Using docker",
            "keywords": [
                "using docker",
                "run the server",
                "run the worker",
                "docker compose",
                "kubernetes",
                "health/readiness checks",
                "server",
                "worker"
            ],
            "description": "[Docker](https://docs.docker.com/) is a technology which allows you to run your Vendure application inside a [container](https://docs.docker.com/get-started/#what-is-a-container). The default installation with `@vendure/create` includes a sample Dockerfile: ```dockerfile title=\"Dockerfile\" FROM node:16 WORKDIR /usr/src/app"
        },
        "content": "",
        "sections": [
            {
                "id": "docker-compose",
                "title": "Docker Compose",
                "content": "\nManaging multiple docker containers can be made easier using [Docker Compose](https://docs.docker.com/compose/). In the below example, we use \nthe same Dockerfile defined above, and we also define a Postgres database to connect to:\n\n\n",
                "subsections": [],
                "code": [
                    "version: \"3\"",
                    "services:",
                    "  server:",
                    "    build:",
                    "      context: .",
                    "      dockerfile: Dockerfile",
                    "    ports:",
                    "      - 3000:3000",
                    "    command: [\"npm\", \"run\", \"start:server\"]",
                    "    volumes:",
                    "      - /usr/src/app",
                    "    environment:",
                    "      DB_HOST: database",
                    "      DB_PORT: 5432",
                    "      DB_NAME: vendure",
                    "      DB_USERNAME: postgres",
                    "      DB_PASSWORD: password",
                    "  worker:",
                    "    build:",
                    "      context: .",
                    "      dockerfile: Dockerfile",
                    "    command: [\"npm\", \"run\", \"start:worker\"]",
                    "    volumes:",
                    "      - /usr/src/app",
                    "    environment:",
                    "      DB_HOST: database",
                    "      DB_PORT: 5432",
                    "      DB_NAME: vendure",
                    "      DB_USERNAME: postgres",
                    "      DB_PASSWORD: password",
                    "  database:",
                    "    image: postgres",
                    "    volumes:",
                    "      - /var/lib/postgresql/data",
                    "    ports:",
                    "      - 5432:5432",
                    "    environment:",
                    "      POSTGRES_PASSWORD: password",
                    "      POSTGRES_DB: vendure"
                ]
            },
            {
                "id": "kubernetes",
                "title": "Kubernetes",
                "content": "\n[Kubernetes](https://kubernetes.io/) is used to manage multiple containerized applications. \nThis deployment starts the shop container we created above as both worker and server.\n\n\n",
                "subsections": [],
                "code": [
                    "apiVersion: apps/v1",
                    "kind: Deployment",
                    "metadata:",
                    "  name: vendure-shop",
                    "spec:",
                    "  selector:",
                    "    matchLabels:",
                    "      app: vendure-shop",
                    "  replicas: 1",
                    "  template:",
                    "    metadata:",
                    "      labels:",
                    "        app: vendure-shop",
                    "    spec:",
                    "      containers:",
                    "        - name: server",
                    "          image: vendure-shop:latest",
                    "          command:",
                    "            - node",
                    "          args:",
                    "            - \"dist/index.js\"",
                    "          env:",
                    "          # your env config here",
                    "          ports:",
                    "            - containerPort: 3000",
                    "",
                    "        - name: worker",
                    "          image: vendure-shop:latest",
                    "          imagePullPolicy: Always",
                    "          command:",
                    "            - node",
                    "          args:",
                    "            - \"dist/index-worker.js\"",
                    "          env:",
                    "          # your env config here",
                    "          ports:",
                    "            - containerPort: 3000"
                ]
            },
            {
                "id": "health/readiness-checks",
                "title": "Health/Readiness Checks",
                "content": "\nIf you wish to deploy with Kubernetes or some similar system, you can make use of the health check endpoints. \n\n",
                "subsections": [
                    {
                        "id": "server",
                        "title": "Server",
                        "content": "\nThis is a regular REST route (note: _not_ GraphQL), available at `/health`.\n\n \n\nHealth checks are built on the [Nestjs Terminus module](https://docs.nestjs.com/recipes/terminus). You can also add your own health checks by creating plugins that make use of the [HealthCheckRegistryService](/reference/typescript-api/health-check/health-check-registry-service/).\n\n"
                    },
                    {
                        "id": "worker",
                        "title": "Worker",
                        "content": "\nAlthough the worker is not designed as an HTTP server, it contains a minimal HTTP server specifically to support HTTP health checks. To enable this, you need to call the `startHealthCheckServer()` method after bootstrapping the worker:\n\nThis will make the `/health` endpoint available. When the worker instance is running, it will return the following:\n\n\n\n"
                    }
                ],
                "code": [
                    "REQUEST: GET http://localhost:3000/health",
                    "{",
                    "  \"status\": \"ok\",",
                    "  \"info\": {",
                    "    \"database\": {",
                    "      \"status\": \"up\"",
                    "    }",
                    "  },",
                    "  \"error\": {},",
                    "  \"details\": {",
                    "    \"database\": {",
                    "      \"status\": \"up\"",
                    "    }",
                    "  }",
                    "}",
                    "bootstrapWorker(config)",
                    "    .then(worker => worker.startJobQueue())",
                    "    .then(worker => worker.startHealthCheckServer({ port: 3020 }))",
                    "    .catch(err => {",
                    "        console.log(err);",
                    "    });",
                    "REQUEST: GET http://localhost:3020/health",
                    "{",
                    "  \"status\": \"ok\"",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "using-other-frameworks",
        "metadata": {
            "title": "Using Other Frameworks",
            "keywords": [
                "1. install `@vendure/ui-devkit`",
                "or",
                "2. create the folder structure",
                "3. create an extension module",
                "4. define the adminuiextension config",
                "5. build your extension",
                "integrate with the admin ui",
                "styling",
                "uidevkitclient",
                "settargetorigin",
                "next steps"
            ],
            "description": "From version 2.1.0, Admin UI extensions can be written in either Angular or React. Prior to v2.1.0, only Angular was natively supported. It is, however, possible to extend the Admin UI using other frameworks such as Vue, Svelte, Solid etc. Note that the extension experience is much more limited than with Angular or React, but depending on your needs it may be sufficient. :::info For working examples of a UI extensions built with **Vue**, see the [real-world-vendure ui extensions](https://github.com/vendure-ecommerce/real-world-vendure/tree/master/src/ui-extensions) :::"
        },
        "content": "",
        "sections": [
            {
                "id": "1.-install-`@vendure/ui-devkit`",
                "title": "1. Install `@vendure/ui-devkit`",
                "content": "\nTo create UI extensions, you'll need to install the `@vendure/ui-devkit` package. This package contains a compiler for building your customized version of the Admin UI, as well as the Angular dependencies you'll need to create your extensions.\n\n\n",
                "subsections": [],
                "code": [
                    "yarn add @vendure/ui-devkit",
                    "",
                    "# or",
                    "",
                    "npm install @vendure/ui-devkit"
                ]
            },
            {
                "id": "2.-create-the-folder-structure",
                "title": "2. Create the folder structure",
                "content": "\nIn this example, we will work with the following folder structure, and use Create React App our example.\n\n\n",
                "subsections": [],
                "code": [
                    "src",
                    "└─plugins",
                    "  └─ my-plugin",
                    "    └─ ui",
                    "      ├─ routes.ts",
                    "      └─ vue-app",
                    "        └─ (directory created by `vue create`, for example)"
                ]
            },
            {
                "id": "3.-create-an-extension-module",
                "title": "3. Create an extension module",
                "content": "\nHere's the Angular code needed to tell the compiler where to find your extension:\n\n\n",
                "subsections": [],
                "code": [
                    "import { hostExternalFrame } from '@vendure/admin-ui/core';",
                    "",
                    "export default [",
                    "    hostExternalFrame({",
                    "        path: '',",
                    "",
                    "        // You can also use parameters which allow the app",
                    "        // to have dynamic routing, e.g.",
                    "        // path: ':slug'",
                    "        // Then you can use the getActivatedRoute() function from the",
                    "        // UiDevkitClient in order to access the value of the \"slug\"",
                    "        // parameter.",
                    "",
                    "        breadcrumbLabel: 'Vue App',",
                    "        // This is the URL to the compiled React app index.",
                    "        // The next step will explain the \"assets/react-app\" path.",
                    "        extensionUrl: './assets/vue-app/index.html',",
                    "        openInNewTab: false,",
                    "    })",
                    "];"
                ]
            },
            {
                "id": "4.-define-the-adminuiextension-config",
                "title": "4. Define the AdminUiExtension config",
                "content": "\nNext we will define an [AdminUiExtension](/reference/admin-ui-api/ui-devkit/admin-ui-extension/) object which is passed to the `compileUiExtensions()` function in your Vendure config:\n\n\n",
                "subsections": [],
                "code": [
                    "import path from 'path';",
                    "import { VendureConfig } from '@vendure/core';",
                    "import { AdminUiPlugin } from '@vendure/admin-ui-plugin';",
                    "import { compileUiExtensions } from '@vendure/ui-devkit/compiler';",
                    "",
                    "export const config: VendureConfig = {",
                    "    // ...",
                    "    plugins: [",
                    "        AdminUiPlugin.init({",
                    "            route: 'admin',",
                    "            port: 3002,",
                    "            app: compileUiExtensions({",
                    "                outputPath: path.join(__dirname, '../admin-ui'),",
                    "                extensions: [{",
                    "                    // Points to the path containing our Angular \"glue code\" module",
                    "                    extensionPath: path.join(__dirname, 'plugins/my-plugin/ui'),",
                    "                    routes: [{ route: 'vue-ui', filePath: 'routes.ts' }],",
                    "                    staticAssets: [",
                    "                        // This is where we tell the compiler to copy the compiled Vue app",
                    "                        // artifacts over to the Admin UI's `/static` directory. In this case we",
                    "                        // also rename \"build\" to \"vue-app\". This is why the `extensionUrl`",
                    "                        // in the module config points to './assets/vue-app/index.html'.",
                    "                        {path: path.join(__dirname, 'plugins/my-plugin/ui/vue-app/dist'), rename: 'vue-app'},",
                    "                    ],",
                    "                }],",
                    "                devMode: true,",
                    "            }),",
                    "        }),",
                    "    ]",
                    "};"
                ]
            },
            {
                "id": "5.-build-your-extension",
                "title": "5. Build your extension",
                "content": "\nTo ensure things are working we can now build our Vue app by running `yarn build` in the `vue-app` directory. This will build and output the app artifacts to the `vue-app/build` directory - the one we pointed to in the `staticAssets` array above.\n\nOnce build, we can start the Vendure server.\n\nThe `compileUiExtensions()` function returns a `compile()` function which will be invoked by the AdminUiPlugin upon server bootstrap. During this compilation process, a new directory will be generated at `/admin-ui` (as specified by the `outputPath` option) which will contains the un-compiled sources of your new Admin UI app.\n\nNext, these source files will be run through the Angular compiler, the output of which will be visible in the console.\n\nNow go to the Admin UI app in your browser and log in. You should now be able to manually enter the URL `http://localhost:3000/admin/extensions/vue-ui` and you should see the Vue app rendered in the Admin UI.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "integrate-with-the-admin-ui",
                "title": "Integrate with the Admin UI",
                "content": "\n",
                "subsections": [
                    {
                        "id": "styling",
                        "title": "Styling",
                        "content": "The `@vendure/admin-ui` package (which will be installed alongside the ui-devkit) provides a stylesheet to allow your extension to fit visually with the rest of the Admin UI.\n\nIf you have a build step, you can import it into your app like this:\n\n\nIf your extension does not have a build step, you can still include the theme stylesheet as a local resource:\n\n\n"
                    },
                    {
                        "id": "uidevkitclient",
                        "title": "UiDevkitClient",
                        "content": "\nThe `@vendure/ui-devkit` package provides a number of helper methods which allow your extension to seamlessly interact with the underlying Admin UI infrastructure, collectively known as the [UiDevkitClient](/reference/admin-ui-api/ui-devkit/ui-devkit-client/). The client allows your extension to:\n\n* Make GraphQL queries & mutations, without the need for your own HTTP or GraphQL client, with full integration with the Admin UI client-side GraphQL cache.\n* Display toast notifications.\n\n#### setTargetOrigin\n\nThe UiDevkitClient uses the browser's [postMessage API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) to communicate between the Admin UI app and your extension. For security reasons this communication channel is restricted to a specific domain (where your extension app will be running from). To configure this, use the [setTargetOrigin](/reference/admin-ui-api/ui-devkit/ui-devkit-client/#settargetorigin) function:\n\n\nIf this is mis-configured you will see an error along the lines of \"Failed to execute 'postMessage' on 'DOMWindow'\".\n\nFor apps with a build step, you can use these functions like this:\n\n\nIf your extension does not have a build step, you can still include the UiDevkitClient as a local resource, which will expose a `VendureUiClient` global object:\n\n\n"
                    }
                ],
                "code": [
                    "import '@vendure/admin-ui/static/theme.min.css';",
                    "<!-- src/ui-extension/plain-js-app/index.html -->",
                    "<head>",
                    "  <link rel=\"stylesheet\" href=\"../../theme.min.css\" />",
                    "</head>",
                    "import { setTargetOrigin } from '@vendure/ui-devkit';",
                    "",
                    "setTargetOrigin('http://my-domain.com');",
                    "",
                    "import { graphQlMutation, notify } from '@vendure/ui-devkit';",
                    "",
                    "// somewhere in your component",
                    "const disableProduct = (id: string) => {",
                    "  graphQlMutation(`",
                    "    mutation DisableProduct($id: ID!) {",
                    "      updateProduct(input: { id: $id, enabled: false }) {",
                    "        id",
                    "        enabled",
                    "      }",
                    "    }`, { id }).then(result => {",
                    "     notify({",
                    "       message: 'Updated Product',",
                    "     });",
                    "  })",
                    "}",
                    "<!-- src/ui-extension/plain-js-app/index.html -->",
                    "<head>",
                    "  <script src=\"../devkit/ui-devkit.js\"></script>",
                    "</head>",
                    "<script>",
                    "  const disableProduct = id => {",
                    "    VendureUiClient.graphQlMutation(`",
                    "      mutation DisableProduct($id: ID!) {",
                    "        updateProduct(input: { id: $id, enabled: false }) {",
                    "          id",
                    "          enabled",
                    "        }",
                    "      }`, { id }).then(result => {",
                    "       VendureUiClient.notify({",
                    "         message: 'Updated Product',",
                    "       });",
                    "    })",
                    "  }",
                    "</script>"
                ]
            },
            {
                "id": "next-steps",
                "title": "Next Steps",
                "content": "\nNow you have created your extension, you need a way for your admin to access it. See [Adding Navigation Items](/guides/extending-the-admin-ui/nav-menu/)\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "vendure-overview",
        "metadata": {
            "title": "Vendure Overview",
            "keywords": [
                "architecture",
                "technology stack",
                "design principles"
            ],
            "description": "Read this page to gain a high-level understanding of Vendure and concepts you will need to know to build your application. Vendure is a headless e-commerce platform. By \"headless\" we mean that it exposes all of its functionality via APIs. Specifically, Vendure features two GraphQL APIs: one for storefronts (Shop API) and the other for administrative functions (Admin API). These are the major parts of a Vendure application: * **Server**: The Vendure server is the part that handles requests coming in to the GraphQL APIs. It serves both the [Shop API](/reference/graphql-api/shop/queries) and [Admin API](/reference/graphql-api/admin/queries), and can send jobs to the Job Queue to be processed by the Worker. * **Worker**: The Worker runs in the background and deals with tasks such as updating the search index, sending emails, and other tasks which may be long-running, resource-intensive or require retries."
        },
        "content": "",
        "sections": [
            {
                "id": "architecture",
                "title": "Architecture",
                "content": "\nVendure is a headless e-commerce platform. By \"headless\" we mean that it exposes all of its functionality via APIs. Specifically, Vendure features two GraphQL APIs: one for storefronts (Shop API) and the other for administrative functions (Admin API).\n\nThese are the major parts of a Vendure application:\n\n* **Server**: The Vendure server is the part that handles requests coming in to the GraphQL APIs. It serves both the [Shop API](/reference/graphql-api/shop/queries) and [Admin API](/reference/graphql-api/admin/queries), and can send jobs to the Job Queue to be processed by the Worker.\n* **Worker**: The Worker runs in the background and deals with tasks such as updating the search index, sending emails, and other tasks which may be long-running, resource-intensive or require retries.\n* **Admin UI**: The Admin UI is how shop administrators manage orders, customers, products, settings and so on. It is not actually part of the Vendure core, but is provided as a plugin (the [AdminUiPlugin](/reference/core-plugins/admin-ui-plugin/)) which is installed for you in a standard Vendure installation. The Admin UI can be further extended to support custom functionality, as detailed in the [Extending the Admin UI](/guides/extending-the-admin-ui/getting-started/) section\n* **Storefront**: With headless commerce, you are free to implement your storefront exactly as you see fit, unconstrained by the back-end, using any technologies that you like. To make this process easier, we have created a number of [storefront starter kits](/guides/storefront/storefront-starters/), as well as [guides on building a storefront](/guides/storefront/connect-api/).\n\n![./Vendure_docs-architecture.webp](./Vendure_docs-architecture.webp) \n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "technology-stack",
                "title": "Technology stack",
                "content": "\nVendure is built on the following open-source technologies:\n\n- **SQL Database**: Vendure requires an SQL database compatible with [TypeORM](https://typeorm.io/). Officially we support **PostgreSQL**, **MySQL/MariaDB** and **SQLite** but Vendure can also be used with API-compatible variants such [Amazon Aurora](https://aws.amazon.com/rds/aurora/), [CockroachDB](https://www.cockroachlabs.com/), or [PlanetScale](https://planetscale.com/).\n- **TypeScript & Node.js**: Vendure is written in [TypeScript](https://www.typescriptlang.org/) and runs on [Node.js](https://nodejs.org).\n- **NestJS**: The underlying framework is [NestJS](https://nestjs.com/), which is a full-featured application development framework for Node.js. Building on NestJS means that Vendure benefits from the well-defined structure and rich feature-set and ecosystem that NestJS provides.\n- **GraphQL**: The Shop and Admin APIs use [GraphQL](https://graphql.org/), which is a modern API technology which allows you to specify the exact data that your client application needs in a convenient and type-safe way. Internally we use [Apollo Server](https://www.apollographql.com/docs/apollo-server/) to power our GraphQL APIs.\n- **Angular**: The Admin UI is built with [Angular](https://angular.io/), a popular, stable application framework from Google. Note that you do not need to know Angular to use Vendure, and UI extensions can even be written in the front-end framework of your choice, such as React or Vue.\n\n",
                "subsections": [],
                "code": []
            },
            {
                "id": "design-principles",
                "title": "Design principles",
                "content": "\nVendure is designed to be:\n\n- **Flexible**: Vendure is designed to be flexible enough to support a wide range of e-commerce use-cases, while taking care of the common functionality for you. It is not a \"one-size-fits-all\" solution, but rather a framework which you can extend and customize to suit your needs.\n- **Extensible**: A typical e-commerce application needs to integrate with many external systems for payments, shipping, inventory management, email sending, and so on. Vendure makes heavy use of the **strategy pattern** - a software design pattern which allows you to replace default behaviors with your own custom implementations as needed.\n- **Modular**: Vendure is built with a modular architecture, where each unit of functionality of your application is encapsulated in a **plugin**. This makes it easy to add or remove functionality as needed, and to share plugins with the community.\n- **Type-safe**: Vendure is written in TypeScript, which means that you get the benefits of static type-checking and code completion in your IDE. Our use of GraphQL for our APIs brings static typing to the API layer, enabling rapid development with type-safety across the entire stack.\n\n\n\n",
                "subsections": [],
                "code": []
            }
        ]
    },
    {
        "id": "vendureconfig",
        "metadata": {
            "title": "VendureConfig",
            "keywords": [
                "vendureconfig",
                "apioptions",
                "assetoptions",
                "authoptions",
                "catalogoptions",
                "customfields",
                "dbconnectionoptions",
                "defaultchanneltoken",
                "defaultlanguagecode",
                "entityidstrategy",
                "entityoptions",
                "importexportoptions",
                "orderoptions",
                "paymentoptions",
                "plugins",
                "promotionoptions",
                "shippingoptions",
                "logger",
                "taxoptions",
                "jobqueueoptions",
                "systemoptions"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"1013\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "vendureconfig",
                "title": "VendureConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/vendure-config.ts\" sourceLine=\"1013\" packageName=\"@vendure/core\" />\n\nAll possible configuration options are defined by the\n[`VendureConfig`](https://github.com/vendure-ecommerce/vendure/blob/master/server/src/config/vendure-config.ts) interface.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "apioptions",
                        "title": "apiOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configuration/api-options#apioptions'>ApiOptions</a>`}   />\n\nConfiguration for the GraphQL APIs, including hostname, port, CORS settings,\nmiddleware etc.\n"
                    },
                    {
                        "id": "assetoptions",
                        "title": "assetOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/assets/asset-options#assetoptions'>AssetOptions</a>`}   />\n\nConfiguration for the handling of Assets.\n"
                    },
                    {
                        "id": "authoptions",
                        "title": "authOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/auth/auth-options#authoptions'>AuthOptions</a>`}   />\n\nConfiguration for authorization.\n"
                    },
                    {
                        "id": "catalogoptions",
                        "title": "catalogOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/products-stock/catalog-options#catalogoptions'>CatalogOptions</a>`}   />\n\nConfiguration for Products and Collections.\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/custom-fields/#customfields'>CustomFields</a>`} default=\"{}\"   />\n\nDefines custom fields which can be used to extend the built-in entities.\n"
                    },
                    {
                        "id": "dbconnectionoptions",
                        "title": "dbConnectionOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`DataSourceOptions`}   />\n\nThe connection options used by TypeORM to connect to the database.\nSee the [TypeORM documentation](https://typeorm.io/#/connection-options) for a\nfull description of all available options.\n"
                    },
                    {
                        "id": "defaultchanneltoken",
                        "title": "defaultChannelToken",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | null`} default=\"null\"   />\n\nThe token for the default channel. If not specified, a token\nwill be randomly generated.\n"
                    },
                    {
                        "id": "defaultlanguagecode",
                        "title": "defaultLanguageCode",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>`} default=\"<a href='/reference/typescript-api/common/language-code#languagecode'>LanguageCode</a>.en\"   />\n\nThe default languageCode of the app.\n"
                    },
                    {
                        "id": "entityidstrategy",
                        "title": "entityIdStrategy",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configuration/entity-id-strategy#entityidstrategy'>EntityIdStrategy</a>&#60;any&#62;`} default=\"<a href='/reference/typescript-api/configuration/entity-id-strategy#autoincrementidstrategy'>AutoIncrementIdStrategy</a>\"   />\n\nDefines the strategy used for both storing the primary keys of entities\nin the database, and the encoding & decoding of those ids when exposing\nentities via the API. The default uses a simple auto-increment integer\nstrategy.\n"
                    },
                    {
                        "id": "entityoptions",
                        "title": "entityOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configuration/entity-options#entityoptions'>EntityOptions</a>`}   />\n\n\n"
                    },
                    {
                        "id": "importexportoptions",
                        "title": "importExportOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/import-export/import-export-options#importexportoptions'>ImportExportOptions</a>`}   />\n\nConfiguration settings for data import and export.\n"
                    },
                    {
                        "id": "orderoptions",
                        "title": "orderOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/orders/order-options#orderoptions'>OrderOptions</a>`}   />\n\nConfiguration settings governing how orders are handled.\n"
                    },
                    {
                        "id": "paymentoptions",
                        "title": "paymentOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/payment/payment-options#paymentoptions'>PaymentOptions</a>`}   />\n\nConfigures available payment processing methods.\n"
                    },
                    {
                        "id": "plugins",
                        "title": "plugins",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;DynamicModule | Type&#60;any&#62;&#62;`} default=\"[]\"   />\n\nAn array of plugins.\n"
                    },
                    {
                        "id": "promotionoptions",
                        "title": "promotionOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/promotions/promotion-options#promotionoptions'>PromotionOptions</a>`}   />\n\nConfigures the Conditions and Actions available when creating Promotions.\n"
                    },
                    {
                        "id": "shippingoptions",
                        "title": "shippingOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/shipping/shipping-options#shippingoptions'>ShippingOptions</a>`}   />\n\nConfigures the available checkers and calculators for ShippingMethods.\n"
                    },
                    {
                        "id": "logger",
                        "title": "logger",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/logger/vendure-logger#vendurelogger'>VendureLogger</a>`} default=\"<a href='/reference/typescript-api/logger/default-logger#defaultlogger'>DefaultLogger</a>\"   />\n\nProvide a logging service which implements the <a href='/reference/typescript-api/logger/vendure-logger#vendurelogger'>VendureLogger</a> interface.\nNote that the logging of SQL queries is controlled separately by the\n`dbConnectionOptions.logging` property.\n"
                    },
                    {
                        "id": "taxoptions",
                        "title": "taxOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/tax/tax-options#taxoptions'>TaxOptions</a>`}   />\n\nConfigures how taxes are calculated on products.\n"
                    },
                    {
                        "id": "jobqueueoptions",
                        "title": "jobQueueOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/job-queue/job-queue-options#jobqueueoptions'>JobQueueOptions</a>`}   />\n\nConfigures how the job queue is persisted and processed.\n"
                    },
                    {
                        "id": "systemoptions",
                        "title": "systemOptions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/configuration/system-options#systemoptions'>SystemOptions</a>`}  since=\"1.6.0\"  />\n\nConfigures system options\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface VendureConfig {",
                    "    apiOptions: ApiOptions;",
                    "    assetOptions?: AssetOptions;",
                    "    authOptions: AuthOptions;",
                    "    catalogOptions?: CatalogOptions;",
                    "    customFields?: CustomFields;",
                    "    dbConnectionOptions: DataSourceOptions;",
                    "    defaultChannelToken?: string | null;",
                    "    defaultLanguageCode?: LanguageCode;",
                    "    entityIdStrategy?: EntityIdStrategy<any>;",
                    "    entityOptions?: EntityOptions;",
                    "    importExportOptions?: ImportExportOptions;",
                    "    orderOptions?: OrderOptions;",
                    "    paymentOptions: PaymentOptions;",
                    "    plugins?: Array<DynamicModule | Type<any>>;",
                    "    promotionOptions?: PromotionOptions;",
                    "    shippingOptions?: ShippingOptions;",
                    "    logger?: VendureLogger;",
                    "    taxOptions?: TaxOptions;",
                    "    jobQueueOptions?: JobQueueOptions;",
                    "    systemOptions?: SystemOptions;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "vendureentity",
        "metadata": {
            "title": "VendureEntity",
            "keywords": [
                "vendureentity",
                "constructor",
                "id",
                "createdat",
                "updatedat"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/base/base.entity.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "vendureentity",
                "title": "VendureEntity",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/base/base.entity.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nThis is the base class from which all entities inherit. The type of\nthe `id` property is defined by the <a href='/reference/typescript-api/configuration/entity-id-strategy#entityidstrategy'>EntityIdStrategy</a>.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a>&#62;) => VendureEntity`}   />\n\n\n"
                    },
                    {
                        "id": "id",
                        "title": "id",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/common/id#id'>ID</a>`}   />\n\n\n"
                    },
                    {
                        "id": "createdat",
                        "title": "createdAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date`}   />\n\n\n"
                    },
                    {
                        "id": "updatedat",
                        "title": "updatedAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class VendureEntity {",
                    "    constructor(input?: DeepPartial<VendureEntity>)",
                    "    @PrimaryGeneratedId()",
                    "    id: ID;",
                    "    @CreateDateColumn() createdAt: Date;",
                    "    @UpdateDateColumn() updatedAt: Date;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "vendureentityevent",
        "metadata": {
            "title": "VendureEntityEvent",
            "keywords": [
                "vendureentityevent",
                "entity",
                "type",
                "ctx",
                "input",
                "constructor"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/event-bus/vendure-entity-event.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "vendureentityevent",
                "title": "VendureEntityEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/vendure-entity-event.ts\" sourceLine=\"12\" packageName=\"@vendure/core\" />\n\nThe base class for all entity events used by the EventBus system.\n* For event type `'deleted'` the input will most likely be an `id: ID`\n\n* Extends: <code><a href='/reference/typescript-api/events/vendure-event#vendureevent'>VendureEvent</a></code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "entity",
                        "title": "entity",
                        "content": "\n<MemberInfo kind=\"property\" type={`Entity`}   />\n\n\n"
                    },
                    {
                        "id": "type",
                        "title": "type",
                        "content": "\n<MemberInfo kind=\"property\" type={`'created' | 'updated' | 'deleted'`}   />\n\n\n"
                    },
                    {
                        "id": "ctx",
                        "title": "ctx",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>`}   />\n\n\n"
                    },
                    {
                        "id": "input",
                        "title": "input",
                        "content": "\n<MemberInfo kind=\"property\" type={`Input`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(entity: Entity, type: 'created' | 'updated' | 'deleted', ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input?: Input) => VendureEntityEvent`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class VendureEntityEvent<Entity, Input = any> extends VendureEvent {",
                    "    public readonly entity: Entity;",
                    "    public readonly type: 'created' | 'updated' | 'deleted';",
                    "    public readonly ctx: RequestContext;",
                    "    public readonly input?: Input;",
                    "    constructor(entity: Entity, type: 'created' | 'updated' | 'deleted', ctx: RequestContext, input?: Input)",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "vendureevent",
        "metadata": {
            "title": "VendureEvent",
            "keywords": [
                "vendureevent",
                "createdat",
                "constructor"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/event-bus/vendure-event.ts\" sourceLine=\"7\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "vendureevent",
                "title": "VendureEvent",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/event-bus/vendure-event.ts\" sourceLine=\"7\" packageName=\"@vendure/core\" />\n\nThe base class for all events used by the EventBus system.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "createdat",
                        "title": "createdAt",
                        "content": "\n<MemberInfo kind=\"property\" type={`Date`}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => VendureEvent`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class VendureEvent {",
                    "    public readonly createdAt: Date;",
                    "    constructor()",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "vendurelogger",
        "metadata": {
            "title": "VendureLogger",
            "keywords": [
                "vendurelogger",
                "error",
                "warn",
                "info",
                "verbose",
                "debug",
                "setdefaultcontext"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/config/logger/vendure-logger.ts\" sourceLine=\"47\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "vendurelogger",
                "title": "VendureLogger",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/config/logger/vendure-logger.ts\" sourceLine=\"47\" packageName=\"@vendure/core\" />\n\nThe VendureLogger interface defines the shape of a logger service which may be provided in\nthe config.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "error",
                        "title": "error",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string, trace?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "warn",
                        "title": "warn",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "info",
                        "title": "info",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "verbose",
                        "title": "verbose",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "debug",
                        "title": "debug",
                        "content": "\n<MemberInfo kind=\"method\" type={`(message: string, context?: string) => void`}   />\n\n\n"
                    },
                    {
                        "id": "setdefaultcontext",
                        "title": "setDefaultContext",
                        "content": "\n<MemberInfo kind=\"method\" type={`(defaultContext: string) => void`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface VendureLogger {",
                    "    error(message: string, context?: string, trace?: string): void;",
                    "    warn(message: string, context?: string): void;",
                    "    info(message: string, context?: string): void;",
                    "    verbose(message: string, context?: string): void;",
                    "    debug(message: string, context?: string): void;",
                    "    setDefaultContext?(defaultContext: string): void;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "vendureplugin",
        "metadata": {
            "title": "VendurePlugin",
            "keywords": [
                "vendureplugin",
                "pluginmetadata"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/plugin/vendure-plugin.ts\" sourceLine=\"151\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "vendureplugin",
                "title": "VendurePlugin",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/plugin/vendure-plugin.ts\" sourceLine=\"151\" packageName=\"@vendure/core\" />\n\nThe VendurePlugin decorator is a means of configuring and/or extending the functionality of the Vendure server. A Vendure plugin is\na [Nestjs Module](https://docs.nestjs.com/modules), with optional additional metadata defining things like extensions to the GraphQL API, custom\nconfiguration or new database entities.\n\nAs well as configuring the app, a plugin may also extend the GraphQL schema by extending existing types or adding\nentirely new types. Database entities and resolvers can also be defined to handle the extended GraphQL types.\n\n*Example*\n\n\nParameters\n\n",
                "subsections": [
                    {
                        "id": "pluginmetadata",
                        "title": "pluginMetadata",
                        "content": "\n<MemberInfo kind=\"parameter\" type={`<a href='/reference/typescript-api/plugin/vendure-plugin-metadata#vendurepluginmetadata'>VendurePluginMetadata</a>`} />\n\n\n"
                    }
                ],
                "code": [
                    "import { Controller, Get } from '@nestjs/common';",
                    "import { Ctx, PluginCommonModule, ProductService, RequestContext, VendurePlugin } from '@vendure/core';",
                    "",
                    "@Controller('products')",
                    "export class ProductsController {",
                    "    constructor(private productService: ProductService) {}",
                    "",
                    "    @Get()",
                    "    findAll(@Ctx() ctx: RequestContext) {",
                    "        return this.productService.findAll(ctx);",
                    "    }",
                    "}",
                    "",
                    "",
                    "//A simple plugin which adds a REST endpoint for querying products.",
                    "@VendurePlugin({",
                    "    imports: [PluginCommonModule],",
                    "    controllers: [ProductsController],",
                    "})",
                    "export class RestPlugin {}",
                    "function VendurePlugin(pluginMetadata: VendurePluginMetadata): ClassDecorator"
                ]
            }
        ]
    },
    {
        "id": "vendurepluginmetadata",
        "metadata": {
            "title": "VendurePluginMetadata",
            "keywords": [
                "vendurepluginmetadata",
                "configuration",
                "shopapiextensions",
                "adminapiextensions",
                "entities",
                "compatibility",
                "apiextensiondefinition",
                "schema",
                "resolvers",
                "scalars",
                "pluginconfigurationfn"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/plugin/vendure-plugin.ts\" sourceLine=\"23\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "vendurepluginmetadata",
                "title": "VendurePluginMetadata",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/plugin/vendure-plugin.ts\" sourceLine=\"23\" packageName=\"@vendure/core\" />\n\nDefines the metadata of a Vendure plugin. This interface is an superset of the [Nestjs ModuleMetadata](https://docs.nestjs.com/modules)\n(which allows the definition of `imports`, `exports`, `providers` and `controllers`), which means\nthat any Nestjs Module is a valid Vendure plugin. In addition, the VendurePluginMetadata allows the definition of\nextra properties specific to Vendure.\n\n* Extends: <code>ModuleMetadata</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "configuration",
                        "title": "configuration",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/plugin/vendure-plugin-metadata#pluginconfigurationfn'>PluginConfigurationFn</a>`}   />\n\nA function which can modify the <a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a> object before the server bootstraps.\n"
                    },
                    {
                        "id": "shopapiextensions",
                        "title": "shopApiExtensions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/plugin/vendure-plugin-metadata#apiextensiondefinition'>APIExtensionDefinition</a>`}   />\n\nThe plugin may extend the default Vendure GraphQL shop api by providing extended\nschema definitions and any required resolvers.\n"
                    },
                    {
                        "id": "adminapiextensions",
                        "title": "adminApiExtensions",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/plugin/vendure-plugin-metadata#apiextensiondefinition'>APIExtensionDefinition</a>`}   />\n\nThe plugin may extend the default Vendure GraphQL admin api by providing extended\nschema definitions and any required resolvers.\n"
                    },
                    {
                        "id": "entities",
                        "title": "entities",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Type&#60;any&#62;&#62; | (() =&#62; Array&#60;Type&#60;any&#62;&#62;)`}   />\n\nThe plugin may define custom [TypeORM database entities](https://typeorm.io/#/entities).\n"
                    },
                    {
                        "id": "compatibility",
                        "title": "compatibility",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}  since=\"2.0.0\"  />\n\nThe plugin should define a valid [semver version string](https://www.npmjs.com/package/semver) to indicate which versions of\nVendure core it is compatible with. Attempting to use a plugin with an incompatible\nversion of Vendure will result in an error and the server will be unable to bootstrap.\n\nIf a plugin does not define this property, a message will be logged on bootstrap that the plugin is not\nguaranteed to be compatible with the current version of Vendure.\n\nTo effectively disable this check for a plugin, you can use an overly-permissive string such as `>0.0.0`.\n\n*Example*\n\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface VendurePluginMetadata extends ModuleMetadata {",
                    "    configuration?: PluginConfigurationFn;",
                    "    shopApiExtensions?: APIExtensionDefinition;",
                    "    adminApiExtensions?: APIExtensionDefinition;",
                    "    entities?: Array<Type<any>> | (() => Array<Type<any>>);",
                    "    compatibility?: string;",
                    "}",
                    "compatibility: '^2.0.0'"
                ]
            },
            {
                "id": "apiextensiondefinition",
                "title": "APIExtensionDefinition",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/plugin/vendure-plugin.ts\" sourceLine=\"74\" packageName=\"@vendure/core\" />\n\nAn object which allows a plugin to extend the Vendure GraphQL API.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "schema",
                        "title": "schema",
                        "content": "\n<MemberInfo kind=\"property\" type={`DocumentNode | (() =&#62; DocumentNode | undefined)`}   />\n\nExtensions to the schema.\n\n*Example*\n\n"
                    },
                    {
                        "id": "resolvers",
                        "title": "resolvers",
                        "content": "\n<MemberInfo kind=\"property\" type={`Array&#60;Type&#60;any&#62;&#62; | (() =&#62; Array&#60;Type&#60;any&#62;&#62;)`}   />\n\nAn array of resolvers for the schema extensions. Should be defined as [Nestjs GraphQL resolver](https://docs.nestjs.com/graphql/resolvers-map)\nclasses, i.e. using the Nest `@Resolver()` decorator etc.\n"
                    },
                    {
                        "id": "scalars",
                        "title": "scalars",
                        "content": "\n<MemberInfo kind=\"property\" type={`Record&#60;string, GraphQLScalarType&#62; | (() =&#62; Record&#60;string, GraphQLScalarType&#62;)`}  since=\"1.7.0\"  />\n\nA map of GraphQL scalar types which should correspond to any custom scalars defined in your schema.\nRead more about defining custom scalars in the\n[Apollo Server Custom Scalars docs](https://www.apollographql.com/docs/apollo-server/schema/custom-scalars)\n\n\n</div>\n\n\n"
                    }
                ],
                "code": [
                    "interface APIExtensionDefinition {",
                    "    schema?: DocumentNode | (() => DocumentNode | undefined);",
                    "    resolvers?: Array<Type<any>> | (() => Array<Type<any>>);",
                    "    scalars?: Record<string, GraphQLScalarType> | (() => Record<string, GraphQLScalarType>);",
                    "}",
                    "const schema = gql`extend type SearchReindexResponse {",
                    "    timeTaken: Int!",
                    "    indexedItemCount: Int!",
                    "}`;"
                ]
            },
            {
                "id": "pluginconfigurationfn",
                "title": "PluginConfigurationFn",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/plugin/vendure-plugin.ts\" sourceLine=\"112\" packageName=\"@vendure/core\" />\n\nThis method is called before the app bootstraps and should be used to perform any needed modifications to the <a href='/reference/typescript-api/configuration/vendure-config#vendureconfig'>VendureConfig</a>.\n\n\n",
                "subsections": [],
                "code": [
                    "type PluginConfigurationFn = (",
                    "    config: RuntimeVendureConfig,",
                    ") => RuntimeVendureConfig | Promise<RuntimeVendureConfig>"
                ]
            }
        ]
    },
    {
        "id": "vendureworker",
        "metadata": {
            "title": "VendureWorker",
            "keywords": [
                "vendureworker",
                "app",
                "constructor",
                "startjobqueue",
                "starthealthcheckserver"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/worker/vendure-worker.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "vendureworker",
                "title": "VendureWorker",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/worker/vendure-worker.ts\" sourceLine=\"13\" packageName=\"@vendure/core\" />\n\nThis object is created by calling the <a href='/reference/typescript-api/worker/bootstrap-worker#bootstrapworker'>bootstrapWorker</a> function.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "app",
                        "title": "app",
                        "content": "\n<MemberInfo kind=\"property\" type={`INestApplicationContext`}   />\n\nA reference to the `INestApplicationContext` object, which represents\nthe NestJS [standalone application](https://docs.nestjs.com/standalone-applications) instance.\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(app: INestApplicationContext) => VendureWorker`}   />\n\n\n"
                    },
                    {
                        "id": "startjobqueue",
                        "title": "startJobQueue",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => Promise&#60;<a href='/reference/typescript-api/worker/vendure-worker#vendureworker'>VendureWorker</a>&#62;`}   />\n\nStarts the job queues running so that the worker can handle background jobs.\n"
                    },
                    {
                        "id": "starthealthcheckserver",
                        "title": "startHealthCheckServer",
                        "content": "\n<MemberInfo kind=\"method\" type={`(healthCheckConfig: <a href='/reference/typescript-api/worker/worker-health-check-config#workerhealthcheckconfig'>WorkerHealthCheckConfig</a>) => Promise&#60;<a href='/reference/typescript-api/worker/vendure-worker#vendureworker'>VendureWorker</a>&#62;`}  since=\"1.2.0\"  />\n\nStarts a simple http server which can be used as a health check on the worker instance.\nThis endpoint can be used by container orchestration services such as Kubernetes to\nverify whether the worker is running.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class VendureWorker {",
                    "    public app: INestApplicationContext;",
                    "    constructor(app: INestApplicationContext)",
                    "    startJobQueue() => Promise<VendureWorker>;",
                    "    startHealthCheckServer(healthCheckConfig: WorkerHealthCheckConfig) => Promise<VendureWorker>;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "vendure_version",
        "metadata": {
            "title": "VENDURE_VERSION",
            "keywords": [
                "vendure_version"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/version.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" since=\"2.0.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "vendure_version",
                "title": "VENDURE_VERSION",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/version.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" since=\"2.0.0\" />\n\nA constant which holds the current version of the Vendure core. You can use\nthis when your code needs to know the version of Vendure which is running.\n\n*Example*\n\n\n\n",
                "subsections": [],
                "code": [
                    "import { VENDURE_VERSION } from '@vendure/core';",
                    "",
                    "console.log('Vendure version:', VENDURE_VERSION);"
                ]
            }
        ]
    },
    {
        "id": "widgetlayoutdefinition",
        "metadata": {
            "title": "WidgetLayoutDefinition",
            "keywords": [
                "widgetlayoutdefinition"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/dashboard-widget/dashboard-widget-types.ts\" sourceLine=\"51\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "widgetlayoutdefinition",
                "title": "WidgetLayoutDefinition",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/providers/dashboard-widget/dashboard-widget-types.ts\" sourceLine=\"51\" packageName=\"@vendure/admin-ui\" />\n\nA configuration object for the default dashboard widget layout.\n\n\n",
                "subsections": [],
                "code": [
                    "type WidgetLayoutDefinition = Array<{ id: string; width: DashboardWidgetWidth }>"
                ]
            }
        ]
    },
    {
        "id": "worker",
        "metadata": {
            "title": "Worker",
            "keywords": [
                "worker"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script -->"
        },
        "content": "",
        "sections": []
    },
    {
        "id": "workerhealthcheckconfig",
        "metadata": {
            "title": "WorkerHealthCheckConfig",
            "keywords": [
                "workerhealthcheckconfig",
                "port",
                "hostname",
                "route"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/worker/worker-health.service.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" since=\"1.2.0\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "workerhealthcheckconfig",
                "title": "WorkerHealthCheckConfig",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/worker/worker-health.service.ts\" sourceLine=\"14\" packageName=\"@vendure/core\" since=\"1.2.0\" />\n\nSpecifies the configuration for the Worker's HTTP health check endpoint.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "port",
                        "title": "port",
                        "content": "\n<MemberInfo kind=\"property\" type={`number`}   />\n\nThe port on which the worker will listen\n"
                    },
                    {
                        "id": "hostname",
                        "title": "hostname",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'localhost'\"   />\n\nThe hostname\n"
                    },
                    {
                        "id": "route",
                        "title": "route",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`} default=\"'/health'\"   />\n\nThe route at which the health check is available.\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "interface WorkerHealthCheckConfig {",
                    "    port: number;",
                    "    hostname?: string;",
                    "    route?: string;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "zone",
        "metadata": {
            "title": "Zone",
            "keywords": [
                "zone",
                "constructor",
                "name",
                "members",
                "customfields"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/entity/zone/zone.entity.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "zone",
                "title": "Zone",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/entity/zone/zone.entity.ts\" sourceLine=\"17\" packageName=\"@vendure/core\" />\n\nA Zone is a grouping of one or more <a href='/reference/typescript-api/entities/country#country'>Country</a> entities. It is used for\ncalculating applicable shipping and taxes.\n\n* Extends: <code><a href='/reference/typescript-api/entities/vendure-entity#vendureentity'>VendureEntity</a></code>\n\n\n* Implements: <code>HasCustomFields</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(input?: DeepPartial&#60;<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>&#62;) => Zone`}   />\n\n\n"
                    },
                    {
                        "id": "name",
                        "title": "name",
                        "content": "\n<MemberInfo kind=\"property\" type={`string`}   />\n\n\n"
                    },
                    {
                        "id": "members",
                        "title": "members",
                        "content": "\n<MemberInfo kind=\"property\" type={`<a href='/reference/typescript-api/entities/region#region'>Region</a>[]`}   />\n\n\n"
                    },
                    {
                        "id": "customfields",
                        "title": "customFields",
                        "content": "\n<MemberInfo kind=\"property\" type={`CustomZoneFields`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class Zone extends VendureEntity implements HasCustomFields {",
                    "    constructor(input?: DeepPartial<Zone>)",
                    "    @Column() name: string;",
                    "    @ManyToMany(type => Region)",
                    "    @JoinTable()",
                    "    members: Region[];",
                    "    @Column(type => CustomZoneFields)",
                    "    customFields: CustomZoneFields;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "zoneselectorcomponent",
        "metadata": {
            "title": "ZoneSelectorComponent",
            "keywords": [
                "zoneselectorcomponent",
                "selectedvalueschange",
                "readonly",
                "transformcontrolvalueaccessorvalue",
                "selectedid$",
                "onchangefn",
                "ontouchfn",
                "disabled",
                "value",
                "zones$",
                "constructor",
                "onchange",
                "registeronchange",
                "registerontouched",
                "setdisabledstate",
                "focus",
                "writevalue"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/zone-selector/zone-selector.component.ts\" sourceLine=\"40\" packageName=\"@vendure/admin-ui\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "zoneselectorcomponent",
                "title": "ZoneSelectorComponent",
                "content": "\n<GenerationInfo sourceFile=\"packages/admin-ui/src/lib/core/src/shared/components/zone-selector/zone-selector.component.ts\" sourceLine=\"40\" packageName=\"@vendure/admin-ui\" />\n\nA form control for selecting zones.\n\n* Implements: <code>ControlValueAccessor</code>\n\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "selectedvalueschange",
                        "title": "selectedValuesChange",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "readonly",
                        "title": "readonly",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "transformcontrolvalueaccessorvalue",
                        "title": "transformControlValueAccessorValue",
                        "content": "\n<MemberInfo kind=\"property\" type={`(value: <a href='/reference/typescript-api/entities/zone#zone'>Zone</a> | undefined) =&#62; any`}   />\n\n\n"
                    },
                    {
                        "id": "selectedid$",
                        "title": "selectedId$",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "onchangefn",
                        "title": "onChangeFn",
                        "content": "\n<MemberInfo kind=\"property\" type={`(val: any) =&#62; void`}   />\n\n\n"
                    },
                    {
                        "id": "ontouchfn",
                        "title": "onTouchFn",
                        "content": "\n<MemberInfo kind=\"property\" type={`() =&#62; void`}   />\n\n\n"
                    },
                    {
                        "id": "disabled",
                        "title": "disabled",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "value",
                        "title": "value",
                        "content": "\n<MemberInfo kind=\"property\" type={`string | <a href='/reference/typescript-api/entities/zone#zone'>Zone</a>`}   />\n\n\n"
                    },
                    {
                        "id": "zones$",
                        "title": "zones$",
                        "content": "\n<MemberInfo kind=\"property\" type={``}   />\n\n\n"
                    },
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(dataService: <a href='/reference/admin-ui-api/services/data-service#dataservice'>DataService</a>, changeDetectorRef: ChangeDetectorRef) => ZoneSelectorComponent`}   />\n\n\n"
                    },
                    {
                        "id": "onchange",
                        "title": "onChange",
                        "content": "\n<MemberInfo kind=\"method\" type={`(selected: <a href='/reference/typescript-api/entities/zone#zone'>Zone</a>) => `}   />\n\n\n"
                    },
                    {
                        "id": "registeronchange",
                        "title": "registerOnChange",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fn: any) => `}   />\n\n\n"
                    },
                    {
                        "id": "registerontouched",
                        "title": "registerOnTouched",
                        "content": "\n<MemberInfo kind=\"method\" type={`(fn: any) => `}   />\n\n\n"
                    },
                    {
                        "id": "setdisabledstate",
                        "title": "setDisabledState",
                        "content": "\n<MemberInfo kind=\"method\" type={`(isDisabled: boolean) => void`}   />\n\n\n"
                    },
                    {
                        "id": "focus",
                        "title": "focus",
                        "content": "\n<MemberInfo kind=\"method\" type={`() => `}   />\n\n\n"
                    },
                    {
                        "id": "writevalue",
                        "title": "writeValue",
                        "content": "\n<MemberInfo kind=\"method\" type={`(obj: string | <a href='/reference/typescript-api/entities/zone#zone'>Zone</a> | null) => void`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ZoneSelectorComponent implements ControlValueAccessor {",
                    "    @Output() selectedValuesChange = new EventEmitter<Zone>();",
                    "    @Input() readonly = false;",
                    "    @Input() transformControlValueAccessorValue: (value: Zone | undefined) => any = value => value?.id;",
                    "    selectedId$ = new Subject<string>();",
                    "    onChangeFn: (val: any) => void;",
                    "    onTouchFn: () => void;",
                    "    disabled = false;",
                    "    value: string | Zone;",
                    "    zones$ = this.dataService",
                    "        .query(GetZoneSelectorListDocument, { options: { take: 999 } }, 'cache-first')",
                    "        .mapSingle(result => result.zones.items);",
                    "    constructor(dataService: DataService, changeDetectorRef: ChangeDetectorRef)",
                    "    onChange(selected: Zone) => ;",
                    "    registerOnChange(fn: any) => ;",
                    "    registerOnTouched(fn: any) => ;",
                    "    setDisabledState(isDisabled: boolean) => void;",
                    "    focus() => ;",
                    "    writeValue(obj: string | Zone | null) => void;",
                    "}"
                ]
            }
        ]
    },
    {
        "id": "zoneservice",
        "metadata": {
            "title": "ZoneService",
            "keywords": [
                "zoneservice",
                "constructor",
                "findall",
                "findone",
                "getallwithmembers",
                "create",
                "update",
                "delete",
                "addmemberstozone",
                "removemembersfromzone"
            ],
            "description": "<!-- This file was generated from the Vendure source. Do not modify. Instead, re-run the \"docs:build\" script --> import MemberInfo from '@site/src/components/MemberInfo'; import GenerationInfo from '@site/src/components/GenerationInfo'; import MemberDescription from '@site/src/components/MemberDescription'; <GenerationInfo sourceFile=\"packages/core/src/service/services/zone.service.ts\" sourceLine=\"36\" packageName=\"@vendure/core\" />"
        },
        "content": "",
        "sections": [
            {
                "id": "zoneservice",
                "title": "ZoneService",
                "content": "\n<GenerationInfo sourceFile=\"packages/core/src/service/services/zone.service.ts\" sourceLine=\"36\" packageName=\"@vendure/core\" />\n\nContains methods relating to <a href='/reference/typescript-api/entities/zone#zone'>Zone</a> entities.\n\n\n<div className=\"members-wrapper\">\n\n",
                "subsections": [
                    {
                        "id": "constructor",
                        "title": "constructor",
                        "content": "\n<MemberInfo kind=\"method\" type={`(connection: <a href='/reference/typescript-api/data-access/transactional-connection#transactionalconnection'>TransactionalConnection</a>, configService: ConfigService, eventBus: <a href='/reference/typescript-api/events/event-bus#eventbus'>EventBus</a>, translator: <a href='/reference/typescript-api/service-helpers/translator-service#translatorservice'>TranslatorService</a>, listQueryBuilder: <a href='/reference/typescript-api/data-access/list-query-builder#listquerybuilder'>ListQueryBuilder</a>) => ZoneService`}   />\n\n\n"
                    },
                    {
                        "id": "findall",
                        "title": "findAll",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, options?: ListQueryOptions&#60;<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>&#62;) => Promise&#60;<a href='/reference/typescript-api/common/paginated-list#paginatedlist'>PaginatedList</a>&#60;<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>&#62;&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "findone",
                        "title": "findOne",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, zoneId: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;<a href='/reference/typescript-api/entities/zone#zone'>Zone</a> | undefined&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "getallwithmembers",
                        "title": "getAllWithMembers",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>) => Promise&#60;<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>[]&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "create",
                        "title": "create",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: CreateZoneInput) => Promise&#60;<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "update",
                        "title": "update",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, input: UpdateZoneInput) => Promise&#60;<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "delete",
                        "title": "delete",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, id: <a href='/reference/typescript-api/common/id#id'>ID</a>) => Promise&#60;DeletionResponse&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "addmemberstozone",
                        "title": "addMembersToZone",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, { memberIds, zoneId }: MutationAddMembersToZoneArgs) => Promise&#60;<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>&#62;`}   />\n\n\n"
                    },
                    {
                        "id": "removemembersfromzone",
                        "title": "removeMembersFromZone",
                        "content": "\n<MemberInfo kind=\"method\" type={`(ctx: <a href='/reference/typescript-api/request/request-context#requestcontext'>RequestContext</a>, { memberIds, zoneId }: MutationRemoveMembersFromZoneArgs) => Promise&#60;<a href='/reference/typescript-api/entities/zone#zone'>Zone</a>&#62;`}   />\n\n\n\n\n</div>\n\n"
                    }
                ],
                "code": [
                    "class ZoneService {",
                    "    constructor(connection: TransactionalConnection, configService: ConfigService, eventBus: EventBus, translator: TranslatorService, listQueryBuilder: ListQueryBuilder)",
                    "    findAll(ctx: RequestContext, options?: ListQueryOptions<Zone>) => Promise<PaginatedList<Zone>>;",
                    "    findOne(ctx: RequestContext, zoneId: ID) => Promise<Zone | undefined>;",
                    "    getAllWithMembers(ctx: RequestContext) => Promise<Zone[]>;",
                    "    create(ctx: RequestContext, input: CreateZoneInput) => Promise<Zone>;",
                    "    update(ctx: RequestContext, input: UpdateZoneInput) => Promise<Zone>;",
                    "    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;",
                    "    addMembersToZone(ctx: RequestContext, { memberIds, zoneId }: MutationAddMembersToZoneArgs) => Promise<Zone>;",
                    "    removeMembersFromZone(ctx: RequestContext, { memberIds, zoneId }: MutationRemoveMembersFromZoneArgs) => Promise<Zone>;",
                    "}"
                ]
            }
        ]
    }
]